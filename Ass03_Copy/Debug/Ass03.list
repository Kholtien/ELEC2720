
Ass03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb0  08003bb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003c28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003c28  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a253  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf9  00000000  00000000  0002a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214b9  00000000  00000000  0002cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cd9  00000000  00000000  0004e251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c408e  00000000  00000000  00056f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011afb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002570  00000000  00000000  0011b00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ac4 	.word	0x08003ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003ac4 	.word	0x08003ac4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbf9 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f831 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8c3 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f897 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Set up the printf routines
  my_USART_Init (& huart2); // !!!! ADDED USART 2 to accept printf etc.
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <main+0x60>)
 8000580:	f000 fb84 	bl	8000c8c <my_USART_Init>


  //Clear screen
  printf(CLEAR_M);
 8000584:	200c      	movs	r0, #12
 8000586:	f000 fbb7 	bl	8000cf8 <putchar>
  printf(RESET_M);
 800058a:	4810      	ldr	r0, [pc, #64]	; (80005cc <main+0x64>)
 800058c:	f002 fb44 	bl	8002c18 <iprintf>



  uint8_t data[] = "Hello Cruel World\n";
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0x68>)
 8000592:	1d3c      	adds	r4, r7, #4
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	682b      	ldr	r3, [r5, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	8022      	strh	r2, [r4, #0]
 80005a0:	3402      	adds	r4, #2
 80005a2:	0c1b      	lsrs	r3, r3, #16
 80005a4:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit (& huart2 , data , sizeof ( data ) , 100) ;
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	2213      	movs	r2, #19
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <main+0x60>)
 80005ae:	f001 fca4 	bl	8001efa <HAL_UART_Transmit>
	  HAL_Delay (500) ;
 80005b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b6:	f000 fc47 	bl	8000e48 <HAL_Delay>
	  HAL_GPIO_TogglePin ( GPIOD , GPIO_PIN_12 ); // Green LED
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <main+0x6c>)
 80005c0:	f000 ffbf 	bl	8001542 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit (& huart2 , data , sizeof ( data ) , 100) ;
 80005c4:	e7ef      	b.n	80005a6 <main+0x3e>
 80005c6:	bf00      	nop
 80005c8:	2000009c 	.word	0x2000009c
 80005cc:	08003adc 	.word	0x08003adc
 80005d0:	08003ae4 	.word	0x08003ae4
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fb0e 	bl	8002c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f000 ff8a 	bl	8001578 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066a:	f000 f9a7 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f9eb 	bl	8001a68 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000698:	f000 f990 	bl	80009bc <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 fbbc 	bl	8001e60 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f965 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000009c 	.word	0x2000009c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	4ba1      	ldr	r3, [pc, #644]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4aa0      	ldr	r2, [pc, #640]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b9e      	ldr	r3, [pc, #632]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	4b9a      	ldr	r3, [pc, #616]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a99      	ldr	r2, [pc, #612]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b97      	ldr	r3, [pc, #604]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b93      	ldr	r3, [pc, #588]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a92      	ldr	r2, [pc, #584]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b90      	ldr	r3, [pc, #576]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b8c      	ldr	r3, [pc, #560]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a8b      	ldr	r2, [pc, #556]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b89      	ldr	r3, [pc, #548]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b85      	ldr	r3, [pc, #532]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a84      	ldr	r2, [pc, #528]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b82      	ldr	r3, [pc, #520]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b7e      	ldr	r3, [pc, #504]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a7d      	ldr	r2, [pc, #500]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b7b      	ldr	r3, [pc, #492]	; (80009a0 <MX_GPIO_Init+0x2a0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2108      	movs	r1, #8
 80007c2:	4878      	ldr	r0, [pc, #480]	; (80009a4 <MX_GPIO_Init+0x2a4>)
 80007c4:	f000 fea4 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2101      	movs	r1, #1
 80007cc:	4876      	ldr	r0, [pc, #472]	; (80009a8 <MX_GPIO_Init+0x2a8>)
 80007ce:	f000 fe9f 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007d2:	2200      	movs	r2, #0
 80007d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007d8:	4874      	ldr	r0, [pc, #464]	; (80009ac <MX_GPIO_Init+0x2ac>)
 80007da:	f000 fe99 	bl	8001510 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007de:	2308      	movs	r3, #8
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	486b      	ldr	r0, [pc, #428]	; (80009a4 <MX_GPIO_Init+0x2a4>)
 80007f6:	f000 fcef 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4865      	ldr	r0, [pc, #404]	; (80009a8 <MX_GPIO_Init+0x2a8>)
 8000812:	f000 fce1 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000816:	2308      	movs	r3, #8
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000826:	2305      	movs	r3, #5
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	485d      	ldr	r0, [pc, #372]	; (80009a8 <MX_GPIO_Init+0x2a8>)
 8000832:	f000 fcd1 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000836:	2301      	movs	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800083a:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <MX_GPIO_Init+0x2b0>)
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485a      	ldr	r0, [pc, #360]	; (80009b4 <MX_GPIO_Init+0x2b4>)
 800084a:	f000 fcc5 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084e:	2310      	movs	r3, #16
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085e:	2306      	movs	r3, #6
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4852      	ldr	r0, [pc, #328]	; (80009b4 <MX_GPIO_Init+0x2b4>)
 800086a:	f000 fcb5 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800086e:	23e0      	movs	r3, #224	; 0xe0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	484a      	ldr	r0, [pc, #296]	; (80009b4 <MX_GPIO_Init+0x2b4>)
 800088a:	f000 fca5 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088e:	2304      	movs	r3, #4
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4845      	ldr	r0, [pc, #276]	; (80009b8 <MX_GPIO_Init+0x2b8>)
 80008a2:	f000 fc99 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b8:	2305      	movs	r3, #5
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	483d      	ldr	r0, [pc, #244]	; (80009b8 <MX_GPIO_Init+0x2b8>)
 80008c4:	f000 fc88 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008cc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4832      	ldr	r0, [pc, #200]	; (80009ac <MX_GPIO_Init+0x2ac>)
 80008e2:	f000 fc79 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f8:	2306      	movs	r3, #6
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4829      	ldr	r0, [pc, #164]	; (80009a8 <MX_GPIO_Init+0x2a8>)
 8000904:	f000 fc68 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4825      	ldr	r0, [pc, #148]	; (80009b4 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 fc5b 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000922:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	481d      	ldr	r0, [pc, #116]	; (80009b4 <MX_GPIO_Init+0x2b4>)
 8000940:	f000 fc4a 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4815      	ldr	r0, [pc, #84]	; (80009ac <MX_GPIO_Init+0x2ac>)
 8000958:	f000 fc3e 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000962:	2312      	movs	r3, #18
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000966:	2301      	movs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096e:	2304      	movs	r3, #4
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <MX_GPIO_Init+0x2b8>)
 800097a:	f000 fc2d 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097e:	2302      	movs	r3, #2
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_GPIO_Init+0x2b0>)
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0x2a4>)
 8000992:	f000 fc21 	bl	80011d8 <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	10120000 	.word	0x10120000
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a06:	2007      	movs	r0, #7
 8000a08:	f000 fb12 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_UART_MspInit+0x94>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d133      	bne.n	8000aa2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_UART_MspInit+0x98>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <HAL_UART_MspInit+0x9c>)
 8000a8e:	f000 fba3 	bl	80011d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2100      	movs	r1, #0
 8000a96:	2026      	movs	r0, #38	; 0x26
 8000a98:	f000 fad5 	bl	8001046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a9c:	2026      	movs	r0, #38	; 0x26
 8000a9e:	f000 faee 	bl	800107e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f980 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <USART2_IRQHandler+0x10>)
 8000b12:	f001 fb27 	bl	8002164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000009c 	.word	0x2000009c

08000b20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b32:	f000 f8cf 	bl	8000cd4 <__io_getchar>
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
	}

return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f899 	bl	8000cac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
	}
	return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	605a      	str	r2, [r3, #4]
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f001 ffc2 	bl	8002bb4 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20020000 	.word	0x20020000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	2000008c 	.word	0x2000008c
 8000c64:	200000f8 	.word	0x200000f8

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <my_USART_Init>:
 * Written by Bob Betz
 * Date: 22/10/20
 */

void my_USART_Init(UART_HandleTypeDef *pHuartAct)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	pHuart = pHuartAct;
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <my_USART_Init+0x1c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000090 	.word	0x20000090

08000cac <__io_putchar>:
/*
 * Redefinition of the weak routines to my own.
 */
int __io_putchar(int ch)

{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHuart, (uint8_t *)(&ch), 1, 0xFFFF);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <__io_putchar+0x24>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	1d39      	adds	r1, r7, #4
 8000cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f001 f91b 	bl	8001efa <HAL_UART_Transmit>
  return 1;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000090 	.word	0x20000090

08000cd4 <__io_getchar>:


int __io_getchar(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(pHuart, (uint8_t *)(&ch), 1, 0xFFFF);
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <__io_getchar+0x20>)
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	1df9      	adds	r1, r7, #7
 8000ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f001 f99a 	bl	800201e <HAL_UART_Receive>
  return (int)ch;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000090 	.word	0x20000090

08000cf8 <putchar>:
{
	return (char)__io_getchar();
}

int putchar(int ch)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	return __io_putchar(ch);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ffd3 	bl	8000cac <__io_putchar>
 8000d06:	4603      	mov	r3, r0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ff95 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f001 ff3f 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc11 	bl	8000568 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d54:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 8000d58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d5c:	200000f4 	.word	0x200000f4

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f94f 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe16 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f967 	bl	800109a <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f92f 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	200000e0 	.word	0x200000e0

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200000e0 	.word	0x200000e0

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff ffee 	bl	8000e30 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e60:	d005      	beq.n	8000e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_Delay+0x44>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6e:	bf00      	nop
 8000e70:	f7ff ffde 	bl	8000e30 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f7      	bhi.n	8000e70 <HAL_Delay+0x28>
  {
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff29 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff3e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff31 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff feb6 	bl	8000e30 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d008      	beq.n	80010e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e052      	b.n	800118a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0216 	bic.w	r2, r2, #22
 80010f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001102:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <HAL_DMA_Abort+0x62>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0208 	bic.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001134:	e013      	b.n	800115e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001136:	f7ff fe7b 	bl	8000e30 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b05      	cmp	r3, #5
 8001142:	d90c      	bls.n	800115e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2220      	movs	r2, #32
 8001148:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e015      	b.n	800118a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e4      	bne.n	8001136 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	223f      	movs	r2, #63	; 0x3f
 8001172:	409a      	lsls	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d004      	beq.n	80011b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e00c      	b.n	80011ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2205      	movs	r2, #5
 80011b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e16b      	b.n	80014cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 815a 	bne.w	80014c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	2b02      	cmp	r3, #2
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80b4 	beq.w	80014c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b60      	ldr	r3, [pc, #384]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a5f      	ldr	r2, [pc, #380]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <HAL_GPIO_Init+0x30c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137a:	4a5b      	ldr	r2, [pc, #364]	; (80014e8 <HAL_GPIO_Init+0x310>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_GPIO_Init+0x314>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d02b      	beq.n	80013fe <HAL_GPIO_Init+0x226>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <HAL_GPIO_Init+0x318>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d025      	beq.n	80013fa <HAL_GPIO_Init+0x222>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_GPIO_Init+0x31c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01f      	beq.n	80013f6 <HAL_GPIO_Init+0x21e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x320>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x21a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x324>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x216>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x328>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x212>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x32c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x20e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x330>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x20a>
 80013de:	2307      	movs	r3, #7
 80013e0:	e00e      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e00c      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00a      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x228>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x310>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_GPIO_Init+0x334>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001442:	4a32      	ldr	r2, [pc, #200]	; (800150c <HAL_GPIO_Init+0x334>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_GPIO_Init+0x334>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_GPIO_Init+0x334>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_GPIO_Init+0x334>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001496:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_GPIO_Init+0x334>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_GPIO_Init+0x334>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_GPIO_Init+0x334>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f ae90 	bls.w	80011f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40021c00 	.word	0x40021c00
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001554:	887a      	ldrh	r2, [r7, #2]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4013      	ands	r3, r2
 800155a:	041a      	lsls	r2, r3, #16
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43d9      	mvns	r1, r3
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	400b      	ands	r3, r1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e264      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d075      	beq.n	8001682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001596:	4ba3      	ldr	r3, [pc, #652]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d00c      	beq.n	80015bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a2:	4ba0      	ldr	r3, [pc, #640]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d112      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4b9d      	ldr	r3, [pc, #628]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ba:	d10b      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	4b99      	ldr	r3, [pc, #612]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d05b      	beq.n	8001680 <HAL_RCC_OscConfig+0x108>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d157      	bne.n	8001680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e23f      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x74>
 80015de:	4b91      	ldr	r3, [pc, #580]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a90      	ldr	r2, [pc, #576]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x98>
 80015f6:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a8a      	ldr	r2, [pc, #552]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b88      	ldr	r3, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a87      	ldr	r2, [pc, #540]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 8001610:	4b84      	ldr	r3, [pc, #528]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a83      	ldr	r2, [pc, #524]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b81      	ldr	r3, [pc, #516]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a80      	ldr	r2, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fbfe 	bl	8000e30 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fbfa 	bl	8000e30 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e204      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b76      	ldr	r3, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xc0>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fbea 	bl	8000e30 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fbe6 	bl	8000e30 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1f0      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b6c      	ldr	r3, [pc, #432]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0xe8>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d063      	beq.n	8001756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168e:	4b65      	ldr	r3, [pc, #404]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b62      	ldr	r3, [pc, #392]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x152>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1c4      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4952      	ldr	r1, [pc, #328]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e03a      	b.n	8001756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <HAL_RCC_OscConfig+0x2b0>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb9f 	bl	8000e30 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb9b 	bl	8000e30 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1a5      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4940      	ldr	r1, [pc, #256]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <HAL_RCC_OscConfig+0x2b0>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fb7e 	bl	8000e30 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fb7a 	bl	8000e30 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e184      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d030      	beq.n	80017c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d016      	beq.n	8001798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_RCC_OscConfig+0x2b4>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fb5e 	bl	8000e30 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fb5a 	bl	8000e30 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e164      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x200>
 8001796:	e015      	b.n	80017c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_RCC_OscConfig+0x2b4>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fb47 	bl	8000e30 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb43 	bl	8000e30 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e14d      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a0 	beq.w	8001912 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10f      	bne.n	8001802 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_OscConfig+0x2b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d121      	bne.n	8001852 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_RCC_OscConfig+0x2b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_RCC_OscConfig+0x2b8>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181a:	f7ff fb09 	bl	8000e30 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	e011      	b.n	8001846 <HAL_RCC_OscConfig+0x2ce>
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	42470000 	.word	0x42470000
 800182c:	42470e80 	.word	0x42470e80
 8001830:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001834:	f7ff fafc 	bl	8000e30 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e106      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b85      	ldr	r3, [pc, #532]	; (8001a5c <HAL_RCC_OscConfig+0x4e4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d106      	bne.n	8001868 <HAL_RCC_OscConfig+0x2f0>
 800185a:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	4a80      	ldr	r2, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6713      	str	r3, [r2, #112]	; 0x70
 8001866:	e01c      	b.n	80018a2 <HAL_RCC_OscConfig+0x32a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x312>
 8001870:	4b7b      	ldr	r3, [pc, #492]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a7a      	ldr	r2, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
 800187c:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a77      	ldr	r2, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x32a>
 800188a:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a74      	ldr	r2, [pc, #464]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	4b72      	ldr	r3, [pc, #456]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a71      	ldr	r2, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d015      	beq.n	80018d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fac1 	bl	8000e30 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fabd 	bl	8000e30 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0c5      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ee      	beq.n	80018b2 <HAL_RCC_OscConfig+0x33a>
 80018d4:	e014      	b.n	8001900 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff faab 	bl	8000e30 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff faa7 	bl	8000e30 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0af      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d105      	bne.n	8001912 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001906:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a55      	ldr	r2, [pc, #340]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 800190c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 809b 	beq.w	8001a52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d05c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d141      	bne.n	80019b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x4ec>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fa7b 	bl	8000e30 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff fa77 	bl	8000e30 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e081      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001950:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	019b      	lsls	r3, r3, #6
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	3b01      	subs	r3, #1
 8001976:	041b      	lsls	r3, r3, #16
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	061b      	lsls	r3, r3, #24
 8001980:	4937      	ldr	r1, [pc, #220]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_OscConfig+0x4ec>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fa50 	bl	8000e30 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff fa4c 	bl	8000e30 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e056      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x41c>
 80019b2:	e04e      	b.n	8001a52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_OscConfig+0x4ec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fa39 	bl	8000e30 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff fa35 	bl	8000e30 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e03f      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x44a>
 80019e0:	e037      	b.n	8001a52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e032      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d028      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d121      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d11a      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d111      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470060 	.word	0x42470060

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0cc      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d90c      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494d      	ldr	r1, [pc, #308]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d044      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d119      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e067      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4934      	ldr	r1, [pc, #208]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7ff f96a 	bl	8000e30 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f966 	bl	8000e30 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20c      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e032      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4916      	ldr	r1, [pc, #88]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f821 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490a      	ldr	r1, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f8ca 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08003af8 	.word	0x08003af8
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c4c:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d00d      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x40>
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	f200 80bd 	bhi.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c66:	e0b7      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b61      	ldr	r3, [pc, #388]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c6a:	60bb      	str	r3, [r7, #8]
       break;
 8001c6c:	e0b7      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c6e:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c70:	60bb      	str	r3, [r7, #8]
      break;
 8001c72:	e0b4      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c74:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d04d      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	461a      	mov	r2, r3
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	ea02 0800 	and.w	r8, r2, r0
 8001ca2:	ea03 0901 	and.w	r9, r3, r1
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	4649      	mov	r1, r9
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	014b      	lsls	r3, r1, #5
 8001cb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cb8:	0142      	lsls	r2, r0, #5
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	ebb0 0008 	subs.w	r0, r0, r8
 8001cc2:	eb61 0109 	sbc.w	r1, r1, r9
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cd4:	0182      	lsls	r2, r0, #6
 8001cd6:	1a12      	subs	r2, r2, r0
 8001cd8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cdc:	f04f 0000 	mov.w	r0, #0
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	00d9      	lsls	r1, r3, #3
 8001ce6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cea:	00d0      	lsls	r0, r2, #3
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	eb12 0208 	adds.w	r2, r2, r8
 8001cf4:	eb43 0309 	adc.w	r3, r3, r9
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0259      	lsls	r1, r3, #9
 8001d02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d06:	0250      	lsls	r0, r2, #9
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	f7fe faaa 	bl	8000270 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e04a      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	ea02 0400 	and.w	r4, r2, r0
 8001d3e:	ea03 0501 	and.w	r5, r3, r1
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	014b      	lsls	r3, r1, #5
 8001d50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d54:	0142      	lsls	r2, r0, #5
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	1b00      	subs	r0, r0, r4
 8001d5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	018b      	lsls	r3, r1, #6
 8001d6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d6e:	0182      	lsls	r2, r0, #6
 8001d70:	1a12      	subs	r2, r2, r0
 8001d72:	eb63 0301 	sbc.w	r3, r3, r1
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	00d9      	lsls	r1, r3, #3
 8001d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d84:	00d0      	lsls	r0, r2, #3
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	1912      	adds	r2, r2, r4
 8001d8c:	eb45 0303 	adc.w	r3, r5, r3
 8001d90:	f04f 0000 	mov.w	r0, #0
 8001d94:	f04f 0100 	mov.w	r1, #0
 8001d98:	0299      	lsls	r1, r3, #10
 8001d9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d9e:	0290      	lsls	r0, r2, #10
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	f7fe fa5e 	bl	8000270 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4613      	mov	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	60bb      	str	r3, [r7, #8]
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dda:	60bb      	str	r3, [r7, #8]
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	68bb      	ldr	r3, [r7, #8]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	007a1200 	.word	0x007a1200

08001df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0a9b      	lsrs	r3, r3, #10
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	08003b08 	.word	0x08003b08

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e3c:	f7ff ffdc 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0b5b      	lsrs	r3, r3, #13
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	08003b08 	.word	0x08003b08

08001e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e03f      	b.n	8001ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fdc6 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fcbd 	bl	8002824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b08a      	sub	sp, #40	; 0x28
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d17c      	bne.n	8002014 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_UART_Transmit+0x2c>
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e075      	b.n	8002016 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_UART_Transmit+0x3e>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e06e      	b.n	8002016 <HAL_UART_Transmit+0x11c>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2221      	movs	r2, #33	; 0x21
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f4e:	f7fe ff6f 	bl	8000e30 <HAL_GetTick>
 8001f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f68:	d108      	bne.n	8001f7c <HAL_UART_Transmit+0x82>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	e003      	b.n	8001f84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f8c:	e02a      	b.n	8001fe4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fab9 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e036      	b.n	8002016 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e007      	b.n	8001fd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1cf      	bne.n	8001f8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 fa89 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e006      	b.n	8002016 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	e000      	b.n	8002016 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002014:	2302      	movs	r3, #2
  }
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b08a      	sub	sp, #40	; 0x28
 8002022:	af02      	add	r7, sp, #8
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b20      	cmp	r3, #32
 800203c:	f040 808c 	bne.w	8002158 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_UART_Receive+0x2e>
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e084      	b.n	800215a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_UART_Receive+0x40>
 800205a:	2302      	movs	r3, #2
 800205c:	e07d      	b.n	800215a <HAL_UART_Receive+0x13c>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2222      	movs	r2, #34	; 0x22
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800207a:	f7fe fed9 	bl	8000e30 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002094:	d108      	bne.n	80020a8 <HAL_UART_Receive+0x8a>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e003      	b.n	80020b0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020b8:	e043      	b.n	8002142 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2120      	movs	r1, #32
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fa23 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e042      	b.n	800215a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	3302      	adds	r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	e01f      	b.n	8002134 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fc:	d007      	beq.n	800210e <HAL_UART_Receive+0xf0>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10a      	bne.n	800211c <HAL_UART_Receive+0xfe>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e008      	b.n	800212e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002128:	b2da      	uxtb	r2, r3
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1b6      	bne.n	80020ba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_UART_IRQHandler+0x52>
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 faa1 	bl	80026f6 <UART_Receive_IT>
      return;
 80021b4:	e17c      	b.n	80024b0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80b1 	beq.w	8002320 <HAL_UART_IRQHandler+0x1bc>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_UART_IRQHandler+0x70>
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80a6 	beq.w	8002320 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_UART_IRQHandler+0x90>
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_UART_IRQHandler+0xb0>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0202 	orr.w	r2, r3, #2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_UART_IRQHandler+0xd0>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0204 	orr.w	r2, r3, #4
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00f      	beq.n	800225e <HAL_UART_IRQHandler+0xfa>
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <HAL_UART_IRQHandler+0xee>
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f043 0208 	orr.w	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 811f 	beq.w	80024a6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_UART_IRQHandler+0x11e>
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fa3a 	bl	80026f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	2b40      	cmp	r3, #64	; 0x40
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_UART_IRQHandler+0x146>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d031      	beq.n	800230e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f97a 	bl	80025a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d123      	bne.n	8002306 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d013      	beq.n	80022fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <HAL_UART_IRQHandler+0x354>)
 80022dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe ff55 	bl	8001192 <HAL_DMA_Abort_IT>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d016      	beq.n	800231c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022f8:	4610      	mov	r0, r2
 80022fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	e00e      	b.n	800231c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8f0 	bl	80024e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002304:	e00a      	b.n	800231c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f8ec 	bl	80024e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230c:	e006      	b.n	800231c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f8e8 	bl	80024e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800231a:	e0c4      	b.n	80024a6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800231c:	bf00      	nop
    return;
 800231e:	e0c2      	b.n	80024a6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2b01      	cmp	r3, #1
 8002326:	f040 80a2 	bne.w	800246e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 809c 	beq.w	800246e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8096 	beq.w	800246e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d14f      	bne.n	8002406 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002370:	8a3b      	ldrh	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8099 	beq.w	80024aa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800237c:	8a3a      	ldrh	r2, [r7, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	f080 8093 	bcs.w	80024aa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	8a3a      	ldrh	r2, [r7, #16]
 8002388:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002394:	d02b      	beq.n	80023ee <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0210 	bic.w	r2, r2, #16
 80023e2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fe62 	bl	80010b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f87a 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002404:	e051      	b.n	80024aa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800240e:	b29b      	uxth	r3, r3
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d047      	beq.n	80024ae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800241e:	8a7b      	ldrh	r3, [r7, #18]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d044      	beq.n	80024ae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002432:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0210 	bic.w	r2, r2, #16
 8002460:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002462:	8a7b      	ldrh	r3, [r7, #18]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f846 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800246c:	e01f      	b.n	80024ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_UART_IRQHandler+0x326>
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8cf 	bl	8002626 <UART_Transmit_IT>
    return;
 8002488:	e012      	b.n	80024b0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_UART_IRQHandler+0x34c>
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f911 	bl	80026c6 <UART_EndTransmit_IT>
    return;
 80024a4:	e004      	b.n	80024b0 <HAL_UART_IRQHandler+0x34c>
    return;
 80024a6:	bf00      	nop
 80024a8:	e002      	b.n	80024b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80024ae:	bf00      	nop
  }
}
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	080025ff 	.word	0x080025ff

080024bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002520:	e02c      	b.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d028      	beq.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <UART_WaitOnFlagUntilTimeout+0x30>
 8002530:	f7fe fc7e 	bl	8000e30 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	429a      	cmp	r2, r3
 800253e:	d21d      	bcs.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800254e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e00f      	b.n	800259c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d0c3      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0210 	bic.w	r2, r2, #16
 80025e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff ff63 	bl	80024e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b21      	cmp	r3, #33	; 0x21
 8002638:	d13e      	bne.n	80026b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	d114      	bne.n	800266e <UART_Transmit_IT+0x48>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	1c9a      	adds	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	621a      	str	r2, [r3, #32]
 800266c:	e008      	b.n	8002680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	1c59      	adds	r1, r3, #1
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6211      	str	r1, [r2, #32]
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4619      	mov	r1, r3
 800268e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10f      	bne.n	80026b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fee8 	bl	80024bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b22      	cmp	r3, #34	; 0x22
 8002708:	f040 8087 	bne.w	800281a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002714:	d117      	bne.n	8002746 <UART_Receive_IT+0x50>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002734:	b29a      	uxth	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	1c9a      	adds	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
 8002744:	e026      	b.n	8002794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d007      	beq.n	800276a <UART_Receive_IT+0x74>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <UART_Receive_IT+0x82>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e008      	b.n	800278a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4619      	mov	r1, r3
 80027a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d136      	bne.n	8002816 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0220 	bic.w	r2, r2, #32
 80027b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10e      	bne.n	8002806 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0210 	bic.w	r2, r2, #16
 80027f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fe7a 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
 8002804:	e002      	b.n	800280c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fe62 	bl	80024d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e002      	b.n	800281c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002828:	b09f      	sub	sp, #124	; 0x7c
 800282a:	af00      	add	r7, sp, #0
 800282c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283a:	68d9      	ldr	r1, [r3, #12]
 800283c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	ea40 0301 	orr.w	r3, r0, r1
 8002844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	431a      	orrs	r2, r3
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4313      	orrs	r3, r2
 800285c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002868:	f021 010c 	bic.w	r1, r1, #12
 800286c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002872:	430b      	orrs	r3, r1
 8002874:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	6999      	ldr	r1, [r3, #24]
 8002884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	ea40 0301 	orr.w	r3, r0, r1
 800288c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800288e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4bc5      	ldr	r3, [pc, #788]	; (8002ba8 <UART_SetConfig+0x384>)
 8002894:	429a      	cmp	r2, r3
 8002896:	d004      	beq.n	80028a2 <UART_SetConfig+0x7e>
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4bc3      	ldr	r3, [pc, #780]	; (8002bac <UART_SetConfig+0x388>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d103      	bne.n	80028aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028a2:	f7ff fac9 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 80028a6:	6778      	str	r0, [r7, #116]	; 0x74
 80028a8:	e002      	b.n	80028b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028aa:	f7ff fab1 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 80028ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	f040 80b6 	bne.w	8002a28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028be:	461c      	mov	r4, r3
 80028c0:	f04f 0500 	mov.w	r5, #0
 80028c4:	4622      	mov	r2, r4
 80028c6:	462b      	mov	r3, r5
 80028c8:	1891      	adds	r1, r2, r2
 80028ca:	6439      	str	r1, [r7, #64]	; 0x40
 80028cc:	415b      	adcs	r3, r3
 80028ce:	647b      	str	r3, [r7, #68]	; 0x44
 80028d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028d4:	1912      	adds	r2, r2, r4
 80028d6:	eb45 0303 	adc.w	r3, r5, r3
 80028da:	f04f 0000 	mov.w	r0, #0
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	00d9      	lsls	r1, r3, #3
 80028e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e8:	00d0      	lsls	r0, r2, #3
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	1911      	adds	r1, r2, r4
 80028f0:	6639      	str	r1, [r7, #96]	; 0x60
 80028f2:	416b      	adcs	r3, r5
 80028f4:	667b      	str	r3, [r7, #100]	; 0x64
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	1891      	adds	r1, r2, r2
 8002902:	63b9      	str	r1, [r7, #56]	; 0x38
 8002904:	415b      	adcs	r3, r3
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800290c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002910:	f7fd fcae 	bl	8000270 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4ba5      	ldr	r3, [pc, #660]	; (8002bb0 <UART_SetConfig+0x38c>)
 800291a:	fba3 2302 	umull	r2, r3, r3, r2
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	011e      	lsls	r6, r3, #4
 8002922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002924:	461c      	mov	r4, r3
 8002926:	f04f 0500 	mov.w	r5, #0
 800292a:	4622      	mov	r2, r4
 800292c:	462b      	mov	r3, r5
 800292e:	1891      	adds	r1, r2, r2
 8002930:	6339      	str	r1, [r7, #48]	; 0x30
 8002932:	415b      	adcs	r3, r3
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
 8002936:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800293a:	1912      	adds	r2, r2, r4
 800293c:	eb45 0303 	adc.w	r3, r5, r3
 8002940:	f04f 0000 	mov.w	r0, #0
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	00d9      	lsls	r1, r3, #3
 800294a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800294e:	00d0      	lsls	r0, r2, #3
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	1911      	adds	r1, r2, r4
 8002956:	65b9      	str	r1, [r7, #88]	; 0x58
 8002958:	416b      	adcs	r3, r5
 800295a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	461a      	mov	r2, r3
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	1891      	adds	r1, r2, r2
 8002968:	62b9      	str	r1, [r7, #40]	; 0x28
 800296a:	415b      	adcs	r3, r3
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002972:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002976:	f7fd fc7b 	bl	8000270 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4b8c      	ldr	r3, [pc, #560]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002980:	fba3 1302 	umull	r1, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	2164      	movs	r1, #100	; 0x64
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	3332      	adds	r3, #50	; 0x32
 8002992:	4a87      	ldr	r2, [pc, #540]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a0:	441e      	add	r6, r3
 80029a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a4:	4618      	mov	r0, r3
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	1894      	adds	r4, r2, r2
 80029b0:	623c      	str	r4, [r7, #32]
 80029b2:	415b      	adcs	r3, r3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ba:	1812      	adds	r2, r2, r0
 80029bc:	eb41 0303 	adc.w	r3, r1, r3
 80029c0:	f04f 0400 	mov.w	r4, #0
 80029c4:	f04f 0500 	mov.w	r5, #0
 80029c8:	00dd      	lsls	r5, r3, #3
 80029ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029ce:	00d4      	lsls	r4, r2, #3
 80029d0:	4622      	mov	r2, r4
 80029d2:	462b      	mov	r3, r5
 80029d4:	1814      	adds	r4, r2, r0
 80029d6:	653c      	str	r4, [r7, #80]	; 0x50
 80029d8:	414b      	adcs	r3, r1
 80029da:	657b      	str	r3, [r7, #84]	; 0x54
 80029dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	1891      	adds	r1, r2, r2
 80029e8:	61b9      	str	r1, [r7, #24]
 80029ea:	415b      	adcs	r3, r3
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029f6:	f7fd fc3b 	bl	8000270 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002a00:	fba3 1302 	umull	r1, r3, r3, r2
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	2164      	movs	r1, #100	; 0x64
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	3332      	adds	r3, #50	; 0x32
 8002a12:	4a67      	ldr	r2, [pc, #412]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	f003 0207 	and.w	r2, r3, #7
 8002a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4432      	add	r2, r6
 8002a24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a26:	e0b9      	b.n	8002b9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2a:	461c      	mov	r4, r3
 8002a2c:	f04f 0500 	mov.w	r5, #0
 8002a30:	4622      	mov	r2, r4
 8002a32:	462b      	mov	r3, r5
 8002a34:	1891      	adds	r1, r2, r2
 8002a36:	6139      	str	r1, [r7, #16]
 8002a38:	415b      	adcs	r3, r3
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a40:	1912      	adds	r2, r2, r4
 8002a42:	eb45 0303 	adc.w	r3, r5, r3
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	00d9      	lsls	r1, r3, #3
 8002a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a54:	00d0      	lsls	r0, r2, #3
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	eb12 0804 	adds.w	r8, r2, r4
 8002a5e:	eb43 0905 	adc.w	r9, r3, r5
 8002a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	008b      	lsls	r3, r1, #2
 8002a76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a7a:	0082      	lsls	r2, r0, #2
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	4649      	mov	r1, r9
 8002a80:	f7fd fbf6 	bl	8000270 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	011e      	lsls	r6, r3, #4
 8002a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a94:	4618      	mov	r0, r3
 8002a96:	f04f 0100 	mov.w	r1, #0
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	1894      	adds	r4, r2, r2
 8002aa0:	60bc      	str	r4, [r7, #8]
 8002aa2:	415b      	adcs	r3, r3
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aaa:	1812      	adds	r2, r2, r0
 8002aac:	eb41 0303 	adc.w	r3, r1, r3
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	f04f 0500 	mov.w	r5, #0
 8002ab8:	00dd      	lsls	r5, r3, #3
 8002aba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002abe:	00d4      	lsls	r4, r2, #3
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	462b      	mov	r3, r5
 8002ac4:	1814      	adds	r4, r2, r0
 8002ac6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ac8:	414b      	adcs	r3, r1
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	008b      	lsls	r3, r1, #2
 8002ae0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ae4:	0082      	lsls	r2, r0, #2
 8002ae6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002aea:	f7fd fbc1 	bl	8000270 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002af4:	fba3 1302 	umull	r1, r3, r3, r2
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	2164      	movs	r1, #100	; 0x64
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	3332      	adds	r3, #50	; 0x32
 8002b06:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b12:	441e      	add	r6, r3
 8002b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b16:	4618      	mov	r0, r3
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	1894      	adds	r4, r2, r2
 8002b22:	603c      	str	r4, [r7, #0]
 8002b24:	415b      	adcs	r3, r3
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b2c:	1812      	adds	r2, r2, r0
 8002b2e:	eb41 0303 	adc.w	r3, r1, r3
 8002b32:	f04f 0400 	mov.w	r4, #0
 8002b36:	f04f 0500 	mov.w	r5, #0
 8002b3a:	00dd      	lsls	r5, r3, #3
 8002b3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b40:	00d4      	lsls	r4, r2, #3
 8002b42:	4622      	mov	r2, r4
 8002b44:	462b      	mov	r3, r5
 8002b46:	eb12 0a00 	adds.w	sl, r2, r0
 8002b4a:	eb43 0b01 	adc.w	fp, r3, r1
 8002b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	008b      	lsls	r3, r1, #2
 8002b62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b66:	0082      	lsls	r2, r0, #2
 8002b68:	4650      	mov	r0, sl
 8002b6a:	4659      	mov	r1, fp
 8002b6c:	f7fd fb80 	bl	8000270 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002b76:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2164      	movs	r1, #100	; 0x64
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	3332      	adds	r3, #50	; 0x32
 8002b88:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <UART_SetConfig+0x38c>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4432      	add	r2, r6
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	377c      	adds	r7, #124	; 0x7c
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	51eb851f 	.word	0x51eb851f

08002bb4 <__errno>:
 8002bb4:	4b01      	ldr	r3, [pc, #4]	; (8002bbc <__errno+0x8>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000000c 	.word	0x2000000c

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	; (8002bf8 <__libc_init_array+0x38>)
 8002bc4:	4c0d      	ldr	r4, [pc, #52]	; (8002bfc <__libc_init_array+0x3c>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	2600      	movs	r6, #0
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	4d0b      	ldr	r5, [pc, #44]	; (8002c00 <__libc_init_array+0x40>)
 8002bd2:	4c0c      	ldr	r4, [pc, #48]	; (8002c04 <__libc_init_array+0x44>)
 8002bd4:	f000 ff76 	bl	8003ac4 <_init>
 8002bd8:	1b64      	subs	r4, r4, r5
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	2600      	movs	r6, #0
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08003bb0 	.word	0x08003bb0
 8002bfc:	08003bb0 	.word	0x08003bb0
 8002c00:	08003bb0 	.word	0x08003bb0
 8002c04:	08003bb4 	.word	0x08003bb4

08002c08 <memset>:
 8002c08:	4402      	add	r2, r0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <memset+0xa>
 8002c10:	4770      	bx	lr
 8002c12:	f803 1b01 	strb.w	r1, [r3], #1
 8002c16:	e7f9      	b.n	8002c0c <memset+0x4>

08002c18 <iprintf>:
 8002c18:	b40f      	push	{r0, r1, r2, r3}
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <iprintf+0x2c>)
 8002c1c:	b513      	push	{r0, r1, r4, lr}
 8002c1e:	681c      	ldr	r4, [r3, #0]
 8002c20:	b124      	cbz	r4, 8002c2c <iprintf+0x14>
 8002c22:	69a3      	ldr	r3, [r4, #24]
 8002c24:	b913      	cbnz	r3, 8002c2c <iprintf+0x14>
 8002c26:	4620      	mov	r0, r4
 8002c28:	f000 f866 	bl	8002cf8 <__sinit>
 8002c2c:	ab05      	add	r3, sp, #20
 8002c2e:	9a04      	ldr	r2, [sp, #16]
 8002c30:	68a1      	ldr	r1, [r4, #8]
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	4620      	mov	r0, r4
 8002c36:	f000 f983 	bl	8002f40 <_vfiprintf_r>
 8002c3a:	b002      	add	sp, #8
 8002c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c40:	b004      	add	sp, #16
 8002c42:	4770      	bx	lr
 8002c44:	2000000c 	.word	0x2000000c

08002c48 <std>:
 8002c48:	2300      	movs	r3, #0
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8002c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c56:	6083      	str	r3, [r0, #8]
 8002c58:	8181      	strh	r1, [r0, #12]
 8002c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8002c5c:	81c2      	strh	r2, [r0, #14]
 8002c5e:	6183      	str	r3, [r0, #24]
 8002c60:	4619      	mov	r1, r3
 8002c62:	2208      	movs	r2, #8
 8002c64:	305c      	adds	r0, #92	; 0x5c
 8002c66:	f7ff ffcf 	bl	8002c08 <memset>
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <std+0x38>)
 8002c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <std+0x3c>)
 8002c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <std+0x40>)
 8002c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <std+0x44>)
 8002c78:	6224      	str	r4, [r4, #32]
 8002c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	bf00      	nop
 8002c80:	080034e9 	.word	0x080034e9
 8002c84:	0800350b 	.word	0x0800350b
 8002c88:	08003543 	.word	0x08003543
 8002c8c:	08003567 	.word	0x08003567

08002c90 <_cleanup_r>:
 8002c90:	4901      	ldr	r1, [pc, #4]	; (8002c98 <_cleanup_r+0x8>)
 8002c92:	f000 b8af 	b.w	8002df4 <_fwalk_reent>
 8002c96:	bf00      	nop
 8002c98:	08003841 	.word	0x08003841

08002c9c <__sfmoreglue>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	1e4a      	subs	r2, r1, #1
 8002ca0:	2568      	movs	r5, #104	; 0x68
 8002ca2:	4355      	muls	r5, r2
 8002ca4:	460e      	mov	r6, r1
 8002ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002caa:	f000 f8c5 	bl	8002e38 <_malloc_r>
 8002cae:	4604      	mov	r4, r0
 8002cb0:	b140      	cbz	r0, 8002cc4 <__sfmoreglue+0x28>
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8002cb8:	300c      	adds	r0, #12
 8002cba:	60a0      	str	r0, [r4, #8]
 8002cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002cc0:	f7ff ffa2 	bl	8002c08 <memset>
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}

08002cc8 <__sfp_lock_acquire>:
 8002cc8:	4801      	ldr	r0, [pc, #4]	; (8002cd0 <__sfp_lock_acquire+0x8>)
 8002cca:	f000 b8b3 	b.w	8002e34 <__retarget_lock_acquire_recursive>
 8002cce:	bf00      	nop
 8002cd0:	200000ec 	.word	0x200000ec

08002cd4 <__sfp_lock_release>:
 8002cd4:	4801      	ldr	r0, [pc, #4]	; (8002cdc <__sfp_lock_release+0x8>)
 8002cd6:	f000 b8ae 	b.w	8002e36 <__retarget_lock_release_recursive>
 8002cda:	bf00      	nop
 8002cdc:	200000ec 	.word	0x200000ec

08002ce0 <__sinit_lock_acquire>:
 8002ce0:	4801      	ldr	r0, [pc, #4]	; (8002ce8 <__sinit_lock_acquire+0x8>)
 8002ce2:	f000 b8a7 	b.w	8002e34 <__retarget_lock_acquire_recursive>
 8002ce6:	bf00      	nop
 8002ce8:	200000e7 	.word	0x200000e7

08002cec <__sinit_lock_release>:
 8002cec:	4801      	ldr	r0, [pc, #4]	; (8002cf4 <__sinit_lock_release+0x8>)
 8002cee:	f000 b8a2 	b.w	8002e36 <__retarget_lock_release_recursive>
 8002cf2:	bf00      	nop
 8002cf4:	200000e7 	.word	0x200000e7

08002cf8 <__sinit>:
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	f7ff fff0 	bl	8002ce0 <__sinit_lock_acquire>
 8002d00:	69a3      	ldr	r3, [r4, #24]
 8002d02:	b11b      	cbz	r3, 8002d0c <__sinit+0x14>
 8002d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d08:	f7ff bff0 	b.w	8002cec <__sinit_lock_release>
 8002d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002d10:	6523      	str	r3, [r4, #80]	; 0x50
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <__sinit+0x68>)
 8002d14:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <__sinit+0x6c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8002d1a:	42a3      	cmp	r3, r4
 8002d1c:	bf04      	itt	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	61a3      	streq	r3, [r4, #24]
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 f820 	bl	8002d68 <__sfp>
 8002d28:	6060      	str	r0, [r4, #4]
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f000 f81c 	bl	8002d68 <__sfp>
 8002d30:	60a0      	str	r0, [r4, #8]
 8002d32:	4620      	mov	r0, r4
 8002d34:	f000 f818 	bl	8002d68 <__sfp>
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60e0      	str	r0, [r4, #12]
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	6860      	ldr	r0, [r4, #4]
 8002d40:	f7ff ff82 	bl	8002c48 <std>
 8002d44:	68a0      	ldr	r0, [r4, #8]
 8002d46:	2201      	movs	r2, #1
 8002d48:	2109      	movs	r1, #9
 8002d4a:	f7ff ff7d 	bl	8002c48 <std>
 8002d4e:	68e0      	ldr	r0, [r4, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	2112      	movs	r1, #18
 8002d54:	f7ff ff78 	bl	8002c48 <std>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	61a3      	str	r3, [r4, #24]
 8002d5c:	e7d2      	b.n	8002d04 <__sinit+0xc>
 8002d5e:	bf00      	nop
 8002d60:	08003b10 	.word	0x08003b10
 8002d64:	08002c91 	.word	0x08002c91

08002d68 <__sfp>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	4607      	mov	r7, r0
 8002d6c:	f7ff ffac 	bl	8002cc8 <__sfp_lock_acquire>
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <__sfp+0x84>)
 8002d72:	681e      	ldr	r6, [r3, #0]
 8002d74:	69b3      	ldr	r3, [r6, #24]
 8002d76:	b913      	cbnz	r3, 8002d7e <__sfp+0x16>
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f7ff ffbd 	bl	8002cf8 <__sinit>
 8002d7e:	3648      	adds	r6, #72	; 0x48
 8002d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	d503      	bpl.n	8002d90 <__sfp+0x28>
 8002d88:	6833      	ldr	r3, [r6, #0]
 8002d8a:	b30b      	cbz	r3, 8002dd0 <__sfp+0x68>
 8002d8c:	6836      	ldr	r6, [r6, #0]
 8002d8e:	e7f7      	b.n	8002d80 <__sfp+0x18>
 8002d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d94:	b9d5      	cbnz	r5, 8002dcc <__sfp+0x64>
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <__sfp+0x88>)
 8002d98:	60e3      	str	r3, [r4, #12]
 8002d9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8002da0:	f000 f847 	bl	8002e32 <__retarget_lock_init_recursive>
 8002da4:	f7ff ff96 	bl	8002cd4 <__sfp_lock_release>
 8002da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002db0:	6025      	str	r5, [r4, #0]
 8002db2:	61a5      	str	r5, [r4, #24]
 8002db4:	2208      	movs	r2, #8
 8002db6:	4629      	mov	r1, r5
 8002db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002dbc:	f7ff ff24 	bl	8002c08 <memset>
 8002dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002dc8:	4620      	mov	r0, r4
 8002dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dcc:	3468      	adds	r4, #104	; 0x68
 8002dce:	e7d9      	b.n	8002d84 <__sfp+0x1c>
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	f7ff ff62 	bl	8002c9c <__sfmoreglue>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	6030      	str	r0, [r6, #0]
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d1d5      	bne.n	8002d8c <__sfp+0x24>
 8002de0:	f7ff ff78 	bl	8002cd4 <__sfp_lock_release>
 8002de4:	230c      	movs	r3, #12
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	e7ee      	b.n	8002dc8 <__sfp+0x60>
 8002dea:	bf00      	nop
 8002dec:	08003b10 	.word	0x08003b10
 8002df0:	ffff0001 	.word	0xffff0001

08002df4 <_fwalk_reent>:
 8002df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df8:	4606      	mov	r6, r0
 8002dfa:	4688      	mov	r8, r1
 8002dfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e00:	2700      	movs	r7, #0
 8002e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e06:	f1b9 0901 	subs.w	r9, r9, #1
 8002e0a:	d505      	bpl.n	8002e18 <_fwalk_reent+0x24>
 8002e0c:	6824      	ldr	r4, [r4, #0]
 8002e0e:	2c00      	cmp	r4, #0
 8002e10:	d1f7      	bne.n	8002e02 <_fwalk_reent+0xe>
 8002e12:	4638      	mov	r0, r7
 8002e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e18:	89ab      	ldrh	r3, [r5, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d907      	bls.n	8002e2e <_fwalk_reent+0x3a>
 8002e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e22:	3301      	adds	r3, #1
 8002e24:	d003      	beq.n	8002e2e <_fwalk_reent+0x3a>
 8002e26:	4629      	mov	r1, r5
 8002e28:	4630      	mov	r0, r6
 8002e2a:	47c0      	blx	r8
 8002e2c:	4307      	orrs	r7, r0
 8002e2e:	3568      	adds	r5, #104	; 0x68
 8002e30:	e7e9      	b.n	8002e06 <_fwalk_reent+0x12>

08002e32 <__retarget_lock_init_recursive>:
 8002e32:	4770      	bx	lr

08002e34 <__retarget_lock_acquire_recursive>:
 8002e34:	4770      	bx	lr

08002e36 <__retarget_lock_release_recursive>:
 8002e36:	4770      	bx	lr

08002e38 <_malloc_r>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	1ccd      	adds	r5, r1, #3
 8002e3c:	f025 0503 	bic.w	r5, r5, #3
 8002e40:	3508      	adds	r5, #8
 8002e42:	2d0c      	cmp	r5, #12
 8002e44:	bf38      	it	cc
 8002e46:	250c      	movcc	r5, #12
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	db01      	blt.n	8002e52 <_malloc_r+0x1a>
 8002e4e:	42a9      	cmp	r1, r5
 8002e50:	d903      	bls.n	8002e5a <_malloc_r+0x22>
 8002e52:	230c      	movs	r3, #12
 8002e54:	6033      	str	r3, [r6, #0]
 8002e56:	2000      	movs	r0, #0
 8002e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5a:	f000 fda3 	bl	80039a4 <__malloc_lock>
 8002e5e:	4921      	ldr	r1, [pc, #132]	; (8002ee4 <_malloc_r+0xac>)
 8002e60:	680a      	ldr	r2, [r1, #0]
 8002e62:	4614      	mov	r4, r2
 8002e64:	b99c      	cbnz	r4, 8002e8e <_malloc_r+0x56>
 8002e66:	4f20      	ldr	r7, [pc, #128]	; (8002ee8 <_malloc_r+0xb0>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b923      	cbnz	r3, 8002e76 <_malloc_r+0x3e>
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	4630      	mov	r0, r6
 8002e70:	f000 fb2a 	bl	80034c8 <_sbrk_r>
 8002e74:	6038      	str	r0, [r7, #0]
 8002e76:	4629      	mov	r1, r5
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f000 fb25 	bl	80034c8 <_sbrk_r>
 8002e7e:	1c43      	adds	r3, r0, #1
 8002e80:	d123      	bne.n	8002eca <_malloc_r+0x92>
 8002e82:	230c      	movs	r3, #12
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	4630      	mov	r0, r6
 8002e88:	f000 fd92 	bl	80039b0 <__malloc_unlock>
 8002e8c:	e7e3      	b.n	8002e56 <_malloc_r+0x1e>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	1b5b      	subs	r3, r3, r5
 8002e92:	d417      	bmi.n	8002ec4 <_malloc_r+0x8c>
 8002e94:	2b0b      	cmp	r3, #11
 8002e96:	d903      	bls.n	8002ea0 <_malloc_r+0x68>
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	441c      	add	r4, r3
 8002e9c:	6025      	str	r5, [r4, #0]
 8002e9e:	e004      	b.n	8002eaa <_malloc_r+0x72>
 8002ea0:	6863      	ldr	r3, [r4, #4]
 8002ea2:	42a2      	cmp	r2, r4
 8002ea4:	bf0c      	ite	eq
 8002ea6:	600b      	streq	r3, [r1, #0]
 8002ea8:	6053      	strne	r3, [r2, #4]
 8002eaa:	4630      	mov	r0, r6
 8002eac:	f000 fd80 	bl	80039b0 <__malloc_unlock>
 8002eb0:	f104 000b 	add.w	r0, r4, #11
 8002eb4:	1d23      	adds	r3, r4, #4
 8002eb6:	f020 0007 	bic.w	r0, r0, #7
 8002eba:	1ac2      	subs	r2, r0, r3
 8002ebc:	d0cc      	beq.n	8002e58 <_malloc_r+0x20>
 8002ebe:	1a1b      	subs	r3, r3, r0
 8002ec0:	50a3      	str	r3, [r4, r2]
 8002ec2:	e7c9      	b.n	8002e58 <_malloc_r+0x20>
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	6864      	ldr	r4, [r4, #4]
 8002ec8:	e7cc      	b.n	8002e64 <_malloc_r+0x2c>
 8002eca:	1cc4      	adds	r4, r0, #3
 8002ecc:	f024 0403 	bic.w	r4, r4, #3
 8002ed0:	42a0      	cmp	r0, r4
 8002ed2:	d0e3      	beq.n	8002e9c <_malloc_r+0x64>
 8002ed4:	1a21      	subs	r1, r4, r0
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	f000 faf6 	bl	80034c8 <_sbrk_r>
 8002edc:	3001      	adds	r0, #1
 8002ede:	d1dd      	bne.n	8002e9c <_malloc_r+0x64>
 8002ee0:	e7cf      	b.n	8002e82 <_malloc_r+0x4a>
 8002ee2:	bf00      	nop
 8002ee4:	20000094 	.word	0x20000094
 8002ee8:	20000098 	.word	0x20000098

08002eec <__sfputc_r>:
 8002eec:	6893      	ldr	r3, [r2, #8]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	b410      	push	{r4}
 8002ef4:	6093      	str	r3, [r2, #8]
 8002ef6:	da08      	bge.n	8002f0a <__sfputc_r+0x1e>
 8002ef8:	6994      	ldr	r4, [r2, #24]
 8002efa:	42a3      	cmp	r3, r4
 8002efc:	db01      	blt.n	8002f02 <__sfputc_r+0x16>
 8002efe:	290a      	cmp	r1, #10
 8002f00:	d103      	bne.n	8002f0a <__sfputc_r+0x1e>
 8002f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f06:	f000 bb33 	b.w	8003570 <__swbuf_r>
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	1c58      	adds	r0, r3, #1
 8002f0e:	6010      	str	r0, [r2, #0]
 8002f10:	7019      	strb	r1, [r3, #0]
 8002f12:	4608      	mov	r0, r1
 8002f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <__sfputs_r>:
 8002f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1c:	4606      	mov	r6, r0
 8002f1e:	460f      	mov	r7, r1
 8002f20:	4614      	mov	r4, r2
 8002f22:	18d5      	adds	r5, r2, r3
 8002f24:	42ac      	cmp	r4, r5
 8002f26:	d101      	bne.n	8002f2c <__sfputs_r+0x12>
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e007      	b.n	8002f3c <__sfputs_r+0x22>
 8002f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f30:	463a      	mov	r2, r7
 8002f32:	4630      	mov	r0, r6
 8002f34:	f7ff ffda 	bl	8002eec <__sfputc_r>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d1f3      	bne.n	8002f24 <__sfputs_r+0xa>
 8002f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f40 <_vfiprintf_r>:
 8002f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f44:	460d      	mov	r5, r1
 8002f46:	b09d      	sub	sp, #116	; 0x74
 8002f48:	4614      	mov	r4, r2
 8002f4a:	4698      	mov	r8, r3
 8002f4c:	4606      	mov	r6, r0
 8002f4e:	b118      	cbz	r0, 8002f58 <_vfiprintf_r+0x18>
 8002f50:	6983      	ldr	r3, [r0, #24]
 8002f52:	b90b      	cbnz	r3, 8002f58 <_vfiprintf_r+0x18>
 8002f54:	f7ff fed0 	bl	8002cf8 <__sinit>
 8002f58:	4b89      	ldr	r3, [pc, #548]	; (8003180 <_vfiprintf_r+0x240>)
 8002f5a:	429d      	cmp	r5, r3
 8002f5c:	d11b      	bne.n	8002f96 <_vfiprintf_r+0x56>
 8002f5e:	6875      	ldr	r5, [r6, #4]
 8002f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f62:	07d9      	lsls	r1, r3, #31
 8002f64:	d405      	bmi.n	8002f72 <_vfiprintf_r+0x32>
 8002f66:	89ab      	ldrh	r3, [r5, #12]
 8002f68:	059a      	lsls	r2, r3, #22
 8002f6a:	d402      	bmi.n	8002f72 <_vfiprintf_r+0x32>
 8002f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f6e:	f7ff ff61 	bl	8002e34 <__retarget_lock_acquire_recursive>
 8002f72:	89ab      	ldrh	r3, [r5, #12]
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	d501      	bpl.n	8002f7c <_vfiprintf_r+0x3c>
 8002f78:	692b      	ldr	r3, [r5, #16]
 8002f7a:	b9eb      	cbnz	r3, 8002fb8 <_vfiprintf_r+0x78>
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f000 fb5a 	bl	8003638 <__swsetup_r>
 8002f84:	b1c0      	cbz	r0, 8002fb8 <_vfiprintf_r+0x78>
 8002f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f88:	07dc      	lsls	r4, r3, #31
 8002f8a:	d50e      	bpl.n	8002faa <_vfiprintf_r+0x6a>
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	b01d      	add	sp, #116	; 0x74
 8002f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f96:	4b7b      	ldr	r3, [pc, #492]	; (8003184 <_vfiprintf_r+0x244>)
 8002f98:	429d      	cmp	r5, r3
 8002f9a:	d101      	bne.n	8002fa0 <_vfiprintf_r+0x60>
 8002f9c:	68b5      	ldr	r5, [r6, #8]
 8002f9e:	e7df      	b.n	8002f60 <_vfiprintf_r+0x20>
 8002fa0:	4b79      	ldr	r3, [pc, #484]	; (8003188 <_vfiprintf_r+0x248>)
 8002fa2:	429d      	cmp	r5, r3
 8002fa4:	bf08      	it	eq
 8002fa6:	68f5      	ldreq	r5, [r6, #12]
 8002fa8:	e7da      	b.n	8002f60 <_vfiprintf_r+0x20>
 8002faa:	89ab      	ldrh	r3, [r5, #12]
 8002fac:	0598      	lsls	r0, r3, #22
 8002fae:	d4ed      	bmi.n	8002f8c <_vfiprintf_r+0x4c>
 8002fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fb2:	f7ff ff40 	bl	8002e36 <__retarget_lock_release_recursive>
 8002fb6:	e7e9      	b.n	8002f8c <_vfiprintf_r+0x4c>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9309      	str	r3, [sp, #36]	; 0x24
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fc6:	2330      	movs	r3, #48	; 0x30
 8002fc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800318c <_vfiprintf_r+0x24c>
 8002fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fd0:	f04f 0901 	mov.w	r9, #1
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	469a      	mov	sl, r3
 8002fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fdc:	b10a      	cbz	r2, 8002fe2 <_vfiprintf_r+0xa2>
 8002fde:	2a25      	cmp	r2, #37	; 0x25
 8002fe0:	d1f9      	bne.n	8002fd6 <_vfiprintf_r+0x96>
 8002fe2:	ebba 0b04 	subs.w	fp, sl, r4
 8002fe6:	d00b      	beq.n	8003000 <_vfiprintf_r+0xc0>
 8002fe8:	465b      	mov	r3, fp
 8002fea:	4622      	mov	r2, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f7ff ff93 	bl	8002f1a <__sfputs_r>
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	f000 80aa 	beq.w	800314e <_vfiprintf_r+0x20e>
 8002ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ffc:	445a      	add	r2, fp
 8002ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8003000:	f89a 3000 	ldrb.w	r3, [sl]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a2 	beq.w	800314e <_vfiprintf_r+0x20e>
 800300a:	2300      	movs	r3, #0
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003014:	f10a 0a01 	add.w	sl, sl, #1
 8003018:	9304      	str	r3, [sp, #16]
 800301a:	9307      	str	r3, [sp, #28]
 800301c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003020:	931a      	str	r3, [sp, #104]	; 0x68
 8003022:	4654      	mov	r4, sl
 8003024:	2205      	movs	r2, #5
 8003026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302a:	4858      	ldr	r0, [pc, #352]	; (800318c <_vfiprintf_r+0x24c>)
 800302c:	f7fd f8d0 	bl	80001d0 <memchr>
 8003030:	9a04      	ldr	r2, [sp, #16]
 8003032:	b9d8      	cbnz	r0, 800306c <_vfiprintf_r+0x12c>
 8003034:	06d1      	lsls	r1, r2, #27
 8003036:	bf44      	itt	mi
 8003038:	2320      	movmi	r3, #32
 800303a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800303e:	0713      	lsls	r3, r2, #28
 8003040:	bf44      	itt	mi
 8003042:	232b      	movmi	r3, #43	; 0x2b
 8003044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003048:	f89a 3000 	ldrb.w	r3, [sl]
 800304c:	2b2a      	cmp	r3, #42	; 0x2a
 800304e:	d015      	beq.n	800307c <_vfiprintf_r+0x13c>
 8003050:	9a07      	ldr	r2, [sp, #28]
 8003052:	4654      	mov	r4, sl
 8003054:	2000      	movs	r0, #0
 8003056:	f04f 0c0a 	mov.w	ip, #10
 800305a:	4621      	mov	r1, r4
 800305c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003060:	3b30      	subs	r3, #48	; 0x30
 8003062:	2b09      	cmp	r3, #9
 8003064:	d94e      	bls.n	8003104 <_vfiprintf_r+0x1c4>
 8003066:	b1b0      	cbz	r0, 8003096 <_vfiprintf_r+0x156>
 8003068:	9207      	str	r2, [sp, #28]
 800306a:	e014      	b.n	8003096 <_vfiprintf_r+0x156>
 800306c:	eba0 0308 	sub.w	r3, r0, r8
 8003070:	fa09 f303 	lsl.w	r3, r9, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	46a2      	mov	sl, r4
 800307a:	e7d2      	b.n	8003022 <_vfiprintf_r+0xe2>
 800307c:	9b03      	ldr	r3, [sp, #12]
 800307e:	1d19      	adds	r1, r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	9103      	str	r1, [sp, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	bfbb      	ittet	lt
 8003088:	425b      	neglt	r3, r3
 800308a:	f042 0202 	orrlt.w	r2, r2, #2
 800308e:	9307      	strge	r3, [sp, #28]
 8003090:	9307      	strlt	r3, [sp, #28]
 8003092:	bfb8      	it	lt
 8003094:	9204      	strlt	r2, [sp, #16]
 8003096:	7823      	ldrb	r3, [r4, #0]
 8003098:	2b2e      	cmp	r3, #46	; 0x2e
 800309a:	d10c      	bne.n	80030b6 <_vfiprintf_r+0x176>
 800309c:	7863      	ldrb	r3, [r4, #1]
 800309e:	2b2a      	cmp	r3, #42	; 0x2a
 80030a0:	d135      	bne.n	800310e <_vfiprintf_r+0x1ce>
 80030a2:	9b03      	ldr	r3, [sp, #12]
 80030a4:	1d1a      	adds	r2, r3, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	9203      	str	r2, [sp, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bfb8      	it	lt
 80030ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80030b2:	3402      	adds	r4, #2
 80030b4:	9305      	str	r3, [sp, #20]
 80030b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800319c <_vfiprintf_r+0x25c>
 80030ba:	7821      	ldrb	r1, [r4, #0]
 80030bc:	2203      	movs	r2, #3
 80030be:	4650      	mov	r0, sl
 80030c0:	f7fd f886 	bl	80001d0 <memchr>
 80030c4:	b140      	cbz	r0, 80030d8 <_vfiprintf_r+0x198>
 80030c6:	2340      	movs	r3, #64	; 0x40
 80030c8:	eba0 000a 	sub.w	r0, r0, sl
 80030cc:	fa03 f000 	lsl.w	r0, r3, r0
 80030d0:	9b04      	ldr	r3, [sp, #16]
 80030d2:	4303      	orrs	r3, r0
 80030d4:	3401      	adds	r4, #1
 80030d6:	9304      	str	r3, [sp, #16]
 80030d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030dc:	482c      	ldr	r0, [pc, #176]	; (8003190 <_vfiprintf_r+0x250>)
 80030de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030e2:	2206      	movs	r2, #6
 80030e4:	f7fd f874 	bl	80001d0 <memchr>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d03f      	beq.n	800316c <_vfiprintf_r+0x22c>
 80030ec:	4b29      	ldr	r3, [pc, #164]	; (8003194 <_vfiprintf_r+0x254>)
 80030ee:	bb1b      	cbnz	r3, 8003138 <_vfiprintf_r+0x1f8>
 80030f0:	9b03      	ldr	r3, [sp, #12]
 80030f2:	3307      	adds	r3, #7
 80030f4:	f023 0307 	bic.w	r3, r3, #7
 80030f8:	3308      	adds	r3, #8
 80030fa:	9303      	str	r3, [sp, #12]
 80030fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030fe:	443b      	add	r3, r7
 8003100:	9309      	str	r3, [sp, #36]	; 0x24
 8003102:	e767      	b.n	8002fd4 <_vfiprintf_r+0x94>
 8003104:	fb0c 3202 	mla	r2, ip, r2, r3
 8003108:	460c      	mov	r4, r1
 800310a:	2001      	movs	r0, #1
 800310c:	e7a5      	b.n	800305a <_vfiprintf_r+0x11a>
 800310e:	2300      	movs	r3, #0
 8003110:	3401      	adds	r4, #1
 8003112:	9305      	str	r3, [sp, #20]
 8003114:	4619      	mov	r1, r3
 8003116:	f04f 0c0a 	mov.w	ip, #10
 800311a:	4620      	mov	r0, r4
 800311c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003120:	3a30      	subs	r2, #48	; 0x30
 8003122:	2a09      	cmp	r2, #9
 8003124:	d903      	bls.n	800312e <_vfiprintf_r+0x1ee>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0c5      	beq.n	80030b6 <_vfiprintf_r+0x176>
 800312a:	9105      	str	r1, [sp, #20]
 800312c:	e7c3      	b.n	80030b6 <_vfiprintf_r+0x176>
 800312e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003132:	4604      	mov	r4, r0
 8003134:	2301      	movs	r3, #1
 8003136:	e7f0      	b.n	800311a <_vfiprintf_r+0x1da>
 8003138:	ab03      	add	r3, sp, #12
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	462a      	mov	r2, r5
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <_vfiprintf_r+0x258>)
 8003140:	a904      	add	r1, sp, #16
 8003142:	4630      	mov	r0, r6
 8003144:	f3af 8000 	nop.w
 8003148:	4607      	mov	r7, r0
 800314a:	1c78      	adds	r0, r7, #1
 800314c:	d1d6      	bne.n	80030fc <_vfiprintf_r+0x1bc>
 800314e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003150:	07d9      	lsls	r1, r3, #31
 8003152:	d405      	bmi.n	8003160 <_vfiprintf_r+0x220>
 8003154:	89ab      	ldrh	r3, [r5, #12]
 8003156:	059a      	lsls	r2, r3, #22
 8003158:	d402      	bmi.n	8003160 <_vfiprintf_r+0x220>
 800315a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800315c:	f7ff fe6b 	bl	8002e36 <__retarget_lock_release_recursive>
 8003160:	89ab      	ldrh	r3, [r5, #12]
 8003162:	065b      	lsls	r3, r3, #25
 8003164:	f53f af12 	bmi.w	8002f8c <_vfiprintf_r+0x4c>
 8003168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800316a:	e711      	b.n	8002f90 <_vfiprintf_r+0x50>
 800316c:	ab03      	add	r3, sp, #12
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	462a      	mov	r2, r5
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <_vfiprintf_r+0x258>)
 8003174:	a904      	add	r1, sp, #16
 8003176:	4630      	mov	r0, r6
 8003178:	f000 f880 	bl	800327c <_printf_i>
 800317c:	e7e4      	b.n	8003148 <_vfiprintf_r+0x208>
 800317e:	bf00      	nop
 8003180:	08003b34 	.word	0x08003b34
 8003184:	08003b54 	.word	0x08003b54
 8003188:	08003b14 	.word	0x08003b14
 800318c:	08003b74 	.word	0x08003b74
 8003190:	08003b7e 	.word	0x08003b7e
 8003194:	00000000 	.word	0x00000000
 8003198:	08002f1b 	.word	0x08002f1b
 800319c:	08003b7a 	.word	0x08003b7a

080031a0 <_printf_common>:
 80031a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a4:	4616      	mov	r6, r2
 80031a6:	4699      	mov	r9, r3
 80031a8:	688a      	ldr	r2, [r1, #8]
 80031aa:	690b      	ldr	r3, [r1, #16]
 80031ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031b0:	4293      	cmp	r3, r2
 80031b2:	bfb8      	it	lt
 80031b4:	4613      	movlt	r3, r2
 80031b6:	6033      	str	r3, [r6, #0]
 80031b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031bc:	4607      	mov	r7, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	b10a      	cbz	r2, 80031c6 <_printf_common+0x26>
 80031c2:	3301      	adds	r3, #1
 80031c4:	6033      	str	r3, [r6, #0]
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	0699      	lsls	r1, r3, #26
 80031ca:	bf42      	ittt	mi
 80031cc:	6833      	ldrmi	r3, [r6, #0]
 80031ce:	3302      	addmi	r3, #2
 80031d0:	6033      	strmi	r3, [r6, #0]
 80031d2:	6825      	ldr	r5, [r4, #0]
 80031d4:	f015 0506 	ands.w	r5, r5, #6
 80031d8:	d106      	bne.n	80031e8 <_printf_common+0x48>
 80031da:	f104 0a19 	add.w	sl, r4, #25
 80031de:	68e3      	ldr	r3, [r4, #12]
 80031e0:	6832      	ldr	r2, [r6, #0]
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	42ab      	cmp	r3, r5
 80031e6:	dc26      	bgt.n	8003236 <_printf_common+0x96>
 80031e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031ec:	1e13      	subs	r3, r2, #0
 80031ee:	6822      	ldr	r2, [r4, #0]
 80031f0:	bf18      	it	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	0692      	lsls	r2, r2, #26
 80031f6:	d42b      	bmi.n	8003250 <_printf_common+0xb0>
 80031f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031fc:	4649      	mov	r1, r9
 80031fe:	4638      	mov	r0, r7
 8003200:	47c0      	blx	r8
 8003202:	3001      	adds	r0, #1
 8003204:	d01e      	beq.n	8003244 <_printf_common+0xa4>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	68e5      	ldr	r5, [r4, #12]
 800320a:	6832      	ldr	r2, [r6, #0]
 800320c:	f003 0306 	and.w	r3, r3, #6
 8003210:	2b04      	cmp	r3, #4
 8003212:	bf08      	it	eq
 8003214:	1aad      	subeq	r5, r5, r2
 8003216:	68a3      	ldr	r3, [r4, #8]
 8003218:	6922      	ldr	r2, [r4, #16]
 800321a:	bf0c      	ite	eq
 800321c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003220:	2500      	movne	r5, #0
 8003222:	4293      	cmp	r3, r2
 8003224:	bfc4      	itt	gt
 8003226:	1a9b      	subgt	r3, r3, r2
 8003228:	18ed      	addgt	r5, r5, r3
 800322a:	2600      	movs	r6, #0
 800322c:	341a      	adds	r4, #26
 800322e:	42b5      	cmp	r5, r6
 8003230:	d11a      	bne.n	8003268 <_printf_common+0xc8>
 8003232:	2000      	movs	r0, #0
 8003234:	e008      	b.n	8003248 <_printf_common+0xa8>
 8003236:	2301      	movs	r3, #1
 8003238:	4652      	mov	r2, sl
 800323a:	4649      	mov	r1, r9
 800323c:	4638      	mov	r0, r7
 800323e:	47c0      	blx	r8
 8003240:	3001      	adds	r0, #1
 8003242:	d103      	bne.n	800324c <_printf_common+0xac>
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800324c:	3501      	adds	r5, #1
 800324e:	e7c6      	b.n	80031de <_printf_common+0x3e>
 8003250:	18e1      	adds	r1, r4, r3
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	2030      	movs	r0, #48	; 0x30
 8003256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800325a:	4422      	add	r2, r4
 800325c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003264:	3302      	adds	r3, #2
 8003266:	e7c7      	b.n	80031f8 <_printf_common+0x58>
 8003268:	2301      	movs	r3, #1
 800326a:	4622      	mov	r2, r4
 800326c:	4649      	mov	r1, r9
 800326e:	4638      	mov	r0, r7
 8003270:	47c0      	blx	r8
 8003272:	3001      	adds	r0, #1
 8003274:	d0e6      	beq.n	8003244 <_printf_common+0xa4>
 8003276:	3601      	adds	r6, #1
 8003278:	e7d9      	b.n	800322e <_printf_common+0x8e>
	...

0800327c <_printf_i>:
 800327c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	460c      	mov	r4, r1
 8003282:	4691      	mov	r9, r2
 8003284:	7e27      	ldrb	r7, [r4, #24]
 8003286:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003288:	2f78      	cmp	r7, #120	; 0x78
 800328a:	4680      	mov	r8, r0
 800328c:	469a      	mov	sl, r3
 800328e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003292:	d807      	bhi.n	80032a4 <_printf_i+0x28>
 8003294:	2f62      	cmp	r7, #98	; 0x62
 8003296:	d80a      	bhi.n	80032ae <_printf_i+0x32>
 8003298:	2f00      	cmp	r7, #0
 800329a:	f000 80d8 	beq.w	800344e <_printf_i+0x1d2>
 800329e:	2f58      	cmp	r7, #88	; 0x58
 80032a0:	f000 80a3 	beq.w	80033ea <_printf_i+0x16e>
 80032a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032ac:	e03a      	b.n	8003324 <_printf_i+0xa8>
 80032ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032b2:	2b15      	cmp	r3, #21
 80032b4:	d8f6      	bhi.n	80032a4 <_printf_i+0x28>
 80032b6:	a001      	add	r0, pc, #4	; (adr r0, 80032bc <_printf_i+0x40>)
 80032b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80032bc:	08003315 	.word	0x08003315
 80032c0:	08003329 	.word	0x08003329
 80032c4:	080032a5 	.word	0x080032a5
 80032c8:	080032a5 	.word	0x080032a5
 80032cc:	080032a5 	.word	0x080032a5
 80032d0:	080032a5 	.word	0x080032a5
 80032d4:	08003329 	.word	0x08003329
 80032d8:	080032a5 	.word	0x080032a5
 80032dc:	080032a5 	.word	0x080032a5
 80032e0:	080032a5 	.word	0x080032a5
 80032e4:	080032a5 	.word	0x080032a5
 80032e8:	08003435 	.word	0x08003435
 80032ec:	08003359 	.word	0x08003359
 80032f0:	08003417 	.word	0x08003417
 80032f4:	080032a5 	.word	0x080032a5
 80032f8:	080032a5 	.word	0x080032a5
 80032fc:	08003457 	.word	0x08003457
 8003300:	080032a5 	.word	0x080032a5
 8003304:	08003359 	.word	0x08003359
 8003308:	080032a5 	.word	0x080032a5
 800330c:	080032a5 	.word	0x080032a5
 8003310:	0800341f 	.word	0x0800341f
 8003314:	680b      	ldr	r3, [r1, #0]
 8003316:	1d1a      	adds	r2, r3, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	600a      	str	r2, [r1, #0]
 800331c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003324:	2301      	movs	r3, #1
 8003326:	e0a3      	b.n	8003470 <_printf_i+0x1f4>
 8003328:	6825      	ldr	r5, [r4, #0]
 800332a:	6808      	ldr	r0, [r1, #0]
 800332c:	062e      	lsls	r6, r5, #24
 800332e:	f100 0304 	add.w	r3, r0, #4
 8003332:	d50a      	bpl.n	800334a <_printf_i+0xce>
 8003334:	6805      	ldr	r5, [r0, #0]
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	2d00      	cmp	r5, #0
 800333a:	da03      	bge.n	8003344 <_printf_i+0xc8>
 800333c:	232d      	movs	r3, #45	; 0x2d
 800333e:	426d      	negs	r5, r5
 8003340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003344:	485e      	ldr	r0, [pc, #376]	; (80034c0 <_printf_i+0x244>)
 8003346:	230a      	movs	r3, #10
 8003348:	e019      	b.n	800337e <_printf_i+0x102>
 800334a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800334e:	6805      	ldr	r5, [r0, #0]
 8003350:	600b      	str	r3, [r1, #0]
 8003352:	bf18      	it	ne
 8003354:	b22d      	sxthne	r5, r5
 8003356:	e7ef      	b.n	8003338 <_printf_i+0xbc>
 8003358:	680b      	ldr	r3, [r1, #0]
 800335a:	6825      	ldr	r5, [r4, #0]
 800335c:	1d18      	adds	r0, r3, #4
 800335e:	6008      	str	r0, [r1, #0]
 8003360:	0628      	lsls	r0, r5, #24
 8003362:	d501      	bpl.n	8003368 <_printf_i+0xec>
 8003364:	681d      	ldr	r5, [r3, #0]
 8003366:	e002      	b.n	800336e <_printf_i+0xf2>
 8003368:	0669      	lsls	r1, r5, #25
 800336a:	d5fb      	bpl.n	8003364 <_printf_i+0xe8>
 800336c:	881d      	ldrh	r5, [r3, #0]
 800336e:	4854      	ldr	r0, [pc, #336]	; (80034c0 <_printf_i+0x244>)
 8003370:	2f6f      	cmp	r7, #111	; 0x6f
 8003372:	bf0c      	ite	eq
 8003374:	2308      	moveq	r3, #8
 8003376:	230a      	movne	r3, #10
 8003378:	2100      	movs	r1, #0
 800337a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800337e:	6866      	ldr	r6, [r4, #4]
 8003380:	60a6      	str	r6, [r4, #8]
 8003382:	2e00      	cmp	r6, #0
 8003384:	bfa2      	ittt	ge
 8003386:	6821      	ldrge	r1, [r4, #0]
 8003388:	f021 0104 	bicge.w	r1, r1, #4
 800338c:	6021      	strge	r1, [r4, #0]
 800338e:	b90d      	cbnz	r5, 8003394 <_printf_i+0x118>
 8003390:	2e00      	cmp	r6, #0
 8003392:	d04d      	beq.n	8003430 <_printf_i+0x1b4>
 8003394:	4616      	mov	r6, r2
 8003396:	fbb5 f1f3 	udiv	r1, r5, r3
 800339a:	fb03 5711 	mls	r7, r3, r1, r5
 800339e:	5dc7      	ldrb	r7, [r0, r7]
 80033a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033a4:	462f      	mov	r7, r5
 80033a6:	42bb      	cmp	r3, r7
 80033a8:	460d      	mov	r5, r1
 80033aa:	d9f4      	bls.n	8003396 <_printf_i+0x11a>
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d10b      	bne.n	80033c8 <_printf_i+0x14c>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	07df      	lsls	r7, r3, #31
 80033b4:	d508      	bpl.n	80033c8 <_printf_i+0x14c>
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	6861      	ldr	r1, [r4, #4]
 80033ba:	4299      	cmp	r1, r3
 80033bc:	bfde      	ittt	le
 80033be:	2330      	movle	r3, #48	; 0x30
 80033c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033c8:	1b92      	subs	r2, r2, r6
 80033ca:	6122      	str	r2, [r4, #16]
 80033cc:	f8cd a000 	str.w	sl, [sp]
 80033d0:	464b      	mov	r3, r9
 80033d2:	aa03      	add	r2, sp, #12
 80033d4:	4621      	mov	r1, r4
 80033d6:	4640      	mov	r0, r8
 80033d8:	f7ff fee2 	bl	80031a0 <_printf_common>
 80033dc:	3001      	adds	r0, #1
 80033de:	d14c      	bne.n	800347a <_printf_i+0x1fe>
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	b004      	add	sp, #16
 80033e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ea:	4835      	ldr	r0, [pc, #212]	; (80034c0 <_printf_i+0x244>)
 80033ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	680e      	ldr	r6, [r1, #0]
 80033f4:	061f      	lsls	r7, r3, #24
 80033f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80033fa:	600e      	str	r6, [r1, #0]
 80033fc:	d514      	bpl.n	8003428 <_printf_i+0x1ac>
 80033fe:	07d9      	lsls	r1, r3, #31
 8003400:	bf44      	itt	mi
 8003402:	f043 0320 	orrmi.w	r3, r3, #32
 8003406:	6023      	strmi	r3, [r4, #0]
 8003408:	b91d      	cbnz	r5, 8003412 <_printf_i+0x196>
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	f023 0320 	bic.w	r3, r3, #32
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	2310      	movs	r3, #16
 8003414:	e7b0      	b.n	8003378 <_printf_i+0xfc>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	f043 0320 	orr.w	r3, r3, #32
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	2378      	movs	r3, #120	; 0x78
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <_printf_i+0x248>)
 8003422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003426:	e7e3      	b.n	80033f0 <_printf_i+0x174>
 8003428:	065e      	lsls	r6, r3, #25
 800342a:	bf48      	it	mi
 800342c:	b2ad      	uxthmi	r5, r5
 800342e:	e7e6      	b.n	80033fe <_printf_i+0x182>
 8003430:	4616      	mov	r6, r2
 8003432:	e7bb      	b.n	80033ac <_printf_i+0x130>
 8003434:	680b      	ldr	r3, [r1, #0]
 8003436:	6826      	ldr	r6, [r4, #0]
 8003438:	6960      	ldr	r0, [r4, #20]
 800343a:	1d1d      	adds	r5, r3, #4
 800343c:	600d      	str	r5, [r1, #0]
 800343e:	0635      	lsls	r5, r6, #24
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	d501      	bpl.n	8003448 <_printf_i+0x1cc>
 8003444:	6018      	str	r0, [r3, #0]
 8003446:	e002      	b.n	800344e <_printf_i+0x1d2>
 8003448:	0671      	lsls	r1, r6, #25
 800344a:	d5fb      	bpl.n	8003444 <_printf_i+0x1c8>
 800344c:	8018      	strh	r0, [r3, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	4616      	mov	r6, r2
 8003454:	e7ba      	b.n	80033cc <_printf_i+0x150>
 8003456:	680b      	ldr	r3, [r1, #0]
 8003458:	1d1a      	adds	r2, r3, #4
 800345a:	600a      	str	r2, [r1, #0]
 800345c:	681e      	ldr	r6, [r3, #0]
 800345e:	6862      	ldr	r2, [r4, #4]
 8003460:	2100      	movs	r1, #0
 8003462:	4630      	mov	r0, r6
 8003464:	f7fc feb4 	bl	80001d0 <memchr>
 8003468:	b108      	cbz	r0, 800346e <_printf_i+0x1f2>
 800346a:	1b80      	subs	r0, r0, r6
 800346c:	6060      	str	r0, [r4, #4]
 800346e:	6863      	ldr	r3, [r4, #4]
 8003470:	6123      	str	r3, [r4, #16]
 8003472:	2300      	movs	r3, #0
 8003474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003478:	e7a8      	b.n	80033cc <_printf_i+0x150>
 800347a:	6923      	ldr	r3, [r4, #16]
 800347c:	4632      	mov	r2, r6
 800347e:	4649      	mov	r1, r9
 8003480:	4640      	mov	r0, r8
 8003482:	47d0      	blx	sl
 8003484:	3001      	adds	r0, #1
 8003486:	d0ab      	beq.n	80033e0 <_printf_i+0x164>
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	079b      	lsls	r3, r3, #30
 800348c:	d413      	bmi.n	80034b6 <_printf_i+0x23a>
 800348e:	68e0      	ldr	r0, [r4, #12]
 8003490:	9b03      	ldr	r3, [sp, #12]
 8003492:	4298      	cmp	r0, r3
 8003494:	bfb8      	it	lt
 8003496:	4618      	movlt	r0, r3
 8003498:	e7a4      	b.n	80033e4 <_printf_i+0x168>
 800349a:	2301      	movs	r3, #1
 800349c:	4632      	mov	r2, r6
 800349e:	4649      	mov	r1, r9
 80034a0:	4640      	mov	r0, r8
 80034a2:	47d0      	blx	sl
 80034a4:	3001      	adds	r0, #1
 80034a6:	d09b      	beq.n	80033e0 <_printf_i+0x164>
 80034a8:	3501      	adds	r5, #1
 80034aa:	68e3      	ldr	r3, [r4, #12]
 80034ac:	9903      	ldr	r1, [sp, #12]
 80034ae:	1a5b      	subs	r3, r3, r1
 80034b0:	42ab      	cmp	r3, r5
 80034b2:	dcf2      	bgt.n	800349a <_printf_i+0x21e>
 80034b4:	e7eb      	b.n	800348e <_printf_i+0x212>
 80034b6:	2500      	movs	r5, #0
 80034b8:	f104 0619 	add.w	r6, r4, #25
 80034bc:	e7f5      	b.n	80034aa <_printf_i+0x22e>
 80034be:	bf00      	nop
 80034c0:	08003b85 	.word	0x08003b85
 80034c4:	08003b96 	.word	0x08003b96

080034c8 <_sbrk_r>:
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4d06      	ldr	r5, [pc, #24]	; (80034e4 <_sbrk_r+0x1c>)
 80034cc:	2300      	movs	r3, #0
 80034ce:	4604      	mov	r4, r0
 80034d0:	4608      	mov	r0, r1
 80034d2:	602b      	str	r3, [r5, #0]
 80034d4:	f7fd fb92 	bl	8000bfc <_sbrk>
 80034d8:	1c43      	adds	r3, r0, #1
 80034da:	d102      	bne.n	80034e2 <_sbrk_r+0x1a>
 80034dc:	682b      	ldr	r3, [r5, #0]
 80034de:	b103      	cbz	r3, 80034e2 <_sbrk_r+0x1a>
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	bd38      	pop	{r3, r4, r5, pc}
 80034e4:	200000f0 	.word	0x200000f0

080034e8 <__sread>:
 80034e8:	b510      	push	{r4, lr}
 80034ea:	460c      	mov	r4, r1
 80034ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f0:	f000 fab4 	bl	8003a5c <_read_r>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	bfab      	itete	ge
 80034f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034fa:	89a3      	ldrhlt	r3, [r4, #12]
 80034fc:	181b      	addge	r3, r3, r0
 80034fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003502:	bfac      	ite	ge
 8003504:	6563      	strge	r3, [r4, #84]	; 0x54
 8003506:	81a3      	strhlt	r3, [r4, #12]
 8003508:	bd10      	pop	{r4, pc}

0800350a <__swrite>:
 800350a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800350e:	461f      	mov	r7, r3
 8003510:	898b      	ldrh	r3, [r1, #12]
 8003512:	05db      	lsls	r3, r3, #23
 8003514:	4605      	mov	r5, r0
 8003516:	460c      	mov	r4, r1
 8003518:	4616      	mov	r6, r2
 800351a:	d505      	bpl.n	8003528 <__swrite+0x1e>
 800351c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003520:	2302      	movs	r3, #2
 8003522:	2200      	movs	r2, #0
 8003524:	f000 f9c8 	bl	80038b8 <_lseek_r>
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800352e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003532:	81a3      	strh	r3, [r4, #12]
 8003534:	4632      	mov	r2, r6
 8003536:	463b      	mov	r3, r7
 8003538:	4628      	mov	r0, r5
 800353a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800353e:	f000 b869 	b.w	8003614 <_write_r>

08003542 <__sseek>:
 8003542:	b510      	push	{r4, lr}
 8003544:	460c      	mov	r4, r1
 8003546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800354a:	f000 f9b5 	bl	80038b8 <_lseek_r>
 800354e:	1c43      	adds	r3, r0, #1
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	bf15      	itete	ne
 8003554:	6560      	strne	r0, [r4, #84]	; 0x54
 8003556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800355a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800355e:	81a3      	strheq	r3, [r4, #12]
 8003560:	bf18      	it	ne
 8003562:	81a3      	strhne	r3, [r4, #12]
 8003564:	bd10      	pop	{r4, pc}

08003566 <__sclose>:
 8003566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356a:	f000 b8d3 	b.w	8003714 <_close_r>
	...

08003570 <__swbuf_r>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	460e      	mov	r6, r1
 8003574:	4614      	mov	r4, r2
 8003576:	4605      	mov	r5, r0
 8003578:	b118      	cbz	r0, 8003582 <__swbuf_r+0x12>
 800357a:	6983      	ldr	r3, [r0, #24]
 800357c:	b90b      	cbnz	r3, 8003582 <__swbuf_r+0x12>
 800357e:	f7ff fbbb 	bl	8002cf8 <__sinit>
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <__swbuf_r+0x98>)
 8003584:	429c      	cmp	r4, r3
 8003586:	d12b      	bne.n	80035e0 <__swbuf_r+0x70>
 8003588:	686c      	ldr	r4, [r5, #4]
 800358a:	69a3      	ldr	r3, [r4, #24]
 800358c:	60a3      	str	r3, [r4, #8]
 800358e:	89a3      	ldrh	r3, [r4, #12]
 8003590:	071a      	lsls	r2, r3, #28
 8003592:	d52f      	bpl.n	80035f4 <__swbuf_r+0x84>
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	b36b      	cbz	r3, 80035f4 <__swbuf_r+0x84>
 8003598:	6923      	ldr	r3, [r4, #16]
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	1ac0      	subs	r0, r0, r3
 800359e:	6963      	ldr	r3, [r4, #20]
 80035a0:	b2f6      	uxtb	r6, r6
 80035a2:	4283      	cmp	r3, r0
 80035a4:	4637      	mov	r7, r6
 80035a6:	dc04      	bgt.n	80035b2 <__swbuf_r+0x42>
 80035a8:	4621      	mov	r1, r4
 80035aa:	4628      	mov	r0, r5
 80035ac:	f000 f948 	bl	8003840 <_fflush_r>
 80035b0:	bb30      	cbnz	r0, 8003600 <__swbuf_r+0x90>
 80035b2:	68a3      	ldr	r3, [r4, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60a3      	str	r3, [r4, #8]
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	6022      	str	r2, [r4, #0]
 80035be:	701e      	strb	r6, [r3, #0]
 80035c0:	6963      	ldr	r3, [r4, #20]
 80035c2:	3001      	adds	r0, #1
 80035c4:	4283      	cmp	r3, r0
 80035c6:	d004      	beq.n	80035d2 <__swbuf_r+0x62>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	07db      	lsls	r3, r3, #31
 80035cc:	d506      	bpl.n	80035dc <__swbuf_r+0x6c>
 80035ce:	2e0a      	cmp	r6, #10
 80035d0:	d104      	bne.n	80035dc <__swbuf_r+0x6c>
 80035d2:	4621      	mov	r1, r4
 80035d4:	4628      	mov	r0, r5
 80035d6:	f000 f933 	bl	8003840 <_fflush_r>
 80035da:	b988      	cbnz	r0, 8003600 <__swbuf_r+0x90>
 80035dc:	4638      	mov	r0, r7
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <__swbuf_r+0x9c>)
 80035e2:	429c      	cmp	r4, r3
 80035e4:	d101      	bne.n	80035ea <__swbuf_r+0x7a>
 80035e6:	68ac      	ldr	r4, [r5, #8]
 80035e8:	e7cf      	b.n	800358a <__swbuf_r+0x1a>
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <__swbuf_r+0xa0>)
 80035ec:	429c      	cmp	r4, r3
 80035ee:	bf08      	it	eq
 80035f0:	68ec      	ldreq	r4, [r5, #12]
 80035f2:	e7ca      	b.n	800358a <__swbuf_r+0x1a>
 80035f4:	4621      	mov	r1, r4
 80035f6:	4628      	mov	r0, r5
 80035f8:	f000 f81e 	bl	8003638 <__swsetup_r>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d0cb      	beq.n	8003598 <__swbuf_r+0x28>
 8003600:	f04f 37ff 	mov.w	r7, #4294967295
 8003604:	e7ea      	b.n	80035dc <__swbuf_r+0x6c>
 8003606:	bf00      	nop
 8003608:	08003b34 	.word	0x08003b34
 800360c:	08003b54 	.word	0x08003b54
 8003610:	08003b14 	.word	0x08003b14

08003614 <_write_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	4d07      	ldr	r5, [pc, #28]	; (8003634 <_write_r+0x20>)
 8003618:	4604      	mov	r4, r0
 800361a:	4608      	mov	r0, r1
 800361c:	4611      	mov	r1, r2
 800361e:	2200      	movs	r2, #0
 8003620:	602a      	str	r2, [r5, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	f7fd fa99 	bl	8000b5a <_write>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_write_r+0x1e>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_write_r+0x1e>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	200000f0 	.word	0x200000f0

08003638 <__swsetup_r>:
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <__swsetup_r+0xcc>)
 800363a:	b570      	push	{r4, r5, r6, lr}
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	4606      	mov	r6, r0
 8003640:	460c      	mov	r4, r1
 8003642:	b125      	cbz	r5, 800364e <__swsetup_r+0x16>
 8003644:	69ab      	ldr	r3, [r5, #24]
 8003646:	b913      	cbnz	r3, 800364e <__swsetup_r+0x16>
 8003648:	4628      	mov	r0, r5
 800364a:	f7ff fb55 	bl	8002cf8 <__sinit>
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <__swsetup_r+0xd0>)
 8003650:	429c      	cmp	r4, r3
 8003652:	d10f      	bne.n	8003674 <__swsetup_r+0x3c>
 8003654:	686c      	ldr	r4, [r5, #4]
 8003656:	89a3      	ldrh	r3, [r4, #12]
 8003658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800365c:	0719      	lsls	r1, r3, #28
 800365e:	d42c      	bmi.n	80036ba <__swsetup_r+0x82>
 8003660:	06dd      	lsls	r5, r3, #27
 8003662:	d411      	bmi.n	8003688 <__swsetup_r+0x50>
 8003664:	2309      	movs	r3, #9
 8003666:	6033      	str	r3, [r6, #0]
 8003668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	f04f 30ff 	mov.w	r0, #4294967295
 8003672:	e03e      	b.n	80036f2 <__swsetup_r+0xba>
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <__swsetup_r+0xd4>)
 8003676:	429c      	cmp	r4, r3
 8003678:	d101      	bne.n	800367e <__swsetup_r+0x46>
 800367a:	68ac      	ldr	r4, [r5, #8]
 800367c:	e7eb      	b.n	8003656 <__swsetup_r+0x1e>
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <__swsetup_r+0xd8>)
 8003680:	429c      	cmp	r4, r3
 8003682:	bf08      	it	eq
 8003684:	68ec      	ldreq	r4, [r5, #12]
 8003686:	e7e6      	b.n	8003656 <__swsetup_r+0x1e>
 8003688:	0758      	lsls	r0, r3, #29
 800368a:	d512      	bpl.n	80036b2 <__swsetup_r+0x7a>
 800368c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800368e:	b141      	cbz	r1, 80036a2 <__swsetup_r+0x6a>
 8003690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003694:	4299      	cmp	r1, r3
 8003696:	d002      	beq.n	800369e <__swsetup_r+0x66>
 8003698:	4630      	mov	r0, r6
 800369a:	f000 f98f 	bl	80039bc <_free_r>
 800369e:	2300      	movs	r3, #0
 80036a0:	6363      	str	r3, [r4, #52]	; 0x34
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	2300      	movs	r3, #0
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	6923      	ldr	r3, [r4, #16]
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	b94b      	cbnz	r3, 80036d2 <__swsetup_r+0x9a>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d003      	beq.n	80036d2 <__swsetup_r+0x9a>
 80036ca:	4621      	mov	r1, r4
 80036cc:	4630      	mov	r0, r6
 80036ce:	f000 f929 	bl	8003924 <__smakebuf_r>
 80036d2:	89a0      	ldrh	r0, [r4, #12]
 80036d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d8:	f010 0301 	ands.w	r3, r0, #1
 80036dc:	d00a      	beq.n	80036f4 <__swsetup_r+0xbc>
 80036de:	2300      	movs	r3, #0
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	6963      	ldr	r3, [r4, #20]
 80036e4:	425b      	negs	r3, r3
 80036e6:	61a3      	str	r3, [r4, #24]
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	b943      	cbnz	r3, 80036fe <__swsetup_r+0xc6>
 80036ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036f0:	d1ba      	bne.n	8003668 <__swsetup_r+0x30>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	0781      	lsls	r1, r0, #30
 80036f6:	bf58      	it	pl
 80036f8:	6963      	ldrpl	r3, [r4, #20]
 80036fa:	60a3      	str	r3, [r4, #8]
 80036fc:	e7f4      	b.n	80036e8 <__swsetup_r+0xb0>
 80036fe:	2000      	movs	r0, #0
 8003700:	e7f7      	b.n	80036f2 <__swsetup_r+0xba>
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c
 8003708:	08003b34 	.word	0x08003b34
 800370c:	08003b54 	.word	0x08003b54
 8003710:	08003b14 	.word	0x08003b14

08003714 <_close_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4d06      	ldr	r5, [pc, #24]	; (8003730 <_close_r+0x1c>)
 8003718:	2300      	movs	r3, #0
 800371a:	4604      	mov	r4, r0
 800371c:	4608      	mov	r0, r1
 800371e:	602b      	str	r3, [r5, #0]
 8003720:	f7fd fa37 	bl	8000b92 <_close>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d102      	bne.n	800372e <_close_r+0x1a>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b103      	cbz	r3, 800372e <_close_r+0x1a>
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	200000f0 	.word	0x200000f0

08003734 <__sflush_r>:
 8003734:	898a      	ldrh	r2, [r1, #12]
 8003736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373a:	4605      	mov	r5, r0
 800373c:	0710      	lsls	r0, r2, #28
 800373e:	460c      	mov	r4, r1
 8003740:	d458      	bmi.n	80037f4 <__sflush_r+0xc0>
 8003742:	684b      	ldr	r3, [r1, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	dc05      	bgt.n	8003754 <__sflush_r+0x20>
 8003748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	dc02      	bgt.n	8003754 <__sflush_r+0x20>
 800374e:	2000      	movs	r0, #0
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003756:	2e00      	cmp	r6, #0
 8003758:	d0f9      	beq.n	800374e <__sflush_r+0x1a>
 800375a:	2300      	movs	r3, #0
 800375c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003760:	682f      	ldr	r7, [r5, #0]
 8003762:	602b      	str	r3, [r5, #0]
 8003764:	d032      	beq.n	80037cc <__sflush_r+0x98>
 8003766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	075a      	lsls	r2, r3, #29
 800376c:	d505      	bpl.n	800377a <__sflush_r+0x46>
 800376e:	6863      	ldr	r3, [r4, #4]
 8003770:	1ac0      	subs	r0, r0, r3
 8003772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003774:	b10b      	cbz	r3, 800377a <__sflush_r+0x46>
 8003776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003778:	1ac0      	subs	r0, r0, r3
 800377a:	2300      	movs	r3, #0
 800377c:	4602      	mov	r2, r0
 800377e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003780:	6a21      	ldr	r1, [r4, #32]
 8003782:	4628      	mov	r0, r5
 8003784:	47b0      	blx	r6
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	d106      	bne.n	800379a <__sflush_r+0x66>
 800378c:	6829      	ldr	r1, [r5, #0]
 800378e:	291d      	cmp	r1, #29
 8003790:	d82c      	bhi.n	80037ec <__sflush_r+0xb8>
 8003792:	4a2a      	ldr	r2, [pc, #168]	; (800383c <__sflush_r+0x108>)
 8003794:	40ca      	lsrs	r2, r1
 8003796:	07d6      	lsls	r6, r2, #31
 8003798:	d528      	bpl.n	80037ec <__sflush_r+0xb8>
 800379a:	2200      	movs	r2, #0
 800379c:	6062      	str	r2, [r4, #4]
 800379e:	04d9      	lsls	r1, r3, #19
 80037a0:	6922      	ldr	r2, [r4, #16]
 80037a2:	6022      	str	r2, [r4, #0]
 80037a4:	d504      	bpl.n	80037b0 <__sflush_r+0x7c>
 80037a6:	1c42      	adds	r2, r0, #1
 80037a8:	d101      	bne.n	80037ae <__sflush_r+0x7a>
 80037aa:	682b      	ldr	r3, [r5, #0]
 80037ac:	b903      	cbnz	r3, 80037b0 <__sflush_r+0x7c>
 80037ae:	6560      	str	r0, [r4, #84]	; 0x54
 80037b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037b2:	602f      	str	r7, [r5, #0]
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d0ca      	beq.n	800374e <__sflush_r+0x1a>
 80037b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037bc:	4299      	cmp	r1, r3
 80037be:	d002      	beq.n	80037c6 <__sflush_r+0x92>
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f8fb 	bl	80039bc <_free_r>
 80037c6:	2000      	movs	r0, #0
 80037c8:	6360      	str	r0, [r4, #52]	; 0x34
 80037ca:	e7c1      	b.n	8003750 <__sflush_r+0x1c>
 80037cc:	6a21      	ldr	r1, [r4, #32]
 80037ce:	2301      	movs	r3, #1
 80037d0:	4628      	mov	r0, r5
 80037d2:	47b0      	blx	r6
 80037d4:	1c41      	adds	r1, r0, #1
 80037d6:	d1c7      	bne.n	8003768 <__sflush_r+0x34>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0c4      	beq.n	8003768 <__sflush_r+0x34>
 80037de:	2b1d      	cmp	r3, #29
 80037e0:	d001      	beq.n	80037e6 <__sflush_r+0xb2>
 80037e2:	2b16      	cmp	r3, #22
 80037e4:	d101      	bne.n	80037ea <__sflush_r+0xb6>
 80037e6:	602f      	str	r7, [r5, #0]
 80037e8:	e7b1      	b.n	800374e <__sflush_r+0x1a>
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	e7ad      	b.n	8003750 <__sflush_r+0x1c>
 80037f4:	690f      	ldr	r7, [r1, #16]
 80037f6:	2f00      	cmp	r7, #0
 80037f8:	d0a9      	beq.n	800374e <__sflush_r+0x1a>
 80037fa:	0793      	lsls	r3, r2, #30
 80037fc:	680e      	ldr	r6, [r1, #0]
 80037fe:	bf08      	it	eq
 8003800:	694b      	ldreq	r3, [r1, #20]
 8003802:	600f      	str	r7, [r1, #0]
 8003804:	bf18      	it	ne
 8003806:	2300      	movne	r3, #0
 8003808:	eba6 0807 	sub.w	r8, r6, r7
 800380c:	608b      	str	r3, [r1, #8]
 800380e:	f1b8 0f00 	cmp.w	r8, #0
 8003812:	dd9c      	ble.n	800374e <__sflush_r+0x1a>
 8003814:	6a21      	ldr	r1, [r4, #32]
 8003816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003818:	4643      	mov	r3, r8
 800381a:	463a      	mov	r2, r7
 800381c:	4628      	mov	r0, r5
 800381e:	47b0      	blx	r6
 8003820:	2800      	cmp	r0, #0
 8003822:	dc06      	bgt.n	8003832 <__sflush_r+0xfe>
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382a:	81a3      	strh	r3, [r4, #12]
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	e78e      	b.n	8003750 <__sflush_r+0x1c>
 8003832:	4407      	add	r7, r0
 8003834:	eba8 0800 	sub.w	r8, r8, r0
 8003838:	e7e9      	b.n	800380e <__sflush_r+0xda>
 800383a:	bf00      	nop
 800383c:	20400001 	.word	0x20400001

08003840 <_fflush_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	690b      	ldr	r3, [r1, #16]
 8003844:	4605      	mov	r5, r0
 8003846:	460c      	mov	r4, r1
 8003848:	b913      	cbnz	r3, 8003850 <_fflush_r+0x10>
 800384a:	2500      	movs	r5, #0
 800384c:	4628      	mov	r0, r5
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	b118      	cbz	r0, 800385a <_fflush_r+0x1a>
 8003852:	6983      	ldr	r3, [r0, #24]
 8003854:	b90b      	cbnz	r3, 800385a <_fflush_r+0x1a>
 8003856:	f7ff fa4f 	bl	8002cf8 <__sinit>
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <_fflush_r+0x6c>)
 800385c:	429c      	cmp	r4, r3
 800385e:	d11b      	bne.n	8003898 <_fflush_r+0x58>
 8003860:	686c      	ldr	r4, [r5, #4]
 8003862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ef      	beq.n	800384a <_fflush_r+0xa>
 800386a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800386c:	07d0      	lsls	r0, r2, #31
 800386e:	d404      	bmi.n	800387a <_fflush_r+0x3a>
 8003870:	0599      	lsls	r1, r3, #22
 8003872:	d402      	bmi.n	800387a <_fflush_r+0x3a>
 8003874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003876:	f7ff fadd 	bl	8002e34 <__retarget_lock_acquire_recursive>
 800387a:	4628      	mov	r0, r5
 800387c:	4621      	mov	r1, r4
 800387e:	f7ff ff59 	bl	8003734 <__sflush_r>
 8003882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003884:	07da      	lsls	r2, r3, #31
 8003886:	4605      	mov	r5, r0
 8003888:	d4e0      	bmi.n	800384c <_fflush_r+0xc>
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	059b      	lsls	r3, r3, #22
 800388e:	d4dd      	bmi.n	800384c <_fflush_r+0xc>
 8003890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003892:	f7ff fad0 	bl	8002e36 <__retarget_lock_release_recursive>
 8003896:	e7d9      	b.n	800384c <_fflush_r+0xc>
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <_fflush_r+0x70>)
 800389a:	429c      	cmp	r4, r3
 800389c:	d101      	bne.n	80038a2 <_fflush_r+0x62>
 800389e:	68ac      	ldr	r4, [r5, #8]
 80038a0:	e7df      	b.n	8003862 <_fflush_r+0x22>
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <_fflush_r+0x74>)
 80038a4:	429c      	cmp	r4, r3
 80038a6:	bf08      	it	eq
 80038a8:	68ec      	ldreq	r4, [r5, #12]
 80038aa:	e7da      	b.n	8003862 <_fflush_r+0x22>
 80038ac:	08003b34 	.word	0x08003b34
 80038b0:	08003b54 	.word	0x08003b54
 80038b4:	08003b14 	.word	0x08003b14

080038b8 <_lseek_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d07      	ldr	r5, [pc, #28]	; (80038d8 <_lseek_r+0x20>)
 80038bc:	4604      	mov	r4, r0
 80038be:	4608      	mov	r0, r1
 80038c0:	4611      	mov	r1, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	602a      	str	r2, [r5, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f7fd f98a 	bl	8000be0 <_lseek>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d102      	bne.n	80038d6 <_lseek_r+0x1e>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	b103      	cbz	r3, 80038d6 <_lseek_r+0x1e>
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	bd38      	pop	{r3, r4, r5, pc}
 80038d8:	200000f0 	.word	0x200000f0

080038dc <__swhatbuf_r>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	460e      	mov	r6, r1
 80038e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e4:	2900      	cmp	r1, #0
 80038e6:	b096      	sub	sp, #88	; 0x58
 80038e8:	4614      	mov	r4, r2
 80038ea:	461d      	mov	r5, r3
 80038ec:	da07      	bge.n	80038fe <__swhatbuf_r+0x22>
 80038ee:	2300      	movs	r3, #0
 80038f0:	602b      	str	r3, [r5, #0]
 80038f2:	89b3      	ldrh	r3, [r6, #12]
 80038f4:	061a      	lsls	r2, r3, #24
 80038f6:	d410      	bmi.n	800391a <__swhatbuf_r+0x3e>
 80038f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038fc:	e00e      	b.n	800391c <__swhatbuf_r+0x40>
 80038fe:	466a      	mov	r2, sp
 8003900:	f000 f8be 	bl	8003a80 <_fstat_r>
 8003904:	2800      	cmp	r0, #0
 8003906:	dbf2      	blt.n	80038ee <__swhatbuf_r+0x12>
 8003908:	9a01      	ldr	r2, [sp, #4]
 800390a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800390e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003912:	425a      	negs	r2, r3
 8003914:	415a      	adcs	r2, r3
 8003916:	602a      	str	r2, [r5, #0]
 8003918:	e7ee      	b.n	80038f8 <__swhatbuf_r+0x1c>
 800391a:	2340      	movs	r3, #64	; 0x40
 800391c:	2000      	movs	r0, #0
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	b016      	add	sp, #88	; 0x58
 8003922:	bd70      	pop	{r4, r5, r6, pc}

08003924 <__smakebuf_r>:
 8003924:	898b      	ldrh	r3, [r1, #12]
 8003926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003928:	079d      	lsls	r5, r3, #30
 800392a:	4606      	mov	r6, r0
 800392c:	460c      	mov	r4, r1
 800392e:	d507      	bpl.n	8003940 <__smakebuf_r+0x1c>
 8003930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	6123      	str	r3, [r4, #16]
 8003938:	2301      	movs	r3, #1
 800393a:	6163      	str	r3, [r4, #20]
 800393c:	b002      	add	sp, #8
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	ab01      	add	r3, sp, #4
 8003942:	466a      	mov	r2, sp
 8003944:	f7ff ffca 	bl	80038dc <__swhatbuf_r>
 8003948:	9900      	ldr	r1, [sp, #0]
 800394a:	4605      	mov	r5, r0
 800394c:	4630      	mov	r0, r6
 800394e:	f7ff fa73 	bl	8002e38 <_malloc_r>
 8003952:	b948      	cbnz	r0, 8003968 <__smakebuf_r+0x44>
 8003954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003958:	059a      	lsls	r2, r3, #22
 800395a:	d4ef      	bmi.n	800393c <__smakebuf_r+0x18>
 800395c:	f023 0303 	bic.w	r3, r3, #3
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	e7e3      	b.n	8003930 <__smakebuf_r+0xc>
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <__smakebuf_r+0x7c>)
 800396a:	62b3      	str	r3, [r6, #40]	; 0x28
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	6020      	str	r0, [r4, #0]
 8003970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003974:	81a3      	strh	r3, [r4, #12]
 8003976:	9b00      	ldr	r3, [sp, #0]
 8003978:	6163      	str	r3, [r4, #20]
 800397a:	9b01      	ldr	r3, [sp, #4]
 800397c:	6120      	str	r0, [r4, #16]
 800397e:	b15b      	cbz	r3, 8003998 <__smakebuf_r+0x74>
 8003980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003984:	4630      	mov	r0, r6
 8003986:	f000 f88d 	bl	8003aa4 <_isatty_r>
 800398a:	b128      	cbz	r0, 8003998 <__smakebuf_r+0x74>
 800398c:	89a3      	ldrh	r3, [r4, #12]
 800398e:	f023 0303 	bic.w	r3, r3, #3
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	81a3      	strh	r3, [r4, #12]
 8003998:	89a0      	ldrh	r0, [r4, #12]
 800399a:	4305      	orrs	r5, r0
 800399c:	81a5      	strh	r5, [r4, #12]
 800399e:	e7cd      	b.n	800393c <__smakebuf_r+0x18>
 80039a0:	08002c91 	.word	0x08002c91

080039a4 <__malloc_lock>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__malloc_lock+0x8>)
 80039a6:	f7ff ba45 	b.w	8002e34 <__retarget_lock_acquire_recursive>
 80039aa:	bf00      	nop
 80039ac:	200000e8 	.word	0x200000e8

080039b0 <__malloc_unlock>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__malloc_unlock+0x8>)
 80039b2:	f7ff ba40 	b.w	8002e36 <__retarget_lock_release_recursive>
 80039b6:	bf00      	nop
 80039b8:	200000e8 	.word	0x200000e8

080039bc <_free_r>:
 80039bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039be:	2900      	cmp	r1, #0
 80039c0:	d048      	beq.n	8003a54 <_free_r+0x98>
 80039c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c6:	9001      	str	r0, [sp, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f1a1 0404 	sub.w	r4, r1, #4
 80039ce:	bfb8      	it	lt
 80039d0:	18e4      	addlt	r4, r4, r3
 80039d2:	f7ff ffe7 	bl	80039a4 <__malloc_lock>
 80039d6:	4a20      	ldr	r2, [pc, #128]	; (8003a58 <_free_r+0x9c>)
 80039d8:	9801      	ldr	r0, [sp, #4]
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	4615      	mov	r5, r2
 80039de:	b933      	cbnz	r3, 80039ee <_free_r+0x32>
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	6014      	str	r4, [r2, #0]
 80039e4:	b003      	add	sp, #12
 80039e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039ea:	f7ff bfe1 	b.w	80039b0 <__malloc_unlock>
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	d90b      	bls.n	8003a0a <_free_r+0x4e>
 80039f2:	6821      	ldr	r1, [r4, #0]
 80039f4:	1862      	adds	r2, r4, r1
 80039f6:	4293      	cmp	r3, r2
 80039f8:	bf04      	itt	eq
 80039fa:	681a      	ldreq	r2, [r3, #0]
 80039fc:	685b      	ldreq	r3, [r3, #4]
 80039fe:	6063      	str	r3, [r4, #4]
 8003a00:	bf04      	itt	eq
 8003a02:	1852      	addeq	r2, r2, r1
 8003a04:	6022      	streq	r2, [r4, #0]
 8003a06:	602c      	str	r4, [r5, #0]
 8003a08:	e7ec      	b.n	80039e4 <_free_r+0x28>
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	b10b      	cbz	r3, 8003a14 <_free_r+0x58>
 8003a10:	42a3      	cmp	r3, r4
 8003a12:	d9fa      	bls.n	8003a0a <_free_r+0x4e>
 8003a14:	6811      	ldr	r1, [r2, #0]
 8003a16:	1855      	adds	r5, r2, r1
 8003a18:	42a5      	cmp	r5, r4
 8003a1a:	d10b      	bne.n	8003a34 <_free_r+0x78>
 8003a1c:	6824      	ldr	r4, [r4, #0]
 8003a1e:	4421      	add	r1, r4
 8003a20:	1854      	adds	r4, r2, r1
 8003a22:	42a3      	cmp	r3, r4
 8003a24:	6011      	str	r1, [r2, #0]
 8003a26:	d1dd      	bne.n	80039e4 <_free_r+0x28>
 8003a28:	681c      	ldr	r4, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	6053      	str	r3, [r2, #4]
 8003a2e:	4421      	add	r1, r4
 8003a30:	6011      	str	r1, [r2, #0]
 8003a32:	e7d7      	b.n	80039e4 <_free_r+0x28>
 8003a34:	d902      	bls.n	8003a3c <_free_r+0x80>
 8003a36:	230c      	movs	r3, #12
 8003a38:	6003      	str	r3, [r0, #0]
 8003a3a:	e7d3      	b.n	80039e4 <_free_r+0x28>
 8003a3c:	6825      	ldr	r5, [r4, #0]
 8003a3e:	1961      	adds	r1, r4, r5
 8003a40:	428b      	cmp	r3, r1
 8003a42:	bf04      	itt	eq
 8003a44:	6819      	ldreq	r1, [r3, #0]
 8003a46:	685b      	ldreq	r3, [r3, #4]
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	bf04      	itt	eq
 8003a4c:	1949      	addeq	r1, r1, r5
 8003a4e:	6021      	streq	r1, [r4, #0]
 8003a50:	6054      	str	r4, [r2, #4]
 8003a52:	e7c7      	b.n	80039e4 <_free_r+0x28>
 8003a54:	b003      	add	sp, #12
 8003a56:	bd30      	pop	{r4, r5, pc}
 8003a58:	20000094 	.word	0x20000094

08003a5c <_read_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4d07      	ldr	r5, [pc, #28]	; (8003a7c <_read_r+0x20>)
 8003a60:	4604      	mov	r4, r0
 8003a62:	4608      	mov	r0, r1
 8003a64:	4611      	mov	r1, r2
 8003a66:	2200      	movs	r2, #0
 8003a68:	602a      	str	r2, [r5, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f7fd f858 	bl	8000b20 <_read>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d102      	bne.n	8003a7a <_read_r+0x1e>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	b103      	cbz	r3, 8003a7a <_read_r+0x1e>
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
 8003a7c:	200000f0 	.word	0x200000f0

08003a80 <_fstat_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	4d07      	ldr	r5, [pc, #28]	; (8003aa0 <_fstat_r+0x20>)
 8003a84:	2300      	movs	r3, #0
 8003a86:	4604      	mov	r4, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	602b      	str	r3, [r5, #0]
 8003a8e:	f7fd f88c 	bl	8000baa <_fstat>
 8003a92:	1c43      	adds	r3, r0, #1
 8003a94:	d102      	bne.n	8003a9c <_fstat_r+0x1c>
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	b103      	cbz	r3, 8003a9c <_fstat_r+0x1c>
 8003a9a:	6023      	str	r3, [r4, #0]
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200000f0 	.word	0x200000f0

08003aa4 <_isatty_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4d06      	ldr	r5, [pc, #24]	; (8003ac0 <_isatty_r+0x1c>)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4604      	mov	r4, r0
 8003aac:	4608      	mov	r0, r1
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	f7fd f88b 	bl	8000bca <_isatty>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_isatty_r+0x1a>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_isatty_r+0x1a>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	200000f0 	.word	0x200000f0

08003ac4 <_init>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr

08003ad0 <_fini>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr
