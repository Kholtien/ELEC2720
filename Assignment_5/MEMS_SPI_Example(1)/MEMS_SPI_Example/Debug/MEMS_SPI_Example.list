
MEMS_SPI_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          0000012c  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000019c  2000019c  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e95f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002271  00000000  00000000  0002e9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000076e3  00000000  00000000  00030c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00038db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b9d  00000000  00000000  000397e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f156  00000000  00000000  0005b37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7791  00000000  00000000  0006a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131c64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002378  00000000  00000000  00131cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003924 	.word	0x08003924

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003924 	.word	0x08003924

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_InitTick+0x40>)
 800056e:	7818      	ldrb	r0, [r3, #0]
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	fbb3 f3f0 	udiv	r3, r3, r0
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <HAL_InitTick+0x44>)
 800057a:	6810      	ldr	r0, [r2, #0]
 800057c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000580:	f000 f8aa 	bl	80006d8 <HAL_SYSTICK_Config>
 8000584:	b968      	cbnz	r0, 80005a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	2c0f      	cmp	r4, #15
 8000588:	d901      	bls.n	800058e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800058a:	2001      	movs	r0, #1
 800058c:	e00a      	b.n	80005a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058e:	2200      	movs	r2, #0
 8000590:	4621      	mov	r1, r4
 8000592:	f04f 30ff 	mov.w	r0, #4294967295
 8000596:	f000 f85d 	bl	8000654 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059a:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_InitTick+0x40>)
 800059c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2000      	movs	r0, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005a2:	2001      	movs	r0, #1
}
 80005a4:	bd10      	pop	{r4, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000008 	.word	0x20000008

080005b0 <HAL_Init>:
{
 80005b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f82f 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff ffc8 	bl	8000568 <HAL_InitTick>
  HAL_MspInit();
 80005d8:	f002 f88a 	bl	80026f0 <HAL_MspInit>
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x10>)
 80005e6:	6811      	ldr	r1, [r2, #0]
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_IncTick+0x14>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	440b      	add	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000009c 	.word	0x2000009c
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000009c 	.word	0x2000009c

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
 800060a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff6 	bl	80005fc <HAL_GetTick>
 8000610:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000612:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000616:	d002      	beq.n	800061e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_Delay+0x24>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	f7ff ffed 	bl	80005fc <HAL_GetTick>
 8000622:	1b40      	subs	r0, r0, r5
 8000624:	42a0      	cmp	r0, r4
 8000626:	d3fa      	bcc.n	800061e <HAL_Delay+0x16>
  {
  }
}
 8000628:	bd38      	pop	{r3, r4, r5, pc}
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000

08000630 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000632:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	0200      	lsls	r0, r0, #8
 800063e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000642:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800064c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000654:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_NVIC_SetPriority+0x60>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065e:	f1c3 0407 	rsb	r4, r3, #7
 8000662:	2c04      	cmp	r4, #4
 8000664:	bf28      	it	cs
 8000666:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000668:	1d1d      	adds	r5, r3, #4
 800066a:	2d06      	cmp	r5, #6
 800066c:	d918      	bls.n	80006a0 <HAL_NVIC_SetPriority+0x4c>
 800066e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	f04f 35ff 	mov.w	r5, #4294967295
 8000674:	fa05 f404 	lsl.w	r4, r5, r4
 8000678:	ea21 0104 	bic.w	r1, r1, r4
 800067c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800067e:	fa05 f303 	lsl.w	r3, r5, r3
 8000682:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000686:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000688:	2800      	cmp	r0, #0
 800068a:	db0b      	blt.n	80006a4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	0109      	lsls	r1, r1, #4
 800068e:	b2c9      	uxtb	r1, r1
 8000690:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000694:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000698:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800069c:	bc30      	pop	{r4, r5}
 800069e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	2300      	movs	r3, #0
 80006a2:	e7e5      	b.n	8000670 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	f000 000f 	and.w	r0, r0, #15
 80006a8:	0109      	lsls	r1, r1, #4
 80006aa:	b2c9      	uxtb	r1, r1
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_NVIC_SetPriority+0x64>)
 80006ae:	5419      	strb	r1, [r3, r0]
 80006b0:	e7f4      	b.n	800069c <HAL_NVIC_SetPriority+0x48>
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000ed14 	.word	0xe000ed14

080006bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006bc:	2800      	cmp	r0, #0
 80006be:	db07      	blt.n	80006d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c0:	f000 021f 	and.w	r2, r0, #31
 80006c4:	0940      	lsrs	r0, r0, #5
 80006c6:	2301      	movs	r3, #1
 80006c8:	4093      	lsls	r3, r2
 80006ca:	4a02      	ldr	r2, [pc, #8]	; (80006d4 <HAL_NVIC_EnableIRQ+0x18>)
 80006cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d8:	3801      	subs	r0, #1
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006de:	d20a      	bcs.n	80006f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_SYSTICK_Config+0x24>)
 80006e2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <HAL_SYSTICK_Config+0x28>)
 80006e6:	21f0      	movs	r1, #240	; 0xf0
 80006e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	2000      	movs	r0, #0
 80006ee:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000704:	2300      	movs	r3, #0
 8000706:	2b0f      	cmp	r3, #15
 8000708:	f200 80dd 	bhi.w	80008c6 <HAL_GPIO_Init+0x1c2>
{
 800070c:	b4f0      	push	{r4, r5, r6, r7}
 800070e:	b082      	sub	sp, #8
 8000710:	e05d      	b.n	80007ce <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000712:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000714:	005f      	lsls	r7, r3, #1
 8000716:	2403      	movs	r4, #3
 8000718:	40bc      	lsls	r4, r7
 800071a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800071e:	68cc      	ldr	r4, [r1, #12]
 8000720:	40bc      	lsls	r4, r7
 8000722:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000724:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000726:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000728:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800072c:	684c      	ldr	r4, [r1, #4]
 800072e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000732:	409a      	lsls	r2, r3
 8000734:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000736:	6042      	str	r2, [r0, #4]
 8000738:	e057      	b.n	80007ea <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800073a:	08dc      	lsrs	r4, r3, #3
 800073c:	3408      	adds	r4, #8
 800073e:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000742:	f003 0207 	and.w	r2, r3, #7
 8000746:	0096      	lsls	r6, r2, #2
 8000748:	220f      	movs	r2, #15
 800074a:	40b2      	lsls	r2, r6
 800074c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000750:	690a      	ldr	r2, [r1, #16]
 8000752:	40b2      	lsls	r2, r6
 8000754:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000756:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800075a:	e05a      	b.n	8000812 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800075c:	2207      	movs	r2, #7
 800075e:	e000      	b.n	8000762 <HAL_GPIO_Init+0x5e>
 8000760:	2200      	movs	r2, #0
 8000762:	40b2      	lsls	r2, r6
 8000764:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000766:	3402      	adds	r4, #2
 8000768:	4e57      	ldr	r6, [pc, #348]	; (80008c8 <HAL_GPIO_Init+0x1c4>)
 800076a:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800076e:	4a57      	ldr	r2, [pc, #348]	; (80008cc <HAL_GPIO_Init+0x1c8>)
 8000770:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000772:	43ea      	mvns	r2, r5
 8000774:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000778:	684f      	ldr	r7, [r1, #4]
 800077a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800077e:	d001      	beq.n	8000784 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8000780:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000784:	4c51      	ldr	r4, [pc, #324]	; (80008cc <HAL_GPIO_Init+0x1c8>)
 8000786:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000788:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800078a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078e:	684f      	ldr	r7, [r1, #4]
 8000790:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000794:	d001      	beq.n	800079a <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8000796:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800079a:	4c4c      	ldr	r4, [pc, #304]	; (80008cc <HAL_GPIO_Init+0x1c8>)
 800079c:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800079e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80007a0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a4:	684f      	ldr	r7, [r1, #4]
 80007a6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80007aa:	d001      	beq.n	80007b0 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80007ac:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80007b0:	4c46      	ldr	r4, [pc, #280]	; (80008cc <HAL_GPIO_Init+0x1c8>)
 80007b2:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80007b4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80007b6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007b8:	684e      	ldr	r6, [r1, #4]
 80007ba:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80007be:	d001      	beq.n	80007c4 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80007c0:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80007c4:	4c41      	ldr	r4, [pc, #260]	; (80008cc <HAL_GPIO_Init+0x1c8>)
 80007c6:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007c8:	3301      	adds	r3, #1
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	d878      	bhi.n	80008c0 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 80007ce:	2201      	movs	r2, #1
 80007d0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d2:	680c      	ldr	r4, [r1, #0]
 80007d4:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80007d8:	ea32 0404 	bics.w	r4, r2, r4
 80007dc:	d1f4      	bne.n	80007c8 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007de:	684c      	ldr	r4, [r1, #4]
 80007e0:	f004 0403 	and.w	r4, r4, #3
 80007e4:	3c01      	subs	r4, #1
 80007e6:	2c01      	cmp	r4, #1
 80007e8:	d993      	bls.n	8000712 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007ea:	684a      	ldr	r2, [r1, #4]
 80007ec:	f002 0203 	and.w	r2, r2, #3
 80007f0:	2a03      	cmp	r2, #3
 80007f2:	d009      	beq.n	8000808 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80007f4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007f6:	005e      	lsls	r6, r3, #1
 80007f8:	2203      	movs	r2, #3
 80007fa:	40b2      	lsls	r2, r6
 80007fc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000800:	688a      	ldr	r2, [r1, #8]
 8000802:	40b2      	lsls	r2, r6
 8000804:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000806:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000808:	684a      	ldr	r2, [r1, #4]
 800080a:	f002 0203 	and.w	r2, r2, #3
 800080e:	2a02      	cmp	r2, #2
 8000810:	d093      	beq.n	800073a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8000812:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000814:	005e      	lsls	r6, r3, #1
 8000816:	2203      	movs	r2, #3
 8000818:	40b2      	lsls	r2, r6
 800081a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800081e:	684a      	ldr	r2, [r1, #4]
 8000820:	f002 0203 	and.w	r2, r2, #3
 8000824:	40b2      	lsls	r2, r6
 8000826:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000828:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800082a:	684a      	ldr	r2, [r1, #4]
 800082c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000830:	d0ca      	beq.n	80007c8 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2200      	movs	r2, #0
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <HAL_GPIO_Init+0x1cc>)
 8000838:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800083a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800083e:	6454      	str	r4, [r2, #68]	; 0x44
 8000840:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000842:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000846:	9201      	str	r2, [sp, #4]
 8000848:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800084a:	089c      	lsrs	r4, r3, #2
 800084c:	1ca6      	adds	r6, r4, #2
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <HAL_GPIO_Init+0x1c4>)
 8000850:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000854:	f003 0203 	and.w	r2, r3, #3
 8000858:	0096      	lsls	r6, r2, #2
 800085a:	220f      	movs	r2, #15
 800085c:	40b2      	lsls	r2, r6
 800085e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <HAL_GPIO_Init+0x1d0>)
 8000864:	4290      	cmp	r0, r2
 8000866:	f43f af7b 	beq.w	8000760 <HAL_GPIO_Init+0x5c>
 800086a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800086e:	4290      	cmp	r0, r2
 8000870:	d01a      	beq.n	80008a8 <HAL_GPIO_Init+0x1a4>
 8000872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000876:	4290      	cmp	r0, r2
 8000878:	d018      	beq.n	80008ac <HAL_GPIO_Init+0x1a8>
 800087a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800087e:	4290      	cmp	r0, r2
 8000880:	d016      	beq.n	80008b0 <HAL_GPIO_Init+0x1ac>
 8000882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000886:	4290      	cmp	r0, r2
 8000888:	d014      	beq.n	80008b4 <HAL_GPIO_Init+0x1b0>
 800088a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800088e:	4290      	cmp	r0, r2
 8000890:	d012      	beq.n	80008b8 <HAL_GPIO_Init+0x1b4>
 8000892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000896:	4290      	cmp	r0, r2
 8000898:	d010      	beq.n	80008bc <HAL_GPIO_Init+0x1b8>
 800089a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800089e:	4290      	cmp	r0, r2
 80008a0:	f43f af5c 	beq.w	800075c <HAL_GPIO_Init+0x58>
 80008a4:	2208      	movs	r2, #8
 80008a6:	e75c      	b.n	8000762 <HAL_GPIO_Init+0x5e>
 80008a8:	2201      	movs	r2, #1
 80008aa:	e75a      	b.n	8000762 <HAL_GPIO_Init+0x5e>
 80008ac:	2202      	movs	r2, #2
 80008ae:	e758      	b.n	8000762 <HAL_GPIO_Init+0x5e>
 80008b0:	2203      	movs	r2, #3
 80008b2:	e756      	b.n	8000762 <HAL_GPIO_Init+0x5e>
 80008b4:	2204      	movs	r2, #4
 80008b6:	e754      	b.n	8000762 <HAL_GPIO_Init+0x5e>
 80008b8:	2205      	movs	r2, #5
 80008ba:	e752      	b.n	8000762 <HAL_GPIO_Init+0x5e>
 80008bc:	2206      	movs	r2, #6
 80008be:	e750      	b.n	8000762 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80008c0:	b002      	add	sp, #8
 80008c2:	bcf0      	pop	{r4, r5, r6, r7}
 80008c4:	4770      	bx	lr
 80008c6:	4770      	bx	lr
 80008c8:	40013800 	.word	0x40013800
 80008cc:	40013c00 	.word	0x40013c00
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d8:	b10a      	cbz	r2, 80008de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008da:	6181      	str	r1, [r0, #24]
 80008dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	6181      	str	r1, [r0, #24]
  }
}
 80008e2:	4770      	bx	lr

080008e4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80008e4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80008e6:	ea01 0203 	and.w	r2, r1, r3
 80008ea:	ea21 0103 	bic.w	r1, r1, r3
 80008ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80008f2:	6181      	str	r1, [r0, #24]
}
 80008f4:	4770      	bx	lr

080008f6 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80008f6:	4770      	bx	lr

080008f8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80008f8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4203      	tst	r3, r0
 8000900:	d100      	bne.n	8000904 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8000902:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000906:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000908:	f7ff fff5 	bl	80008f6 <HAL_GPIO_EXTI_Callback>
}
 800090c:	e7f9      	b.n	8000902 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800090e:	bf00      	nop
 8000910:	40013c00 	.word	0x40013c00

08000914 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000914:	2800      	cmp	r0, #0
 8000916:	f000 80bd 	beq.w	8000a94 <HAL_I2S_Init+0x180>
{
 800091a:	b570      	push	{r4, r5, r6, lr}
 800091c:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800091e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000922:	2b00      	cmp	r3, #0
 8000924:	d051      	beq.n	80009ca <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000926:	2202      	movs	r2, #2
 8000928:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800092c:	6821      	ldr	r1, [r4, #0]
 800092e:	69cb      	ldr	r3, [r1, #28]
 8000930:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000934:	f023 030f 	bic.w	r3, r3, #15
 8000938:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800093e:	6963      	ldr	r3, [r4, #20]
 8000940:	4293      	cmp	r3, r2
 8000942:	d063      	beq.n	8000a0c <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000944:	68e3      	ldr	r3, [r4, #12]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d146      	bne.n	80009d8 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800094a:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800094c:	68a3      	ldr	r3, [r4, #8]
 800094e:	2b20      	cmp	r3, #32
 8000950:	d800      	bhi.n	8000954 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000952:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000954:	2001      	movs	r0, #1
 8000956:	f000 febb 	bl	80016d0 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800095a:	6923      	ldr	r3, [r4, #16]
 800095c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000960:	d03c      	beq.n	80009dc <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000962:	fbb0 f0f5 	udiv	r0, r0, r5
 8000966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800096a:	0043      	lsls	r3, r0, #1
 800096c:	6960      	ldr	r0, [r4, #20]
 800096e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000972:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000974:	4a48      	ldr	r2, [pc, #288]	; (8000a98 <HAL_I2S_Init+0x184>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800097a:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800097e:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8000982:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000984:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000986:	1e9a      	subs	r2, r3, #2
 8000988:	2afd      	cmp	r2, #253	; 0xfd
 800098a:	d841      	bhi.n	8000a10 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800098c:	6922      	ldr	r2, [r4, #16]
 800098e:	430a      	orrs	r2, r1
 8000990:	6821      	ldr	r1, [r4, #0]
 8000992:	4313      	orrs	r3, r2
 8000994:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000996:	6821      	ldr	r1, [r4, #0]
 8000998:	69cb      	ldr	r3, [r1, #28]
 800099a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800099e:	f023 030f 	bic.w	r3, r3, #15
 80009a2:	6862      	ldr	r2, [r4, #4]
 80009a4:	68a0      	ldr	r0, [r4, #8]
 80009a6:	4302      	orrs	r2, r0
 80009a8:	68e0      	ldr	r0, [r4, #12]
 80009aa:	4302      	orrs	r2, r0
 80009ac:	69a0      	ldr	r0, [r4, #24]
 80009ae:	4302      	orrs	r2, r0
 80009b0:	4313      	orrs	r3, r2
 80009b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b6:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80009b8:	6a23      	ldr	r3, [r4, #32]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d02e      	beq.n	8000a1c <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80009be:	2000      	movs	r0, #0
 80009c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80009c2:	2301      	movs	r3, #1
 80009c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 80009ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <HAL_I2S_Init+0x188>)
 80009d0:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80009d2:	f001 fead 	bl	8002730 <HAL_I2S_MspInit>
 80009d6:	e7a6      	b.n	8000926 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 80009d8:	2520      	movs	r5, #32
 80009da:	e7b7      	b.n	800094c <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80009dc:	68e3      	ldr	r3, [r4, #12]
 80009de:	b153      	cbz	r3, 80009f6 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80009e0:	00ad      	lsls	r5, r5, #2
 80009e2:	fbb0 f0f5 	udiv	r0, r0, r5
 80009e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80009ea:	0043      	lsls	r3, r0, #1
 80009ec:	6960      	ldr	r0, [r4, #20]
 80009ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80009f2:	3305      	adds	r3, #5
 80009f4:	e7be      	b.n	8000974 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80009f6:	00ed      	lsls	r5, r5, #3
 80009f8:	fbb0 f0f5 	udiv	r0, r0, r5
 80009fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000a00:	0043      	lsls	r3, r0, #1
 8000a02:	6960      	ldr	r0, [r4, #20]
 8000a04:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a08:	3305      	adds	r3, #5
 8000a0a:	e7b3      	b.n	8000974 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	e7ba      	b.n	8000986 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000a10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
 8000a1a:	e7d5      	b.n	80009c8 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_I2S_Init+0x18c>)
 8000a1e:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000a20:	6822      	ldr	r2, [r4, #0]
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <HAL_I2S_Init+0x190>)
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d01f      	beq.n	8000a68 <HAL_I2S_Init+0x154>
 8000a28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000a2c:	69d3      	ldr	r3, [r2, #28]
 8000a2e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000a32:	f023 030f 	bic.w	r3, r3, #15
 8000a36:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8000a38:	6822      	ldr	r2, [r4, #0]
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_I2S_Init+0x190>)
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d015      	beq.n	8000a6c <HAL_I2S_Init+0x158>
 8000a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000a44:	2202      	movs	r2, #2
 8000a46:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8000a48:	6822      	ldr	r2, [r4, #0]
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_I2S_Init+0x190>)
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d010      	beq.n	8000a72 <HAL_I2S_Init+0x15e>
 8000a50:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8000a54:	69eb      	ldr	r3, [r5, #28]
 8000a56:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8000a58:	6862      	ldr	r2, [r4, #4]
 8000a5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a5e:	d00a      	beq.n	8000a76 <HAL_I2S_Init+0x162>
 8000a60:	b9b2      	cbnz	r2, 8000a90 <HAL_I2S_Init+0x17c>
      tmp = I2S_MODE_SLAVE_RX;
 8000a62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a66:	e008      	b.n	8000a7a <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_I2S_Init+0x194>)
 8000a6a:	e7df      	b.n	8000a2c <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8000a6c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000a70:	e7e8      	b.n	8000a44 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8000a72:	4d0d      	ldr	r5, [pc, #52]	; (8000aa8 <HAL_I2S_Init+0x194>)
 8000a74:	e7ee      	b.n	8000a54 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8000a76:	f44f 7080 	mov.w	r0, #256	; 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 8000a7a:	8926      	ldrh	r6, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8000a7c:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 8000a7e:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8000a80:	4330      	orrs	r0, r6
 8000a82:	4301      	orrs	r1, r0
 8000a84:	430a      	orrs	r2, r1
 8000a86:	4313      	orrs	r3, r2
 8000a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8000a8c:	61eb      	str	r3, [r5, #28]
 8000a8e:	e796      	b.n	80009be <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8000a90:	2000      	movs	r0, #0
 8000a92:	e7f2      	b.n	8000a7a <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8000a94:	2001      	movs	r0, #1
}
 8000a96:	4770      	bx	lr
 8000a98:	cccccccd 	.word	0xcccccccd
 8000a9c:	08000b23 	.word	0x08000b23
 8000aa0:	08000d35 	.word	0x08000d35
 8000aa4:	40003800 	.word	0x40003800
 8000aa8:	40003400 	.word	0x40003400

08000aac <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8000aac:	4770      	bx	lr

08000aae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8000aae:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8000ab0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000ab2:	6803      	ldr	r3, [r0, #0]
 8000ab4:	8812      	ldrh	r2, [r2, #0]
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8000ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aba:	3302      	adds	r3, #2
 8000abc:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 8000abe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8000ac8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b103      	cbz	r3, 8000ad0 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8000ace:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000ad0:	6802      	ldr	r2, [r0, #0]
 8000ad2:	6853      	ldr	r3, [r2, #4]
 8000ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000ad8:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8000ada:	2301      	movs	r3, #1
 8000adc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8000ae0:	f7ff ffe4 	bl	8000aac <HAL_I2S_TxCpltCallback>
}
 8000ae4:	e7f3      	b.n	8000ace <I2S_Transmit_IT+0x20>

08000ae6 <HAL_I2S_RxCpltCallback>:
}
 8000ae6:	4770      	bx	lr

08000ae8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8000ae8:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8000aea:	6803      	ldr	r3, [r0, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000af0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8000af2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000af4:	3302      	adds	r3, #2
 8000af6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8000af8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8000b02:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b103      	cbz	r3, 8000b0a <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8000b08:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000b0a:	6802      	ldr	r2, [r0, #0]
 8000b0c:	6853      	ldr	r3, [r2, #4]
 8000b0e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b12:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8000b1a:	f7ff ffe4 	bl	8000ae6 <HAL_I2S_RxCpltCallback>
}
 8000b1e:	e7f3      	b.n	8000b08 <I2S_Receive_IT+0x20>

08000b20 <HAL_I2S_ErrorCallback>:
}
 8000b20:	4770      	bx	lr

08000b22 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8000b22:	b510      	push	{r4, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8000b28:	6802      	ldr	r2, [r0, #0]
 8000b2a:	6893      	ldr	r3, [r2, #8]
 8000b2c:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8000b2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d006      	beq.n	8000b46 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8000b38:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d02c      	beq.n	8000b9c <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8000b42:	b004      	add	sp, #16
 8000b44:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8000b46:	9b03      	ldr	r3, [sp, #12]
 8000b48:	f013 0f01 	tst.w	r3, #1
 8000b4c:	d003      	beq.n	8000b56 <I2S_IRQHandler+0x34>
 8000b4e:	6853      	ldr	r3, [r2, #4]
 8000b50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000b54:	d11f      	bne.n	8000b96 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000b56:	9b03      	ldr	r3, [sp, #12]
 8000b58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000b5c:	d0ec      	beq.n	8000b38 <I2S_IRQHandler+0x16>
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	f012 0f20 	tst.w	r2, #32
 8000b66:	d0e7      	beq.n	8000b38 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000b6e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000b70:	2300      	movs	r3, #0
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	9201      	str	r2, [sp, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000b86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000b8e:	4620      	mov	r0, r4
 8000b90:	f7ff ffc6 	bl	8000b20 <HAL_I2S_ErrorCallback>
 8000b94:	e7d0      	b.n	8000b38 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8000b96:	f7ff ffa7 	bl	8000ae8 <I2S_Receive_IT>
 8000b9a:	e7dc      	b.n	8000b56 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000b9c:	9b03      	ldr	r3, [sp, #12]
 8000b9e:	f013 0f02 	tst.w	r3, #2
 8000ba2:	d004      	beq.n	8000bae <I2S_IRQHandler+0x8c>
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000bac:	d11d      	bne.n	8000bea <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000bae:	9b03      	ldr	r3, [sp, #12]
 8000bb0:	f013 0f08 	tst.w	r3, #8
 8000bb4:	d0c5      	beq.n	8000b42 <I2S_IRQHandler+0x20>
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	f012 0f20 	tst.w	r2, #32
 8000bbe:	d0c0      	beq.n	8000b42 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000bc6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8000bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000be2:	4620      	mov	r0, r4
 8000be4:	f7ff ff9c 	bl	8000b20 <HAL_I2S_ErrorCallback>
}
 8000be8:	e7ab      	b.n	8000b42 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff ff5f 	bl	8000aae <I2S_Transmit_IT>
 8000bf0:	e7dd      	b.n	8000bae <I2S_IRQHandler+0x8c>

08000bf2 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8000bf2:	4770      	bx	lr

08000bf4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8000bf4:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8000bf6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bf8:	1c9a      	adds	r2, r3, #2
 8000bfa:	6242      	str	r2, [r0, #36]	; 0x24
 8000bfc:	6802      	ldr	r2, [r0, #0]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8000c02:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8000c0c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b93b      	cbnz	r3, 8000c22 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000c12:	6802      	ldr	r2, [r0, #0]
 8000c14:	6853      	ldr	r3, [r2, #4]
 8000c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000c1a:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8000c1c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b103      	cbz	r3, 8000c24 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8000c22:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000c2a:	f7ff ffe2 	bl	8000bf2 <HAL_I2SEx_TxRxCpltCallback>
}
 8000c2e:	e7f8      	b.n	8000c22 <I2SEx_TxISR_I2S+0x2e>

08000c30 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8000c30:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8000c32:	6802      	ldr	r2, [r0, #0]
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <I2SEx_RxISR_I2SExt+0x5c>)
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d01c      	beq.n	8000c74 <I2SEx_RxISR_I2SExt+0x44>
 8000c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000c42:	1c99      	adds	r1, r3, #2
 8000c44:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000c46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8000c48:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8000c52:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	b963      	cbnz	r3, 8000c72 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000c58:	6802      	ldr	r2, [r0, #0]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <I2SEx_RxISR_I2SExt+0x5c>)
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d00c      	beq.n	8000c7a <I2SEx_RxISR_I2SExt+0x4a>
 8000c60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000c64:	6853      	ldr	r3, [r2, #4]
 8000c66:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000c6a:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8000c6c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b12b      	cbz	r3, 8000c7e <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8000c72:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8000c74:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000c78:	e7e1      	b.n	8000c3e <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <I2SEx_RxISR_I2SExt+0x60>)
 8000c7c:	e7f2      	b.n	8000c64 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000c84:	f7ff ffb5 	bl	8000bf2 <HAL_I2SEx_TxRxCpltCallback>
}
 8000c88:	e7f3      	b.n	8000c72 <I2SEx_RxISR_I2SExt+0x42>
 8000c8a:	bf00      	nop
 8000c8c:	40003800 	.word	0x40003800
 8000c90:	40003400 	.word	0x40003400

08000c94 <I2SEx_TxISR_I2SExt>:
{
 8000c94:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8000c96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c98:	1c9a      	adds	r2, r3, #2
 8000c9a:	6242      	str	r2, [r0, #36]	; 0x24
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	6801      	ldr	r1, [r0, #0]
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <I2SEx_TxISR_I2SExt+0x5c>)
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d018      	beq.n	8000cd8 <I2SEx_TxISR_I2SExt+0x44>
 8000ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000caa:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8000cac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8000cb6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b963      	cbnz	r3, 8000cd6 <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000cbc:	6802      	ldr	r2, [r0, #0]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <I2SEx_TxISR_I2SExt+0x5c>)
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d00c      	beq.n	8000cde <I2SEx_TxISR_I2SExt+0x4a>
 8000cc4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000cc8:	6853      	ldr	r3, [r2, #4]
 8000cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000cce:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8000cd0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b12b      	cbz	r3, 8000ce2 <I2SEx_TxISR_I2SExt+0x4e>
}
 8000cd6:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8000cd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000cdc:	e7e5      	b.n	8000caa <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <I2SEx_TxISR_I2SExt+0x60>)
 8000ce0:	e7f2      	b.n	8000cc8 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000ce8:	f7ff ff83 	bl	8000bf2 <HAL_I2SEx_TxRxCpltCallback>
}
 8000cec:	e7f3      	b.n	8000cd6 <I2SEx_TxISR_I2SExt+0x42>
 8000cee:	bf00      	nop
 8000cf0:	40003800 	.word	0x40003800
 8000cf4:	40003400 	.word	0x40003400

08000cf8 <I2SEx_RxISR_I2S>:
{
 8000cf8:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8000cfa:	6803      	ldr	r3, [r0, #0]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d00:	1c99      	adds	r1, r3, #2
 8000d02:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000d04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8000d06:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8000d10:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b93b      	cbnz	r3, 8000d26 <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000d16:	6802      	ldr	r2, [r0, #0]
 8000d18:	6853      	ldr	r3, [r2, #4]
 8000d1a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000d1e:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8000d20:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b103      	cbz	r3, 8000d28 <I2SEx_RxISR_I2S+0x30>
}
 8000d26:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000d2e:	f7ff ff60 	bl	8000bf2 <HAL_I2SEx_TxRxCpltCallback>
}
 8000d32:	e7f8      	b.n	8000d26 <I2SEx_RxISR_I2S+0x2e>

08000d34 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8000d34:	b510      	push	{r4, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8000d3a:	6803      	ldr	r3, [r0, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8000d40:	4a70      	ldr	r2, [pc, #448]	; (8000f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d06f      	beq.n	8000e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8000d46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000d4a:	6891      	ldr	r1, [r2, #8]
 8000d4c:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8000d52:	6853      	ldr	r3, [r2, #4]
 8000d54:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d5c:	d001      	beq.n	8000d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d170      	bne.n	8000e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8000d62:	9b05      	ldr	r3, [sp, #20]
 8000d64:	f013 0f02 	tst.w	r3, #2
 8000d68:	d003      	beq.n	8000d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8000d6a:	9b03      	ldr	r3, [sp, #12]
 8000d6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d70:	d15c      	bne.n	8000e2c <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8000d72:	9b04      	ldr	r3, [sp, #16]
 8000d74:	f013 0f01 	tst.w	r3, #1
 8000d78:	d003      	beq.n	8000d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8000d7a:	9b02      	ldr	r3, [sp, #8]
 8000d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000d80:	d158      	bne.n	8000e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8000d82:	9b04      	ldr	r3, [sp, #16]
 8000d84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000d88:	d024      	beq.n	8000dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8000d8a:	9b02      	ldr	r3, [sp, #8]
 8000d8c:	f013 0f20 	tst.w	r3, #32
 8000d90:	d020      	beq.n	8000dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000d92:	6822      	ldr	r2, [r4, #0]
 8000d94:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d050      	beq.n	8000e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8000d9a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000d9e:	6853      	ldr	r3, [r2, #4]
 8000da0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000da4:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000da6:	6822      	ldr	r2, [r4, #0]
 8000da8:	6853      	ldr	r3, [r2, #4]
 8000daa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000dae:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000db0:	2300      	movs	r3, #0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	9200      	str	r2, [sp, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f7ff fea6 	bl	8000b20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8000dd4:	9b05      	ldr	r3, [sp, #20]
 8000dd6:	f013 0f08 	tst.w	r3, #8
 8000dda:	d022      	beq.n	8000e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8000ddc:	9b03      	ldr	r3, [sp, #12]
 8000dde:	f013 0f20 	tst.w	r3, #32
 8000de2:	d01e      	beq.n	8000e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000de4:	6822      	ldr	r2, [r4, #0]
 8000de6:	6853      	ldr	r3, [r2, #4]
 8000de8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000dec:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000dee:	6822      	ldr	r2, [r4, #0]
 8000df0:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d024      	beq.n	8000e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8000df6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000dfa:	6853      	ldr	r3, [r2, #4]
 8000dfc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e00:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000e02:	2300      	movs	r3, #0
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8000e14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff fe7f 	bl	8000b20 <HAL_I2S_ErrorCallback>
}
 8000e22:	b006      	add	sp, #24
 8000e24:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8000e26:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000e2a:	e78e      	b.n	8000d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fee1 	bl	8000bf4 <I2SEx_TxISR_I2S>
 8000e32:	e79e      	b.n	8000d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8000e34:	4620      	mov	r0, r4
 8000e36:	f7ff fefb 	bl	8000c30 <I2SEx_RxISR_I2SExt>
 8000e3a:	e7a2      	b.n	8000d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000e3c:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8000e3e:	e7ae      	b.n	8000d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000e40:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8000e42:	e7da      	b.n	8000dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8000e44:	9b04      	ldr	r3, [sp, #16]
 8000e46:	f013 0f02 	tst.w	r3, #2
 8000e4a:	d003      	beq.n	8000e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8000e4c:	9b02      	ldr	r3, [sp, #8]
 8000e4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e52:	d14a      	bne.n	8000eea <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8000e54:	9b05      	ldr	r3, [sp, #20]
 8000e56:	f013 0f01 	tst.w	r3, #1
 8000e5a:	d003      	beq.n	8000e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8000e5c:	9b03      	ldr	r3, [sp, #12]
 8000e5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e62:	d146      	bne.n	8000ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8000e64:	9b05      	ldr	r3, [sp, #20]
 8000e66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e6a:	d01c      	beq.n	8000ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8000e6c:	9b03      	ldr	r3, [sp, #12]
 8000e6e:	f013 0f20 	tst.w	r3, #32
 8000e72:	d018      	beq.n	8000ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000e74:	6822      	ldr	r2, [r4, #0]
 8000e76:	6853      	ldr	r3, [r2, #4]
 8000e78:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e7c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000e7e:	6822      	ldr	r2, [r4, #0]
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d039      	beq.n	8000efa <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8000e86:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e8a:	6853      	ldr	r3, [r2, #4]
 8000e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000e90:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000e98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff fe3d 	bl	8000b20 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8000ea6:	9b04      	ldr	r3, [sp, #16]
 8000ea8:	f013 0f08 	tst.w	r3, #8
 8000eac:	d0b9      	beq.n	8000e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8000eae:	9b02      	ldr	r3, [sp, #8]
 8000eb0:	f013 0f20 	tst.w	r3, #32
 8000eb4:	d0b5      	beq.n	8000e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000eb6:	6822      	ldr	r2, [r4, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d01f      	beq.n	8000efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8000ebe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000ec2:	6853      	ldr	r3, [r2, #4]
 8000ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000ec8:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000eca:	6822      	ldr	r2, [r4, #0]
 8000ecc:	6853      	ldr	r3, [r2, #4]
 8000ece:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000ed2:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8000eda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff fe1c 	bl	8000b20 <HAL_I2S_ErrorCallback>
}
 8000ee8:	e79b      	b.n	8000e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff fed2 	bl	8000c94 <I2SEx_TxISR_I2SExt>
 8000ef0:	e7b0      	b.n	8000e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f7ff ff00 	bl	8000cf8 <I2SEx_RxISR_I2S>
 8000ef8:	e7b4      	b.n	8000e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000efa:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8000efc:	e7c5      	b.n	8000e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000efe:	4a02      	ldr	r2, [pc, #8]	; (8000f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8000f00:	e7df      	b.n	8000ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8000f02:	bf00      	nop
 8000f04:	40003800 	.word	0x40003800
 8000f08:	40003400 	.word	0x40003400

08000f0c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	f000 81df 	beq.w	80012d0 <HAL_RCC_OscConfig+0x3c4>
{
 8000f12:	b570      	push	{r4, r5, r6, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	f013 0f01 	tst.w	r3, #1
 8000f1e:	d03b      	beq.n	8000f98 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f20:	4ba6      	ldr	r3, [pc, #664]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d02c      	beq.n	8000f86 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f2c:	4ba3      	ldr	r3, [pc, #652]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d021      	beq.n	8000f7c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f38:	6863      	ldr	r3, [r4, #4]
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3e:	d04f      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xd4>
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f44:	d052      	beq.n	8000fec <HAL_RCC_OscConfig+0xe0>
 8000f46:	4b9d      	ldr	r3, [pc, #628]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f58:	6863      	ldr	r3, [r4, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d050      	beq.n	8001000 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb4d 	bl	80005fc <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f64:	4b95      	ldr	r3, [pc, #596]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f6c:	d114      	bne.n	8000f98 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fb45 	bl	80005fc <HAL_GetTick>
 8000f72:	1b40      	subs	r0, r0, r5
 8000f74:	2864      	cmp	r0, #100	; 0x64
 8000f76:	d9f5      	bls.n	8000f64 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000f78:	2003      	movs	r0, #3
 8000f7a:	e1b0      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f7c:	4b8f      	ldr	r3, [pc, #572]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f84:	d0d8      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f86:	4b8d      	ldr	r3, [pc, #564]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f8e:	d003      	beq.n	8000f98 <HAL_RCC_OscConfig+0x8c>
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 819e 	beq.w	80012d4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	f013 0f02 	tst.w	r3, #2
 8000f9e:	d054      	beq.n	800104a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fa0:	4b86      	ldr	r3, [pc, #536]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f013 0f0c 	tst.w	r3, #12
 8000fa8:	d03e      	beq.n	8001028 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000faa:	4b84      	ldr	r3, [pc, #528]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d033      	beq.n	800101e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fb6:	68e3      	ldr	r3, [r4, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d067      	beq.n	800108c <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fbc:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <HAL_RCC_OscConfig+0x2b4>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb1b 	bl	80005fc <HAL_GetTick>
 8000fc6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	4b7c      	ldr	r3, [pc, #496]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f013 0f02 	tst.w	r3, #2
 8000fd0:	d153      	bne.n	800107a <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fb13 	bl	80005fc <HAL_GetTick>
 8000fd6:	1b40      	subs	r0, r0, r5
 8000fd8:	2802      	cmp	r0, #2
 8000fda:	d9f5      	bls.n	8000fc8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000fdc:	2003      	movs	r0, #3
 8000fde:	e17e      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe0:	4a76      	ldr	r2, [pc, #472]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000fe2:	6813      	ldr	r3, [r2, #0]
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e7b5      	b.n	8000f58 <HAL_RCC_OscConfig+0x4c>
 8000fec:	4b73      	ldr	r3, [pc, #460]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e7ab      	b.n	8000f58 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001000:	f7ff fafc 	bl	80005fc <HAL_GetTick>
 8001004:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	4b6d      	ldr	r3, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800100e:	d0c3      	beq.n	8000f98 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff faf4 	bl	80005fc <HAL_GetTick>
 8001014:	1b40      	subs	r0, r0, r5
 8001016:	2864      	cmp	r0, #100	; 0x64
 8001018:	d9f5      	bls.n	8001006 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
 800101c:	e15f      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001026:	d1c6      	bne.n	8000fb6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001028:	4b64      	ldr	r3, [pc, #400]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f013 0f02 	tst.w	r3, #2
 8001030:	d003      	beq.n	800103a <HAL_RCC_OscConfig+0x12e>
 8001032:	68e3      	ldr	r3, [r4, #12]
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 814f 	bne.w	80012d8 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103a:	4a60      	ldr	r2, [pc, #384]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 800103c:	6813      	ldr	r3, [r2, #0]
 800103e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001042:	6921      	ldr	r1, [r4, #16]
 8001044:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001048:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	f013 0f08 	tst.w	r3, #8
 8001050:	d040      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001052:	6963      	ldr	r3, [r4, #20]
 8001054:	b363      	cbz	r3, 80010b0 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <HAL_RCC_OscConfig+0x2b8>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105c:	f7ff face 	bl	80005fc <HAL_GetTick>
 8001060:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8001064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001066:	f013 0f02 	tst.w	r3, #2
 800106a:	d133      	bne.n	80010d4 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fac6 	bl	80005fc <HAL_GetTick>
 8001070:	1b40      	subs	r0, r0, r5
 8001072:	2802      	cmp	r0, #2
 8001074:	d9f5      	bls.n	8001062 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001076:	2003      	movs	r0, #3
 8001078:	e131      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107a:	4a50      	ldr	r2, [pc, #320]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001082:	6921      	ldr	r1, [r4, #16]
 8001084:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e7de      	b.n	800104a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800108c:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <HAL_RCC_OscConfig+0x2b4>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001092:	f7ff fab3 	bl	80005fc <HAL_GetTick>
 8001096:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f013 0f02 	tst.w	r3, #2
 80010a0:	d0d3      	beq.n	800104a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff faab 	bl	80005fc <HAL_GetTick>
 80010a6:	1b40      	subs	r0, r0, r5
 80010a8:	2802      	cmp	r0, #2
 80010aa:	d9f5      	bls.n	8001098 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80010ac:	2003      	movs	r0, #3
 80010ae:	e116      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_RCC_OscConfig+0x2b8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff faa1 	bl	80005fc <HAL_GetTick>
 80010ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010bc:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 80010be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c0:	f013 0f02 	tst.w	r3, #2
 80010c4:	d006      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c6:	f7ff fa99 	bl	80005fc <HAL_GetTick>
 80010ca:	1b40      	subs	r0, r0, r5
 80010cc:	2802      	cmp	r0, #2
 80010ce:	d9f5      	bls.n	80010bc <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
 80010d2:	e104      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	f013 0f04 	tst.w	r3, #4
 80010da:	d078      	beq.n	80011ce <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010e4:	d10d      	bne.n	8001102 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010fe:	2501      	movs	r5, #1
 8001100:	e000      	b.n	8001104 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8001102:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_RCC_OscConfig+0x2bc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f413 7f80 	tst.w	r3, #256	; 0x100
 800110c:	d021      	beq.n	8001152 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110e:	68a3      	ldr	r3, [r4, #8]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d032      	beq.n	800117a <HAL_RCC_OscConfig+0x26e>
 8001114:	2b05      	cmp	r3, #5
 8001116:	d036      	beq.n	8001186 <HAL_RCC_OscConfig+0x27a>
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 800111a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800111c:	f022 0201 	bic.w	r2, r2, #1
 8001120:	671a      	str	r2, [r3, #112]	; 0x70
 8001122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001124:	f022 0204 	bic.w	r2, r2, #4
 8001128:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800112a:	68a3      	ldr	r3, [r4, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d034      	beq.n	800119a <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff fa64 	bl	80005fc <HAL_GetTick>
 8001134:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8001138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113a:	f013 0f02 	tst.w	r3, #2
 800113e:	d145      	bne.n	80011cc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001140:	f7ff fa5c 	bl	80005fc <HAL_GetTick>
 8001144:	1b80      	subs	r0, r0, r6
 8001146:	f241 3388 	movw	r3, #5000	; 0x1388
 800114a:	4298      	cmp	r0, r3
 800114c:	d9f3      	bls.n	8001136 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
 8001150:	e0c5      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_RCC_OscConfig+0x2bc>)
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800115c:	f7ff fa4e 	bl	80005fc <HAL_GetTick>
 8001160:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_OscConfig+0x2bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f413 7f80 	tst.w	r3, #256	; 0x100
 800116a:	d1d0      	bne.n	800110e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116c:	f7ff fa46 	bl	80005fc <HAL_GetTick>
 8001170:	1b80      	subs	r0, r0, r6
 8001172:	2802      	cmp	r0, #2
 8001174:	d9f5      	bls.n	8001162 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001176:	2003      	movs	r0, #3
 8001178:	e0b1      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 800117c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6713      	str	r3, [r2, #112]	; 0x70
 8001184:	e7d1      	b.n	800112a <HAL_RCC_OscConfig+0x21e>
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 8001188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800118a:	f042 0204 	orr.w	r2, r2, #4
 800118e:	671a      	str	r2, [r3, #112]	; 0x70
 8001190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	671a      	str	r2, [r3, #112]	; 0x70
 8001198:	e7c7      	b.n	800112a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fa2f 	bl	80005fc <HAL_GetTick>
 800119e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_RCC_OscConfig+0x2b0>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a4:	f013 0f02 	tst.w	r3, #2
 80011a8:	d010      	beq.n	80011cc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fa27 	bl	80005fc <HAL_GetTick>
 80011ae:	1b80      	subs	r0, r0, r6
 80011b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80011b4:	4298      	cmp	r0, r3
 80011b6:	d9f3      	bls.n	80011a0 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80011b8:	2003      	movs	r0, #3
 80011ba:	e090      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
 80011bc:	40023800 	.word	0x40023800
 80011c0:	42470000 	.word	0x42470000
 80011c4:	42470e80 	.word	0x42470e80
 80011c8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011cc:	b9ed      	cbnz	r5, 800120a <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ce:	69a3      	ldr	r3, [r4, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8083 	beq.w	80012dc <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011d6:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_RCC_OscConfig+0x3f0>)
 80011d8:	6892      	ldr	r2, [r2, #8]
 80011da:	f002 020c 	and.w	r2, r2, #12
 80011de:	2a08      	cmp	r2, #8
 80011e0:	d051      	beq.n	8001286 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d017      	beq.n	8001216 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b46      	ldr	r3, [pc, #280]	; (8001300 <HAL_RCC_OscConfig+0x3f4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fa06 	bl	80005fc <HAL_GetTick>
 80011f0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011f2:	4b42      	ldr	r3, [pc, #264]	; (80012fc <HAL_RCC_OscConfig+0x3f0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011fa:	d042      	beq.n	8001282 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff f9fe 	bl	80005fc <HAL_GetTick>
 8001200:	1b00      	subs	r0, r0, r4
 8001202:	2802      	cmp	r0, #2
 8001204:	d9f5      	bls.n	80011f2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001206:	2003      	movs	r0, #3
 8001208:	e069      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800120a:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <HAL_RCC_OscConfig+0x3f0>)
 800120c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800120e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	e7db      	b.n	80011ce <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_RCC_OscConfig+0x3f4>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800121c:	f7ff f9ee 	bl	80005fc <HAL_GetTick>
 8001220:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_OscConfig+0x3f0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800122a:	d006      	beq.n	800123a <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff f9e6 	bl	80005fc <HAL_GetTick>
 8001230:	1b40      	subs	r0, r0, r5
 8001232:	2802      	cmp	r0, #2
 8001234:	d9f5      	bls.n	8001222 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001236:	2003      	movs	r0, #3
 8001238:	e051      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800123a:	69e3      	ldr	r3, [r4, #28]
 800123c:	6a22      	ldr	r2, [r4, #32]
 800123e:	4313      	orrs	r3, r2
 8001240:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001242:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001248:	0852      	lsrs	r2, r2, #1
 800124a:	3a01      	subs	r2, #1
 800124c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001250:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001252:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001256:	4a29      	ldr	r2, [pc, #164]	; (80012fc <HAL_RCC_OscConfig+0x3f0>)
 8001258:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_RCC_OscConfig+0x3f4>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001260:	f7ff f9cc 	bl	80005fc <HAL_GetTick>
 8001264:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_RCC_OscConfig+0x3f0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff f9c4 	bl	80005fc <HAL_GetTick>
 8001274:	1b00      	subs	r0, r0, r4
 8001276:	2802      	cmp	r0, #2
 8001278:	d9f5      	bls.n	8001266 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800127a:	2003      	movs	r0, #3
 800127c:	e02f      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800127e:	2000      	movs	r0, #0
 8001280:	e02d      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
 8001282:	2000      	movs	r0, #0
 8001284:	e02b      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001286:	2b01      	cmp	r3, #1
 8001288:	d02b      	beq.n	80012e2 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_RCC_OscConfig+0x3f0>)
 800128c:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001292:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001294:	4291      	cmp	r1, r2
 8001296:	d126      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800129c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	428a      	cmp	r2, r1
 80012a0:	d123      	bne.n	80012ea <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012a4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80012a8:	401a      	ands	r2, r3
 80012aa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80012ae:	d11e      	bne.n	80012ee <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012b0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80012b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012b6:	0852      	lsrs	r2, r2, #1
 80012b8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012ba:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80012be:	d118      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012c0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80012c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012c6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80012ca:	d114      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
 80012ce:	e006      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
}
 80012d2:	4770      	bx	lr
        return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
 80012d6:	e002      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
}
 80012de:	b002      	add	sp, #8
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80012e2:	2001      	movs	r0, #1
 80012e4:	e7fb      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e7f9      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7f7      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
 80012ee:	2001      	movs	r0, #1
 80012f0:	e7f5      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
 80012f2:	2001      	movs	r0, #1
 80012f4:	e7f3      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
 80012f6:	2001      	movs	r0, #1
 80012f8:	e7f1      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	42470060 	.word	0x42470060

08001304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b04      	cmp	r3, #4
 8001310:	d053      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0xb6>
 8001312:	2b08      	cmp	r3, #8
 8001314:	d153      	bne.n	80013be <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001324:	d028      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800132e:	0158      	lsls	r0, r3, #5
 8001330:	2100      	movs	r1, #0
 8001332:	1ac0      	subs	r0, r0, r3
 8001334:	f161 0100 	sbc.w	r1, r1, #0
 8001338:	018e      	lsls	r6, r1, #6
 800133a:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 800133e:	0187      	lsls	r7, r0, #6
 8001340:	1a3c      	subs	r4, r7, r0
 8001342:	eb66 0501 	sbc.w	r5, r6, r1
 8001346:	00e9      	lsls	r1, r5, #3
 8001348:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 800134c:	00e0      	lsls	r0, r4, #3
 800134e:	18c0      	adds	r0, r0, r3
 8001350:	f141 0100 	adc.w	r1, r1, #0
 8001354:	024b      	lsls	r3, r1, #9
 8001356:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800135a:	0244      	lsls	r4, r0, #9
 800135c:	4620      	mov	r0, r4
 800135e:	4619      	mov	r1, r3
 8001360:	2300      	movs	r3, #0
 8001362:	f7fe ff85 	bl	8000270 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800136e:	3301      	adds	r3, #1
 8001370:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001372:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001376:	e023      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001380:	015c      	lsls	r4, r3, #5
 8001382:	2500      	movs	r5, #0
 8001384:	1ae4      	subs	r4, r4, r3
 8001386:	f165 0500 	sbc.w	r5, r5, #0
 800138a:	01ae      	lsls	r6, r5, #6
 800138c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001390:	01a7      	lsls	r7, r4, #6
 8001392:	1b38      	subs	r0, r7, r4
 8001394:	eb66 0105 	sbc.w	r1, r6, r5
 8001398:	00cc      	lsls	r4, r1, #3
 800139a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800139e:	00c5      	lsls	r5, r0, #3
 80013a0:	18e8      	adds	r0, r5, r3
 80013a2:	f144 0100 	adc.w	r1, r4, #0
 80013a6:	028b      	lsls	r3, r1, #10
 80013a8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80013ac:	0284      	lsls	r4, r0, #10
 80013ae:	4620      	mov	r0, r4
 80013b0:	4619      	mov	r1, r3
 80013b2:	2300      	movs	r3, #0
 80013b4:	f7fe ff5c 	bl	8000270 <__aeabi_uldivmod>
 80013b8:	e7d5      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	007a1200 	.word	0x007a1200
 80013cc:	00f42400 	.word	0x00f42400

080013d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80013d0:	2800      	cmp	r0, #0
 80013d2:	f000 809b 	beq.w	800150c <HAL_RCC_ClockConfig+0x13c>
{
 80013d6:	b570      	push	{r4, r5, r6, lr}
 80013d8:	460d      	mov	r5, r1
 80013da:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_RCC_ClockConfig+0x14c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	428b      	cmp	r3, r1
 80013e6:	d208      	bcs.n	80013fa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e8:	b2cb      	uxtb	r3, r1
 80013ea:	4a4c      	ldr	r2, [pc, #304]	; (800151c <HAL_RCC_ClockConfig+0x14c>)
 80013ec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ee:	6813      	ldr	r3, [r2, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	428b      	cmp	r3, r1
 80013f6:	f040 808b 	bne.w	8001510 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	f013 0f02 	tst.w	r3, #2
 8001400:	d017      	beq.n	8001432 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001402:	f013 0f04 	tst.w	r3, #4
 8001406:	d004      	beq.n	8001412 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001408:	4a45      	ldr	r2, [pc, #276]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 800140a:	6893      	ldr	r3, [r2, #8]
 800140c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001410:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	f013 0f08 	tst.w	r3, #8
 8001418:	d004      	beq.n	8001424 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141a:	4a41      	ldr	r2, [pc, #260]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 800141c:	6893      	ldr	r3, [r2, #8]
 800141e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001422:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001424:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 8001426:	6893      	ldr	r3, [r2, #8]
 8001428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800142c:	68a1      	ldr	r1, [r4, #8]
 800142e:	430b      	orrs	r3, r1
 8001430:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	f013 0f01 	tst.w	r3, #1
 8001438:	d032      	beq.n	80014a0 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	6863      	ldr	r3, [r4, #4]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d021      	beq.n	8001484 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001440:	1e9a      	subs	r2, r3, #2
 8001442:	2a01      	cmp	r2, #1
 8001444:	d925      	bls.n	8001492 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4a36      	ldr	r2, [pc, #216]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	f012 0f02 	tst.w	r2, #2
 800144e:	d061      	beq.n	8001514 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001450:	4933      	ldr	r1, [pc, #204]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 8001452:	688a      	ldr	r2, [r1, #8]
 8001454:	f022 0203 	bic.w	r2, r2, #3
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800145c:	f7ff f8ce 	bl	80005fc <HAL_GetTick>
 8001460:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	6862      	ldr	r2, [r4, #4]
 800146c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001470:	d016      	beq.n	80014a0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001472:	f7ff f8c3 	bl	80005fc <HAL_GetTick>
 8001476:	1b80      	subs	r0, r0, r6
 8001478:	f241 3388 	movw	r3, #5000	; 0x1388
 800147c:	4298      	cmp	r0, r3
 800147e:	d9f0      	bls.n	8001462 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e042      	b.n	800150a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	4a26      	ldr	r2, [pc, #152]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800148c:	d1e0      	bne.n	8001450 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800148e:	2001      	movs	r0, #1
 8001490:	e03b      	b.n	800150a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800149a:	d1d9      	bne.n	8001450 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800149c:	2001      	movs	r0, #1
 800149e:	e034      	b.n	800150a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_ClockConfig+0x14c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	42ab      	cmp	r3, r5
 80014aa:	d907      	bls.n	80014bc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ac:	b2ea      	uxtb	r2, r5
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_ClockConfig+0x14c>)
 80014b0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	42ab      	cmp	r3, r5
 80014ba:	d12d      	bne.n	8001518 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	f013 0f04 	tst.w	r3, #4
 80014c2:	d006      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c4:	4a16      	ldr	r2, [pc, #88]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 80014c6:	6893      	ldr	r3, [r2, #8]
 80014c8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014cc:	68e1      	ldr	r1, [r4, #12]
 80014ce:	430b      	orrs	r3, r1
 80014d0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	f013 0f08 	tst.w	r3, #8
 80014d8:	d007      	beq.n	80014ea <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014da:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 80014dc:	6893      	ldr	r3, [r2, #8]
 80014de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014e2:	6921      	ldr	r1, [r4, #16]
 80014e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014e8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ea:	f7ff ff0b 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_RCC_ClockConfig+0x150>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_RCC_ClockConfig+0x154>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	40d8      	lsrs	r0, r3
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_RCC_ClockConfig+0x158>)
 80014fe:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_RCC_ClockConfig+0x15c>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f7ff f830 	bl	8000568 <HAL_InitTick>
  return HAL_OK;
 8001508:	2000      	movs	r0, #0
}
 800150a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800150c:	2001      	movs	r0, #1
}
 800150e:	4770      	bx	lr
      return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
 8001512:	e7fa      	b.n	800150a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
 8001516:	e7f8      	b.n	800150a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001518:	2001      	movs	r0, #1
 800151a:	e7f6      	b.n	800150a <HAL_RCC_ClockConfig+0x13a>
 800151c:	40023c00 	.word	0x40023c00
 8001520:	40023800 	.word	0x40023800
 8001524:	0800393c 	.word	0x0800393c
 8001528:	20000008 	.word	0x20000008
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001530:	4b01      	ldr	r3, [pc, #4]	; (8001538 <HAL_RCC_GetHCLKFreq+0x8>)
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008

0800153c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800153c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800153e:	f7ff fff7 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800154a:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
}
 800154e:	40d8      	lsrs	r0, r3
 8001550:	bd08      	pop	{r3, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	0800394c 	.word	0x0800394c

0800155c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800155c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800155e:	f7ff ffe7 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800156a:	4a03      	ldr	r2, [pc, #12]	; (8001578 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
}
 800156e:	40d8      	lsrs	r0, r3
 8001570:	bd08      	pop	{r3, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	0800394c 	.word	0x0800394c

0800157c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800157c:	b530      	push	{r4, r5, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001582:	6803      	ldr	r3, [r0, #0]
 8001584:	f013 0f05 	tst.w	r3, #5
 8001588:	d106      	bne.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	f013 0f02 	tst.w	r3, #2
 8001590:	d12e      	bne.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001592:	2000      	movs	r0, #0
}
 8001594:	b003      	add	sp, #12
 8001596:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001598:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800159e:	f7ff f82d 	bl	80005fc <HAL_GetTick>
 80015a2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80015a4:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80015ac:	d006      	beq.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80015ae:	f7ff f825 	bl	80005fc <HAL_GetTick>
 80015b2:	1b43      	subs	r3, r0, r5
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d9f5      	bls.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 80015b8:	2003      	movs	r0, #3
 80015ba:	e7eb      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80015bc:	6862      	ldr	r2, [r4, #4]
 80015be:	68a3      	ldr	r3, [r4, #8]
 80015c0:	071b      	lsls	r3, r3, #28
 80015c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015c6:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80015c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80015cc:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80015d2:	f7ff f813 	bl	80005fc <HAL_GetTick>
 80015d6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80015e0:	d1d3      	bne.n	800158a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80015e2:	f7ff f80b 	bl	80005fc <HAL_GetTick>
 80015e6:	1b43      	subs	r3, r0, r5
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d9f5      	bls.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 80015ec:	2003      	movs	r0, #3
 80015ee:	e7d1      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80015f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001608:	4a2f      	ldr	r2, [pc, #188]	; (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001612:	f7fe fff3 	bl	80005fc <HAL_GetTick>
 8001616:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001620:	d106      	bne.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7fe ffeb 	bl	80005fc <HAL_GetTick>
 8001626:	1b43      	subs	r3, r0, r5
 8001628:	2b02      	cmp	r3, #2
 800162a:	d9f5      	bls.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 800162c:	2003      	movs	r0, #3
 800162e:	e7b1      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001630:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001634:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001638:	d012      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800163a:	68e2      	ldr	r2, [r4, #12]
 800163c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001640:	429a      	cmp	r2, r3
 8001642:	d00d      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001648:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800164c:	491f      	ldr	r1, [pc, #124]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800164e:	2001      	movs	r0, #1
 8001650:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001652:	2000      	movs	r0, #0
 8001654:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001656:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	f013 0f01 	tst.w	r3, #1
 800165e:	d113      	bne.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001660:	68e3      	ldr	r3, [r4, #12]
 8001662:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001666:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800166a:	d01e      	beq.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800166c:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800166e:	6893      	ldr	r3, [r2, #8]
 8001670:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001674:	6093      	str	r3, [r2, #8]
 8001676:	4913      	ldr	r1, [pc, #76]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001678:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800167a:	68e2      	ldr	r2, [r4, #12]
 800167c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001680:	4313      	orrs	r3, r2
 8001682:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 8001684:	2000      	movs	r0, #0
 8001686:	e785      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8001688:	f7fe ffb8 	bl	80005fc <HAL_GetTick>
 800168c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	f013 0f02 	tst.w	r3, #2
 8001696:	d1e3      	bne.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7fe ffb0 	bl	80005fc <HAL_GetTick>
 800169c:	1b40      	subs	r0, r0, r5
 800169e:	f241 3388 	movw	r3, #5000	; 0x1388
 80016a2:	4298      	cmp	r0, r3
 80016a4:	d9f3      	bls.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 80016a6:	2003      	movs	r0, #3
 80016a8:	e774      	b.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016aa:	4906      	ldr	r1, [pc, #24]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80016ac:	688a      	ldr	r2, [r1, #8]
 80016ae:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80016b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80016b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
 80016be:	e7da      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80016c0:	42470068 	.word	0x42470068
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470e40 	.word	0x42470e40

080016d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80016d0:	2801      	cmp	r0, #1
 80016d2:	d001      	beq.n	80016d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 80016d4:	2000      	movs	r0, #0
 80016d6:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 80016da:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 80016dc:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 80016e0:	d003      	beq.n	80016ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d123      	bne.n	800172e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80016e6:	4814      	ldr	r0, [pc, #80]	; (8001738 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 80016e8:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80016f2:	d014      	beq.n	800171e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fc:	480f      	ldr	r0, [pc, #60]	; (800173c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 80016fe:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8001704:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8001708:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800170c:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001710:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8001714:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001718:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800171c:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8001728:	fbb0 f0f3 	udiv	r0, r0, r3
 800172c:	e7e9      	b.n	8001702 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800172e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	00bb8000 	.word	0x00bb8000
 800173c:	007a1200 	.word	0x007a1200
 8001740:	00f42400 	.word	0x00f42400

08001744 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	4605      	mov	r5, r0
 800174c:	4688      	mov	r8, r1
 800174e:	4617      	mov	r7, r2
 8001750:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001752:	f7fe ff53 	bl	80005fc <HAL_GetTick>
 8001756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001758:	1a1b      	subs	r3, r3, r0
 800175a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800175e:	f7fe ff4d 	bl	80005fc <HAL_GetTick>
 8001762:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800176c:	fb09 f303 	mul.w	r3, r9, r3
 8001770:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001772:	682b      	ldr	r3, [r5, #0]
 8001774:	689c      	ldr	r4, [r3, #8]
 8001776:	ea38 0304 	bics.w	r3, r8, r4
 800177a:	bf0c      	ite	eq
 800177c:	2401      	moveq	r4, #1
 800177e:	2400      	movne	r4, #0
 8001780:	42bc      	cmp	r4, r7
 8001782:	d040      	beq.n	8001806 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001784:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001788:	d0f3      	beq.n	8001772 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800178a:	f7fe ff37 	bl	80005fc <HAL_GetTick>
 800178e:	eba0 000a 	sub.w	r0, r0, sl
 8001792:	4548      	cmp	r0, r9
 8001794:	d20a      	bcs.n	80017ac <SPI_WaitFlagStateUntilTimeout+0x68>
 8001796:	f1b9 0f00 	cmp.w	r9, #0
 800179a:	d007      	beq.n	80017ac <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800179c:	9a01      	ldr	r2, [sp, #4]
 800179e:	b102      	cbz	r2, 80017a2 <SPI_WaitFlagStateUntilTimeout+0x5e>
 80017a0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80017a2:	9b01      	ldr	r3, [sp, #4]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	4691      	mov	r9, r2
 80017aa:	e7e2      	b.n	8001772 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80017ac:	682a      	ldr	r2, [r5, #0]
 80017ae:	6853      	ldr	r3, [r2, #4]
 80017b0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80017b4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017b6:	686b      	ldr	r3, [r5, #4]
 80017b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017bc:	d00b      	beq.n	80017d6 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017be:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80017c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c4:	d014      	beq.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80017cc:	2300      	movs	r3, #0
 80017ce:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80017d2:	2003      	movs	r0, #3
 80017d4:	e018      	b.n	8001808 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017d6:	68ab      	ldr	r3, [r5, #8]
 80017d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017dc:	d002      	beq.n	80017e4 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d1ec      	bne.n	80017be <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80017e4:	682a      	ldr	r2, [r5, #0]
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e7e6      	b.n	80017be <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80017f0:	682a      	ldr	r2, [r5, #0]
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	682a      	ldr	r2, [r5, #0]
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e7df      	b.n	80017c6 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8001806:	2000      	movs	r0, #0
}
 8001808:	b002      	add	sp, #8
 800180a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b530      	push	{r4, r5, lr}
 8001816:	b085      	sub	sp, #20
 8001818:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <SPI_EndRxTxTransaction+0x60>)
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <SPI_EndRxTxTransaction+0x64>)
 8001820:	fba3 3000 	umull	r3, r0, r3, r0
 8001824:	0d40      	lsrs	r0, r0, #21
 8001826:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800182a:	fb05 f000 	mul.w	r0, r5, r0
 800182e:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001830:	6863      	ldr	r3, [r4, #4]
 8001832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001836:	d00b      	beq.n	8001850 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001838:	9b03      	ldr	r3, [sp, #12]
 800183a:	b1bb      	cbz	r3, 800186c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	3b01      	subs	r3, #1
 8001840:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f013 0f80 	tst.w	r3, #128	; 0x80
 800184a:	d1f5      	bne.n	8001838 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 800184c:	2000      	movs	r0, #0
 800184e:	e00e      	b.n	800186e <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001850:	9200      	str	r2, [sp, #0]
 8001852:	460b      	mov	r3, r1
 8001854:	2200      	movs	r2, #0
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff ff73 	bl	8001744 <SPI_WaitFlagStateUntilTimeout>
 800185e:	b130      	cbz	r0, 800186e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001860:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001868:	2003      	movs	r0, #3
 800186a:	e000      	b.n	800186e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 800186c:	2000      	movs	r0, #0
}
 800186e:	b005      	add	sp, #20
 8001870:	bd30      	pop	{r4, r5, pc}
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	165e9f81 	.word	0x165e9f81

0800187c <SPI_EndRxTransaction>:
{
 800187c:	b510      	push	{r4, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	4604      	mov	r4, r0
 8001882:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001884:	6841      	ldr	r1, [r0, #4]
 8001886:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800188a:	d014      	beq.n	80018b6 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800188c:	6861      	ldr	r1, [r4, #4]
 800188e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001892:	d12a      	bne.n	80018ea <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001894:	68a1      	ldr	r1, [r4, #8]
 8001896:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800189a:	d019      	beq.n	80018d0 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800189c:	9200      	str	r2, [sp, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ff4e 	bl	8001744 <SPI_WaitFlagStateUntilTimeout>
 80018a8:	b330      	cbz	r0, 80018f8 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80018b2:	2003      	movs	r0, #3
 80018b4:	e020      	b.n	80018f8 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018b6:	6881      	ldr	r1, [r0, #8]
 80018b8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018bc:	d002      	beq.n	80018c4 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018be:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80018c2:	d1e3      	bne.n	800188c <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80018c4:	6820      	ldr	r0, [r4, #0]
 80018c6:	6801      	ldr	r1, [r0, #0]
 80018c8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80018cc:	6001      	str	r1, [r0, #0]
 80018ce:	e7dd      	b.n	800188c <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80018d0:	9200      	str	r2, [sp, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ff34 	bl	8001744 <SPI_WaitFlagStateUntilTimeout>
 80018dc:	b160      	cbz	r0, 80018f8 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80018e6:	2003      	movs	r0, #3
 80018e8:	e006      	b.n	80018f8 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80018ea:	9200      	str	r2, [sp, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	2101      	movs	r1, #1
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff27 	bl	8001744 <SPI_WaitFlagStateUntilTimeout>
 80018f6:	b908      	cbnz	r0, 80018fc <SPI_EndRxTransaction+0x80>
}
 80018f8:	b002      	add	sp, #8
 80018fa:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001904:	2003      	movs	r0, #3
 8001906:	e7f7      	b.n	80018f8 <SPI_EndRxTransaction+0x7c>

08001908 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001908:	2800      	cmp	r0, #0
 800190a:	d05a      	beq.n	80019c2 <HAL_SPI_Init+0xba>
{
 800190c:	b510      	push	{r4, lr}
 800190e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001912:	b933      	cbnz	r3, 8001922 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001914:	6843      	ldr	r3, [r0, #4]
 8001916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800191a:	d005      	beq.n	8001928 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800191c:	2300      	movs	r3, #0
 800191e:	61c3      	str	r3, [r0, #28]
 8001920:	e002      	b.n	8001928 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001926:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800192c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001930:	2b00      	cmp	r3, #0
 8001932:	d040      	beq.n	80019b6 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001934:	2302      	movs	r3, #2
 8001936:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	6813      	ldr	r3, [r2, #0]
 800193e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001942:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001944:	6863      	ldr	r3, [r4, #4]
 8001946:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800194a:	68a2      	ldr	r2, [r4, #8]
 800194c:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8001950:	4313      	orrs	r3, r2
 8001952:	68e2      	ldr	r2, [r4, #12]
 8001954:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001958:	4313      	orrs	r3, r2
 800195a:	6922      	ldr	r2, [r4, #16]
 800195c:	f002 0202 	and.w	r2, r2, #2
 8001960:	4313      	orrs	r3, r2
 8001962:	6962      	ldr	r2, [r4, #20]
 8001964:	f002 0201 	and.w	r2, r2, #1
 8001968:	4313      	orrs	r3, r2
 800196a:	69a2      	ldr	r2, [r4, #24]
 800196c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001970:	4313      	orrs	r3, r2
 8001972:	69e2      	ldr	r2, [r4, #28]
 8001974:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001978:	4313      	orrs	r3, r2
 800197a:	6a22      	ldr	r2, [r4, #32]
 800197c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001980:	4313      	orrs	r3, r2
 8001982:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001984:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001988:	6821      	ldr	r1, [r4, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800198e:	8b63      	ldrh	r3, [r4, #26]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001996:	f002 0210 	and.w	r2, r2, #16
 800199a:	6821      	ldr	r1, [r4, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019a0:	6822      	ldr	r2, [r4, #0]
 80019a2:	69d3      	ldr	r3, [r2, #28]
 80019a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019a8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019aa:	2000      	movs	r0, #0
 80019ac:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80019b4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80019b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80019ba:	4620      	mov	r0, r4
 80019bc:	f000 ff06 	bl	80027cc <HAL_SPI_MspInit>
 80019c0:	e7b8      	b.n	8001934 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80019c2:	2001      	movs	r0, #1
}
 80019c4:	4770      	bx	lr

080019c6 <HAL_SPI_Transmit>:
{
 80019c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80019ce:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	f000 80cc 	beq.w	8001b70 <HAL_SPI_Transmit+0x1aa>
 80019d8:	4604      	mov	r4, r0
 80019da:	4688      	mov	r8, r1
 80019dc:	4691      	mov	r9, r2
 80019de:	2301      	movs	r3, #1
 80019e0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80019e4:	f7fe fe0a 	bl	80005fc <HAL_GetTick>
 80019e8:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80019ea:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80019ee:	b2f6      	uxtb	r6, r6
 80019f0:	2e01      	cmp	r6, #1
 80019f2:	f040 80aa 	bne.w	8001b4a <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80019f6:	f1b8 0f00 	cmp.w	r8, #0
 80019fa:	f000 80a7 	beq.w	8001b4c <HAL_SPI_Transmit+0x186>
 80019fe:	f1b9 0f00 	cmp.w	r9, #0
 8001a02:	f000 80a3 	beq.w	8001b4c <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a06:	2303      	movs	r3, #3
 8001a08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a10:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a14:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a18:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a1c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a1e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a20:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a22:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a24:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a26:	68a3      	ldr	r3, [r4, #8]
 8001a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2c:	d01e      	beq.n	8001a6c <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a36:	d103      	bne.n	8001a40 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a40:	68e3      	ldr	r3, [r4, #12]
 8001a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a46:	d01c      	beq.n	8001a82 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a48:	6863      	ldr	r3, [r4, #4]
 8001a4a:	b113      	cbz	r3, 8001a52 <HAL_SPI_Transmit+0x8c>
 8001a4c:	f1b9 0f01 	cmp.w	r9, #1
 8001a50:	d152      	bne.n	8001af8 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a52:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001a6a:	e045      	b.n	8001af8 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8001a6c:	6822      	ldr	r2, [r4, #0]
 8001a6e:	6813      	ldr	r3, [r2, #0]
 8001a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a74:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e7d5      	b.n	8001a2e <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a82:	6863      	ldr	r3, [r4, #4]
 8001a84:	b113      	cbz	r3, 8001a8c <HAL_SPI_Transmit+0xc6>
 8001a86:	f1b9 0f01 	cmp.w	r9, #1
 8001a8a:	d116      	bne.n	8001aba <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	8812      	ldrh	r2, [r2, #0]
 8001a92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a96:	3302      	adds	r3, #2
 8001a98:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001aa4:	e009      	b.n	8001aba <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aa6:	f7fe fda9 	bl	80005fc <HAL_GetTick>
 8001aaa:	1bc0      	subs	r0, r0, r7
 8001aac:	42a8      	cmp	r0, r5
 8001aae:	d302      	bcc.n	8001ab6 <HAL_SPI_Transmit+0xf0>
 8001ab0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ab4:	d154      	bne.n	8001b60 <HAL_SPI_Transmit+0x19a>
 8001ab6:	2d00      	cmp	r5, #0
 8001ab8:	d054      	beq.n	8001b64 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 8001aba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d02e      	beq.n	8001b20 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	f012 0f02 	tst.w	r2, #2
 8001aca:	d0ec      	beq.n	8001aa6 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001acc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ad2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ad8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001ae2:	e7ea      	b.n	8001aba <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ae4:	f7fe fd8a 	bl	80005fc <HAL_GetTick>
 8001ae8:	1bc0      	subs	r0, r0, r7
 8001aea:	42a8      	cmp	r0, r5
 8001aec:	d302      	bcc.n	8001af4 <HAL_SPI_Transmit+0x12e>
 8001aee:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001af2:	d139      	bne.n	8001b68 <HAL_SPI_Transmit+0x1a2>
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	d039      	beq.n	8001b6c <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8001af8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b183      	cbz	r3, 8001b20 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	f012 0f02 	tst.w	r2, #2
 8001b06:	d0ed      	beq.n	8001ae4 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b10:	3301      	adds	r3, #1
 8001b12:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001b14:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b16:	b292      	uxth	r2, r2
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8001b1e:	e7eb      	b.n	8001af8 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b20:	463a      	mov	r2, r7
 8001b22:	4629      	mov	r1, r5
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff fe75 	bl	8001814 <SPI_EndRxTxTransaction>
 8001b2a:	b108      	cbz	r0, 8001b30 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b30:	68a3      	ldr	r3, [r4, #8]
 8001b32:	b933      	cbnz	r3, 8001b42 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	9201      	str	r2, [sp, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b44:	b913      	cbnz	r3, 8001b4c <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b46:	2600      	movs	r6, #0
 8001b48:	e000      	b.n	8001b4c <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8001b4a:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b52:	2300      	movs	r3, #0
 8001b54:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001b58:	4630      	mov	r0, r6
 8001b5a:	b003      	add	sp, #12
 8001b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8001b60:	2603      	movs	r6, #3
 8001b62:	e7f3      	b.n	8001b4c <HAL_SPI_Transmit+0x186>
 8001b64:	2603      	movs	r6, #3
 8001b66:	e7f1      	b.n	8001b4c <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8001b68:	2603      	movs	r6, #3
 8001b6a:	e7ef      	b.n	8001b4c <HAL_SPI_Transmit+0x186>
 8001b6c:	2603      	movs	r6, #3
 8001b6e:	e7ed      	b.n	8001b4c <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8001b70:	2602      	movs	r6, #2
 8001b72:	e7f1      	b.n	8001b58 <HAL_SPI_Transmit+0x192>

08001b74 <HAL_SPI_TransmitReceive>:
{
 8001b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	461f      	mov	r7, r3
 8001b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001b7e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	f000 8110 	beq.w	8001da8 <HAL_SPI_TransmitReceive+0x234>
 8001b88:	4604      	mov	r4, r0
 8001b8a:	4688      	mov	r8, r1
 8001b8c:	4691      	mov	r9, r2
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001b94:	f7fe fd32 	bl	80005fc <HAL_GetTick>
 8001b98:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8001b9a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001b9e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001ba0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00a      	beq.n	8001bbc <HAL_SPI_TransmitReceive+0x48>
 8001ba6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001baa:	f040 80e3 	bne.w	8001d74 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bae:	68a2      	ldr	r2, [r4, #8]
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	f040 80e9 	bne.w	8001d88 <HAL_SPI_TransmitReceive+0x214>
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	f040 80e8 	bne.w	8001d8c <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bbc:	f1b8 0f00 	cmp.w	r8, #0
 8001bc0:	f000 80e6 	beq.w	8001d90 <HAL_SPI_TransmitReceive+0x21c>
 8001bc4:	f1b9 0f00 	cmp.w	r9, #0
 8001bc8:	f000 80e4 	beq.w	8001d94 <HAL_SPI_TransmitReceive+0x220>
 8001bcc:	2f00      	cmp	r7, #0
 8001bce:	f000 80e3 	beq.w	8001d98 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bd2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d002      	beq.n	8001be2 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bdc:	2305      	movs	r3, #5
 8001bde:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001be6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001bea:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bec:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bee:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bf2:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bf4:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8001bf6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bf8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c02:	d103      	bne.n	8001c0c <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c0a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c0c:	68e3      	ldr	r3, [r4, #12]
 8001c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c12:	d011      	beq.n	8001c38 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c14:	6863      	ldr	r3, [r4, #4]
 8001c16:	b10b      	cbz	r3, 8001c1c <HAL_SPI_TransmitReceive+0xa8>
 8001c18:	2f01      	cmp	r7, #1
 8001c1a:	d10b      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c26:	3301      	adds	r3, #1
 8001c28:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001c34:	2701      	movs	r7, #1
 8001c36:	e06b      	b.n	8001d10 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c38:	6863      	ldr	r3, [r4, #4]
 8001c3a:	b10b      	cbz	r3, 8001c40 <HAL_SPI_TransmitReceive+0xcc>
 8001c3c:	2f01      	cmp	r7, #1
 8001c3e:	d10b      	bne.n	8001c58 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	8812      	ldrh	r2, [r2, #0]
 8001c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001c58:	2701      	movs	r7, #1
 8001c5a:	e01c      	b.n	8001c96 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	f012 0f01 	tst.w	r2, #1
 8001c64:	d00e      	beq.n	8001c84 <HAL_SPI_TransmitReceive+0x110>
 8001c66:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	b15a      	cbz	r2, 8001c84 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c74:	3302      	adds	r3, #2
 8001c76:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001c78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001c82:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c84:	f7fe fcba 	bl	80005fc <HAL_GetTick>
 8001c88:	1b80      	subs	r0, r0, r6
 8001c8a:	42a8      	cmp	r0, r5
 8001c8c:	d303      	bcc.n	8001c96 <HAL_SPI_TransmitReceive+0x122>
 8001c8e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c92:	f040 8083 	bne.w	8001d9c <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b91b      	cbnz	r3, 8001ca4 <HAL_SPI_TransmitReceive+0x130>
 8001c9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d053      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	f012 0f02 	tst.w	r2, #2
 8001cac:	d0d6      	beq.n	8001c5c <HAL_SPI_TransmitReceive+0xe8>
 8001cae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	2a00      	cmp	r2, #0
 8001cb4:	d0d2      	beq.n	8001c5c <HAL_SPI_TransmitReceive+0xe8>
 8001cb6:	2f00      	cmp	r7, #0
 8001cb8:	d0d0      	beq.n	8001c5c <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cbc:	8812      	ldrh	r2, [r2, #0]
 8001cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001cc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001cd0:	2700      	movs	r7, #0
 8001cd2:	e7c3      	b.n	8001c5c <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	f012 0f01 	tst.w	r2, #1
 8001cdc:	d00e      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x188>
 8001cde:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	b15a      	cbz	r2, 8001cfc <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ce8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cec:	3301      	adds	r3, #1
 8001cee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001cf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001cfa:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cfc:	f7fe fc7e 	bl	80005fc <HAL_GetTick>
 8001d00:	1b83      	subs	r3, r0, r6
 8001d02:	42ab      	cmp	r3, r5
 8001d04:	d302      	bcc.n	8001d0c <HAL_SPI_TransmitReceive+0x198>
 8001d06:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d0a:	d149      	bne.n	8001da0 <HAL_SPI_TransmitReceive+0x22c>
 8001d0c:	2d00      	cmp	r5, #0
 8001d0e:	d049      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b913      	cbnz	r3, 8001d1c <HAL_SPI_TransmitReceive+0x1a8>
 8001d16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b1bb      	cbz	r3, 8001d4c <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	f012 0f02 	tst.w	r2, #2
 8001d24:	d0d6      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x160>
 8001d26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	2a00      	cmp	r2, #0
 8001d2c:	d0d2      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x160>
 8001d2e:	2f00      	cmp	r7, #0
 8001d30:	d0d0      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001d38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001d48:	2700      	movs	r7, #0
 8001d4a:	e7c3      	b.n	8001cd4 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d4c:	4632      	mov	r2, r6
 8001d4e:	4629      	mov	r1, r5
 8001d50:	4620      	mov	r0, r4
 8001d52:	f7ff fd5f 	bl	8001814 <SPI_EndRxTxTransaction>
 8001d56:	b948      	cbnz	r0, 8001d6c <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d58:	68a3      	ldr	r3, [r4, #8]
 8001d5a:	b963      	cbnz	r3, 8001d76 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	9201      	str	r2, [sp, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	9b01      	ldr	r3, [sp, #4]
 8001d6a:	e004      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001d70:	2001      	movs	r0, #1
    goto error;
 8001d72:	e000      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8001d74:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d82:	b003      	add	sp, #12
 8001d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8001d88:	2002      	movs	r0, #2
 8001d8a:	e7f4      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	e7f2      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
 8001d92:	e7f0      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
 8001d94:	2001      	movs	r0, #1
 8001d96:	e7ee      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
 8001d98:	2001      	movs	r0, #1
 8001d9a:	e7ec      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	e7ea      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8001da0:	2003      	movs	r0, #3
 8001da2:	e7e8      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
 8001da4:	2003      	movs	r0, #3
 8001da6:	e7e6      	b.n	8001d76 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8001da8:	2002      	movs	r0, #2
 8001daa:	e7ea      	b.n	8001d82 <HAL_SPI_TransmitReceive+0x20e>

08001dac <HAL_SPI_Receive>:
{
 8001dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001db0:	b083      	sub	sp, #12
 8001db2:	4604      	mov	r4, r0
 8001db4:	4688      	mov	r8, r1
 8001db6:	4691      	mov	r9, r2
 8001db8:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001dba:	6843      	ldr	r3, [r0, #4]
 8001dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dc0:	d038      	beq.n	8001e34 <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8001dc2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	f000 80a8 	beq.w	8001f1c <HAL_SPI_Receive+0x170>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001dd2:	f7fe fc13 	bl	80005fc <HAL_GetTick>
 8001dd6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd8:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8001ddc:	b2f6      	uxtb	r6, r6
 8001dde:	2e01      	cmp	r6, #1
 8001de0:	f040 8089 	bne.w	8001ef6 <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001de4:	f1b8 0f00 	cmp.w	r8, #0
 8001de8:	f000 8086 	beq.w	8001ef8 <HAL_SPI_Receive+0x14c>
 8001dec:	f1b9 0f00 	cmp.w	r9, #0
 8001df0:	f000 8082 	beq.w	8001ef8 <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001df4:	2304      	movs	r3, #4
 8001df6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001dfe:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e02:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e06:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e0a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e0c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e0e:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e10:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e12:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e14:	68a3      	ldr	r3, [r4, #8]
 8001e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e1a:	d018      	beq.n	8001e4e <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e24:	d103      	bne.n	8001e2e <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e2c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e2e:	68e3      	ldr	r3, [r4, #12]
 8001e30:	b313      	cbz	r3, 8001e78 <HAL_SPI_Receive+0xcc>
 8001e32:	e040      	b.n	8001eb6 <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e34:	6883      	ldr	r3, [r0, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1c3      	bne.n	8001dc2 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e40:	9500      	str	r5, [sp, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	460a      	mov	r2, r1
 8001e46:	f7ff fe95 	bl	8001b74 <HAL_SPI_TransmitReceive>
 8001e4a:	4606      	mov	r6, r0
 8001e4c:	e05a      	b.n	8001f04 <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 8001e4e:	6822      	ldr	r2, [r4, #0]
 8001e50:	6813      	ldr	r3, [r2, #0]
 8001e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e56:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e7db      	b.n	8001e1c <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e64:	f7fe fbca 	bl	80005fc <HAL_GetTick>
 8001e68:	1bc0      	subs	r0, r0, r7
 8001e6a:	42a8      	cmp	r0, r5
 8001e6c:	d302      	bcc.n	8001e74 <HAL_SPI_Receive+0xc8>
 8001e6e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001e72:	d14b      	bne.n	8001f0c <HAL_SPI_Receive+0x160>
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	d04b      	beq.n	8001f10 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 8001e78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02e      	beq.n	8001ede <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	f012 0f01 	tst.w	r2, #1
 8001e88:	d0ec      	beq.n	8001e64 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e8c:	7b1b      	ldrb	r3, [r3, #12]
 8001e8e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e92:	3301      	adds	r3, #1
 8001e94:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001e96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001ea0:	e7ea      	b.n	8001e78 <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea2:	f7fe fbab 	bl	80005fc <HAL_GetTick>
 8001ea6:	1bc0      	subs	r0, r0, r7
 8001ea8:	42a8      	cmp	r0, r5
 8001eaa:	d302      	bcc.n	8001eb2 <HAL_SPI_Receive+0x106>
 8001eac:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001eb0:	d130      	bne.n	8001f14 <HAL_SPI_Receive+0x168>
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	d030      	beq.n	8001f18 <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 8001eb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b183      	cbz	r3, 8001ede <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	f012 0f01 	tst.w	r2, #1
 8001ec4:	d0ed      	beq.n	8001ea2 <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ece:	3302      	adds	r3, #2
 8001ed0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001ed2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8001edc:	e7eb      	b.n	8001eb6 <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ede:	463a      	mov	r2, r7
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f7ff fcca 	bl	800187c <SPI_EndRxTransaction>
 8001ee8:	b108      	cbz	r0, 8001eee <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eea:	2320      	movs	r3, #32
 8001eec:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ef0:	b913      	cbnz	r3, 8001ef8 <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ef2:	2600      	movs	r6, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 8001ef6:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001efe:	2300      	movs	r3, #0
 8001f00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001f04:	4630      	mov	r0, r6
 8001f06:	b003      	add	sp, #12
 8001f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8001f0c:	2603      	movs	r6, #3
 8001f0e:	e7f3      	b.n	8001ef8 <HAL_SPI_Receive+0x14c>
 8001f10:	2603      	movs	r6, #3
 8001f12:	e7f1      	b.n	8001ef8 <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 8001f14:	2603      	movs	r6, #3
 8001f16:	e7ef      	b.n	8001ef8 <HAL_SPI_Receive+0x14c>
 8001f18:	2603      	movs	r6, #3
 8001f1a:	e7ed      	b.n	8001ef8 <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 8001f1c:	2602      	movs	r6, #2
 8001f1e:	e7f1      	b.n	8001f04 <HAL_SPI_Receive+0x158>

08001f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f24:	6802      	ldr	r2, [r0, #0]
 8001f26:	6913      	ldr	r3, [r2, #16]
 8001f28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2c:	68c1      	ldr	r1, [r0, #12]
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f32:	6883      	ldr	r3, [r0, #8]
 8001f34:	6902      	ldr	r2, [r0, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	6942      	ldr	r2, [r0, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	69c2      	ldr	r2, [r0, #28]
 8001f3e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001f40:	6801      	ldr	r1, [r0, #0]
 8001f42:	68cb      	ldr	r3, [r1, #12]
 8001f44:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f48:	f023 030c 	bic.w	r3, r3, #12
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f50:	6802      	ldr	r2, [r0, #0]
 8001f52:	6953      	ldr	r3, [r2, #20]
 8001f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f58:	6981      	ldr	r1, [r0, #24]
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	4a34      	ldr	r2, [pc, #208]	; (8002034 <UART_SetConfig+0x114>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d006      	beq.n	8001f74 <UART_SetConfig+0x54>
 8001f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d002      	beq.n	8001f74 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f6e:	f7ff fae5 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8001f72:	e001      	b.n	8001f78 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f74:	f7ff faf2 	bl	800155c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f78:	69e3      	ldr	r3, [r4, #28]
 8001f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7e:	d02a      	beq.n	8001fd6 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f80:	2600      	movs	r6, #0
 8001f82:	1805      	adds	r5, r0, r0
 8001f84:	eb46 0106 	adc.w	r1, r6, r6
 8001f88:	182d      	adds	r5, r5, r0
 8001f8a:	eb46 0101 	adc.w	r1, r6, r1
 8001f8e:	00cb      	lsls	r3, r1, #3
 8001f90:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001f94:	00ea      	lsls	r2, r5, #3
 8001f96:	4615      	mov	r5, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6863      	ldr	r3, [r4, #4]
 8001f9c:	009a      	lsls	r2, r3, #2
 8001f9e:	0f9b      	lsrs	r3, r3, #30
 8001fa0:	1828      	adds	r0, r5, r0
 8001fa2:	eb46 0101 	adc.w	r1, r6, r1
 8001fa6:	f7fe f963 	bl	8000270 <__aeabi_uldivmod>
 8001faa:	4d23      	ldr	r5, [pc, #140]	; (8002038 <UART_SetConfig+0x118>)
 8001fac:	fba5 3200 	umull	r3, r2, r5, r0
 8001fb0:	0951      	lsrs	r1, r2, #5
 8001fb2:	2364      	movs	r3, #100	; 0x64
 8001fb4:	fb03 0311 	mls	r3, r3, r1, r0
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	3332      	adds	r3, #50	; 0x32
 8001fbc:	fba5 2303 	umull	r2, r3, r5, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	6821      	ldr	r1, [r4, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
  }
}
 8001fd4:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd6:	2600      	movs	r6, #0
 8001fd8:	1805      	adds	r5, r0, r0
 8001fda:	eb46 0106 	adc.w	r1, r6, r6
 8001fde:	182d      	adds	r5, r5, r0
 8001fe0:	eb46 0101 	adc.w	r1, r6, r1
 8001fe4:	00cb      	lsls	r3, r1, #3
 8001fe6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001fea:	00ea      	lsls	r2, r5, #3
 8001fec:	4615      	mov	r5, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6862      	ldr	r2, [r4, #4]
 8001ff2:	4633      	mov	r3, r6
 8001ff4:	1892      	adds	r2, r2, r2
 8001ff6:	eb46 0303 	adc.w	r3, r6, r3
 8001ffa:	1828      	adds	r0, r5, r0
 8001ffc:	eb46 0101 	adc.w	r1, r6, r1
 8002000:	f7fe f936 	bl	8000270 <__aeabi_uldivmod>
 8002004:	4d0c      	ldr	r5, [pc, #48]	; (8002038 <UART_SetConfig+0x118>)
 8002006:	fba5 3200 	umull	r3, r2, r5, r0
 800200a:	0951      	lsrs	r1, r2, #5
 800200c:	2364      	movs	r3, #100	; 0x64
 800200e:	fb03 0311 	mls	r3, r3, r1, r0
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	3332      	adds	r3, #50	; 0x32
 8002016:	fba5 2303 	umull	r2, r3, r5, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	005a      	lsls	r2, r3, #1
 800201e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002022:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	6821      	ldr	r1, [r4, #0]
 800202c:	4413      	add	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
 8002030:	e7d0      	b.n	8001fd4 <UART_SetConfig+0xb4>
 8002032:	bf00      	nop
 8002034:	40011000 	.word	0x40011000
 8002038:	51eb851f 	.word	0x51eb851f

0800203c <UART_WaitOnFlagUntilTimeout>:
{
 800203c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002040:	4605      	mov	r5, r0
 8002042:	460f      	mov	r7, r1
 8002044:	4616      	mov	r6, r2
 8002046:	4699      	mov	r9, r3
 8002048:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204c:	682c      	ldr	r4, [r5, #0]
 800204e:	6824      	ldr	r4, [r4, #0]
 8002050:	ea37 0304 	bics.w	r3, r7, r4
 8002054:	bf0c      	ite	eq
 8002056:	2401      	moveq	r4, #1
 8002058:	2400      	movne	r4, #0
 800205a:	42b4      	cmp	r4, r6
 800205c:	d11f      	bne.n	800209e <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800205e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002062:	d0f3      	beq.n	800204c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002064:	f1b8 0f00 	cmp.w	r8, #0
 8002068:	d005      	beq.n	8002076 <UART_WaitOnFlagUntilTimeout+0x3a>
 800206a:	f7fe fac7 	bl	80005fc <HAL_GetTick>
 800206e:	eba0 0009 	sub.w	r0, r0, r9
 8002072:	4540      	cmp	r0, r8
 8002074:	d9ea      	bls.n	800204c <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002076:	682a      	ldr	r2, [r5, #0]
 8002078:	68d3      	ldr	r3, [r2, #12]
 800207a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800207e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002080:	682a      	ldr	r2, [r5, #0]
 8002082:	6953      	ldr	r3, [r2, #20]
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800208a:	2320      	movs	r3, #32
 800208c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002090:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002094:	2300      	movs	r3, #0
 8002096:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
 800209c:	e000      	b.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 800209e:	2000      	movs	r0, #0
}
 80020a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020a4 <HAL_UART_Init>:
  if (huart == NULL)
 80020a4:	b358      	cbz	r0, 80020fe <HAL_UART_Init+0x5a>
{
 80020a6:	b510      	push	{r4, lr}
 80020a8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80020aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020ae:	b30b      	cbz	r3, 80020f4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80020b0:	2324      	movs	r3, #36	; 0x24
 80020b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	68d3      	ldr	r3, [r2, #12]
 80020ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7ff ff2d 	bl	8001f20 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	6913      	ldr	r3, [r2, #16]
 80020ca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020ce:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020d0:	6822      	ldr	r2, [r4, #0]
 80020d2:	6953      	ldr	r3, [r2, #20]
 80020d4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80020d8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80020da:	6822      	ldr	r2, [r4, #0]
 80020dc:	68d3      	ldr	r3, [r2, #12]
 80020de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	2000      	movs	r0, #0
 80020e6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	2320      	movs	r3, #32
 80020ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80020f2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80020f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80020f8:	f000 fba0 	bl	800283c <HAL_UART_MspInit>
 80020fc:	e7d8      	b.n	80020b0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
}
 8002100:	4770      	bx	lr

08002102 <HAL_UART_Transmit>:
{
 8002102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800210a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b20      	cmp	r3, #32
 8002112:	d154      	bne.n	80021be <HAL_UART_Transmit+0xbc>
 8002114:	4604      	mov	r4, r0
 8002116:	460d      	mov	r5, r1
 8002118:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800211a:	2900      	cmp	r1, #0
 800211c:	d053      	beq.n	80021c6 <HAL_UART_Transmit+0xc4>
 800211e:	2a00      	cmp	r2, #0
 8002120:	d053      	beq.n	80021ca <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002122:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002126:	2b01      	cmp	r3, #1
 8002128:	d051      	beq.n	80021ce <HAL_UART_Transmit+0xcc>
 800212a:	2301      	movs	r3, #1
 800212c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002130:	2300      	movs	r3, #0
 8002132:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002134:	2321      	movs	r3, #33	; 0x21
 8002136:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800213a:	f7fe fa5f 	bl	80005fc <HAL_GetTick>
 800213e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002140:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002144:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002148:	68a3      	ldr	r3, [r4, #8]
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d005      	beq.n	800215c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8002150:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002154:	2300      	movs	r3, #0
 8002156:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800215a:	e012      	b.n	8002182 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800215c:	6923      	ldr	r3, [r4, #16]
 800215e:	b113      	cbz	r3, 8002166 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8002160:	f04f 0800 	mov.w	r8, #0
 8002164:	e7f6      	b.n	8002154 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8002166:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002168:	2500      	movs	r5, #0
 800216a:	e7f3      	b.n	8002154 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800216c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002170:	6822      	ldr	r2, [r4, #0]
 8002172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002176:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002178:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800217a:	b292      	uxth	r2, r2
 800217c:	3a01      	subs	r2, #1
 800217e:	b292      	uxth	r2, r2
 8002180:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002182:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002184:	b29b      	uxth	r3, r3
 8002186:	b173      	cbz	r3, 80021a6 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002188:	9600      	str	r6, [sp, #0]
 800218a:	463b      	mov	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	2180      	movs	r1, #128	; 0x80
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff ff53 	bl	800203c <UART_WaitOnFlagUntilTimeout>
 8002196:	b9e0      	cbnz	r0, 80021d2 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8002198:	2d00      	cmp	r5, #0
 800219a:	d0e7      	beq.n	800216c <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800219c:	f815 2b01 	ldrb.w	r2, [r5], #1
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021a4:	e7e8      	b.n	8002178 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a6:	9600      	str	r6, [sp, #0]
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	2140      	movs	r1, #64	; 0x40
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7ff ff44 	bl	800203c <UART_WaitOnFlagUntilTimeout>
 80021b4:	b978      	cbnz	r0, 80021d6 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80021b6:	2320      	movs	r3, #32
 80021b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80021bc:	e000      	b.n	80021c0 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80021be:	2002      	movs	r0, #2
}
 80021c0:	b002      	add	sp, #8
 80021c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
 80021c8:	e7fa      	b.n	80021c0 <HAL_UART_Transmit+0xbe>
 80021ca:	2001      	movs	r0, #1
 80021cc:	e7f8      	b.n	80021c0 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80021ce:	2002      	movs	r0, #2
 80021d0:	e7f6      	b.n	80021c0 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
 80021d4:	e7f4      	b.n	80021c0 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80021d6:	2003      	movs	r0, #3
 80021d8:	e7f2      	b.n	80021c0 <HAL_UART_Transmit+0xbe>

080021da <HAL_UART_Receive>:
{
 80021da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80021e2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d15c      	bne.n	80022a6 <HAL_UART_Receive+0xcc>
 80021ec:	4604      	mov	r4, r0
 80021ee:	460d      	mov	r5, r1
 80021f0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80021f2:	2900      	cmp	r1, #0
 80021f4:	d05b      	beq.n	80022ae <HAL_UART_Receive+0xd4>
 80021f6:	2a00      	cmp	r2, #0
 80021f8:	d05b      	beq.n	80022b2 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 80021fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d059      	beq.n	80022b6 <HAL_UART_Receive+0xdc>
 8002202:	2301      	movs	r3, #1
 8002204:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	2300      	movs	r3, #0
 800220a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800220c:	2222      	movs	r2, #34	; 0x22
 800220e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002212:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8002214:	f7fe f9f2 	bl	80005fc <HAL_GetTick>
 8002218:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800221a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800221e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002222:	68a3      	ldr	r3, [r4, #8]
 8002224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002228:	d005      	beq.n	8002236 <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 800222a:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800222e:	2300      	movs	r3, #0
 8002230:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8002234:	e017      	b.n	8002266 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002236:	6923      	ldr	r3, [r4, #16]
 8002238:	b113      	cbz	r3, 8002240 <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 800223a:	f04f 0800 	mov.w	r8, #0
 800223e:	e7f6      	b.n	800222e <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 8002240:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002242:	2500      	movs	r5, #0
 8002244:	e7f3      	b.n	800222e <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224e:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8002252:	e003      	b.n	800225c <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800225a:	3501      	adds	r5, #1
      huart->RxXferCount--;
 800225c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800225e:	b292      	uxth	r2, r2
 8002260:	3a01      	subs	r2, #1
 8002262:	b292      	uxth	r2, r2
 8002264:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002266:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002268:	b29b      	uxth	r3, r3
 800226a:	b1bb      	cbz	r3, 800229c <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800226c:	9600      	str	r6, [sp, #0]
 800226e:	463b      	mov	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	2120      	movs	r1, #32
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff fee1 	bl	800203c <UART_WaitOnFlagUntilTimeout>
 800227a:	b9f0      	cbnz	r0, 80022ba <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 800227c:	2d00      	cmp	r5, #0
 800227e:	d0e2      	beq.n	8002246 <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002280:	68a3      	ldr	r3, [r4, #8]
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002286:	d0e5      	beq.n	8002254 <HAL_UART_Receive+0x7a>
 8002288:	b913      	cbnz	r3, 8002290 <HAL_UART_Receive+0xb6>
 800228a:	6923      	ldr	r3, [r4, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0e1      	beq.n	8002254 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002298:	702b      	strb	r3, [r5, #0]
 800229a:	e7de      	b.n	800225a <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 800229c:	2320      	movs	r3, #32
 800229e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80022a2:	2000      	movs	r0, #0
 80022a4:	e000      	b.n	80022a8 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 80022a6:	2002      	movs	r0, #2
}
 80022a8:	b002      	add	sp, #8
 80022aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80022ae:	2001      	movs	r0, #1
 80022b0:	e7fa      	b.n	80022a8 <HAL_UART_Receive+0xce>
 80022b2:	2001      	movs	r0, #1
 80022b4:	e7f8      	b.n	80022a8 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 80022b6:	2002      	movs	r0, #2
 80022b8:	e7f6      	b.n	80022a8 <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 80022ba:	2003      	movs	r0, #3
 80022bc:	e7f4      	b.n	80022a8 <HAL_UART_Receive+0xce>
	...

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	2400      	movs	r4, #0
 80022c8:	9407      	str	r4, [sp, #28]
 80022ca:	9408      	str	r4, [sp, #32]
 80022cc:	9409      	str	r4, [sp, #36]	; 0x24
 80022ce:	940a      	str	r4, [sp, #40]	; 0x28
 80022d0:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d2:	9401      	str	r4, [sp, #4]
 80022d4:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <MX_GPIO_Init+0x1d4>)
 80022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d8:	f042 0210 	orr.w	r2, r2, #16
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
 80022de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e0:	f002 0210 	and.w	r2, r2, #16
 80022e4:	9201      	str	r2, [sp, #4]
 80022e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e8:	9402      	str	r4, [sp, #8]
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
 80022f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f4:	f002 0204 	and.w	r2, r2, #4
 80022f8:	9202      	str	r2, [sp, #8]
 80022fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fc:	9403      	str	r4, [sp, #12]
 80022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800230c:	9203      	str	r2, [sp, #12]
 800230e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	9404      	str	r4, [sp, #16]
 8002312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
 800231a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800231c:	f002 0201 	and.w	r2, r2, #1
 8002320:	9204      	str	r2, [sp, #16]
 8002322:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	9405      	str	r4, [sp, #20]
 8002326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002328:	f042 0202 	orr.w	r2, r2, #2
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
 800232e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002330:	f002 0202 	and.w	r2, r2, #2
 8002334:	9205      	str	r2, [sp, #20]
 8002336:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002338:	9406      	str	r4, [sp, #24]
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	f042 0208 	orr.w	r2, r2, #8
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	9306      	str	r3, [sp, #24]
 800234a:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI_GPIO_Port, CS_SPI_Pin, GPIO_PIN_SET);
 800234c:	4e52      	ldr	r6, [pc, #328]	; (8002498 <MX_GPIO_Init+0x1d8>)
 800234e:	2201      	movs	r2, #1
 8002350:	2104      	movs	r1, #4
 8002352:	4630      	mov	r0, r6
 8002354:	f7fe fac0 	bl	80008d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002358:	4622      	mov	r2, r4
 800235a:	2108      	movs	r1, #8
 800235c:	4630      	mov	r0, r6
 800235e:	f7fe fabb 	bl	80008d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002362:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80024a4 <MX_GPIO_Init+0x1e4>
 8002366:	2201      	movs	r2, #1
 8002368:	4611      	mov	r1, r2
 800236a:	4640      	mov	r0, r8
 800236c:	f7fe fab4 	bl	80008d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002370:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80024a8 <MX_GPIO_Init+0x1e8>
 8002374:	4622      	mov	r2, r4
 8002376:	f24f 0110 	movw	r1, #61456	; 0xf010
 800237a:	4648      	mov	r0, r9
 800237c:	f7fe faac 	bl	80008d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_SPI_Pin CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_SPI_Pin|CS_I2C_SPI_Pin;
 8002380:	230c      	movs	r3, #12
 8002382:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2501      	movs	r5, #1
 8002386:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238c:	a907      	add	r1, sp, #28
 800238e:	4630      	mov	r0, r6
 8002390:	f7fe f9b8 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002394:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800239c:	a907      	add	r1, sp, #28
 800239e:	4640      	mov	r0, r8
 80023a0:	f7fe f9b0 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80023a4:	2308      	movs	r3, #8
 80023a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2702      	movs	r7, #2
 80023aa:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b0:	f04f 0a05 	mov.w	sl, #5
 80023b4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80023b8:	a907      	add	r1, sp, #28
 80023ba:	4640      	mov	r0, r8
 80023bc:	f7fe f9a2 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80023c0:	f04f 0b04 	mov.w	fp, #4
 80023c4:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f5a8 6880 	sub.w	r8, r8, #1024	; 0x400
 80023d0:	a907      	add	r1, sp, #28
 80023d2:	4640      	mov	r0, r8
 80023d4:	f7fe f996 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80023d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023dc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023e4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80023e8:	a907      	add	r1, sp, #28
 80023ea:	4640      	mov	r0, r8
 80023ec:	f7fe f98a 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023f0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80023f4:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fc:	a907      	add	r1, sp, #28
 80023fe:	4648      	mov	r0, r9
 8002400:	f7fe f980 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002408:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800240e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80024ac <MX_GPIO_Init+0x1ec>
 8002412:	a907      	add	r1, sp, #28
 8002414:	4650      	mov	r0, sl
 8002416:	f7fe f975 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800241a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800241e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002426:	230a      	movs	r3, #10
 8002428:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	a907      	add	r1, sp, #28
 800242c:	4650      	mov	r0, sl
 800242e:	f7fe f969 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002432:	2320      	movs	r3, #32
 8002434:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800243a:	a907      	add	r1, sp, #28
 800243c:	4648      	mov	r0, r9
 800243e:	f7fe f961 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002442:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002446:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002448:	2312      	movs	r3, #18
 800244a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002450:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	a907      	add	r1, sp, #28
 8002456:	4640      	mov	r0, r8
 8002458:	f7fe f954 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800245c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_GPIO_Init+0x1dc>)
 8002460:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002464:	a907      	add	r1, sp, #28
 8002466:	4630      	mov	r0, r6
 8002468:	f7fe f94c 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800246c:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_GPIO_Init+0x1e0>)
 8002470:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002474:	a907      	add	r1, sp, #28
 8002476:	4630      	mov	r0, r6
 8002478:	f7fe f944 	bl	8000704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800247c:	4622      	mov	r2, r4
 800247e:	4621      	mov	r1, r4
 8002480:	2006      	movs	r0, #6
 8002482:	f7fe f8e7 	bl	8000654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002486:	2006      	movs	r0, #6
 8002488:	f7fe f918 	bl	80006bc <HAL_NVIC_EnableIRQ>

}
 800248c:	b00d      	add	sp, #52	; 0x34
 800248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40021000 	.word	0x40021000
 800249c:	10110000 	.word	0x10110000
 80024a0:	10120000 	.word	0x10120000
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020c00 	.word	0x40020c00
 80024ac:	40020000 	.word	0x40020000

080024b0 <MX_I2S3_Init>:
{
 80024b0:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 80024b2:	4809      	ldr	r0, [pc, #36]	; (80024d8 <MX_I2S3_Init+0x28>)
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_I2S3_Init+0x2c>)
 80024b6:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80024b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024bc:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80024be:	2300      	movs	r3, #0
 80024c0:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80024c2:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80024c4:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80024c6:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <MX_I2S3_Init+0x30>)
 80024c8:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80024ca:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80024cc:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80024ce:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80024d0:	f7fe fa20 	bl	8000914 <HAL_I2S_Init>
}
 80024d4:	bd08      	pop	{r3, pc}
 80024d6:	bf00      	nop
 80024d8:	20000144 	.word	0x20000144
 80024dc:	40003c00 	.word	0x40003c00
 80024e0:	00017700 	.word	0x00017700

080024e4 <MX_SPI1_Init>:
{
 80024e4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80024e6:	480c      	ldr	r0, [pc, #48]	; (8002518 <MX_SPI1_Init+0x34>)
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_SPI1_Init+0x38>)
 80024ea:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 80024f0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024f2:	2300      	movs	r3, #0
 80024f4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024fa:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002500:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002502:	2218      	movs	r2, #24
 8002504:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002506:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002508:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800250c:	230a      	movs	r3, #10
 800250e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002510:	f7ff f9fa 	bl	8001908 <HAL_SPI_Init>
}
 8002514:	bd08      	pop	{r3, pc}
 8002516:	bf00      	nop
 8002518:	200000a8 	.word	0x200000a8
 800251c:	40013000 	.word	0x40013000

08002520 <MX_USART2_UART_Init>:
{
 8002520:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002522:	4808      	ldr	r0, [pc, #32]	; (8002544 <MX_USART2_UART_Init+0x24>)
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <MX_USART2_UART_Init+0x28>)
 8002526:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002528:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800252c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	2300      	movs	r3, #0
 8002530:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002532:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002534:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002536:	220c      	movs	r2, #12
 8002538:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253e:	f7ff fdb1 	bl	80020a4 <HAL_UART_Init>
}
 8002542:	bd08      	pop	{r3, pc}
 8002544:	20000100 	.word	0x20000100
 8002548:	40004400 	.word	0x40004400

0800254c <SystemClock_Config>:
{
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002550:	2230      	movs	r2, #48	; 0x30
 8002552:	2100      	movs	r1, #0
 8002554:	eb0d 0002 	add.w	r0, sp, r2
 8002558:	f000 fa86 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800255c:	2400      	movs	r4, #0
 800255e:	9407      	str	r4, [sp, #28]
 8002560:	9408      	str	r4, [sp, #32]
 8002562:	9409      	str	r4, [sp, #36]	; 0x24
 8002564:	940a      	str	r4, [sp, #40]	; 0x28
 8002566:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002568:	9403      	str	r4, [sp, #12]
 800256a:	9404      	str	r4, [sp, #16]
 800256c:	9405      	str	r4, [sp, #20]
 800256e:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	9401      	str	r4, [sp, #4]
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <SystemClock_Config+0xa8>)
 8002574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002576:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002586:	9402      	str	r4, [sp, #8]
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <SystemClock_Config+0xac>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800259c:	2601      	movs	r6, #1
 800259e:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	2502      	movs	r5, #2
 80025a8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ae:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025b0:	2308      	movs	r3, #8
 80025b2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80025b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80025b8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025ba:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025bc:	2307      	movs	r3, #7
 80025be:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c0:	a80c      	add	r0, sp, #48	; 0x30
 80025c2:	f7fe fca3 	bl	8000f0c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c6:	230f      	movs	r3, #15
 80025c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ca:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025cc:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025d2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025da:	2105      	movs	r1, #5
 80025dc:	a807      	add	r0, sp, #28
 80025de:	f7fe fef7 	bl	80013d0 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80025e2:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80025e4:	23c0      	movs	r3, #192	; 0xc0
 80025e6:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80025e8:	9505      	str	r5, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ea:	a803      	add	r0, sp, #12
 80025ec:	f7fe ffc6 	bl	800157c <HAL_RCCEx_PeriphCLKConfig>
}
 80025f0:	b018      	add	sp, #96	; 0x60
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000

080025fc <main>:
{
 80025fc:	b508      	push	{r3, lr}
  HAL_Init();
 80025fe:	f7fd ffd7 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 8002602:	f7ff ffa3 	bl	800254c <SystemClock_Config>
  MX_GPIO_Init();
 8002606:	f7ff fe5b 	bl	80022c0 <MX_GPIO_Init>
  MX_I2S3_Init();
 800260a:	f7ff ff51 	bl	80024b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800260e:	f7ff ff69 	bl	80024e4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002612:	f7ff ff85 	bl	8002520 <MX_USART2_UART_Init>
	auchSpiTxBuf[0] = 0x20;   // Control Reg 0x20
 8002616:	4c2f      	ldr	r4, [pc, #188]	; (80026d4 <main+0xd8>)
 8002618:	2320      	movs	r3, #32
 800261a:	7023      	strb	r3, [r4, #0]
	auchSpiTxBuf[1] = 0x11;   // Sampling at 3.5 Hz, X accelerometer
 800261c:	2311      	movs	r3, #17
 800261e:	7063      	strb	r3, [r4, #1]
	HAL_GPIO_WritePin(GPIOE, SPI_CS, GPIO_PIN_RESET);
 8002620:	4d2d      	ldr	r5, [pc, #180]	; (80026d8 <main+0xdc>)
 8002622:	2200      	movs	r2, #0
 8002624:	2108      	movs	r1, #8
 8002626:	4628      	mov	r0, r5
 8002628:	f7fe f956 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, auchSpiTxBuf, 2, 50);  // Send the set up command.
 800262c:	4e2b      	ldr	r6, [pc, #172]	; (80026dc <main+0xe0>)
 800262e:	2332      	movs	r3, #50	; 0x32
 8002630:	2202      	movs	r2, #2
 8002632:	4621      	mov	r1, r4
 8002634:	4630      	mov	r0, r6
 8002636:	f7ff f9c6 	bl	80019c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, SPI_CS, GPIO_PIN_SET);
 800263a:	2201      	movs	r2, #1
 800263c:	2108      	movs	r1, #8
 800263e:	4628      	mov	r0, r5
 8002640:	f7fe f94a 	bl	80008d8 <HAL_GPIO_WritePin>
	auchSpiTxBuf[0] = 0x20 | SPI_RD;   // Control Reg 0x20 to be read
 8002644:	23a0      	movs	r3, #160	; 0xa0
 8002646:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, SPI_CS, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	2108      	movs	r1, #8
 800264c:	4628      	mov	r0, r5
 800264e:	f7fe f943 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, auchSpiTxBuf, 1, 50);
 8002652:	2332      	movs	r3, #50	; 0x32
 8002654:	2201      	movs	r2, #1
 8002656:	4621      	mov	r1, r4
 8002658:	4630      	mov	r0, r6
 800265a:	f7ff f9b4 	bl	80019c6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, auchSpiRxBuf, 1, 50);
 800265e:	4c20      	ldr	r4, [pc, #128]	; (80026e0 <main+0xe4>)
 8002660:	2332      	movs	r3, #50	; 0x32
 8002662:	2201      	movs	r2, #1
 8002664:	4621      	mov	r1, r4
 8002666:	4630      	mov	r0, r6
 8002668:	f7ff fba0 	bl	8001dac <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, SPI_CS, GPIO_PIN_SET);
 800266c:	2201      	movs	r2, #1
 800266e:	2108      	movs	r1, #8
 8002670:	4628      	mov	r0, r5
 8002672:	f7fe f931 	bl	80008d8 <HAL_GPIO_WritePin>
	printf("Control value read = %d\n", auchSpiRxBuf[0]);
 8002676:	7821      	ldrb	r1, [r4, #0]
 8002678:	481a      	ldr	r0, [pc, #104]	; (80026e4 <main+0xe8>)
 800267a:	f000 f9fd 	bl	8002a78 <iprintf>
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800267e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002682:	4819      	ldr	r0, [pc, #100]	; (80026e8 <main+0xec>)
 8002684:	f7fe f92e 	bl	80008e4 <HAL_GPIO_TogglePin>
    auchSpiTxBuf[0] = 0x29 | SPI_RD;   // Control Reg 0x29 to be read
 8002688:	4c12      	ldr	r4, [pc, #72]	; (80026d4 <main+0xd8>)
 800268a:	23a9      	movs	r3, #169	; 0xa9
 800268c:	7023      	strb	r3, [r4, #0]
    HAL_GPIO_WritePin(GPIOE, SPI_CS, GPIO_PIN_RESET);
 800268e:	4d12      	ldr	r5, [pc, #72]	; (80026d8 <main+0xdc>)
 8002690:	2200      	movs	r2, #0
 8002692:	2108      	movs	r1, #8
 8002694:	4628      	mov	r0, r5
 8002696:	f7fe f91f 	bl	80008d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, auchSpiTxBuf, 1, 50);
 800269a:	4e10      	ldr	r6, [pc, #64]	; (80026dc <main+0xe0>)
 800269c:	2332      	movs	r3, #50	; 0x32
 800269e:	2201      	movs	r2, #1
 80026a0:	4621      	mov	r1, r4
 80026a2:	4630      	mov	r0, r6
 80026a4:	f7ff f98f 	bl	80019c6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, auchSpiRxBuf, 1, 50);
 80026a8:	4c0d      	ldr	r4, [pc, #52]	; (80026e0 <main+0xe4>)
 80026aa:	2332      	movs	r3, #50	; 0x32
 80026ac:	2201      	movs	r2, #1
 80026ae:	4621      	mov	r1, r4
 80026b0:	4630      	mov	r0, r6
 80026b2:	f7ff fb7b 	bl	8001dac <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, SPI_CS, GPIO_PIN_SET);
 80026b6:	2201      	movs	r2, #1
 80026b8:	2108      	movs	r1, #8
 80026ba:	4628      	mov	r0, r5
 80026bc:	f7fe f90c 	bl	80008d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80026c0:	2064      	movs	r0, #100	; 0x64
 80026c2:	f7fd ffa1 	bl	8000608 <HAL_Delay>
    printf("Value read = %d\n", (int8_t)auchSpiRxBuf[0]);
 80026c6:	f994 1000 	ldrsb.w	r1, [r4]
 80026ca:	4808      	ldr	r0, [pc, #32]	; (80026ec <main+0xf0>)
 80026cc:	f000 f9d4 	bl	8002a78 <iprintf>
  while (1)
 80026d0:	e7d5      	b.n	800267e <main+0x82>
 80026d2:	bf00      	nop
 80026d4:	200000a4 	.word	0x200000a4
 80026d8:	40021000 	.word	0x40021000
 80026dc:	200000a8 	.word	0x200000a8
 80026e0:	200000a0 	.word	0x200000a0
 80026e4:	08003954 	.word	0x08003954
 80026e8:	40020c00 	.word	0x40020c00
 80026ec:	08003970 	.word	0x08003970

080026f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b500      	push	{lr}
 80026f2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f4:	2100      	movs	r1, #0
 80026f6:	9100      	str	r1, [sp, #0]
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_MspInit+0x3c>)
 80026fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
 8002702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002704:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002708:	9200      	str	r2, [sp, #0]
 800270a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	9101      	str	r1, [sp, #4]
 800270e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002720:	2007      	movs	r0, #7
 8002722:	f7fd ff85 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	b003      	add	sp, #12
 8002728:	f85d fb04 	ldr.w	pc, [sp], #4
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	2300      	movs	r3, #0
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	9304      	str	r3, [sp, #16]
 800273a:	9305      	str	r3, [sp, #20]
 800273c:	9306      	str	r3, [sp, #24]
 800273e:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI3)
 8002740:	6802      	ldr	r2, [r0, #0]
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_I2S_MspInit+0x90>)
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002748:	b008      	add	sp, #32
 800274a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800274c:	2400      	movs	r4, #0
 800274e:	9400      	str	r4, [sp, #0]
 8002750:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
 800275c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	9401      	str	r4, [sp, #4]
 8002768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
 8002770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002772:	f002 0201 	and.w	r2, r2, #1
 8002776:	9201      	str	r2, [sp, #4]
 8002778:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	9402      	str	r4, [sp, #8]
 800277c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277e:	f042 0204 	orr.w	r2, r2, #4
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800278e:	2310      	movs	r3, #16
 8002790:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2602      	movs	r6, #2
 8002794:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800279a:	2506      	movs	r5, #6
 800279c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800279e:	a903      	add	r1, sp, #12
 80027a0:	4808      	ldr	r0, [pc, #32]	; (80027c4 <HAL_I2S_MspInit+0x94>)
 80027a2:	f7fd ffaf 	bl	8000704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80027a6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80027aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027b2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b4:	a903      	add	r1, sp, #12
 80027b6:	4804      	ldr	r0, [pc, #16]	; (80027c8 <HAL_I2S_MspInit+0x98>)
 80027b8:	f7fd ffa4 	bl	8000704 <HAL_GPIO_Init>
}
 80027bc:	e7c4      	b.n	8002748 <HAL_I2S_MspInit+0x18>
 80027be:	bf00      	nop
 80027c0:	40003c00 	.word	0x40003c00
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020800 	.word	0x40020800

080027cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027cc:	b500      	push	{lr}
 80027ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	2300      	movs	r3, #0
 80027d2:	9303      	str	r3, [sp, #12]
 80027d4:	9304      	str	r3, [sp, #16]
 80027d6:	9305      	str	r3, [sp, #20]
 80027d8:	9306      	str	r3, [sp, #24]
 80027da:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80027dc:	6802      	ldr	r2, [r0, #0]
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_SPI_MspInit+0x68>)
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d002      	beq.n	80027ea <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027e4:	b009      	add	sp, #36	; 0x24
 80027e6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027ea:	2200      	movs	r2, #0
 80027ec:	9201      	str	r2, [sp, #4]
 80027ee:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80027f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027f4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80027f8:	6459      	str	r1, [r3, #68]	; 0x44
 80027fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027fc:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8002800:	9101      	str	r1, [sp, #4]
 8002802:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	9202      	str	r2, [sp, #8]
 8002806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002808:	f041 0101 	orr.w	r1, r1, #1
 800280c:	6319      	str	r1, [r3, #48]	; 0x30
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	9302      	str	r3, [sp, #8]
 8002816:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002818:	23e0      	movs	r3, #224	; 0xe0
 800281a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002824:	2305      	movs	r3, #5
 8002826:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	a903      	add	r1, sp, #12
 800282a:	4803      	ldr	r0, [pc, #12]	; (8002838 <HAL_SPI_MspInit+0x6c>)
 800282c:	f7fd ff6a 	bl	8000704 <HAL_GPIO_Init>
}
 8002830:	e7d8      	b.n	80027e4 <HAL_SPI_MspInit+0x18>
 8002832:	bf00      	nop
 8002834:	40013000 	.word	0x40013000
 8002838:	40020000 	.word	0x40020000

0800283c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800283c:	b500      	push	{lr}
 800283e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	2300      	movs	r3, #0
 8002842:	9303      	str	r3, [sp, #12]
 8002844:	9304      	str	r3, [sp, #16]
 8002846:	9305      	str	r3, [sp, #20]
 8002848:	9306      	str	r3, [sp, #24]
 800284a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800284c:	6802      	ldr	r2, [r0, #0]
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_UART_MspInit+0x68>)
 8002850:	429a      	cmp	r2, r3
 8002852:	d002      	beq.n	800285a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002854:	b009      	add	sp, #36	; 0x24
 8002856:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800285a:	2200      	movs	r2, #0
 800285c:	9201      	str	r2, [sp, #4]
 800285e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002862:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002864:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002868:	6419      	str	r1, [r3, #64]	; 0x40
 800286a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800286c:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8002870:	9101      	str	r1, [sp, #4]
 8002872:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	9202      	str	r2, [sp, #8]
 8002876:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002878:	f041 0101 	orr.w	r1, r1, #1
 800287c:	6319      	str	r1, [r3, #48]	; 0x30
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002888:	230c      	movs	r3, #12
 800288a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002896:	2307      	movs	r3, #7
 8002898:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	a903      	add	r1, sp, #12
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <HAL_UART_MspInit+0x6c>)
 800289e:	f7fd ff31 	bl	8000704 <HAL_GPIO_Init>
}
 80028a2:	e7d7      	b.n	8002854 <HAL_UART_MspInit+0x18>
 80028a4:	40004400 	.word	0x40004400
 80028a8:	40020000 	.word	0x40020000

080028ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028ac:	4770      	bx	lr

080028ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <HardFault_Handler>

080028b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <MemManage_Handler>

080028b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <BusFault_Handler>

080028b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <UsageFault_Handler>

080028b6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b6:	4770      	bx	lr

080028b8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b8:	4770      	bx	lr

080028ba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ba:	4770      	bx	lr

080028bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028be:	f7fd fe91 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c2:	bd08      	pop	{r3, pc}

080028c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7fe f816 	bl	80008f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028cc:	bd08      	pop	{r3, pc}

080028ce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028ce:	b570      	push	{r4, r5, r6, lr}
 80028d0:	460c      	mov	r4, r1
 80028d2:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d4:	2500      	movs	r5, #0
 80028d6:	42b5      	cmp	r5, r6
 80028d8:	da07      	bge.n	80028ea <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80028da:	f000 f85f 	bl	800299c <__io_getchar>
 80028de:	4621      	mov	r1, r4
 80028e0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80028e6:	460c      	mov	r4, r1
 80028e8:	e7f5      	b.n	80028d6 <_read+0x8>
	}

return len;
}
 80028ea:	4630      	mov	r0, r6
 80028ec:	bd70      	pop	{r4, r5, r6, pc}

080028ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	460c      	mov	r4, r1
 80028f2:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f4:	2500      	movs	r5, #0
 80028f6:	42b5      	cmp	r5, r6
 80028f8:	da05      	bge.n	8002906 <_write+0x18>
	{
		__io_putchar(*ptr++);
 80028fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028fe:	f000 f83d 	bl	800297c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	3501      	adds	r5, #1
 8002904:	e7f7      	b.n	80028f6 <_write+0x8>
	}
	return len;
}
 8002906:	4630      	mov	r0, r6
 8002908:	bd70      	pop	{r4, r5, r6, pc}
	...

0800290c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800290c:	b508      	push	{r3, lr}
 800290e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <_sbrk+0x34>)
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	b142      	cbz	r2, 8002928 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <_sbrk+0x34>)
 8002918:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800291a:	4403      	add	r3, r0
 800291c:	466a      	mov	r2, sp
 800291e:	4293      	cmp	r3, r2
 8002920:	d806      	bhi.n	8002930 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <_sbrk+0x34>)
 8002924:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002926:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002928:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_sbrk+0x34>)
 800292a:	4906      	ldr	r1, [pc, #24]	; (8002944 <_sbrk+0x38>)
 800292c:	6011      	str	r1, [r2, #0]
 800292e:	e7f2      	b.n	8002916 <_sbrk+0xa>
		errno = ENOMEM;
 8002930:	f000 f870 	bl	8002a14 <__errno>
 8002934:	230c      	movs	r3, #12
 8002936:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	e7f3      	b.n	8002926 <_sbrk+0x1a>
 800293e:	bf00      	nop
 8002940:	2000008c 	.word	0x2000008c
 8002944:	200001a0 	.word	0x200001a0

08002948 <_close>:

int _close(int file)
{
	return -1;
}
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	4770      	bx	lr

0800294e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800294e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002952:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002954:	2000      	movs	r0, #0
 8002956:	4770      	bx	lr

08002958 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002958:	2001      	movs	r0, #1
 800295a:	4770      	bx	lr

0800295c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800295c:	2000      	movs	r0, #0
 800295e:	4770      	bx	lr

08002960 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SystemInit+0x18>)
 8002962:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002966:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800296a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800296e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002972:	609a      	str	r2, [r3, #8]
#endif
}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__io_putchar>:
//          Uses blocking write to USART
//
// Added here by Bob Betz 2020
//
int __io_putchar(int ch)
{
 800297c:	b500      	push	{lr}
 800297e:	b083      	sub	sp, #12
 8002980:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)(&ch), 1, 0xFFFF);
 8002982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002986:	2201      	movs	r2, #1
 8002988:	a901      	add	r1, sp, #4
 800298a:	4803      	ldr	r0, [pc, #12]	; (8002998 <__io_putchar+0x1c>)
 800298c:	f7ff fbb9 	bl	8002102 <HAL_UART_Transmit>
  return 1;
}
 8002990:	2001      	movs	r0, #1
 8002992:	b003      	add	sp, #12
 8002994:	f85d fb04 	ldr.w	pc, [sp], #4
 8002998:	20000100 	.word	0x20000100

0800299c <__io_getchar>:

// STEPIEN: Redirect input from serial port
//          Uses blocking read from USART
//
int __io_getchar(void)
{
 800299c:	b500      	push	{lr}
 800299e:	b083      	sub	sp, #12
  uint8_t ch;
  HAL_UART_Receive(&huart2, (uint8_t *)(&ch), 1, 0xFFFF);
 80029a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a4:	2201      	movs	r2, #1
 80029a6:	f10d 0107 	add.w	r1, sp, #7
 80029aa:	4804      	ldr	r0, [pc, #16]	; (80029bc <__io_getchar+0x20>)
 80029ac:	f7ff fc15 	bl	80021da <HAL_UART_Receive>
  return (int)ch;
}
 80029b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80029b4:	b003      	add	sp, #12
 80029b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ba:	bf00      	nop
 80029bc:	20000100 	.word	0x20000100

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029c6:	e003      	b.n	80029d0 <LoopCopyDataInit>

080029c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ce:	3104      	adds	r1, #4

080029d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d0:	480b      	ldr	r0, [pc, #44]	; (8002a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d8:	d3f6      	bcc.n	80029c8 <CopyDataInit>
  ldr  r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029dc:	e002      	b.n	80029e4 <LoopFillZerobss>

080029de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e0:	f842 3b04 	str.w	r3, [r2], #4

080029e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e8:	d3f9      	bcc.n	80029de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ea:	f7ff ffb9 	bl	8002960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ee:	f000 f817 	bl	8002a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7ff fe03 	bl	80025fc <main>
  bx  lr    
 80029f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029fc:	08003a2c 	.word	0x08003a2c
  ldr  r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a04:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002a08:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002a0c:	2000019c 	.word	0x2000019c

08002a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC_IRQHandler>
	...

08002a14 <__errno>:
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <__errno+0x8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <__libc_init_array>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4d0d      	ldr	r5, [pc, #52]	; (8002a58 <__libc_init_array+0x38>)
 8002a24:	4c0d      	ldr	r4, [pc, #52]	; (8002a5c <__libc_init_array+0x3c>)
 8002a26:	1b64      	subs	r4, r4, r5
 8002a28:	10a4      	asrs	r4, r4, #2
 8002a2a:	2600      	movs	r6, #0
 8002a2c:	42a6      	cmp	r6, r4
 8002a2e:	d109      	bne.n	8002a44 <__libc_init_array+0x24>
 8002a30:	4d0b      	ldr	r5, [pc, #44]	; (8002a60 <__libc_init_array+0x40>)
 8002a32:	4c0c      	ldr	r4, [pc, #48]	; (8002a64 <__libc_init_array+0x44>)
 8002a34:	f000 ff76 	bl	8003924 <_init>
 8002a38:	1b64      	subs	r4, r4, r5
 8002a3a:	10a4      	asrs	r4, r4, #2
 8002a3c:	2600      	movs	r6, #0
 8002a3e:	42a6      	cmp	r6, r4
 8002a40:	d105      	bne.n	8002a4e <__libc_init_array+0x2e>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a48:	4798      	blx	r3
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7ee      	b.n	8002a2c <__libc_init_array+0xc>
 8002a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a52:	4798      	blx	r3
 8002a54:	3601      	adds	r6, #1
 8002a56:	e7f2      	b.n	8002a3e <__libc_init_array+0x1e>
 8002a58:	08003a24 	.word	0x08003a24
 8002a5c:	08003a24 	.word	0x08003a24
 8002a60:	08003a24 	.word	0x08003a24
 8002a64:	08003a28 	.word	0x08003a28

08002a68 <memset>:
 8002a68:	4402      	add	r2, r0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <iprintf>:
 8002a78:	b40f      	push	{r0, r1, r2, r3}
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <iprintf+0x2c>)
 8002a7c:	b513      	push	{r0, r1, r4, lr}
 8002a7e:	681c      	ldr	r4, [r3, #0]
 8002a80:	b124      	cbz	r4, 8002a8c <iprintf+0x14>
 8002a82:	69a3      	ldr	r3, [r4, #24]
 8002a84:	b913      	cbnz	r3, 8002a8c <iprintf+0x14>
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 f866 	bl	8002b58 <__sinit>
 8002a8c:	ab05      	add	r3, sp, #20
 8002a8e:	9a04      	ldr	r2, [sp, #16]
 8002a90:	68a1      	ldr	r1, [r4, #8]
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	4620      	mov	r0, r4
 8002a96:	f000 f983 	bl	8002da0 <_vfiprintf_r>
 8002a9a:	b002      	add	sp, #8
 8002a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aa0:	b004      	add	sp, #16
 8002aa2:	4770      	bx	lr
 8002aa4:	2000000c 	.word	0x2000000c

08002aa8 <std>:
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	4604      	mov	r4, r0
 8002aae:	e9c0 3300 	strd	r3, r3, [r0]
 8002ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ab6:	6083      	str	r3, [r0, #8]
 8002ab8:	8181      	strh	r1, [r0, #12]
 8002aba:	6643      	str	r3, [r0, #100]	; 0x64
 8002abc:	81c2      	strh	r2, [r0, #14]
 8002abe:	6183      	str	r3, [r0, #24]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	305c      	adds	r0, #92	; 0x5c
 8002ac6:	f7ff ffcf 	bl	8002a68 <memset>
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <std+0x38>)
 8002acc:	6263      	str	r3, [r4, #36]	; 0x24
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <std+0x3c>)
 8002ad0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <std+0x40>)
 8002ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <std+0x44>)
 8002ad8:	6224      	str	r4, [r4, #32]
 8002ada:	6323      	str	r3, [r4, #48]	; 0x30
 8002adc:	bd10      	pop	{r4, pc}
 8002ade:	bf00      	nop
 8002ae0:	08003349 	.word	0x08003349
 8002ae4:	0800336b 	.word	0x0800336b
 8002ae8:	080033a3 	.word	0x080033a3
 8002aec:	080033c7 	.word	0x080033c7

08002af0 <_cleanup_r>:
 8002af0:	4901      	ldr	r1, [pc, #4]	; (8002af8 <_cleanup_r+0x8>)
 8002af2:	f000 b8af 	b.w	8002c54 <_fwalk_reent>
 8002af6:	bf00      	nop
 8002af8:	080036a1 	.word	0x080036a1

08002afc <__sfmoreglue>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	1e4a      	subs	r2, r1, #1
 8002b00:	2568      	movs	r5, #104	; 0x68
 8002b02:	4355      	muls	r5, r2
 8002b04:	460e      	mov	r6, r1
 8002b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b0a:	f000 f8c5 	bl	8002c98 <_malloc_r>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	b140      	cbz	r0, 8002b24 <__sfmoreglue+0x28>
 8002b12:	2100      	movs	r1, #0
 8002b14:	e9c0 1600 	strd	r1, r6, [r0]
 8002b18:	300c      	adds	r0, #12
 8002b1a:	60a0      	str	r0, [r4, #8]
 8002b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b20:	f7ff ffa2 	bl	8002a68 <memset>
 8002b24:	4620      	mov	r0, r4
 8002b26:	bd70      	pop	{r4, r5, r6, pc}

08002b28 <__sfp_lock_acquire>:
 8002b28:	4801      	ldr	r0, [pc, #4]	; (8002b30 <__sfp_lock_acquire+0x8>)
 8002b2a:	f000 b8b3 	b.w	8002c94 <__retarget_lock_acquire_recursive>
 8002b2e:	bf00      	nop
 8002b30:	20000194 	.word	0x20000194

08002b34 <__sfp_lock_release>:
 8002b34:	4801      	ldr	r0, [pc, #4]	; (8002b3c <__sfp_lock_release+0x8>)
 8002b36:	f000 b8ae 	b.w	8002c96 <__retarget_lock_release_recursive>
 8002b3a:	bf00      	nop
 8002b3c:	20000194 	.word	0x20000194

08002b40 <__sinit_lock_acquire>:
 8002b40:	4801      	ldr	r0, [pc, #4]	; (8002b48 <__sinit_lock_acquire+0x8>)
 8002b42:	f000 b8a7 	b.w	8002c94 <__retarget_lock_acquire_recursive>
 8002b46:	bf00      	nop
 8002b48:	2000018f 	.word	0x2000018f

08002b4c <__sinit_lock_release>:
 8002b4c:	4801      	ldr	r0, [pc, #4]	; (8002b54 <__sinit_lock_release+0x8>)
 8002b4e:	f000 b8a2 	b.w	8002c96 <__retarget_lock_release_recursive>
 8002b52:	bf00      	nop
 8002b54:	2000018f 	.word	0x2000018f

08002b58 <__sinit>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	f7ff fff0 	bl	8002b40 <__sinit_lock_acquire>
 8002b60:	69a3      	ldr	r3, [r4, #24]
 8002b62:	b11b      	cbz	r3, 8002b6c <__sinit+0x14>
 8002b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b68:	f7ff bff0 	b.w	8002b4c <__sinit_lock_release>
 8002b6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b70:	6523      	str	r3, [r4, #80]	; 0x50
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <__sinit+0x68>)
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <__sinit+0x6c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b7a:	42a3      	cmp	r3, r4
 8002b7c:	bf04      	itt	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	61a3      	streq	r3, [r4, #24]
 8002b82:	4620      	mov	r0, r4
 8002b84:	f000 f820 	bl	8002bc8 <__sfp>
 8002b88:	6060      	str	r0, [r4, #4]
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f000 f81c 	bl	8002bc8 <__sfp>
 8002b90:	60a0      	str	r0, [r4, #8]
 8002b92:	4620      	mov	r0, r4
 8002b94:	f000 f818 	bl	8002bc8 <__sfp>
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60e0      	str	r0, [r4, #12]
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	6860      	ldr	r0, [r4, #4]
 8002ba0:	f7ff ff82 	bl	8002aa8 <std>
 8002ba4:	68a0      	ldr	r0, [r4, #8]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2109      	movs	r1, #9
 8002baa:	f7ff ff7d 	bl	8002aa8 <std>
 8002bae:	68e0      	ldr	r0, [r4, #12]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	2112      	movs	r1, #18
 8002bb4:	f7ff ff78 	bl	8002aa8 <std>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61a3      	str	r3, [r4, #24]
 8002bbc:	e7d2      	b.n	8002b64 <__sinit+0xc>
 8002bbe:	bf00      	nop
 8002bc0:	08003984 	.word	0x08003984
 8002bc4:	08002af1 	.word	0x08002af1

08002bc8 <__sfp>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	4607      	mov	r7, r0
 8002bcc:	f7ff ffac 	bl	8002b28 <__sfp_lock_acquire>
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <__sfp+0x84>)
 8002bd2:	681e      	ldr	r6, [r3, #0]
 8002bd4:	69b3      	ldr	r3, [r6, #24]
 8002bd6:	b913      	cbnz	r3, 8002bde <__sfp+0x16>
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f7ff ffbd 	bl	8002b58 <__sinit>
 8002bde:	3648      	adds	r6, #72	; 0x48
 8002be0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	d503      	bpl.n	8002bf0 <__sfp+0x28>
 8002be8:	6833      	ldr	r3, [r6, #0]
 8002bea:	b30b      	cbz	r3, 8002c30 <__sfp+0x68>
 8002bec:	6836      	ldr	r6, [r6, #0]
 8002bee:	e7f7      	b.n	8002be0 <__sfp+0x18>
 8002bf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bf4:	b9d5      	cbnz	r5, 8002c2c <__sfp+0x64>
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <__sfp+0x88>)
 8002bf8:	60e3      	str	r3, [r4, #12]
 8002bfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bfe:	6665      	str	r5, [r4, #100]	; 0x64
 8002c00:	f000 f847 	bl	8002c92 <__retarget_lock_init_recursive>
 8002c04:	f7ff ff96 	bl	8002b34 <__sfp_lock_release>
 8002c08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c10:	6025      	str	r5, [r4, #0]
 8002c12:	61a5      	str	r5, [r4, #24]
 8002c14:	2208      	movs	r2, #8
 8002c16:	4629      	mov	r1, r5
 8002c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c1c:	f7ff ff24 	bl	8002a68 <memset>
 8002c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c28:	4620      	mov	r0, r4
 8002c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2c:	3468      	adds	r4, #104	; 0x68
 8002c2e:	e7d9      	b.n	8002be4 <__sfp+0x1c>
 8002c30:	2104      	movs	r1, #4
 8002c32:	4638      	mov	r0, r7
 8002c34:	f7ff ff62 	bl	8002afc <__sfmoreglue>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	6030      	str	r0, [r6, #0]
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d1d5      	bne.n	8002bec <__sfp+0x24>
 8002c40:	f7ff ff78 	bl	8002b34 <__sfp_lock_release>
 8002c44:	230c      	movs	r3, #12
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	e7ee      	b.n	8002c28 <__sfp+0x60>
 8002c4a:	bf00      	nop
 8002c4c:	08003984 	.word	0x08003984
 8002c50:	ffff0001 	.word	0xffff0001

08002c54 <_fwalk_reent>:
 8002c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c58:	4606      	mov	r6, r0
 8002c5a:	4688      	mov	r8, r1
 8002c5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c60:	2700      	movs	r7, #0
 8002c62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c66:	f1b9 0901 	subs.w	r9, r9, #1
 8002c6a:	d505      	bpl.n	8002c78 <_fwalk_reent+0x24>
 8002c6c:	6824      	ldr	r4, [r4, #0]
 8002c6e:	2c00      	cmp	r4, #0
 8002c70:	d1f7      	bne.n	8002c62 <_fwalk_reent+0xe>
 8002c72:	4638      	mov	r0, r7
 8002c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c78:	89ab      	ldrh	r3, [r5, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d907      	bls.n	8002c8e <_fwalk_reent+0x3a>
 8002c7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c82:	3301      	adds	r3, #1
 8002c84:	d003      	beq.n	8002c8e <_fwalk_reent+0x3a>
 8002c86:	4629      	mov	r1, r5
 8002c88:	4630      	mov	r0, r6
 8002c8a:	47c0      	blx	r8
 8002c8c:	4307      	orrs	r7, r0
 8002c8e:	3568      	adds	r5, #104	; 0x68
 8002c90:	e7e9      	b.n	8002c66 <_fwalk_reent+0x12>

08002c92 <__retarget_lock_init_recursive>:
 8002c92:	4770      	bx	lr

08002c94 <__retarget_lock_acquire_recursive>:
 8002c94:	4770      	bx	lr

08002c96 <__retarget_lock_release_recursive>:
 8002c96:	4770      	bx	lr

08002c98 <_malloc_r>:
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	1ccd      	adds	r5, r1, #3
 8002c9c:	f025 0503 	bic.w	r5, r5, #3
 8002ca0:	3508      	adds	r5, #8
 8002ca2:	2d0c      	cmp	r5, #12
 8002ca4:	bf38      	it	cc
 8002ca6:	250c      	movcc	r5, #12
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	4606      	mov	r6, r0
 8002cac:	db01      	blt.n	8002cb2 <_malloc_r+0x1a>
 8002cae:	42a9      	cmp	r1, r5
 8002cb0:	d903      	bls.n	8002cba <_malloc_r+0x22>
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	6033      	str	r3, [r6, #0]
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cba:	f000 fda3 	bl	8003804 <__malloc_lock>
 8002cbe:	4921      	ldr	r1, [pc, #132]	; (8002d44 <_malloc_r+0xac>)
 8002cc0:	680a      	ldr	r2, [r1, #0]
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	b99c      	cbnz	r4, 8002cee <_malloc_r+0x56>
 8002cc6:	4f20      	ldr	r7, [pc, #128]	; (8002d48 <_malloc_r+0xb0>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b923      	cbnz	r3, 8002cd6 <_malloc_r+0x3e>
 8002ccc:	4621      	mov	r1, r4
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f000 fb2a 	bl	8003328 <_sbrk_r>
 8002cd4:	6038      	str	r0, [r7, #0]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f000 fb25 	bl	8003328 <_sbrk_r>
 8002cde:	1c43      	adds	r3, r0, #1
 8002ce0:	d123      	bne.n	8002d2a <_malloc_r+0x92>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	6033      	str	r3, [r6, #0]
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f000 fd92 	bl	8003810 <__malloc_unlock>
 8002cec:	e7e3      	b.n	8002cb6 <_malloc_r+0x1e>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	1b5b      	subs	r3, r3, r5
 8002cf2:	d417      	bmi.n	8002d24 <_malloc_r+0x8c>
 8002cf4:	2b0b      	cmp	r3, #11
 8002cf6:	d903      	bls.n	8002d00 <_malloc_r+0x68>
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	441c      	add	r4, r3
 8002cfc:	6025      	str	r5, [r4, #0]
 8002cfe:	e004      	b.n	8002d0a <_malloc_r+0x72>
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	42a2      	cmp	r2, r4
 8002d04:	bf0c      	ite	eq
 8002d06:	600b      	streq	r3, [r1, #0]
 8002d08:	6053      	strne	r3, [r2, #4]
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f000 fd80 	bl	8003810 <__malloc_unlock>
 8002d10:	f104 000b 	add.w	r0, r4, #11
 8002d14:	1d23      	adds	r3, r4, #4
 8002d16:	f020 0007 	bic.w	r0, r0, #7
 8002d1a:	1ac2      	subs	r2, r0, r3
 8002d1c:	d0cc      	beq.n	8002cb8 <_malloc_r+0x20>
 8002d1e:	1a1b      	subs	r3, r3, r0
 8002d20:	50a3      	str	r3, [r4, r2]
 8002d22:	e7c9      	b.n	8002cb8 <_malloc_r+0x20>
 8002d24:	4622      	mov	r2, r4
 8002d26:	6864      	ldr	r4, [r4, #4]
 8002d28:	e7cc      	b.n	8002cc4 <_malloc_r+0x2c>
 8002d2a:	1cc4      	adds	r4, r0, #3
 8002d2c:	f024 0403 	bic.w	r4, r4, #3
 8002d30:	42a0      	cmp	r0, r4
 8002d32:	d0e3      	beq.n	8002cfc <_malloc_r+0x64>
 8002d34:	1a21      	subs	r1, r4, r0
 8002d36:	4630      	mov	r0, r6
 8002d38:	f000 faf6 	bl	8003328 <_sbrk_r>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d1dd      	bne.n	8002cfc <_malloc_r+0x64>
 8002d40:	e7cf      	b.n	8002ce2 <_malloc_r+0x4a>
 8002d42:	bf00      	nop
 8002d44:	20000094 	.word	0x20000094
 8002d48:	20000098 	.word	0x20000098

08002d4c <__sfputc_r>:
 8002d4c:	6893      	ldr	r3, [r2, #8]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	b410      	push	{r4}
 8002d54:	6093      	str	r3, [r2, #8]
 8002d56:	da08      	bge.n	8002d6a <__sfputc_r+0x1e>
 8002d58:	6994      	ldr	r4, [r2, #24]
 8002d5a:	42a3      	cmp	r3, r4
 8002d5c:	db01      	blt.n	8002d62 <__sfputc_r+0x16>
 8002d5e:	290a      	cmp	r1, #10
 8002d60:	d103      	bne.n	8002d6a <__sfputc_r+0x1e>
 8002d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d66:	f000 bb33 	b.w	80033d0 <__swbuf_r>
 8002d6a:	6813      	ldr	r3, [r2, #0]
 8002d6c:	1c58      	adds	r0, r3, #1
 8002d6e:	6010      	str	r0, [r2, #0]
 8002d70:	7019      	strb	r1, [r3, #0]
 8002d72:	4608      	mov	r0, r1
 8002d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <__sfputs_r>:
 8002d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7c:	4606      	mov	r6, r0
 8002d7e:	460f      	mov	r7, r1
 8002d80:	4614      	mov	r4, r2
 8002d82:	18d5      	adds	r5, r2, r3
 8002d84:	42ac      	cmp	r4, r5
 8002d86:	d101      	bne.n	8002d8c <__sfputs_r+0x12>
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e007      	b.n	8002d9c <__sfputs_r+0x22>
 8002d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d90:	463a      	mov	r2, r7
 8002d92:	4630      	mov	r0, r6
 8002d94:	f7ff ffda 	bl	8002d4c <__sfputc_r>
 8002d98:	1c43      	adds	r3, r0, #1
 8002d9a:	d1f3      	bne.n	8002d84 <__sfputs_r+0xa>
 8002d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002da0 <_vfiprintf_r>:
 8002da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da4:	460d      	mov	r5, r1
 8002da6:	b09d      	sub	sp, #116	; 0x74
 8002da8:	4614      	mov	r4, r2
 8002daa:	4698      	mov	r8, r3
 8002dac:	4606      	mov	r6, r0
 8002dae:	b118      	cbz	r0, 8002db8 <_vfiprintf_r+0x18>
 8002db0:	6983      	ldr	r3, [r0, #24]
 8002db2:	b90b      	cbnz	r3, 8002db8 <_vfiprintf_r+0x18>
 8002db4:	f7ff fed0 	bl	8002b58 <__sinit>
 8002db8:	4b89      	ldr	r3, [pc, #548]	; (8002fe0 <_vfiprintf_r+0x240>)
 8002dba:	429d      	cmp	r5, r3
 8002dbc:	d11b      	bne.n	8002df6 <_vfiprintf_r+0x56>
 8002dbe:	6875      	ldr	r5, [r6, #4]
 8002dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dc2:	07d9      	lsls	r1, r3, #31
 8002dc4:	d405      	bmi.n	8002dd2 <_vfiprintf_r+0x32>
 8002dc6:	89ab      	ldrh	r3, [r5, #12]
 8002dc8:	059a      	lsls	r2, r3, #22
 8002dca:	d402      	bmi.n	8002dd2 <_vfiprintf_r+0x32>
 8002dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dce:	f7ff ff61 	bl	8002c94 <__retarget_lock_acquire_recursive>
 8002dd2:	89ab      	ldrh	r3, [r5, #12]
 8002dd4:	071b      	lsls	r3, r3, #28
 8002dd6:	d501      	bpl.n	8002ddc <_vfiprintf_r+0x3c>
 8002dd8:	692b      	ldr	r3, [r5, #16]
 8002dda:	b9eb      	cbnz	r3, 8002e18 <_vfiprintf_r+0x78>
 8002ddc:	4629      	mov	r1, r5
 8002dde:	4630      	mov	r0, r6
 8002de0:	f000 fb5a 	bl	8003498 <__swsetup_r>
 8002de4:	b1c0      	cbz	r0, 8002e18 <_vfiprintf_r+0x78>
 8002de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002de8:	07dc      	lsls	r4, r3, #31
 8002dea:	d50e      	bpl.n	8002e0a <_vfiprintf_r+0x6a>
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	b01d      	add	sp, #116	; 0x74
 8002df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df6:	4b7b      	ldr	r3, [pc, #492]	; (8002fe4 <_vfiprintf_r+0x244>)
 8002df8:	429d      	cmp	r5, r3
 8002dfa:	d101      	bne.n	8002e00 <_vfiprintf_r+0x60>
 8002dfc:	68b5      	ldr	r5, [r6, #8]
 8002dfe:	e7df      	b.n	8002dc0 <_vfiprintf_r+0x20>
 8002e00:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <_vfiprintf_r+0x248>)
 8002e02:	429d      	cmp	r5, r3
 8002e04:	bf08      	it	eq
 8002e06:	68f5      	ldreq	r5, [r6, #12]
 8002e08:	e7da      	b.n	8002dc0 <_vfiprintf_r+0x20>
 8002e0a:	89ab      	ldrh	r3, [r5, #12]
 8002e0c:	0598      	lsls	r0, r3, #22
 8002e0e:	d4ed      	bmi.n	8002dec <_vfiprintf_r+0x4c>
 8002e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e12:	f7ff ff40 	bl	8002c96 <__retarget_lock_release_recursive>
 8002e16:	e7e9      	b.n	8002dec <_vfiprintf_r+0x4c>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e26:	2330      	movs	r3, #48	; 0x30
 8002e28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002fec <_vfiprintf_r+0x24c>
 8002e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e30:	f04f 0901 	mov.w	r9, #1
 8002e34:	4623      	mov	r3, r4
 8002e36:	469a      	mov	sl, r3
 8002e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e3c:	b10a      	cbz	r2, 8002e42 <_vfiprintf_r+0xa2>
 8002e3e:	2a25      	cmp	r2, #37	; 0x25
 8002e40:	d1f9      	bne.n	8002e36 <_vfiprintf_r+0x96>
 8002e42:	ebba 0b04 	subs.w	fp, sl, r4
 8002e46:	d00b      	beq.n	8002e60 <_vfiprintf_r+0xc0>
 8002e48:	465b      	mov	r3, fp
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f7ff ff93 	bl	8002d7a <__sfputs_r>
 8002e54:	3001      	adds	r0, #1
 8002e56:	f000 80aa 	beq.w	8002fae <_vfiprintf_r+0x20e>
 8002e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e5c:	445a      	add	r2, fp
 8002e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e60:	f89a 3000 	ldrb.w	r3, [sl]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a2 	beq.w	8002fae <_vfiprintf_r+0x20e>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e74:	f10a 0a01 	add.w	sl, sl, #1
 8002e78:	9304      	str	r3, [sp, #16]
 8002e7a:	9307      	str	r3, [sp, #28]
 8002e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e80:	931a      	str	r3, [sp, #104]	; 0x68
 8002e82:	4654      	mov	r4, sl
 8002e84:	2205      	movs	r2, #5
 8002e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e8a:	4858      	ldr	r0, [pc, #352]	; (8002fec <_vfiprintf_r+0x24c>)
 8002e8c:	f7fd f9a0 	bl	80001d0 <memchr>
 8002e90:	9a04      	ldr	r2, [sp, #16]
 8002e92:	b9d8      	cbnz	r0, 8002ecc <_vfiprintf_r+0x12c>
 8002e94:	06d1      	lsls	r1, r2, #27
 8002e96:	bf44      	itt	mi
 8002e98:	2320      	movmi	r3, #32
 8002e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e9e:	0713      	lsls	r3, r2, #28
 8002ea0:	bf44      	itt	mi
 8002ea2:	232b      	movmi	r3, #43	; 0x2b
 8002ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8002eac:	2b2a      	cmp	r3, #42	; 0x2a
 8002eae:	d015      	beq.n	8002edc <_vfiprintf_r+0x13c>
 8002eb0:	9a07      	ldr	r2, [sp, #28]
 8002eb2:	4654      	mov	r4, sl
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f04f 0c0a 	mov.w	ip, #10
 8002eba:	4621      	mov	r1, r4
 8002ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ec0:	3b30      	subs	r3, #48	; 0x30
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d94e      	bls.n	8002f64 <_vfiprintf_r+0x1c4>
 8002ec6:	b1b0      	cbz	r0, 8002ef6 <_vfiprintf_r+0x156>
 8002ec8:	9207      	str	r2, [sp, #28]
 8002eca:	e014      	b.n	8002ef6 <_vfiprintf_r+0x156>
 8002ecc:	eba0 0308 	sub.w	r3, r0, r8
 8002ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	9304      	str	r3, [sp, #16]
 8002ed8:	46a2      	mov	sl, r4
 8002eda:	e7d2      	b.n	8002e82 <_vfiprintf_r+0xe2>
 8002edc:	9b03      	ldr	r3, [sp, #12]
 8002ede:	1d19      	adds	r1, r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	9103      	str	r1, [sp, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bfbb      	ittet	lt
 8002ee8:	425b      	neglt	r3, r3
 8002eea:	f042 0202 	orrlt.w	r2, r2, #2
 8002eee:	9307      	strge	r3, [sp, #28]
 8002ef0:	9307      	strlt	r3, [sp, #28]
 8002ef2:	bfb8      	it	lt
 8002ef4:	9204      	strlt	r2, [sp, #16]
 8002ef6:	7823      	ldrb	r3, [r4, #0]
 8002ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8002efa:	d10c      	bne.n	8002f16 <_vfiprintf_r+0x176>
 8002efc:	7863      	ldrb	r3, [r4, #1]
 8002efe:	2b2a      	cmp	r3, #42	; 0x2a
 8002f00:	d135      	bne.n	8002f6e <_vfiprintf_r+0x1ce>
 8002f02:	9b03      	ldr	r3, [sp, #12]
 8002f04:	1d1a      	adds	r2, r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	9203      	str	r2, [sp, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f12:	3402      	adds	r4, #2
 8002f14:	9305      	str	r3, [sp, #20]
 8002f16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002ffc <_vfiprintf_r+0x25c>
 8002f1a:	7821      	ldrb	r1, [r4, #0]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4650      	mov	r0, sl
 8002f20:	f7fd f956 	bl	80001d0 <memchr>
 8002f24:	b140      	cbz	r0, 8002f38 <_vfiprintf_r+0x198>
 8002f26:	2340      	movs	r3, #64	; 0x40
 8002f28:	eba0 000a 	sub.w	r0, r0, sl
 8002f2c:	fa03 f000 	lsl.w	r0, r3, r0
 8002f30:	9b04      	ldr	r3, [sp, #16]
 8002f32:	4303      	orrs	r3, r0
 8002f34:	3401      	adds	r4, #1
 8002f36:	9304      	str	r3, [sp, #16]
 8002f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f3c:	482c      	ldr	r0, [pc, #176]	; (8002ff0 <_vfiprintf_r+0x250>)
 8002f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f42:	2206      	movs	r2, #6
 8002f44:	f7fd f944 	bl	80001d0 <memchr>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d03f      	beq.n	8002fcc <_vfiprintf_r+0x22c>
 8002f4c:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <_vfiprintf_r+0x254>)
 8002f4e:	bb1b      	cbnz	r3, 8002f98 <_vfiprintf_r+0x1f8>
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	3307      	adds	r3, #7
 8002f54:	f023 0307 	bic.w	r3, r3, #7
 8002f58:	3308      	adds	r3, #8
 8002f5a:	9303      	str	r3, [sp, #12]
 8002f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f5e:	443b      	add	r3, r7
 8002f60:	9309      	str	r3, [sp, #36]	; 0x24
 8002f62:	e767      	b.n	8002e34 <_vfiprintf_r+0x94>
 8002f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f68:	460c      	mov	r4, r1
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e7a5      	b.n	8002eba <_vfiprintf_r+0x11a>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	3401      	adds	r4, #1
 8002f72:	9305      	str	r3, [sp, #20]
 8002f74:	4619      	mov	r1, r3
 8002f76:	f04f 0c0a 	mov.w	ip, #10
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f80:	3a30      	subs	r2, #48	; 0x30
 8002f82:	2a09      	cmp	r2, #9
 8002f84:	d903      	bls.n	8002f8e <_vfiprintf_r+0x1ee>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0c5      	beq.n	8002f16 <_vfiprintf_r+0x176>
 8002f8a:	9105      	str	r1, [sp, #20]
 8002f8c:	e7c3      	b.n	8002f16 <_vfiprintf_r+0x176>
 8002f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f92:	4604      	mov	r4, r0
 8002f94:	2301      	movs	r3, #1
 8002f96:	e7f0      	b.n	8002f7a <_vfiprintf_r+0x1da>
 8002f98:	ab03      	add	r3, sp, #12
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	462a      	mov	r2, r5
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <_vfiprintf_r+0x258>)
 8002fa0:	a904      	add	r1, sp, #16
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	4607      	mov	r7, r0
 8002faa:	1c78      	adds	r0, r7, #1
 8002fac:	d1d6      	bne.n	8002f5c <_vfiprintf_r+0x1bc>
 8002fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fb0:	07d9      	lsls	r1, r3, #31
 8002fb2:	d405      	bmi.n	8002fc0 <_vfiprintf_r+0x220>
 8002fb4:	89ab      	ldrh	r3, [r5, #12]
 8002fb6:	059a      	lsls	r2, r3, #22
 8002fb8:	d402      	bmi.n	8002fc0 <_vfiprintf_r+0x220>
 8002fba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fbc:	f7ff fe6b 	bl	8002c96 <__retarget_lock_release_recursive>
 8002fc0:	89ab      	ldrh	r3, [r5, #12]
 8002fc2:	065b      	lsls	r3, r3, #25
 8002fc4:	f53f af12 	bmi.w	8002dec <_vfiprintf_r+0x4c>
 8002fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fca:	e711      	b.n	8002df0 <_vfiprintf_r+0x50>
 8002fcc:	ab03      	add	r3, sp, #12
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	462a      	mov	r2, r5
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <_vfiprintf_r+0x258>)
 8002fd4:	a904      	add	r1, sp, #16
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f000 f880 	bl	80030dc <_printf_i>
 8002fdc:	e7e4      	b.n	8002fa8 <_vfiprintf_r+0x208>
 8002fde:	bf00      	nop
 8002fe0:	080039a8 	.word	0x080039a8
 8002fe4:	080039c8 	.word	0x080039c8
 8002fe8:	08003988 	.word	0x08003988
 8002fec:	080039e8 	.word	0x080039e8
 8002ff0:	080039f2 	.word	0x080039f2
 8002ff4:	00000000 	.word	0x00000000
 8002ff8:	08002d7b 	.word	0x08002d7b
 8002ffc:	080039ee 	.word	0x080039ee

08003000 <_printf_common>:
 8003000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003004:	4616      	mov	r6, r2
 8003006:	4699      	mov	r9, r3
 8003008:	688a      	ldr	r2, [r1, #8]
 800300a:	690b      	ldr	r3, [r1, #16]
 800300c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003010:	4293      	cmp	r3, r2
 8003012:	bfb8      	it	lt
 8003014:	4613      	movlt	r3, r2
 8003016:	6033      	str	r3, [r6, #0]
 8003018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800301c:	4607      	mov	r7, r0
 800301e:	460c      	mov	r4, r1
 8003020:	b10a      	cbz	r2, 8003026 <_printf_common+0x26>
 8003022:	3301      	adds	r3, #1
 8003024:	6033      	str	r3, [r6, #0]
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	0699      	lsls	r1, r3, #26
 800302a:	bf42      	ittt	mi
 800302c:	6833      	ldrmi	r3, [r6, #0]
 800302e:	3302      	addmi	r3, #2
 8003030:	6033      	strmi	r3, [r6, #0]
 8003032:	6825      	ldr	r5, [r4, #0]
 8003034:	f015 0506 	ands.w	r5, r5, #6
 8003038:	d106      	bne.n	8003048 <_printf_common+0x48>
 800303a:	f104 0a19 	add.w	sl, r4, #25
 800303e:	68e3      	ldr	r3, [r4, #12]
 8003040:	6832      	ldr	r2, [r6, #0]
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	42ab      	cmp	r3, r5
 8003046:	dc26      	bgt.n	8003096 <_printf_common+0x96>
 8003048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800304c:	1e13      	subs	r3, r2, #0
 800304e:	6822      	ldr	r2, [r4, #0]
 8003050:	bf18      	it	ne
 8003052:	2301      	movne	r3, #1
 8003054:	0692      	lsls	r2, r2, #26
 8003056:	d42b      	bmi.n	80030b0 <_printf_common+0xb0>
 8003058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800305c:	4649      	mov	r1, r9
 800305e:	4638      	mov	r0, r7
 8003060:	47c0      	blx	r8
 8003062:	3001      	adds	r0, #1
 8003064:	d01e      	beq.n	80030a4 <_printf_common+0xa4>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	68e5      	ldr	r5, [r4, #12]
 800306a:	6832      	ldr	r2, [r6, #0]
 800306c:	f003 0306 	and.w	r3, r3, #6
 8003070:	2b04      	cmp	r3, #4
 8003072:	bf08      	it	eq
 8003074:	1aad      	subeq	r5, r5, r2
 8003076:	68a3      	ldr	r3, [r4, #8]
 8003078:	6922      	ldr	r2, [r4, #16]
 800307a:	bf0c      	ite	eq
 800307c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003080:	2500      	movne	r5, #0
 8003082:	4293      	cmp	r3, r2
 8003084:	bfc4      	itt	gt
 8003086:	1a9b      	subgt	r3, r3, r2
 8003088:	18ed      	addgt	r5, r5, r3
 800308a:	2600      	movs	r6, #0
 800308c:	341a      	adds	r4, #26
 800308e:	42b5      	cmp	r5, r6
 8003090:	d11a      	bne.n	80030c8 <_printf_common+0xc8>
 8003092:	2000      	movs	r0, #0
 8003094:	e008      	b.n	80030a8 <_printf_common+0xa8>
 8003096:	2301      	movs	r3, #1
 8003098:	4652      	mov	r2, sl
 800309a:	4649      	mov	r1, r9
 800309c:	4638      	mov	r0, r7
 800309e:	47c0      	blx	r8
 80030a0:	3001      	adds	r0, #1
 80030a2:	d103      	bne.n	80030ac <_printf_common+0xac>
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ac:	3501      	adds	r5, #1
 80030ae:	e7c6      	b.n	800303e <_printf_common+0x3e>
 80030b0:	18e1      	adds	r1, r4, r3
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	2030      	movs	r0, #48	; 0x30
 80030b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030ba:	4422      	add	r2, r4
 80030bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030c4:	3302      	adds	r3, #2
 80030c6:	e7c7      	b.n	8003058 <_printf_common+0x58>
 80030c8:	2301      	movs	r3, #1
 80030ca:	4622      	mov	r2, r4
 80030cc:	4649      	mov	r1, r9
 80030ce:	4638      	mov	r0, r7
 80030d0:	47c0      	blx	r8
 80030d2:	3001      	adds	r0, #1
 80030d4:	d0e6      	beq.n	80030a4 <_printf_common+0xa4>
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7d9      	b.n	800308e <_printf_common+0x8e>
	...

080030dc <_printf_i>:
 80030dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	460c      	mov	r4, r1
 80030e2:	4691      	mov	r9, r2
 80030e4:	7e27      	ldrb	r7, [r4, #24]
 80030e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030e8:	2f78      	cmp	r7, #120	; 0x78
 80030ea:	4680      	mov	r8, r0
 80030ec:	469a      	mov	sl, r3
 80030ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030f2:	d807      	bhi.n	8003104 <_printf_i+0x28>
 80030f4:	2f62      	cmp	r7, #98	; 0x62
 80030f6:	d80a      	bhi.n	800310e <_printf_i+0x32>
 80030f8:	2f00      	cmp	r7, #0
 80030fa:	f000 80d8 	beq.w	80032ae <_printf_i+0x1d2>
 80030fe:	2f58      	cmp	r7, #88	; 0x58
 8003100:	f000 80a3 	beq.w	800324a <_printf_i+0x16e>
 8003104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800310c:	e03a      	b.n	8003184 <_printf_i+0xa8>
 800310e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003112:	2b15      	cmp	r3, #21
 8003114:	d8f6      	bhi.n	8003104 <_printf_i+0x28>
 8003116:	a001      	add	r0, pc, #4	; (adr r0, 800311c <_printf_i+0x40>)
 8003118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800311c:	08003175 	.word	0x08003175
 8003120:	08003189 	.word	0x08003189
 8003124:	08003105 	.word	0x08003105
 8003128:	08003105 	.word	0x08003105
 800312c:	08003105 	.word	0x08003105
 8003130:	08003105 	.word	0x08003105
 8003134:	08003189 	.word	0x08003189
 8003138:	08003105 	.word	0x08003105
 800313c:	08003105 	.word	0x08003105
 8003140:	08003105 	.word	0x08003105
 8003144:	08003105 	.word	0x08003105
 8003148:	08003295 	.word	0x08003295
 800314c:	080031b9 	.word	0x080031b9
 8003150:	08003277 	.word	0x08003277
 8003154:	08003105 	.word	0x08003105
 8003158:	08003105 	.word	0x08003105
 800315c:	080032b7 	.word	0x080032b7
 8003160:	08003105 	.word	0x08003105
 8003164:	080031b9 	.word	0x080031b9
 8003168:	08003105 	.word	0x08003105
 800316c:	08003105 	.word	0x08003105
 8003170:	0800327f 	.word	0x0800327f
 8003174:	680b      	ldr	r3, [r1, #0]
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	600a      	str	r2, [r1, #0]
 800317c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003184:	2301      	movs	r3, #1
 8003186:	e0a3      	b.n	80032d0 <_printf_i+0x1f4>
 8003188:	6825      	ldr	r5, [r4, #0]
 800318a:	6808      	ldr	r0, [r1, #0]
 800318c:	062e      	lsls	r6, r5, #24
 800318e:	f100 0304 	add.w	r3, r0, #4
 8003192:	d50a      	bpl.n	80031aa <_printf_i+0xce>
 8003194:	6805      	ldr	r5, [r0, #0]
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	2d00      	cmp	r5, #0
 800319a:	da03      	bge.n	80031a4 <_printf_i+0xc8>
 800319c:	232d      	movs	r3, #45	; 0x2d
 800319e:	426d      	negs	r5, r5
 80031a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a4:	485e      	ldr	r0, [pc, #376]	; (8003320 <_printf_i+0x244>)
 80031a6:	230a      	movs	r3, #10
 80031a8:	e019      	b.n	80031de <_printf_i+0x102>
 80031aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031ae:	6805      	ldr	r5, [r0, #0]
 80031b0:	600b      	str	r3, [r1, #0]
 80031b2:	bf18      	it	ne
 80031b4:	b22d      	sxthne	r5, r5
 80031b6:	e7ef      	b.n	8003198 <_printf_i+0xbc>
 80031b8:	680b      	ldr	r3, [r1, #0]
 80031ba:	6825      	ldr	r5, [r4, #0]
 80031bc:	1d18      	adds	r0, r3, #4
 80031be:	6008      	str	r0, [r1, #0]
 80031c0:	0628      	lsls	r0, r5, #24
 80031c2:	d501      	bpl.n	80031c8 <_printf_i+0xec>
 80031c4:	681d      	ldr	r5, [r3, #0]
 80031c6:	e002      	b.n	80031ce <_printf_i+0xf2>
 80031c8:	0669      	lsls	r1, r5, #25
 80031ca:	d5fb      	bpl.n	80031c4 <_printf_i+0xe8>
 80031cc:	881d      	ldrh	r5, [r3, #0]
 80031ce:	4854      	ldr	r0, [pc, #336]	; (8003320 <_printf_i+0x244>)
 80031d0:	2f6f      	cmp	r7, #111	; 0x6f
 80031d2:	bf0c      	ite	eq
 80031d4:	2308      	moveq	r3, #8
 80031d6:	230a      	movne	r3, #10
 80031d8:	2100      	movs	r1, #0
 80031da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031de:	6866      	ldr	r6, [r4, #4]
 80031e0:	60a6      	str	r6, [r4, #8]
 80031e2:	2e00      	cmp	r6, #0
 80031e4:	bfa2      	ittt	ge
 80031e6:	6821      	ldrge	r1, [r4, #0]
 80031e8:	f021 0104 	bicge.w	r1, r1, #4
 80031ec:	6021      	strge	r1, [r4, #0]
 80031ee:	b90d      	cbnz	r5, 80031f4 <_printf_i+0x118>
 80031f0:	2e00      	cmp	r6, #0
 80031f2:	d04d      	beq.n	8003290 <_printf_i+0x1b4>
 80031f4:	4616      	mov	r6, r2
 80031f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80031fa:	fb03 5711 	mls	r7, r3, r1, r5
 80031fe:	5dc7      	ldrb	r7, [r0, r7]
 8003200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003204:	462f      	mov	r7, r5
 8003206:	42bb      	cmp	r3, r7
 8003208:	460d      	mov	r5, r1
 800320a:	d9f4      	bls.n	80031f6 <_printf_i+0x11a>
 800320c:	2b08      	cmp	r3, #8
 800320e:	d10b      	bne.n	8003228 <_printf_i+0x14c>
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	07df      	lsls	r7, r3, #31
 8003214:	d508      	bpl.n	8003228 <_printf_i+0x14c>
 8003216:	6923      	ldr	r3, [r4, #16]
 8003218:	6861      	ldr	r1, [r4, #4]
 800321a:	4299      	cmp	r1, r3
 800321c:	bfde      	ittt	le
 800321e:	2330      	movle	r3, #48	; 0x30
 8003220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003224:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003228:	1b92      	subs	r2, r2, r6
 800322a:	6122      	str	r2, [r4, #16]
 800322c:	f8cd a000 	str.w	sl, [sp]
 8003230:	464b      	mov	r3, r9
 8003232:	aa03      	add	r2, sp, #12
 8003234:	4621      	mov	r1, r4
 8003236:	4640      	mov	r0, r8
 8003238:	f7ff fee2 	bl	8003000 <_printf_common>
 800323c:	3001      	adds	r0, #1
 800323e:	d14c      	bne.n	80032da <_printf_i+0x1fe>
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	b004      	add	sp, #16
 8003246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800324a:	4835      	ldr	r0, [pc, #212]	; (8003320 <_printf_i+0x244>)
 800324c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	680e      	ldr	r6, [r1, #0]
 8003254:	061f      	lsls	r7, r3, #24
 8003256:	f856 5b04 	ldr.w	r5, [r6], #4
 800325a:	600e      	str	r6, [r1, #0]
 800325c:	d514      	bpl.n	8003288 <_printf_i+0x1ac>
 800325e:	07d9      	lsls	r1, r3, #31
 8003260:	bf44      	itt	mi
 8003262:	f043 0320 	orrmi.w	r3, r3, #32
 8003266:	6023      	strmi	r3, [r4, #0]
 8003268:	b91d      	cbnz	r5, 8003272 <_printf_i+0x196>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	f023 0320 	bic.w	r3, r3, #32
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	2310      	movs	r3, #16
 8003274:	e7b0      	b.n	80031d8 <_printf_i+0xfc>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f043 0320 	orr.w	r3, r3, #32
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	2378      	movs	r3, #120	; 0x78
 8003280:	4828      	ldr	r0, [pc, #160]	; (8003324 <_printf_i+0x248>)
 8003282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003286:	e7e3      	b.n	8003250 <_printf_i+0x174>
 8003288:	065e      	lsls	r6, r3, #25
 800328a:	bf48      	it	mi
 800328c:	b2ad      	uxthmi	r5, r5
 800328e:	e7e6      	b.n	800325e <_printf_i+0x182>
 8003290:	4616      	mov	r6, r2
 8003292:	e7bb      	b.n	800320c <_printf_i+0x130>
 8003294:	680b      	ldr	r3, [r1, #0]
 8003296:	6826      	ldr	r6, [r4, #0]
 8003298:	6960      	ldr	r0, [r4, #20]
 800329a:	1d1d      	adds	r5, r3, #4
 800329c:	600d      	str	r5, [r1, #0]
 800329e:	0635      	lsls	r5, r6, #24
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	d501      	bpl.n	80032a8 <_printf_i+0x1cc>
 80032a4:	6018      	str	r0, [r3, #0]
 80032a6:	e002      	b.n	80032ae <_printf_i+0x1d2>
 80032a8:	0671      	lsls	r1, r6, #25
 80032aa:	d5fb      	bpl.n	80032a4 <_printf_i+0x1c8>
 80032ac:	8018      	strh	r0, [r3, #0]
 80032ae:	2300      	movs	r3, #0
 80032b0:	6123      	str	r3, [r4, #16]
 80032b2:	4616      	mov	r6, r2
 80032b4:	e7ba      	b.n	800322c <_printf_i+0x150>
 80032b6:	680b      	ldr	r3, [r1, #0]
 80032b8:	1d1a      	adds	r2, r3, #4
 80032ba:	600a      	str	r2, [r1, #0]
 80032bc:	681e      	ldr	r6, [r3, #0]
 80032be:	6862      	ldr	r2, [r4, #4]
 80032c0:	2100      	movs	r1, #0
 80032c2:	4630      	mov	r0, r6
 80032c4:	f7fc ff84 	bl	80001d0 <memchr>
 80032c8:	b108      	cbz	r0, 80032ce <_printf_i+0x1f2>
 80032ca:	1b80      	subs	r0, r0, r6
 80032cc:	6060      	str	r0, [r4, #4]
 80032ce:	6863      	ldr	r3, [r4, #4]
 80032d0:	6123      	str	r3, [r4, #16]
 80032d2:	2300      	movs	r3, #0
 80032d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d8:	e7a8      	b.n	800322c <_printf_i+0x150>
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	4632      	mov	r2, r6
 80032de:	4649      	mov	r1, r9
 80032e0:	4640      	mov	r0, r8
 80032e2:	47d0      	blx	sl
 80032e4:	3001      	adds	r0, #1
 80032e6:	d0ab      	beq.n	8003240 <_printf_i+0x164>
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	079b      	lsls	r3, r3, #30
 80032ec:	d413      	bmi.n	8003316 <_printf_i+0x23a>
 80032ee:	68e0      	ldr	r0, [r4, #12]
 80032f0:	9b03      	ldr	r3, [sp, #12]
 80032f2:	4298      	cmp	r0, r3
 80032f4:	bfb8      	it	lt
 80032f6:	4618      	movlt	r0, r3
 80032f8:	e7a4      	b.n	8003244 <_printf_i+0x168>
 80032fa:	2301      	movs	r3, #1
 80032fc:	4632      	mov	r2, r6
 80032fe:	4649      	mov	r1, r9
 8003300:	4640      	mov	r0, r8
 8003302:	47d0      	blx	sl
 8003304:	3001      	adds	r0, #1
 8003306:	d09b      	beq.n	8003240 <_printf_i+0x164>
 8003308:	3501      	adds	r5, #1
 800330a:	68e3      	ldr	r3, [r4, #12]
 800330c:	9903      	ldr	r1, [sp, #12]
 800330e:	1a5b      	subs	r3, r3, r1
 8003310:	42ab      	cmp	r3, r5
 8003312:	dcf2      	bgt.n	80032fa <_printf_i+0x21e>
 8003314:	e7eb      	b.n	80032ee <_printf_i+0x212>
 8003316:	2500      	movs	r5, #0
 8003318:	f104 0619 	add.w	r6, r4, #25
 800331c:	e7f5      	b.n	800330a <_printf_i+0x22e>
 800331e:	bf00      	nop
 8003320:	080039f9 	.word	0x080039f9
 8003324:	08003a0a 	.word	0x08003a0a

08003328 <_sbrk_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4d06      	ldr	r5, [pc, #24]	; (8003344 <_sbrk_r+0x1c>)
 800332c:	2300      	movs	r3, #0
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	f7ff faea 	bl	800290c <_sbrk>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_sbrk_r+0x1a>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b103      	cbz	r3, 8003342 <_sbrk_r+0x1a>
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	20000198 	.word	0x20000198

08003348 <__sread>:
 8003348:	b510      	push	{r4, lr}
 800334a:	460c      	mov	r4, r1
 800334c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003350:	f000 fab4 	bl	80038bc <_read_r>
 8003354:	2800      	cmp	r0, #0
 8003356:	bfab      	itete	ge
 8003358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800335a:	89a3      	ldrhlt	r3, [r4, #12]
 800335c:	181b      	addge	r3, r3, r0
 800335e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003362:	bfac      	ite	ge
 8003364:	6563      	strge	r3, [r4, #84]	; 0x54
 8003366:	81a3      	strhlt	r3, [r4, #12]
 8003368:	bd10      	pop	{r4, pc}

0800336a <__swrite>:
 800336a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336e:	461f      	mov	r7, r3
 8003370:	898b      	ldrh	r3, [r1, #12]
 8003372:	05db      	lsls	r3, r3, #23
 8003374:	4605      	mov	r5, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4616      	mov	r6, r2
 800337a:	d505      	bpl.n	8003388 <__swrite+0x1e>
 800337c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003380:	2302      	movs	r3, #2
 8003382:	2200      	movs	r2, #0
 8003384:	f000 f9c8 	bl	8003718 <_lseek_r>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800338e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	4632      	mov	r2, r6
 8003396:	463b      	mov	r3, r7
 8003398:	4628      	mov	r0, r5
 800339a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800339e:	f000 b869 	b.w	8003474 <_write_r>

080033a2 <__sseek>:
 80033a2:	b510      	push	{r4, lr}
 80033a4:	460c      	mov	r4, r1
 80033a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033aa:	f000 f9b5 	bl	8003718 <_lseek_r>
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	bf15      	itete	ne
 80033b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80033b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033be:	81a3      	strheq	r3, [r4, #12]
 80033c0:	bf18      	it	ne
 80033c2:	81a3      	strhne	r3, [r4, #12]
 80033c4:	bd10      	pop	{r4, pc}

080033c6 <__sclose>:
 80033c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ca:	f000 b8d3 	b.w	8003574 <_close_r>
	...

080033d0 <__swbuf_r>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	460e      	mov	r6, r1
 80033d4:	4614      	mov	r4, r2
 80033d6:	4605      	mov	r5, r0
 80033d8:	b118      	cbz	r0, 80033e2 <__swbuf_r+0x12>
 80033da:	6983      	ldr	r3, [r0, #24]
 80033dc:	b90b      	cbnz	r3, 80033e2 <__swbuf_r+0x12>
 80033de:	f7ff fbbb 	bl	8002b58 <__sinit>
 80033e2:	4b21      	ldr	r3, [pc, #132]	; (8003468 <__swbuf_r+0x98>)
 80033e4:	429c      	cmp	r4, r3
 80033e6:	d12b      	bne.n	8003440 <__swbuf_r+0x70>
 80033e8:	686c      	ldr	r4, [r5, #4]
 80033ea:	69a3      	ldr	r3, [r4, #24]
 80033ec:	60a3      	str	r3, [r4, #8]
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	071a      	lsls	r2, r3, #28
 80033f2:	d52f      	bpl.n	8003454 <__swbuf_r+0x84>
 80033f4:	6923      	ldr	r3, [r4, #16]
 80033f6:	b36b      	cbz	r3, 8003454 <__swbuf_r+0x84>
 80033f8:	6923      	ldr	r3, [r4, #16]
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	1ac0      	subs	r0, r0, r3
 80033fe:	6963      	ldr	r3, [r4, #20]
 8003400:	b2f6      	uxtb	r6, r6
 8003402:	4283      	cmp	r3, r0
 8003404:	4637      	mov	r7, r6
 8003406:	dc04      	bgt.n	8003412 <__swbuf_r+0x42>
 8003408:	4621      	mov	r1, r4
 800340a:	4628      	mov	r0, r5
 800340c:	f000 f948 	bl	80036a0 <_fflush_r>
 8003410:	bb30      	cbnz	r0, 8003460 <__swbuf_r+0x90>
 8003412:	68a3      	ldr	r3, [r4, #8]
 8003414:	3b01      	subs	r3, #1
 8003416:	60a3      	str	r3, [r4, #8]
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	6022      	str	r2, [r4, #0]
 800341e:	701e      	strb	r6, [r3, #0]
 8003420:	6963      	ldr	r3, [r4, #20]
 8003422:	3001      	adds	r0, #1
 8003424:	4283      	cmp	r3, r0
 8003426:	d004      	beq.n	8003432 <__swbuf_r+0x62>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	07db      	lsls	r3, r3, #31
 800342c:	d506      	bpl.n	800343c <__swbuf_r+0x6c>
 800342e:	2e0a      	cmp	r6, #10
 8003430:	d104      	bne.n	800343c <__swbuf_r+0x6c>
 8003432:	4621      	mov	r1, r4
 8003434:	4628      	mov	r0, r5
 8003436:	f000 f933 	bl	80036a0 <_fflush_r>
 800343a:	b988      	cbnz	r0, 8003460 <__swbuf_r+0x90>
 800343c:	4638      	mov	r0, r7
 800343e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <__swbuf_r+0x9c>)
 8003442:	429c      	cmp	r4, r3
 8003444:	d101      	bne.n	800344a <__swbuf_r+0x7a>
 8003446:	68ac      	ldr	r4, [r5, #8]
 8003448:	e7cf      	b.n	80033ea <__swbuf_r+0x1a>
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <__swbuf_r+0xa0>)
 800344c:	429c      	cmp	r4, r3
 800344e:	bf08      	it	eq
 8003450:	68ec      	ldreq	r4, [r5, #12]
 8003452:	e7ca      	b.n	80033ea <__swbuf_r+0x1a>
 8003454:	4621      	mov	r1, r4
 8003456:	4628      	mov	r0, r5
 8003458:	f000 f81e 	bl	8003498 <__swsetup_r>
 800345c:	2800      	cmp	r0, #0
 800345e:	d0cb      	beq.n	80033f8 <__swbuf_r+0x28>
 8003460:	f04f 37ff 	mov.w	r7, #4294967295
 8003464:	e7ea      	b.n	800343c <__swbuf_r+0x6c>
 8003466:	bf00      	nop
 8003468:	080039a8 	.word	0x080039a8
 800346c:	080039c8 	.word	0x080039c8
 8003470:	08003988 	.word	0x08003988

08003474 <_write_r>:
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	4d07      	ldr	r5, [pc, #28]	; (8003494 <_write_r+0x20>)
 8003478:	4604      	mov	r4, r0
 800347a:	4608      	mov	r0, r1
 800347c:	4611      	mov	r1, r2
 800347e:	2200      	movs	r2, #0
 8003480:	602a      	str	r2, [r5, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	f7ff fa33 	bl	80028ee <_write>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d102      	bne.n	8003492 <_write_r+0x1e>
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	b103      	cbz	r3, 8003492 <_write_r+0x1e>
 8003490:	6023      	str	r3, [r4, #0]
 8003492:	bd38      	pop	{r3, r4, r5, pc}
 8003494:	20000198 	.word	0x20000198

08003498 <__swsetup_r>:
 8003498:	4b32      	ldr	r3, [pc, #200]	; (8003564 <__swsetup_r+0xcc>)
 800349a:	b570      	push	{r4, r5, r6, lr}
 800349c:	681d      	ldr	r5, [r3, #0]
 800349e:	4606      	mov	r6, r0
 80034a0:	460c      	mov	r4, r1
 80034a2:	b125      	cbz	r5, 80034ae <__swsetup_r+0x16>
 80034a4:	69ab      	ldr	r3, [r5, #24]
 80034a6:	b913      	cbnz	r3, 80034ae <__swsetup_r+0x16>
 80034a8:	4628      	mov	r0, r5
 80034aa:	f7ff fb55 	bl	8002b58 <__sinit>
 80034ae:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <__swsetup_r+0xd0>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	d10f      	bne.n	80034d4 <__swsetup_r+0x3c>
 80034b4:	686c      	ldr	r4, [r5, #4]
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034bc:	0719      	lsls	r1, r3, #28
 80034be:	d42c      	bmi.n	800351a <__swsetup_r+0x82>
 80034c0:	06dd      	lsls	r5, r3, #27
 80034c2:	d411      	bmi.n	80034e8 <__swsetup_r+0x50>
 80034c4:	2309      	movs	r3, #9
 80034c6:	6033      	str	r3, [r6, #0]
 80034c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034cc:	81a3      	strh	r3, [r4, #12]
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	e03e      	b.n	8003552 <__swsetup_r+0xba>
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <__swsetup_r+0xd4>)
 80034d6:	429c      	cmp	r4, r3
 80034d8:	d101      	bne.n	80034de <__swsetup_r+0x46>
 80034da:	68ac      	ldr	r4, [r5, #8]
 80034dc:	e7eb      	b.n	80034b6 <__swsetup_r+0x1e>
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <__swsetup_r+0xd8>)
 80034e0:	429c      	cmp	r4, r3
 80034e2:	bf08      	it	eq
 80034e4:	68ec      	ldreq	r4, [r5, #12]
 80034e6:	e7e6      	b.n	80034b6 <__swsetup_r+0x1e>
 80034e8:	0758      	lsls	r0, r3, #29
 80034ea:	d512      	bpl.n	8003512 <__swsetup_r+0x7a>
 80034ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034ee:	b141      	cbz	r1, 8003502 <__swsetup_r+0x6a>
 80034f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034f4:	4299      	cmp	r1, r3
 80034f6:	d002      	beq.n	80034fe <__swsetup_r+0x66>
 80034f8:	4630      	mov	r0, r6
 80034fa:	f000 f98f 	bl	800381c <_free_r>
 80034fe:	2300      	movs	r3, #0
 8003500:	6363      	str	r3, [r4, #52]	; 0x34
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	2300      	movs	r3, #0
 800350c:	6063      	str	r3, [r4, #4]
 800350e:	6923      	ldr	r3, [r4, #16]
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	81a3      	strh	r3, [r4, #12]
 800351a:	6923      	ldr	r3, [r4, #16]
 800351c:	b94b      	cbnz	r3, 8003532 <__swsetup_r+0x9a>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003528:	d003      	beq.n	8003532 <__swsetup_r+0x9a>
 800352a:	4621      	mov	r1, r4
 800352c:	4630      	mov	r0, r6
 800352e:	f000 f929 	bl	8003784 <__smakebuf_r>
 8003532:	89a0      	ldrh	r0, [r4, #12]
 8003534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003538:	f010 0301 	ands.w	r3, r0, #1
 800353c:	d00a      	beq.n	8003554 <__swsetup_r+0xbc>
 800353e:	2300      	movs	r3, #0
 8003540:	60a3      	str	r3, [r4, #8]
 8003542:	6963      	ldr	r3, [r4, #20]
 8003544:	425b      	negs	r3, r3
 8003546:	61a3      	str	r3, [r4, #24]
 8003548:	6923      	ldr	r3, [r4, #16]
 800354a:	b943      	cbnz	r3, 800355e <__swsetup_r+0xc6>
 800354c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003550:	d1ba      	bne.n	80034c8 <__swsetup_r+0x30>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	0781      	lsls	r1, r0, #30
 8003556:	bf58      	it	pl
 8003558:	6963      	ldrpl	r3, [r4, #20]
 800355a:	60a3      	str	r3, [r4, #8]
 800355c:	e7f4      	b.n	8003548 <__swsetup_r+0xb0>
 800355e:	2000      	movs	r0, #0
 8003560:	e7f7      	b.n	8003552 <__swsetup_r+0xba>
 8003562:	bf00      	nop
 8003564:	2000000c 	.word	0x2000000c
 8003568:	080039a8 	.word	0x080039a8
 800356c:	080039c8 	.word	0x080039c8
 8003570:	08003988 	.word	0x08003988

08003574 <_close_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	4d06      	ldr	r5, [pc, #24]	; (8003590 <_close_r+0x1c>)
 8003578:	2300      	movs	r3, #0
 800357a:	4604      	mov	r4, r0
 800357c:	4608      	mov	r0, r1
 800357e:	602b      	str	r3, [r5, #0]
 8003580:	f7ff f9e2 	bl	8002948 <_close>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d102      	bne.n	800358e <_close_r+0x1a>
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	b103      	cbz	r3, 800358e <_close_r+0x1a>
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	bd38      	pop	{r3, r4, r5, pc}
 8003590:	20000198 	.word	0x20000198

08003594 <__sflush_r>:
 8003594:	898a      	ldrh	r2, [r1, #12]
 8003596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359a:	4605      	mov	r5, r0
 800359c:	0710      	lsls	r0, r2, #28
 800359e:	460c      	mov	r4, r1
 80035a0:	d458      	bmi.n	8003654 <__sflush_r+0xc0>
 80035a2:	684b      	ldr	r3, [r1, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	dc05      	bgt.n	80035b4 <__sflush_r+0x20>
 80035a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	dc02      	bgt.n	80035b4 <__sflush_r+0x20>
 80035ae:	2000      	movs	r0, #0
 80035b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035b6:	2e00      	cmp	r6, #0
 80035b8:	d0f9      	beq.n	80035ae <__sflush_r+0x1a>
 80035ba:	2300      	movs	r3, #0
 80035bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035c0:	682f      	ldr	r7, [r5, #0]
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	d032      	beq.n	800362c <__sflush_r+0x98>
 80035c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	075a      	lsls	r2, r3, #29
 80035cc:	d505      	bpl.n	80035da <__sflush_r+0x46>
 80035ce:	6863      	ldr	r3, [r4, #4]
 80035d0:	1ac0      	subs	r0, r0, r3
 80035d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035d4:	b10b      	cbz	r3, 80035da <__sflush_r+0x46>
 80035d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035d8:	1ac0      	subs	r0, r0, r3
 80035da:	2300      	movs	r3, #0
 80035dc:	4602      	mov	r2, r0
 80035de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035e0:	6a21      	ldr	r1, [r4, #32]
 80035e2:	4628      	mov	r0, r5
 80035e4:	47b0      	blx	r6
 80035e6:	1c43      	adds	r3, r0, #1
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	d106      	bne.n	80035fa <__sflush_r+0x66>
 80035ec:	6829      	ldr	r1, [r5, #0]
 80035ee:	291d      	cmp	r1, #29
 80035f0:	d82c      	bhi.n	800364c <__sflush_r+0xb8>
 80035f2:	4a2a      	ldr	r2, [pc, #168]	; (800369c <__sflush_r+0x108>)
 80035f4:	40ca      	lsrs	r2, r1
 80035f6:	07d6      	lsls	r6, r2, #31
 80035f8:	d528      	bpl.n	800364c <__sflush_r+0xb8>
 80035fa:	2200      	movs	r2, #0
 80035fc:	6062      	str	r2, [r4, #4]
 80035fe:	04d9      	lsls	r1, r3, #19
 8003600:	6922      	ldr	r2, [r4, #16]
 8003602:	6022      	str	r2, [r4, #0]
 8003604:	d504      	bpl.n	8003610 <__sflush_r+0x7c>
 8003606:	1c42      	adds	r2, r0, #1
 8003608:	d101      	bne.n	800360e <__sflush_r+0x7a>
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	b903      	cbnz	r3, 8003610 <__sflush_r+0x7c>
 800360e:	6560      	str	r0, [r4, #84]	; 0x54
 8003610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003612:	602f      	str	r7, [r5, #0]
 8003614:	2900      	cmp	r1, #0
 8003616:	d0ca      	beq.n	80035ae <__sflush_r+0x1a>
 8003618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361c:	4299      	cmp	r1, r3
 800361e:	d002      	beq.n	8003626 <__sflush_r+0x92>
 8003620:	4628      	mov	r0, r5
 8003622:	f000 f8fb 	bl	800381c <_free_r>
 8003626:	2000      	movs	r0, #0
 8003628:	6360      	str	r0, [r4, #52]	; 0x34
 800362a:	e7c1      	b.n	80035b0 <__sflush_r+0x1c>
 800362c:	6a21      	ldr	r1, [r4, #32]
 800362e:	2301      	movs	r3, #1
 8003630:	4628      	mov	r0, r5
 8003632:	47b0      	blx	r6
 8003634:	1c41      	adds	r1, r0, #1
 8003636:	d1c7      	bne.n	80035c8 <__sflush_r+0x34>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0c4      	beq.n	80035c8 <__sflush_r+0x34>
 800363e:	2b1d      	cmp	r3, #29
 8003640:	d001      	beq.n	8003646 <__sflush_r+0xb2>
 8003642:	2b16      	cmp	r3, #22
 8003644:	d101      	bne.n	800364a <__sflush_r+0xb6>
 8003646:	602f      	str	r7, [r5, #0]
 8003648:	e7b1      	b.n	80035ae <__sflush_r+0x1a>
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	e7ad      	b.n	80035b0 <__sflush_r+0x1c>
 8003654:	690f      	ldr	r7, [r1, #16]
 8003656:	2f00      	cmp	r7, #0
 8003658:	d0a9      	beq.n	80035ae <__sflush_r+0x1a>
 800365a:	0793      	lsls	r3, r2, #30
 800365c:	680e      	ldr	r6, [r1, #0]
 800365e:	bf08      	it	eq
 8003660:	694b      	ldreq	r3, [r1, #20]
 8003662:	600f      	str	r7, [r1, #0]
 8003664:	bf18      	it	ne
 8003666:	2300      	movne	r3, #0
 8003668:	eba6 0807 	sub.w	r8, r6, r7
 800366c:	608b      	str	r3, [r1, #8]
 800366e:	f1b8 0f00 	cmp.w	r8, #0
 8003672:	dd9c      	ble.n	80035ae <__sflush_r+0x1a>
 8003674:	6a21      	ldr	r1, [r4, #32]
 8003676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003678:	4643      	mov	r3, r8
 800367a:	463a      	mov	r2, r7
 800367c:	4628      	mov	r0, r5
 800367e:	47b0      	blx	r6
 8003680:	2800      	cmp	r0, #0
 8003682:	dc06      	bgt.n	8003692 <__sflush_r+0xfe>
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	e78e      	b.n	80035b0 <__sflush_r+0x1c>
 8003692:	4407      	add	r7, r0
 8003694:	eba8 0800 	sub.w	r8, r8, r0
 8003698:	e7e9      	b.n	800366e <__sflush_r+0xda>
 800369a:	bf00      	nop
 800369c:	20400001 	.word	0x20400001

080036a0 <_fflush_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	4605      	mov	r5, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	b913      	cbnz	r3, 80036b0 <_fflush_r+0x10>
 80036aa:	2500      	movs	r5, #0
 80036ac:	4628      	mov	r0, r5
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	b118      	cbz	r0, 80036ba <_fflush_r+0x1a>
 80036b2:	6983      	ldr	r3, [r0, #24]
 80036b4:	b90b      	cbnz	r3, 80036ba <_fflush_r+0x1a>
 80036b6:	f7ff fa4f 	bl	8002b58 <__sinit>
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <_fflush_r+0x6c>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d11b      	bne.n	80036f8 <_fflush_r+0x58>
 80036c0:	686c      	ldr	r4, [r5, #4]
 80036c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ef      	beq.n	80036aa <_fflush_r+0xa>
 80036ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036cc:	07d0      	lsls	r0, r2, #31
 80036ce:	d404      	bmi.n	80036da <_fflush_r+0x3a>
 80036d0:	0599      	lsls	r1, r3, #22
 80036d2:	d402      	bmi.n	80036da <_fflush_r+0x3a>
 80036d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036d6:	f7ff fadd 	bl	8002c94 <__retarget_lock_acquire_recursive>
 80036da:	4628      	mov	r0, r5
 80036dc:	4621      	mov	r1, r4
 80036de:	f7ff ff59 	bl	8003594 <__sflush_r>
 80036e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036e4:	07da      	lsls	r2, r3, #31
 80036e6:	4605      	mov	r5, r0
 80036e8:	d4e0      	bmi.n	80036ac <_fflush_r+0xc>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	059b      	lsls	r3, r3, #22
 80036ee:	d4dd      	bmi.n	80036ac <_fflush_r+0xc>
 80036f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036f2:	f7ff fad0 	bl	8002c96 <__retarget_lock_release_recursive>
 80036f6:	e7d9      	b.n	80036ac <_fflush_r+0xc>
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <_fflush_r+0x70>)
 80036fa:	429c      	cmp	r4, r3
 80036fc:	d101      	bne.n	8003702 <_fflush_r+0x62>
 80036fe:	68ac      	ldr	r4, [r5, #8]
 8003700:	e7df      	b.n	80036c2 <_fflush_r+0x22>
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <_fflush_r+0x74>)
 8003704:	429c      	cmp	r4, r3
 8003706:	bf08      	it	eq
 8003708:	68ec      	ldreq	r4, [r5, #12]
 800370a:	e7da      	b.n	80036c2 <_fflush_r+0x22>
 800370c:	080039a8 	.word	0x080039a8
 8003710:	080039c8 	.word	0x080039c8
 8003714:	08003988 	.word	0x08003988

08003718 <_lseek_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4d07      	ldr	r5, [pc, #28]	; (8003738 <_lseek_r+0x20>)
 800371c:	4604      	mov	r4, r0
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	2200      	movs	r2, #0
 8003724:	602a      	str	r2, [r5, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f7ff f918 	bl	800295c <_lseek>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_lseek_r+0x1e>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_lseek_r+0x1e>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	20000198 	.word	0x20000198

0800373c <__swhatbuf_r>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	460e      	mov	r6, r1
 8003740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003744:	2900      	cmp	r1, #0
 8003746:	b096      	sub	sp, #88	; 0x58
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	da07      	bge.n	800375e <__swhatbuf_r+0x22>
 800374e:	2300      	movs	r3, #0
 8003750:	602b      	str	r3, [r5, #0]
 8003752:	89b3      	ldrh	r3, [r6, #12]
 8003754:	061a      	lsls	r2, r3, #24
 8003756:	d410      	bmi.n	800377a <__swhatbuf_r+0x3e>
 8003758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375c:	e00e      	b.n	800377c <__swhatbuf_r+0x40>
 800375e:	466a      	mov	r2, sp
 8003760:	f000 f8be 	bl	80038e0 <_fstat_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	dbf2      	blt.n	800374e <__swhatbuf_r+0x12>
 8003768:	9a01      	ldr	r2, [sp, #4]
 800376a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800376e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003772:	425a      	negs	r2, r3
 8003774:	415a      	adcs	r2, r3
 8003776:	602a      	str	r2, [r5, #0]
 8003778:	e7ee      	b.n	8003758 <__swhatbuf_r+0x1c>
 800377a:	2340      	movs	r3, #64	; 0x40
 800377c:	2000      	movs	r0, #0
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	b016      	add	sp, #88	; 0x58
 8003782:	bd70      	pop	{r4, r5, r6, pc}

08003784 <__smakebuf_r>:
 8003784:	898b      	ldrh	r3, [r1, #12]
 8003786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003788:	079d      	lsls	r5, r3, #30
 800378a:	4606      	mov	r6, r0
 800378c:	460c      	mov	r4, r1
 800378e:	d507      	bpl.n	80037a0 <__smakebuf_r+0x1c>
 8003790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	6123      	str	r3, [r4, #16]
 8003798:	2301      	movs	r3, #1
 800379a:	6163      	str	r3, [r4, #20]
 800379c:	b002      	add	sp, #8
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	ab01      	add	r3, sp, #4
 80037a2:	466a      	mov	r2, sp
 80037a4:	f7ff ffca 	bl	800373c <__swhatbuf_r>
 80037a8:	9900      	ldr	r1, [sp, #0]
 80037aa:	4605      	mov	r5, r0
 80037ac:	4630      	mov	r0, r6
 80037ae:	f7ff fa73 	bl	8002c98 <_malloc_r>
 80037b2:	b948      	cbnz	r0, 80037c8 <__smakebuf_r+0x44>
 80037b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b8:	059a      	lsls	r2, r3, #22
 80037ba:	d4ef      	bmi.n	800379c <__smakebuf_r+0x18>
 80037bc:	f023 0303 	bic.w	r3, r3, #3
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	81a3      	strh	r3, [r4, #12]
 80037c6:	e7e3      	b.n	8003790 <__smakebuf_r+0xc>
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <__smakebuf_r+0x7c>)
 80037ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	6020      	str	r0, [r4, #0]
 80037d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	9b00      	ldr	r3, [sp, #0]
 80037d8:	6163      	str	r3, [r4, #20]
 80037da:	9b01      	ldr	r3, [sp, #4]
 80037dc:	6120      	str	r0, [r4, #16]
 80037de:	b15b      	cbz	r3, 80037f8 <__smakebuf_r+0x74>
 80037e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 f88d 	bl	8003904 <_isatty_r>
 80037ea:	b128      	cbz	r0, 80037f8 <__smakebuf_r+0x74>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	81a3      	strh	r3, [r4, #12]
 80037f8:	89a0      	ldrh	r0, [r4, #12]
 80037fa:	4305      	orrs	r5, r0
 80037fc:	81a5      	strh	r5, [r4, #12]
 80037fe:	e7cd      	b.n	800379c <__smakebuf_r+0x18>
 8003800:	08002af1 	.word	0x08002af1

08003804 <__malloc_lock>:
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <__malloc_lock+0x8>)
 8003806:	f7ff ba45 	b.w	8002c94 <__retarget_lock_acquire_recursive>
 800380a:	bf00      	nop
 800380c:	20000190 	.word	0x20000190

08003810 <__malloc_unlock>:
 8003810:	4801      	ldr	r0, [pc, #4]	; (8003818 <__malloc_unlock+0x8>)
 8003812:	f7ff ba40 	b.w	8002c96 <__retarget_lock_release_recursive>
 8003816:	bf00      	nop
 8003818:	20000190 	.word	0x20000190

0800381c <_free_r>:
 800381c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800381e:	2900      	cmp	r1, #0
 8003820:	d048      	beq.n	80038b4 <_free_r+0x98>
 8003822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003826:	9001      	str	r0, [sp, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f1a1 0404 	sub.w	r4, r1, #4
 800382e:	bfb8      	it	lt
 8003830:	18e4      	addlt	r4, r4, r3
 8003832:	f7ff ffe7 	bl	8003804 <__malloc_lock>
 8003836:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <_free_r+0x9c>)
 8003838:	9801      	ldr	r0, [sp, #4]
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	4615      	mov	r5, r2
 800383e:	b933      	cbnz	r3, 800384e <_free_r+0x32>
 8003840:	6063      	str	r3, [r4, #4]
 8003842:	6014      	str	r4, [r2, #0]
 8003844:	b003      	add	sp, #12
 8003846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800384a:	f7ff bfe1 	b.w	8003810 <__malloc_unlock>
 800384e:	42a3      	cmp	r3, r4
 8003850:	d90b      	bls.n	800386a <_free_r+0x4e>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	1862      	adds	r2, r4, r1
 8003856:	4293      	cmp	r3, r2
 8003858:	bf04      	itt	eq
 800385a:	681a      	ldreq	r2, [r3, #0]
 800385c:	685b      	ldreq	r3, [r3, #4]
 800385e:	6063      	str	r3, [r4, #4]
 8003860:	bf04      	itt	eq
 8003862:	1852      	addeq	r2, r2, r1
 8003864:	6022      	streq	r2, [r4, #0]
 8003866:	602c      	str	r4, [r5, #0]
 8003868:	e7ec      	b.n	8003844 <_free_r+0x28>
 800386a:	461a      	mov	r2, r3
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	b10b      	cbz	r3, 8003874 <_free_r+0x58>
 8003870:	42a3      	cmp	r3, r4
 8003872:	d9fa      	bls.n	800386a <_free_r+0x4e>
 8003874:	6811      	ldr	r1, [r2, #0]
 8003876:	1855      	adds	r5, r2, r1
 8003878:	42a5      	cmp	r5, r4
 800387a:	d10b      	bne.n	8003894 <_free_r+0x78>
 800387c:	6824      	ldr	r4, [r4, #0]
 800387e:	4421      	add	r1, r4
 8003880:	1854      	adds	r4, r2, r1
 8003882:	42a3      	cmp	r3, r4
 8003884:	6011      	str	r1, [r2, #0]
 8003886:	d1dd      	bne.n	8003844 <_free_r+0x28>
 8003888:	681c      	ldr	r4, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	6053      	str	r3, [r2, #4]
 800388e:	4421      	add	r1, r4
 8003890:	6011      	str	r1, [r2, #0]
 8003892:	e7d7      	b.n	8003844 <_free_r+0x28>
 8003894:	d902      	bls.n	800389c <_free_r+0x80>
 8003896:	230c      	movs	r3, #12
 8003898:	6003      	str	r3, [r0, #0]
 800389a:	e7d3      	b.n	8003844 <_free_r+0x28>
 800389c:	6825      	ldr	r5, [r4, #0]
 800389e:	1961      	adds	r1, r4, r5
 80038a0:	428b      	cmp	r3, r1
 80038a2:	bf04      	itt	eq
 80038a4:	6819      	ldreq	r1, [r3, #0]
 80038a6:	685b      	ldreq	r3, [r3, #4]
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	bf04      	itt	eq
 80038ac:	1949      	addeq	r1, r1, r5
 80038ae:	6021      	streq	r1, [r4, #0]
 80038b0:	6054      	str	r4, [r2, #4]
 80038b2:	e7c7      	b.n	8003844 <_free_r+0x28>
 80038b4:	b003      	add	sp, #12
 80038b6:	bd30      	pop	{r4, r5, pc}
 80038b8:	20000094 	.word	0x20000094

080038bc <_read_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4d07      	ldr	r5, [pc, #28]	; (80038dc <_read_r+0x20>)
 80038c0:	4604      	mov	r4, r0
 80038c2:	4608      	mov	r0, r1
 80038c4:	4611      	mov	r1, r2
 80038c6:	2200      	movs	r2, #0
 80038c8:	602a      	str	r2, [r5, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f7fe ffff 	bl	80028ce <_read>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_read_r+0x1e>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_read_r+0x1e>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	20000198 	.word	0x20000198

080038e0 <_fstat_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d07      	ldr	r5, [pc, #28]	; (8003900 <_fstat_r+0x20>)
 80038e4:	2300      	movs	r3, #0
 80038e6:	4604      	mov	r4, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	602b      	str	r3, [r5, #0]
 80038ee:	f7ff f82e 	bl	800294e <_fstat>
 80038f2:	1c43      	adds	r3, r0, #1
 80038f4:	d102      	bne.n	80038fc <_fstat_r+0x1c>
 80038f6:	682b      	ldr	r3, [r5, #0]
 80038f8:	b103      	cbz	r3, 80038fc <_fstat_r+0x1c>
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	bd38      	pop	{r3, r4, r5, pc}
 80038fe:	bf00      	nop
 8003900:	20000198 	.word	0x20000198

08003904 <_isatty_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4d06      	ldr	r5, [pc, #24]	; (8003920 <_isatty_r+0x1c>)
 8003908:	2300      	movs	r3, #0
 800390a:	4604      	mov	r4, r0
 800390c:	4608      	mov	r0, r1
 800390e:	602b      	str	r3, [r5, #0]
 8003910:	f7ff f822 	bl	8002958 <_isatty>
 8003914:	1c43      	adds	r3, r0, #1
 8003916:	d102      	bne.n	800391e <_isatty_r+0x1a>
 8003918:	682b      	ldr	r3, [r5, #0]
 800391a:	b103      	cbz	r3, 800391e <_isatty_r+0x1a>
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	bd38      	pop	{r3, r4, r5, pc}
 8003920:	20000198 	.word	0x20000198

08003924 <_init>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr

08003930 <_fini>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	bf00      	nop
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr
