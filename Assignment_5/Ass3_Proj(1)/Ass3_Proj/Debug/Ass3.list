
Ass3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001b6c  08001b6c  00011b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001b84  08001b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001b8c  08001b8c  00011b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08001b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000088  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000f8  200000f8  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ba08  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001d0f  00000000  00000000  0002baa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00003907  00000000  00000000  0002d7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  000310c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  00031768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212f2  00000000  00000000  00031dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000947c  00000000  00000000  000530b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4434  00000000  00000000  0005c52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001214  00000000  00000000  001209b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b54 	.word	0x08001b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08001b54 	.word	0x08001b54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b510      	push	{r4, lr}
 80004c2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x40>)
 80004c6:	7818      	ldrb	r0, [r3, #0]
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d0:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <HAL_InitTick+0x44>)
 80004d2:	6810      	ldr	r0, [r2, #0]
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 f8a8 	bl	800062c <HAL_SYSTICK_Config>
 80004dc:	b968      	cbnz	r0, 80004fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004de:	2c0f      	cmp	r4, #15
 80004e0:	d901      	bls.n	80004e6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
 80004e4:	e00a      	b.n	80004fc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e6:	2200      	movs	r2, #0
 80004e8:	4621      	mov	r1, r4
 80004ea:	f04f 30ff 	mov.w	r0, #4294967295
 80004ee:	f000 f849 	bl	8000584 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <HAL_InitTick+0x40>)
 80004f4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80004f6:	2000      	movs	r0, #0
 80004f8:	e000      	b.n	80004fc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80004fa:	2001      	movs	r0, #1
}
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000
 8000504:	20000008 	.word	0x20000008

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f81b 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f001 f984 	bl	800183c <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x10>)
 800053e:	6811      	ldr	r1, [r2, #0]
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_IncTick+0x14>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	440b      	add	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	200000a0 	.word	0x200000a0
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <HAL_GetTick+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	200000a0 	.word	0x200000a0

08000560 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000562:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800056c:	0200      	lsls	r0, r0, #8
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000572:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800057c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000584:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_NVIC_SetPriority+0x60>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058e:	f1c3 0407 	rsb	r4, r3, #7
 8000592:	2c04      	cmp	r4, #4
 8000594:	bf28      	it	cs
 8000596:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	1d1d      	adds	r5, r3, #4
 800059a:	2d06      	cmp	r5, #6
 800059c:	d918      	bls.n	80005d0 <HAL_NVIC_SetPriority+0x4c>
 800059e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	f04f 35ff 	mov.w	r5, #4294967295
 80005a4:	fa05 f404 	lsl.w	r4, r5, r4
 80005a8:	ea21 0104 	bic.w	r1, r1, r4
 80005ac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ae:	fa05 f303 	lsl.w	r3, r5, r3
 80005b2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005b8:	2800      	cmp	r0, #0
 80005ba:	db0b      	blt.n	80005d4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	0109      	lsls	r1, r1, #4
 80005be:	b2c9      	uxtb	r1, r1
 80005c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005c8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005cc:	bc30      	pop	{r4, r5}
 80005ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d0:	2300      	movs	r3, #0
 80005d2:	e7e5      	b.n	80005a0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f000 000f 	and.w	r0, r0, #15
 80005d8:	0109      	lsls	r1, r1, #4
 80005da:	b2c9      	uxtb	r1, r1
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <HAL_NVIC_SetPriority+0x64>)
 80005de:	5419      	strb	r1, [r3, r0]
 80005e0:	e7f4      	b.n	80005cc <HAL_NVIC_SetPriority+0x48>
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	e000ed14 	.word	0xe000ed14

080005ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005ec:	2800      	cmp	r0, #0
 80005ee:	db07      	blt.n	8000600 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f0:	f000 021f 	and.w	r2, r0, #31
 80005f4:	0940      	lsrs	r0, r0, #5
 80005f6:	2301      	movs	r3, #1
 80005f8:	4093      	lsls	r3, r2
 80005fa:	4a02      	ldr	r2, [pc, #8]	; (8000604 <HAL_NVIC_EnableIRQ+0x18>)
 80005fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100

08000608 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000608:	2800      	cmp	r0, #0
 800060a:	db0c      	blt.n	8000626 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060c:	f000 021f 	and.w	r2, r0, #31
 8000610:	0940      	lsrs	r0, r0, #5
 8000612:	2301      	movs	r3, #1
 8000614:	4093      	lsls	r3, r2
 8000616:	3020      	adds	r0, #32
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <HAL_NVIC_DisableIRQ+0x20>)
 800061a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100

0800062c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800062c:	3801      	subs	r0, #1
 800062e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000632:	d20a      	bcs.n	800064a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_SYSTICK_Config+0x24>)
 8000636:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <HAL_SYSTICK_Config+0x28>)
 800063a:	21f0      	movs	r1, #240	; 0xf0
 800063c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000640:	2000      	movs	r0, #0
 8000642:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000644:	2207      	movs	r2, #7
 8000646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000648:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800064a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e010 	.word	0xe000e010
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000658:	2800      	cmp	r0, #0
 800065a:	db08      	blt.n	800066e <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065c:	f000 021f 	and.w	r2, r0, #31
 8000660:	0940      	lsrs	r0, r0, #5
 8000662:	2301      	movs	r3, #1
 8000664:	4093      	lsls	r3, r2
 8000666:	3060      	adds	r0, #96	; 0x60
 8000668:	4a01      	ldr	r2, [pc, #4]	; (8000670 <HAL_NVIC_ClearPendingIRQ+0x18>)
 800066a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100

08000674 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000674:	2300      	movs	r3, #0
 8000676:	2b0f      	cmp	r3, #15
 8000678:	f200 80d9 	bhi.w	800082e <HAL_GPIO_Init+0x1ba>
{
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	b083      	sub	sp, #12
 8000680:	e039      	b.n	80006f6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000682:	2207      	movs	r2, #7
 8000684:	e000      	b.n	8000688 <HAL_GPIO_Init+0x14>
 8000686:	2200      	movs	r2, #0
 8000688:	40b2      	lsls	r2, r6
 800068a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800068c:	3402      	adds	r4, #2
 800068e:	4e68      	ldr	r6, [pc, #416]	; (8000830 <HAL_GPIO_Init+0x1bc>)
 8000690:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000694:	4a67      	ldr	r2, [pc, #412]	; (8000834 <HAL_GPIO_Init+0x1c0>)
 8000696:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000698:	43ea      	mvns	r2, r5
 800069a:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800069e:	684f      	ldr	r7, [r1, #4]
 80006a0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006a4:	d001      	beq.n	80006aa <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80006a6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80006aa:	4c62      	ldr	r4, [pc, #392]	; (8000834 <HAL_GPIO_Init+0x1c0>)
 80006ac:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80006ae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80006b0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b4:	684f      	ldr	r7, [r1, #4]
 80006b6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006ba:	d001      	beq.n	80006c0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80006bc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80006c0:	4c5c      	ldr	r4, [pc, #368]	; (8000834 <HAL_GPIO_Init+0x1c0>)
 80006c2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006c4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80006c6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ca:	684f      	ldr	r7, [r1, #4]
 80006cc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80006d0:	d001      	beq.n	80006d6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80006d2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80006d6:	4c57      	ldr	r4, [pc, #348]	; (8000834 <HAL_GPIO_Init+0x1c0>)
 80006d8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80006da:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80006dc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006de:	684e      	ldr	r6, [r1, #4]
 80006e0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80006e4:	d001      	beq.n	80006ea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80006e6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80006ea:	4c52      	ldr	r4, [pc, #328]	; (8000834 <HAL_GPIO_Init+0x1c0>)
 80006ec:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ee:	3301      	adds	r3, #1
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	f200 809a 	bhi.w	800082a <HAL_GPIO_Init+0x1b6>
    ioposition = 0x01U << position;
 80006f6:	2201      	movs	r2, #1
 80006f8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fa:	680c      	ldr	r4, [r1, #0]
 80006fc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000700:	ea32 0404 	bics.w	r4, r2, r4
 8000704:	d1f3      	bne.n	80006ee <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000706:	684c      	ldr	r4, [r1, #4]
 8000708:	1e66      	subs	r6, r4, #1
 800070a:	2e01      	cmp	r6, #1
 800070c:	d903      	bls.n	8000716 <HAL_GPIO_Init+0xa2>
 800070e:	2c11      	cmp	r4, #17
 8000710:	d001      	beq.n	8000716 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000712:	2c12      	cmp	r4, #18
 8000714:	d112      	bne.n	800073c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000716:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000718:	005f      	lsls	r7, r3, #1
 800071a:	2403      	movs	r4, #3
 800071c:	40bc      	lsls	r4, r7
 800071e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000722:	68cc      	ldr	r4, [r1, #12]
 8000724:	40bc      	lsls	r4, r7
 8000726:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000728:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800072a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800072c:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000730:	684c      	ldr	r4, [r1, #4]
 8000732:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000736:	409a      	lsls	r2, r3
 8000738:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800073a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800073c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800073e:	005e      	lsls	r6, r3, #1
 8000740:	2403      	movs	r4, #3
 8000742:	40b4      	lsls	r4, r6
 8000744:	43e2      	mvns	r2, r4
 8000746:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800074a:	688c      	ldr	r4, [r1, #8]
 800074c:	40b4      	lsls	r4, r6
 800074e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000750:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000752:	684c      	ldr	r4, [r1, #4]
 8000754:	2c02      	cmp	r4, #2
 8000756:	d001      	beq.n	800075c <HAL_GPIO_Init+0xe8>
 8000758:	2c12      	cmp	r4, #18
 800075a:	d113      	bne.n	8000784 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 800075c:	08df      	lsrs	r7, r3, #3
 800075e:	3708      	adds	r7, #8
 8000760:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000764:	f003 0407 	and.w	r4, r3, #7
 8000768:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800076c:	240f      	movs	r4, #15
 800076e:	fa04 f40c 	lsl.w	r4, r4, ip
 8000772:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000776:	690c      	ldr	r4, [r1, #16]
 8000778:	fa04 f40c 	lsl.w	r4, r4, ip
 800077c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000780:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000784:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000786:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000788:	684a      	ldr	r2, [r1, #4]
 800078a:	f002 0203 	and.w	r2, r2, #3
 800078e:	40b2      	lsls	r2, r6
 8000790:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000792:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000794:	684a      	ldr	r2, [r1, #4]
 8000796:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800079a:	d0a8      	beq.n	80006ee <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079c:	2200      	movs	r2, #0
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	4a25      	ldr	r2, [pc, #148]	; (8000838 <HAL_GPIO_Init+0x1c4>)
 80007a2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80007a4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80007a8:	6454      	str	r4, [r2, #68]	; 0x44
 80007aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007b0:	9201      	str	r2, [sp, #4]
 80007b2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80007b4:	089c      	lsrs	r4, r3, #2
 80007b6:	1ca6      	adds	r6, r4, #2
 80007b8:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <HAL_GPIO_Init+0x1bc>)
 80007ba:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007be:	f003 0203 	and.w	r2, r3, #3
 80007c2:	0096      	lsls	r6, r2, #2
 80007c4:	220f      	movs	r2, #15
 80007c6:	40b2      	lsls	r2, r6
 80007c8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <HAL_GPIO_Init+0x1c8>)
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f43f af59 	beq.w	8000686 <HAL_GPIO_Init+0x12>
 80007d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007d8:	4290      	cmp	r0, r2
 80007da:	d01a      	beq.n	8000812 <HAL_GPIO_Init+0x19e>
 80007dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007e0:	4290      	cmp	r0, r2
 80007e2:	d018      	beq.n	8000816 <HAL_GPIO_Init+0x1a2>
 80007e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007e8:	4290      	cmp	r0, r2
 80007ea:	d016      	beq.n	800081a <HAL_GPIO_Init+0x1a6>
 80007ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d014      	beq.n	800081e <HAL_GPIO_Init+0x1aa>
 80007f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007f8:	4290      	cmp	r0, r2
 80007fa:	d012      	beq.n	8000822 <HAL_GPIO_Init+0x1ae>
 80007fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000800:	4290      	cmp	r0, r2
 8000802:	d010      	beq.n	8000826 <HAL_GPIO_Init+0x1b2>
 8000804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000808:	4290      	cmp	r0, r2
 800080a:	f43f af3a 	beq.w	8000682 <HAL_GPIO_Init+0xe>
 800080e:	2208      	movs	r2, #8
 8000810:	e73a      	b.n	8000688 <HAL_GPIO_Init+0x14>
 8000812:	2201      	movs	r2, #1
 8000814:	e738      	b.n	8000688 <HAL_GPIO_Init+0x14>
 8000816:	2202      	movs	r2, #2
 8000818:	e736      	b.n	8000688 <HAL_GPIO_Init+0x14>
 800081a:	2203      	movs	r2, #3
 800081c:	e734      	b.n	8000688 <HAL_GPIO_Init+0x14>
 800081e:	2204      	movs	r2, #4
 8000820:	e732      	b.n	8000688 <HAL_GPIO_Init+0x14>
 8000822:	2205      	movs	r2, #5
 8000824:	e730      	b.n	8000688 <HAL_GPIO_Init+0x14>
 8000826:	2206      	movs	r2, #6
 8000828:	e72e      	b.n	8000688 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800082a:	b003      	add	sp, #12
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	4770      	bx	lr
 8000830:	40013800 	.word	0x40013800
 8000834:	40013c00 	.word	0x40013c00
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000840:	b10a      	cbz	r2, 8000846 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000842:	6181      	str	r1, [r0, #24]
 8000844:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000846:	0409      	lsls	r1, r1, #16
 8000848:	6181      	str	r1, [r0, #24]
  }
}
 800084a:	4770      	bx	lr

0800084c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800084c:	2800      	cmp	r0, #0
 800084e:	f000 81d9 	beq.w	8000c04 <HAL_RCC_OscConfig+0x3b8>
{
 8000852:	b570      	push	{r4, r5, r6, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000858:	6803      	ldr	r3, [r0, #0]
 800085a:	f013 0f01 	tst.w	r3, #1
 800085e:	d03b      	beq.n	80008d8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000860:	4ba6      	ldr	r3, [pc, #664]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b04      	cmp	r3, #4
 800086a:	d02c      	beq.n	80008c6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800086c:	4ba3      	ldr	r3, [pc, #652]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000874:	2b08      	cmp	r3, #8
 8000876:	d021      	beq.n	80008bc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800087e:	d04f      	beq.n	8000920 <HAL_RCC_OscConfig+0xd4>
 8000880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000884:	d052      	beq.n	800092c <HAL_RCC_OscConfig+0xe0>
 8000886:	4b9d      	ldr	r3, [pc, #628]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000896:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000898:	6863      	ldr	r3, [r4, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d050      	beq.n	8000940 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089e:	f7ff fe59 	bl	8000554 <HAL_GetTick>
 80008a2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a4:	4b95      	ldr	r3, [pc, #596]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008ac:	d114      	bne.n	80008d8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ae:	f7ff fe51 	bl	8000554 <HAL_GetTick>
 80008b2:	1b40      	subs	r0, r0, r5
 80008b4:	2864      	cmp	r0, #100	; 0x64
 80008b6:	d9f5      	bls.n	80008a4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80008b8:	2003      	movs	r0, #3
 80008ba:	e1aa      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008bc:	4b8f      	ldr	r3, [pc, #572]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80008c4:	d0d8      	beq.n	8000878 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c6:	4b8d      	ldr	r3, [pc, #564]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008ce:	d003      	beq.n	80008d8 <HAL_RCC_OscConfig+0x8c>
 80008d0:	6863      	ldr	r3, [r4, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 8198 	beq.w	8000c08 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	f013 0f02 	tst.w	r3, #2
 80008de:	d054      	beq.n	800098a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008e0:	4b86      	ldr	r3, [pc, #536]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f013 0f0c 	tst.w	r3, #12
 80008e8:	d03e      	beq.n	8000968 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ea:	4b84      	ldr	r3, [pc, #528]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d033      	beq.n	800095e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008f6:	68e3      	ldr	r3, [r4, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d067      	beq.n	80009cc <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008fc:	4b80      	ldr	r3, [pc, #512]	; (8000b00 <HAL_RCC_OscConfig+0x2b4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000902:	f7ff fe27 	bl	8000554 <HAL_GetTick>
 8000906:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000908:	4b7c      	ldr	r3, [pc, #496]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f013 0f02 	tst.w	r3, #2
 8000910:	d153      	bne.n	80009ba <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000912:	f7ff fe1f 	bl	8000554 <HAL_GetTick>
 8000916:	1b40      	subs	r0, r0, r5
 8000918:	2802      	cmp	r0, #2
 800091a:	d9f5      	bls.n	8000908 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800091c:	2003      	movs	r0, #3
 800091e:	e178      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000920:	4a76      	ldr	r2, [pc, #472]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e7b5      	b.n	8000898 <HAL_RCC_OscConfig+0x4c>
 800092c:	4b73      	ldr	r3, [pc, #460]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e7ab      	b.n	8000898 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000940:	f7ff fe08 	bl	8000554 <HAL_GetTick>
 8000944:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000946:	4b6d      	ldr	r3, [pc, #436]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800094e:	d0c3      	beq.n	80008d8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000950:	f7ff fe00 	bl	8000554 <HAL_GetTick>
 8000954:	1b40      	subs	r0, r0, r5
 8000956:	2864      	cmp	r0, #100	; 0x64
 8000958:	d9f5      	bls.n	8000946 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800095a:	2003      	movs	r0, #3
 800095c:	e159      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800095e:	4b67      	ldr	r3, [pc, #412]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000966:	d1c6      	bne.n	80008f6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000968:	4b64      	ldr	r3, [pc, #400]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f013 0f02 	tst.w	r3, #2
 8000970:	d003      	beq.n	800097a <HAL_RCC_OscConfig+0x12e>
 8000972:	68e3      	ldr	r3, [r4, #12]
 8000974:	2b01      	cmp	r3, #1
 8000976:	f040 8149 	bne.w	8000c0c <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097a:	4a60      	ldr	r2, [pc, #384]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 800097c:	6813      	ldr	r3, [r2, #0]
 800097e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000982:	6921      	ldr	r1, [r4, #16]
 8000984:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000988:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	f013 0f08 	tst.w	r3, #8
 8000990:	d040      	beq.n	8000a14 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000992:	6963      	ldr	r3, [r4, #20]
 8000994:	b363      	cbz	r3, 80009f0 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000996:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <HAL_RCC_OscConfig+0x2b8>)
 8000998:	2201      	movs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800099c:	f7ff fdda 	bl	8000554 <HAL_GetTick>
 80009a0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a2:	4b56      	ldr	r3, [pc, #344]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80009a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a6:	f013 0f02 	tst.w	r3, #2
 80009aa:	d133      	bne.n	8000a14 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ac:	f7ff fdd2 	bl	8000554 <HAL_GetTick>
 80009b0:	1b40      	subs	r0, r0, r5
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9f5      	bls.n	80009a2 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 80009b6:	2003      	movs	r0, #3
 80009b8:	e12b      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ba:	4a50      	ldr	r2, [pc, #320]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009c2:	6921      	ldr	r1, [r4, #16]
 80009c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e7de      	b.n	800098a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80009cc:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <HAL_RCC_OscConfig+0x2b4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009d2:	f7ff fdbf 	bl	8000554 <HAL_GetTick>
 80009d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d8:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f013 0f02 	tst.w	r3, #2
 80009e0:	d0d3      	beq.n	800098a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fdb7 	bl	8000554 <HAL_GetTick>
 80009e6:	1b40      	subs	r0, r0, r5
 80009e8:	2802      	cmp	r0, #2
 80009ea:	d9f5      	bls.n	80009d8 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80009ec:	2003      	movs	r0, #3
 80009ee:	e110      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <HAL_RCC_OscConfig+0x2b8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009f6:	f7ff fdad 	bl	8000554 <HAL_GetTick>
 80009fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 80009fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a00:	f013 0f02 	tst.w	r3, #2
 8000a04:	d006      	beq.n	8000a14 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a06:	f7ff fda5 	bl	8000554 <HAL_GetTick>
 8000a0a:	1b40      	subs	r0, r0, r5
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9f5      	bls.n	80009fc <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8000a10:	2003      	movs	r0, #3
 8000a12:	e0fe      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	f013 0f04 	tst.w	r3, #4
 8000a1a:	d078      	beq.n	8000b0e <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1c:	4b37      	ldr	r3, [pc, #220]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000a24:	d10d      	bne.n	8000a42 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a3e:	2501      	movs	r5, #1
 8000a40:	e000      	b.n	8000a44 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8000a42:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a44:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_RCC_OscConfig+0x2bc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a4c:	d021      	beq.n	8000a92 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a4e:	68a3      	ldr	r3, [r4, #8]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d032      	beq.n	8000aba <HAL_RCC_OscConfig+0x26e>
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d036      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x27a>
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000a5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	671a      	str	r2, [r3, #112]	; 0x70
 8000a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a64:	f022 0204 	bic.w	r2, r2, #4
 8000a68:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a6a:	68a3      	ldr	r3, [r4, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d034      	beq.n	8000ada <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a70:	f7ff fd70 	bl	8000554 <HAL_GetTick>
 8000a74:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a7a:	f013 0f02 	tst.w	r3, #2
 8000a7e:	d145      	bne.n	8000b0c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a80:	f7ff fd68 	bl	8000554 <HAL_GetTick>
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a8a:	4298      	cmp	r0, r3
 8000a8c:	d9f3      	bls.n	8000a76 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000a8e:	2003      	movs	r0, #3
 8000a90:	e0bf      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a92:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_RCC_OscConfig+0x2bc>)
 8000a94:	6813      	ldr	r3, [r2, #0]
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a9c:	f7ff fd5a 	bl	8000554 <HAL_GetTick>
 8000aa0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_RCC_OscConfig+0x2bc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000aaa:	d1d0      	bne.n	8000a4e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aac:	f7ff fd52 	bl	8000554 <HAL_GetTick>
 8000ab0:	1b80      	subs	r0, r0, r6
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d9f5      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	e0ab      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000abc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ac4:	e7d1      	b.n	8000a6a <HAL_RCC_OscConfig+0x21e>
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000aca:	f042 0204 	orr.w	r2, r2, #4
 8000ace:	671a      	str	r2, [r3, #112]	; 0x70
 8000ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ad2:	f042 0201 	orr.w	r2, r2, #1
 8000ad6:	671a      	str	r2, [r3, #112]	; 0x70
 8000ad8:	e7c7      	b.n	8000a6a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ada:	f7ff fd3b 	bl	8000554 <HAL_GetTick>
 8000ade:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_RCC_OscConfig+0x2b0>)
 8000ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ae4:	f013 0f02 	tst.w	r3, #2
 8000ae8:	d010      	beq.n	8000b0c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aea:	f7ff fd33 	bl	8000554 <HAL_GetTick>
 8000aee:	1b80      	subs	r0, r0, r6
 8000af0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d9f3      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8000af8:	2003      	movs	r0, #3
 8000afa:	e08a      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
 8000afc:	40023800 	.word	0x40023800
 8000b00:	42470000 	.word	0x42470000
 8000b04:	42470e80 	.word	0x42470e80
 8000b08:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b0c:	b9e5      	cbnz	r5, 8000b48 <HAL_RCC_OscConfig+0x2fc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b0e:	69a3      	ldr	r3, [r4, #24]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d07d      	beq.n	8000c10 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b14:	4a46      	ldr	r2, [pc, #280]	; (8000c30 <HAL_RCC_OscConfig+0x3e4>)
 8000b16:	6892      	ldr	r2, [r2, #8]
 8000b18:	f002 020c 	and.w	r2, r2, #12
 8000b1c:	2a08      	cmp	r2, #8
 8000b1e:	d051      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x378>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d017      	beq.n	8000b54 <HAL_RCC_OscConfig+0x308>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b24:	4b43      	ldr	r3, [pc, #268]	; (8000c34 <HAL_RCC_OscConfig+0x3e8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2a:	f7ff fd13 	bl	8000554 <HAL_GetTick>
 8000b2e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b30:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_RCC_OscConfig+0x3e4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b38:	d042      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3a:	f7ff fd0b 	bl	8000554 <HAL_GetTick>
 8000b3e:	1b00      	subs	r0, r0, r4
 8000b40:	2802      	cmp	r0, #2
 8000b42:	d9f5      	bls.n	8000b30 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8000b44:	2003      	movs	r0, #3
 8000b46:	e064      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b48:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <HAL_RCC_OscConfig+0x3e4>)
 8000b4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	e7dc      	b.n	8000b0e <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8000b54:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <HAL_RCC_OscConfig+0x3e8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fcfb 	bl	8000554 <HAL_GetTick>
 8000b5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b60:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <HAL_RCC_OscConfig+0x3e4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b68:	d006      	beq.n	8000b78 <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fcf3 	bl	8000554 <HAL_GetTick>
 8000b6e:	1b40      	subs	r0, r0, r5
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9f5      	bls.n	8000b60 <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8000b74:	2003      	movs	r0, #3
 8000b76:	e04c      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b78:	69e3      	ldr	r3, [r4, #28]
 8000b7a:	6a22      	ldr	r2, [r4, #32]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b86:	0852      	lsrs	r2, r2, #1
 8000b88:	3a01      	subs	r2, #1
 8000b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b94:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <HAL_RCC_OscConfig+0x3e4>)
 8000b96:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <HAL_RCC_OscConfig+0x3e8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fcd9 	bl	8000554 <HAL_GetTick>
 8000ba2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <HAL_RCC_OscConfig+0x3e4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bac:	d106      	bne.n	8000bbc <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bae:	f7ff fcd1 	bl	8000554 <HAL_GetTick>
 8000bb2:	1b00      	subs	r0, r0, r4
 8000bb4:	2802      	cmp	r0, #2
 8000bb6:	d9f5      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8000bb8:	2003      	movs	r0, #3
 8000bba:	e02a      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e028      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	e026      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d026      	beq.n	8000c16 <HAL_RCC_OscConfig+0x3ca>
        pll_config = RCC->PLLCFGR;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_RCC_OscConfig+0x3e4>)
 8000bca:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bcc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8000bd0:	69e2      	ldr	r2, [r4, #28]
 8000bd2:	4291      	cmp	r1, r2
 8000bd4:	d121      	bne.n	8000c1a <HAL_RCC_OscConfig+0x3ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000bda:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	d11e      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3d2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000be0:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000be2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000be6:	401a      	ands	r2, r3
 8000be8:	428a      	cmp	r2, r1
 8000bea:	d11a      	bne.n	8000c22 <HAL_RCC_OscConfig+0x3d6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000bf0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	d117      	bne.n	8000c26 <HAL_RCC_OscConfig+0x3da>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000bf6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000bfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d114      	bne.n	8000c2a <HAL_RCC_OscConfig+0x3de>
  return HAL_OK;
 8000c00:	2000      	movs	r0, #0
 8000c02:	e006      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8000c04:	2001      	movs	r0, #1
}
 8000c06:	4770      	bx	lr
        return HAL_ERROR;
 8000c08:	2001      	movs	r0, #1
 8000c0a:	e002      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
        return HAL_ERROR;
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	e000      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8000c10:	2000      	movs	r0, #0
}
 8000c12:	b002      	add	sp, #8
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000c16:	2001      	movs	r0, #1
 8000c18:	e7fb      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e7f9      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
 8000c1e:	2001      	movs	r0, #1
 8000c20:	e7f7      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
 8000c22:	2001      	movs	r0, #1
 8000c24:	e7f5      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
 8000c26:	2001      	movs	r0, #1
 8000c28:	e7f3      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	e7f1      	b.n	8000c12 <HAL_RCC_OscConfig+0x3c6>
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	42470060 	.word	0x42470060

08000c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d053      	beq.n	8000cee <HAL_RCC_GetSysClockFreq+0xb6>
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d153      	bne.n	8000cf2 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000c58:	d028      	beq.n	8000cac <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000c62:	0158      	lsls	r0, r3, #5
 8000c64:	2100      	movs	r1, #0
 8000c66:	1ac0      	subs	r0, r0, r3
 8000c68:	f161 0100 	sbc.w	r1, r1, #0
 8000c6c:	018e      	lsls	r6, r1, #6
 8000c6e:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8000c72:	0187      	lsls	r7, r0, #6
 8000c74:	1a3c      	subs	r4, r7, r0
 8000c76:	eb66 0501 	sbc.w	r5, r6, r1
 8000c7a:	00e9      	lsls	r1, r5, #3
 8000c7c:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8000c80:	00e0      	lsls	r0, r4, #3
 8000c82:	18c0      	adds	r0, r0, r3
 8000c84:	f141 0100 	adc.w	r1, r1, #0
 8000c88:	024b      	lsls	r3, r1, #9
 8000c8a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000c8e:	0244      	lsls	r4, r0, #9
 8000c90:	4620      	mov	r0, r4
 8000c92:	4619      	mov	r1, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	f7ff fa97 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000ca6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000caa:	e023      	b.n	8000cf4 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000cb4:	015c      	lsls	r4, r3, #5
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	1ae4      	subs	r4, r4, r3
 8000cba:	f165 0500 	sbc.w	r5, r5, #0
 8000cbe:	01ae      	lsls	r6, r5, #6
 8000cc0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8000cc4:	01a7      	lsls	r7, r4, #6
 8000cc6:	1b38      	subs	r0, r7, r4
 8000cc8:	eb66 0105 	sbc.w	r1, r6, r5
 8000ccc:	00cc      	lsls	r4, r1, #3
 8000cce:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8000cd2:	00c5      	lsls	r5, r0, #3
 8000cd4:	18e8      	adds	r0, r5, r3
 8000cd6:	f144 0100 	adc.w	r1, r4, #0
 8000cda:	028b      	lsls	r3, r1, #10
 8000cdc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000ce0:	0284      	lsls	r4, r0, #10
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f7ff fa6e 	bl	80001c8 <__aeabi_uldivmod>
 8000cec:	e7d5      	b.n	8000c9a <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8000cf0:	e000      	b.n	8000cf4 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	007a1200 	.word	0x007a1200
 8000d00:	00f42400 	.word	0x00f42400

08000d04 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000d04:	2800      	cmp	r0, #0
 8000d06:	f000 809b 	beq.w	8000e40 <HAL_RCC_ClockConfig+0x13c>
{
 8000d0a:	b570      	push	{r4, r5, r6, lr}
 8000d0c:	460d      	mov	r5, r1
 8000d0e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d10:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <HAL_RCC_ClockConfig+0x14c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d208      	bcs.n	8000d2e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d1c:	b2cb      	uxtb	r3, r1
 8000d1e:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <HAL_RCC_ClockConfig+0x14c>)
 8000d20:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	f003 030f 	and.w	r3, r3, #15
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f040 808b 	bne.w	8000e44 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	f013 0f02 	tst.w	r3, #2
 8000d34:	d017      	beq.n	8000d66 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d36:	f013 0f04 	tst.w	r3, #4
 8000d3a:	d004      	beq.n	8000d46 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3c:	4a45      	ldr	r2, [pc, #276]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000d3e:	6893      	ldr	r3, [r2, #8]
 8000d40:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d44:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	f013 0f08 	tst.w	r3, #8
 8000d4c:	d004      	beq.n	8000d58 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d4e:	4a41      	ldr	r2, [pc, #260]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000d50:	6893      	ldr	r3, [r2, #8]
 8000d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d56:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d58:	4a3e      	ldr	r2, [pc, #248]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000d5a:	6893      	ldr	r3, [r2, #8]
 8000d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d60:	68a1      	ldr	r1, [r4, #8]
 8000d62:	430b      	orrs	r3, r1
 8000d64:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	f013 0f01 	tst.w	r3, #1
 8000d6c:	d032      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d6e:	6863      	ldr	r3, [r4, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d021      	beq.n	8000db8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d74:	1e9a      	subs	r2, r3, #2
 8000d76:	2a01      	cmp	r2, #1
 8000d78:	d925      	bls.n	8000dc6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7a:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	f012 0f02 	tst.w	r2, #2
 8000d82:	d061      	beq.n	8000e48 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d84:	4933      	ldr	r1, [pc, #204]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000d86:	688a      	ldr	r2, [r1, #8]
 8000d88:	f022 0203 	bic.w	r2, r2, #3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000d90:	f7ff fbe0 	bl	8000554 <HAL_GetTick>
 8000d94:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	6862      	ldr	r2, [r4, #4]
 8000da0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000da4:	d016      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da6:	f7ff fbd5 	bl	8000554 <HAL_GetTick>
 8000daa:	1b80      	subs	r0, r0, r6
 8000dac:	f241 3388 	movw	r3, #5000	; 0x1388
 8000db0:	4298      	cmp	r0, r3
 8000db2:	d9f0      	bls.n	8000d96 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8000db4:	2003      	movs	r0, #3
 8000db6:	e042      	b.n	8000e3e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db8:	4a26      	ldr	r2, [pc, #152]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000dc0:	d1e0      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	e03b      	b.n	8000e3e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000dce:	d1d9      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	e034      	b.n	8000e3e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_RCC_ClockConfig+0x14c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d907      	bls.n	8000df0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de0:	b2ea      	uxtb	r2, r5
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_RCC_ClockConfig+0x14c>)
 8000de4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 030f 	and.w	r3, r3, #15
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d12d      	bne.n	8000e4c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000df0:	6823      	ldr	r3, [r4, #0]
 8000df2:	f013 0f04 	tst.w	r3, #4
 8000df6:	d006      	beq.n	8000e06 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000df8:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000dfa:	6893      	ldr	r3, [r2, #8]
 8000dfc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e00:	68e1      	ldr	r1, [r4, #12]
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	f013 0f08 	tst.w	r3, #8
 8000e0c:	d007      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000e10:	6893      	ldr	r3, [r2, #8]
 8000e12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e16:	6921      	ldr	r1, [r4, #16]
 8000e18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e1c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e1e:	f7ff ff0b 	bl	8000c38 <HAL_RCC_GetSysClockFreq>
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_RCC_ClockConfig+0x150>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_RCC_ClockConfig+0x154>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_RCC_ClockConfig+0x158>)
 8000e32:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_RCC_ClockConfig+0x15c>)
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	f7ff fb42 	bl	80004c0 <HAL_InitTick>
  return HAL_OK;
 8000e3c:	2000      	movs	r0, #0
}
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000e40:	2001      	movs	r0, #1
}
 8000e42:	4770      	bx	lr
      return HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
 8000e46:	e7fa      	b.n	8000e3e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
 8000e4a:	e7f8      	b.n	8000e3e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	e7f6      	b.n	8000e3e <HAL_RCC_ClockConfig+0x13a>
 8000e50:	40023c00 	.word	0x40023c00
 8000e54:	40023800 	.word	0x40023800
 8000e58:	08001b6c 	.word	0x08001b6c
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000e64:	4b01      	ldr	r3, [pc, #4]	; (8000e6c <HAL_RCC_GetHCLKFreq+0x8>)
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e72:	f7ff fff7 	bl	8000e64 <HAL_RCC_GetHCLKFreq>
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e7e:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e82:	40d8      	lsrs	r0, r3
 8000e84:	bd08      	pop	{r3, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	08001b7c 	.word	0x08001b7c

08000e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e90:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e92:	f7ff ffe7 	bl	8000e64 <HAL_RCC_GetHCLKFreq>
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e9e:	4a03      	ldr	r2, [pc, #12]	; (8000eac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ea2:	40d8      	lsrs	r0, r3
 8000ea4:	bd08      	pop	{r3, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	08001b7c 	.word	0x08001b7c

08000eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eb4:	6802      	ldr	r2, [r0, #0]
 8000eb6:	6913      	ldr	r3, [r2, #16]
 8000eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ebc:	68c1      	ldr	r1, [r0, #12]
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ec2:	6883      	ldr	r3, [r0, #8]
 8000ec4:	6902      	ldr	r2, [r0, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	6942      	ldr	r2, [r0, #20]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	69c2      	ldr	r2, [r0, #28]
 8000ece:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8000ed0:	6801      	ldr	r1, [r0, #0]
 8000ed2:	68cb      	ldr	r3, [r1, #12]
 8000ed4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000ed8:	f023 030c 	bic.w	r3, r3, #12
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ee0:	6802      	ldr	r2, [r0, #0]
 8000ee2:	6953      	ldr	r3, [r2, #20]
 8000ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ee8:	6981      	ldr	r1, [r0, #24]
 8000eea:	430b      	orrs	r3, r1
 8000eec:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000eee:	69c3      	ldr	r3, [r0, #28]
 8000ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef4:	d036      	beq.n	8000f64 <UART_SetConfig+0xb4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000ef6:	6803      	ldr	r3, [r0, #0]
 8000ef8:	4a65      	ldr	r2, [pc, #404]	; (8001090 <UART_SetConfig+0x1e0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	f000 809a 	beq.w	8001034 <UART_SetConfig+0x184>
 8000f00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f000 8095 	beq.w	8001034 <UART_SetConfig+0x184>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f0a:	f7ff ffb1 	bl	8000e70 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000f0e:	2600      	movs	r6, #0
 8000f10:	1805      	adds	r5, r0, r0
 8000f12:	eb46 0106 	adc.w	r1, r6, r6
 8000f16:	182d      	adds	r5, r5, r0
 8000f18:	eb46 0101 	adc.w	r1, r6, r1
 8000f1c:	00cb      	lsls	r3, r1, #3
 8000f1e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8000f22:	00ea      	lsls	r2, r5, #3
 8000f24:	4615      	mov	r5, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	6863      	ldr	r3, [r4, #4]
 8000f2a:	009a      	lsls	r2, r3, #2
 8000f2c:	0f9b      	lsrs	r3, r3, #30
 8000f2e:	1828      	adds	r0, r5, r0
 8000f30:	eb46 0101 	adc.w	r1, r6, r1
 8000f34:	f7ff f948 	bl	80001c8 <__aeabi_uldivmod>
 8000f38:	4d56      	ldr	r5, [pc, #344]	; (8001094 <UART_SetConfig+0x1e4>)
 8000f3a:	fba5 3200 	umull	r3, r2, r5, r0
 8000f3e:	0951      	lsrs	r1, r2, #5
 8000f40:	2364      	movs	r3, #100	; 0x64
 8000f42:	fb03 0311 	mls	r3, r3, r1, r0
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	3332      	adds	r3, #50	; 0x32
 8000f4a:	fba5 2303 	umull	r2, r3, r5, r3
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f54:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	6821      	ldr	r1, [r4, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	608b      	str	r3, [r1, #8]
    }
  }
}
 8000f62:	e093      	b.n	800108c <UART_SetConfig+0x1dc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f64:	6803      	ldr	r3, [r0, #0]
 8000f66:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <UART_SetConfig+0x1e0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d033      	beq.n	8000fd4 <UART_SetConfig+0x124>
 8000f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d02f      	beq.n	8000fd4 <UART_SetConfig+0x124>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f74:	f7ff ff7c 	bl	8000e70 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f78:	2600      	movs	r6, #0
 8000f7a:	1805      	adds	r5, r0, r0
 8000f7c:	eb46 0106 	adc.w	r1, r6, r6
 8000f80:	182d      	adds	r5, r5, r0
 8000f82:	eb46 0101 	adc.w	r1, r6, r1
 8000f86:	00cb      	lsls	r3, r1, #3
 8000f88:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8000f8c:	00ea      	lsls	r2, r5, #3
 8000f8e:	4615      	mov	r5, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	6862      	ldr	r2, [r4, #4]
 8000f94:	4633      	mov	r3, r6
 8000f96:	1892      	adds	r2, r2, r2
 8000f98:	eb46 0303 	adc.w	r3, r6, r3
 8000f9c:	1828      	adds	r0, r5, r0
 8000f9e:	eb46 0101 	adc.w	r1, r6, r1
 8000fa2:	f7ff f911 	bl	80001c8 <__aeabi_uldivmod>
 8000fa6:	4d3b      	ldr	r5, [pc, #236]	; (8001094 <UART_SetConfig+0x1e4>)
 8000fa8:	fba5 3200 	umull	r3, r2, r5, r0
 8000fac:	0951      	lsrs	r1, r2, #5
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	fb03 0311 	mls	r3, r3, r1, r0
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	3332      	adds	r3, #50	; 0x32
 8000fb8:	fba5 2303 	umull	r2, r3, r5, r3
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	005a      	lsls	r2, r3, #1
 8000fc0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8000fc4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	6821      	ldr	r1, [r4, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	608b      	str	r3, [r1, #8]
 8000fd2:	e05b      	b.n	800108c <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000fd4:	f7ff ff5c 	bl	8000e90 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000fd8:	2600      	movs	r6, #0
 8000fda:	1805      	adds	r5, r0, r0
 8000fdc:	eb46 0106 	adc.w	r1, r6, r6
 8000fe0:	182d      	adds	r5, r5, r0
 8000fe2:	eb46 0101 	adc.w	r1, r6, r1
 8000fe6:	00cb      	lsls	r3, r1, #3
 8000fe8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8000fec:	00ea      	lsls	r2, r5, #3
 8000fee:	4615      	mov	r5, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6862      	ldr	r2, [r4, #4]
 8000ff4:	4633      	mov	r3, r6
 8000ff6:	1892      	adds	r2, r2, r2
 8000ff8:	eb46 0303 	adc.w	r3, r6, r3
 8000ffc:	1828      	adds	r0, r5, r0
 8000ffe:	eb46 0101 	adc.w	r1, r6, r1
 8001002:	f7ff f8e1 	bl	80001c8 <__aeabi_uldivmod>
 8001006:	4d23      	ldr	r5, [pc, #140]	; (8001094 <UART_SetConfig+0x1e4>)
 8001008:	fba5 3200 	umull	r3, r2, r5, r0
 800100c:	0951      	lsrs	r1, r2, #5
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	fb03 0311 	mls	r3, r3, r1, r0
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	3332      	adds	r3, #50	; 0x32
 8001018:	fba5 2303 	umull	r2, r3, r5, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	005a      	lsls	r2, r3, #1
 8001020:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001024:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	6821      	ldr	r1, [r4, #0]
 800102e:	4413      	add	r3, r2
 8001030:	608b      	str	r3, [r1, #8]
 8001032:	e02b      	b.n	800108c <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001034:	f7ff ff2c 	bl	8000e90 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001038:	2600      	movs	r6, #0
 800103a:	1805      	adds	r5, r0, r0
 800103c:	eb46 0106 	adc.w	r1, r6, r6
 8001040:	182d      	adds	r5, r5, r0
 8001042:	eb46 0101 	adc.w	r1, r6, r1
 8001046:	00cb      	lsls	r3, r1, #3
 8001048:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800104c:	00ea      	lsls	r2, r5, #3
 800104e:	4615      	mov	r5, r2
 8001050:	4619      	mov	r1, r3
 8001052:	6863      	ldr	r3, [r4, #4]
 8001054:	009a      	lsls	r2, r3, #2
 8001056:	0f9b      	lsrs	r3, r3, #30
 8001058:	1828      	adds	r0, r5, r0
 800105a:	eb46 0101 	adc.w	r1, r6, r1
 800105e:	f7ff f8b3 	bl	80001c8 <__aeabi_uldivmod>
 8001062:	4d0c      	ldr	r5, [pc, #48]	; (8001094 <UART_SetConfig+0x1e4>)
 8001064:	fba5 3200 	umull	r3, r2, r5, r0
 8001068:	0951      	lsrs	r1, r2, #5
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	fb03 0311 	mls	r3, r3, r1, r0
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	3332      	adds	r3, #50	; 0x32
 8001074:	fba5 2303 	umull	r2, r3, r5, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800107e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	6821      	ldr	r1, [r4, #0]
 8001088:	4413      	add	r3, r2
 800108a:	608b      	str	r3, [r1, #8]
}
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	bf00      	nop
 8001090:	40011000 	.word	0x40011000
 8001094:	51eb851f 	.word	0x51eb851f

08001098 <HAL_UART_Init>:
  if (huart == NULL)
 8001098:	b358      	cbz	r0, 80010f2 <HAL_UART_Init+0x5a>
{
 800109a:	b510      	push	{r4, lr}
 800109c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800109e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010a2:	b30b      	cbz	r3, 80010e8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80010a4:	2324      	movs	r3, #36	; 0x24
 80010a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80010aa:	6822      	ldr	r2, [r4, #0]
 80010ac:	68d3      	ldr	r3, [r2, #12]
 80010ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010b2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80010b4:	4620      	mov	r0, r4
 80010b6:	f7ff fefb 	bl	8000eb0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010ba:	6822      	ldr	r2, [r4, #0]
 80010bc:	6913      	ldr	r3, [r2, #16]
 80010be:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80010c2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	6953      	ldr	r3, [r2, #20]
 80010c8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80010cc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	68d3      	ldr	r3, [r2, #12]
 80010d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010d8:	2000      	movs	r0, #0
 80010da:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80010dc:	2320      	movs	r3, #32
 80010de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80010e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80010e6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80010e8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80010ec:	f000 fbc6 	bl	800187c <HAL_UART_MspInit>
 80010f0:	e7d8      	b.n	80010a4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
}
 80010f4:	4770      	bx	lr
	...

080010f8 <fvdRxInterruptHandler>:
 * transmit buffer.
 *
 */

void fvdRxInterruptHandler(stSERIAL_CHANNELTypeDef *pstSerialCh)
{
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4604      	mov	r4, r0
  char chTempCh;
  // The first step is to read in the value in the RxDR
  chTempCh = pstSerialCh->pstRxChannel->pstUartHALHandle->Instance->DR;
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685d      	ldr	r5, [r3, #4]

  // After a certain number of Rx interrupts reset the RED overflow led so
  // that one can see if overflows are continuing.
  if (((suinRxIntCounter++) % RX_BUFFER_SIZE) == 0)
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <fvdRxInterruptHandler+0xdc>)
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	1c51      	adds	r1, r2, #1
 800110a:	8019      	strh	r1, [r3, #0]
 800110c:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <fvdRxInterruptHandler+0xe0>)
 800110e:	fba3 1302 	umull	r1, r3, r3, r2
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001118:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800111c:	b29b      	uxth	r3, r3
 800111e:	b17b      	cbz	r3, 8001140 <fvdRxInterruptHandler+0x48>
  {
    HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_RESET);
    suinRxIntCounter = 0;
  }

  switch (chTempCh)
 8001120:	b2eb      	uxtb	r3, r5
 8001122:	2b11      	cmp	r3, #17
 8001124:	d016      	beq.n	8001154 <fvdRxInterruptHandler+0x5c>
 8001126:	2b13      	cmp	r3, #19
 8001128:	d11f      	bne.n	800116a <fvdRxInterruptHandler+0x72>
    case CTRLS:
      // The external user has requested that the Tx be stopped.
      // When this is received a location is set in the transmit
      // structure to indicate that the transmission data should stop upon
      // the next TX interrupt.
      DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
 800112a:	6863      	ldr	r3, [r4, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68d3      	ldr	r3, [r2, #12]
 8001132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001136:	60d3      	str	r3, [r2, #12]
      pstSerialCh->pstTxChannel->boTxUserCtrlS = True;
 8001138:	6863      	ldr	r3, [r4, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	739a      	strb	r2, [r3, #14]
    pstSerialCh->pstRxChannel->boHysteresisActive = True;
    // Make sure the the TX interrupts are enable so that this can be checked by the
    // transmitter and the ctrlS is sent.
    ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
  }
} // end fvdRxInterruptHandler
 800113e:	bd38      	pop	{r3, r4, r5, pc}
    HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001146:	4825      	ldr	r0, [pc, #148]	; (80011dc <fvdRxInterruptHandler+0xe4>)
 8001148:	f7ff fb7a 	bl	8000840 <HAL_GPIO_WritePin>
    suinRxIntCounter = 0;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <fvdRxInterruptHandler+0xdc>)
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]
 8001152:	e7e5      	b.n	8001120 <fvdRxInterruptHandler+0x28>
      pstSerialCh->pstTxChannel->boTxUserCtrlS = False;
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
      ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 800115a:	6863      	ldr	r3, [r4, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68d3      	ldr	r3, [r2, #12]
 8001162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001166:	60d3      	str	r3, [r2, #12]
      return;
 8001168:	e7e9      	b.n	800113e <fvdRxInterruptHandler+0x46>
  if (pstSerialCh->pstRxChannel->uinFree == 0)
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	891a      	ldrh	r2, [r3, #8]
 800116e:	b32a      	cbz	r2, 80011bc <fvdRxInterruptHandler+0xc4>
  pstSerialCh->pstRxChannel->pchSerialBuffer[pstSerialCh->pstRxChannel->uinHead] = chTempCh;
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	54d5      	strb	r5, [r2, r3]
  pstSerialCh->pstRxChannel->uinHead = (pstSerialCh->pstRxChannel->uinHead + 1) %
 8001176:	6822      	ldr	r2, [r4, #0]
 8001178:	8893      	ldrh	r3, [r2, #4]
 800117a:	3301      	adds	r3, #1
                                                    (pstSerialCh->pstRxChannel->uinBufSize);
 800117c:	8990      	ldrh	r0, [r2, #12]
  pstSerialCh->pstRxChannel->uinHead = (pstSerialCh->pstRxChannel->uinHead + 1) %
 800117e:	fb93 f1f0 	sdiv	r1, r3, r0
 8001182:	fb00 3311 	mls	r3, r0, r1, r3
 8001186:	8093      	strh	r3, [r2, #4]
  pstSerialCh->pstRxChannel->uinUsed++;
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	8953      	ldrh	r3, [r2, #10]
 800118c:	3301      	adds	r3, #1
 800118e:	8153      	strh	r3, [r2, #10]
  pstSerialCh->pstRxChannel->uinFree--;
 8001190:	6822      	ldr	r2, [r4, #0]
 8001192:	8913      	ldrh	r3, [r2, #8]
 8001194:	3b01      	subs	r3, #1
 8001196:	8113      	strh	r3, [r2, #8]
  if (pstSerialCh->pstRxChannel->uinUsed >= pstSerialCh->pstRxChannel->uinCtrlSThreshold)
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	8959      	ldrh	r1, [r3, #10]
 800119c:	8a1a      	ldrh	r2, [r3, #16]
 800119e:	4291      	cmp	r1, r2
 80011a0:	d3cd      	bcc.n	800113e <fvdRxInterruptHandler+0x46>
    pstSerialCh->pstRxChannel->chCtrlSCtrlQ = CTRLS;
 80011a2:	2213      	movs	r2, #19
 80011a4:	739a      	strb	r2, [r3, #14]
    pstSerialCh->pstRxChannel->boHysteresisActive = True;
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	73da      	strb	r2, [r3, #15]
    ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 80011ac:	6863      	ldr	r3, [r4, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68d3      	ldr	r3, [r2, #12]
 80011b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b8:	60d3      	str	r3, [r2, #12]
 80011ba:	e7c0      	b.n	800113e <fvdRxInterruptHandler+0x46>
    pstSerialCh->ulSerialErrorCodes |= RX_BUFFER_FULL;
 80011bc:	6923      	ldr	r3, [r4, #16]
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	6123      	str	r3, [r4, #16]
    HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <fvdRxInterruptHandler+0xe4>)
 80011cc:	f7ff fb38 	bl	8000840 <HAL_GPIO_WritePin>
    return;
 80011d0:	e7b5      	b.n	800113e <fvdRxInterruptHandler+0x46>
 80011d2:	bf00      	nop
 80011d4:	2000008c 	.word	0x2000008c
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <fvdTxInterruptHandler>:
 * transmit buffer.
 *
 */

void fvdTxInterruptHandler(stSERIAL_CHANNELTypeDef *pstSerialCh)
{
 80011e0:	b510      	push	{r4, lr}
 80011e2:	4604      	mov	r4, r0
  // Upon entry firstly check to see if the receiver has requested that the
  // transmitter transmit a CtrlS or CtrlQ character to control the filling
  // of the RX buffer.
  //
  // We have to check the chCtrlSCtrlQ flag in the RX data structure
  if ((pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLS) || (pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLQ))
 80011e4:	6803      	ldr	r3, [r0, #0]
 80011e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80011ea:	2b13      	cmp	r3, #19
 80011ec:	d022      	beq.n	8001234 <fvdTxInterruptHandler+0x54>
 80011ee:	2b11      	cmp	r3, #17
 80011f0:	d020      	beq.n	8001234 <fvdTxInterruptHandler+0x54>

    pstSerialCh->pstRxChannel->chCtrlSCtrlQ = 0;
    return;
  }

  if (pstSerialCh->pstTxChannel->uinUsed == 0)
 80011f2:	6843      	ldr	r3, [r0, #4]
 80011f4:	895a      	ldrh	r2, [r3, #10]
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d039      	beq.n	800126e <fvdTxInterruptHandler+0x8e>
  {
    DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
    return;
  }

  if (pstSerialCh->pstTxChannel->boTxUserCtrlS)
 80011fa:	7b9a      	ldrb	r2, [r3, #14]
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	d13d      	bne.n	800127c <fvdTxInterruptHandler+0x9c>
    return;
  }

  // Now get a character out of the transmit buffer and send it
  pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR =
    (uint8_t)((pstSerialCh->pstTxChannel->pchSerialBuffer[pstSerialCh->pstTxChannel->uinTail]) & 0x7FU);
 8001200:	6919      	ldr	r1, [r3, #16]
 8001202:	88da      	ldrh	r2, [r3, #6]
 8001204:	568a      	ldrsb	r2, [r1, r2]
  pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR =
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6819      	ldr	r1, [r3, #0]
    (uint8_t)((pstSerialCh->pstTxChannel->pchSerialBuffer[pstSerialCh->pstTxChannel->uinTail]) & 0x7FU);
 800120a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR =
 800120e:	604a      	str	r2, [r1, #4]
  // Update the buffer information
  pstSerialCh->pstTxChannel->uinTail = (pstSerialCh->pstTxChannel->uinTail + 1) %
 8001210:	6842      	ldr	r2, [r0, #4]
 8001212:	88d3      	ldrh	r3, [r2, #6]
 8001214:	3301      	adds	r3, #1
    (pstSerialCh->pstTxChannel->uinBufSize);
 8001216:	8990      	ldrh	r0, [r2, #12]
  pstSerialCh->pstTxChannel->uinTail = (pstSerialCh->pstTxChannel->uinTail + 1) %
 8001218:	fb93 f1f0 	sdiv	r1, r3, r0
 800121c:	fb00 3311 	mls	r3, r0, r1, r3
 8001220:	80d3      	strh	r3, [r2, #6]
  pstSerialCh->pstTxChannel->uinFree++;
 8001222:	6862      	ldr	r2, [r4, #4]
 8001224:	8913      	ldrh	r3, [r2, #8]
 8001226:	3301      	adds	r3, #1
 8001228:	8113      	strh	r3, [r2, #8]
  pstSerialCh->pstTxChannel->uinUsed--;
 800122a:	6862      	ldr	r2, [r4, #4]
 800122c:	8953      	ldrh	r3, [r2, #10]
 800122e:	3b01      	subs	r3, #1
 8001230:	8153      	strh	r3, [r2, #10]
 8001232:	e00d      	b.n	8001250 <fvdTxInterruptHandler+0x70>
    pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR = pstSerialCh->pstRxChannel->chCtrlSCtrlQ;
 8001234:	6862      	ldr	r2, [r4, #4]
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	6053      	str	r3, [r2, #4]
    if (pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLS)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001242:	2b13      	cmp	r3, #19
 8001244:	d005      	beq.n	8001252 <fvdTxInterruptHandler+0x72>
    else if (pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLQ)// CTRLQ
 8001246:	2b11      	cmp	r3, #17
 8001248:	d00a      	beq.n	8001260 <fvdTxInterruptHandler+0x80>
    pstSerialCh->pstRxChannel->chCtrlSCtrlQ = 0;
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	739a      	strb	r2, [r3, #14]
} // end fvdTxInterruptHandler
 8001250:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <fvdTxInterruptHandler+0xac>)
 800125a:	f7ff faf1 	bl	8000840 <HAL_GPIO_WritePin>
 800125e:	e7f4      	b.n	800124a <fvdTxInterruptHandler+0x6a>
      HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <fvdTxInterruptHandler+0xac>)
 8001268:	f7ff faea 	bl	8000840 <HAL_GPIO_WritePin>
 800126c:	e7ed      	b.n	800124a <fvdTxInterruptHandler+0x6a>
    DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68d3      	ldr	r3, [r2, #12]
 8001274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001278:	60d3      	str	r3, [r2, #12]
    return;
 800127a:	e7e9      	b.n	8001250 <fvdTxInterruptHandler+0x70>
    DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68d3      	ldr	r3, [r2, #12]
 8001282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001286:	60d3      	str	r3, [r2, #12]
    return;
 8001288:	e7e2      	b.n	8001250 <fvdTxInterruptHandler+0x70>
 800128a:	bf00      	nop
 800128c:	40020c00 	.word	0x40020c00

08001290 <fvdSerialChannelISR>:
{
 8001290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001292:	4604      	mov	r4, r0
  uint32_t srflags = READ_REG(pstSerialCh->pstRxChannel->pstUartHALHandle->Instance->SR); // Status Register
 8001294:	6803      	ldr	r3, [r0, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681d      	ldr	r5, [r3, #0]
  uint32_t cr1its = READ_REG(pstSerialCh->pstRxChannel->pstUartHALHandle->Instance->CR1); // Control register 1
 800129c:	68df      	ldr	r7, [r3, #12]
  if (ulgErrorflags == 0U)
 800129e:	f015 060f 	ands.w	r6, r5, #15
 80012a2:	d009      	beq.n	80012b8 <fvdSerialChannelISR+0x28>
  pstSerialCh->ulSerialErrorFlags = ulgErrorflags;
 80012a4:	60c6      	str	r6, [r0, #12]
    pstSerialCh->ulSerialErrorCodes |= INTERRUPT_GEN_ERROR;
 80012a6:	6923      	ldr	r3, [r4, #16]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6123      	str	r3, [r4, #16]
    HAL_NVIC_ClearPendingIRQ(pstSerialCh->uinIRQn);
 80012ae:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80012b2:	f7ff f9d1 	bl	8000658 <HAL_NVIC_ClearPendingIRQ>
} // end fnvdSerialChannelISR
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((srflags & USART_SR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80012b8:	f015 0f20 	tst.w	r5, #32
 80012bc:	d008      	beq.n	80012d0 <fvdSerialChannelISR+0x40>
 80012be:	f017 0f20 	tst.w	r7, #32
 80012c2:	d101      	bne.n	80012c8 <fvdSerialChannelISR+0x38>
  enum BOOL boInterruptOccurred = False;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e004      	b.n	80012d2 <fvdSerialChannelISR+0x42>
      fvdRxInterruptHandler(pstSerialCh);
 80012c8:	f7ff ff16 	bl	80010f8 <fvdRxInterruptHandler>
      boInterruptOccurred = True;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <fvdSerialChannelISR+0x42>
  enum BOOL boInterruptOccurred = False;
 80012d0:	2300      	movs	r3, #0
    if (((srflags & USART_SR_TXE) != 0U) && ((cr1its & USART_CR1_TXEIE) != 0U))
 80012d2:	f015 0f80 	tst.w	r5, #128	; 0x80
 80012d6:	d002      	beq.n	80012de <fvdSerialChannelISR+0x4e>
 80012d8:	f017 0f80 	tst.w	r7, #128	; 0x80
 80012dc:	d103      	bne.n	80012e6 <fvdSerialChannelISR+0x56>
  pstSerialCh->ulSerialErrorFlags = ulgErrorflags;
 80012de:	60e6      	str	r6, [r4, #12]
  if (!boInterruptOccurred)
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e8      	bne.n	80012b6 <fvdSerialChannelISR+0x26>
 80012e4:	e7df      	b.n	80012a6 <fvdSerialChannelISR+0x16>
      fvdTxInterruptHandler(pstSerialCh);
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff ff7a 	bl	80011e0 <fvdTxInterruptHandler>
  pstSerialCh->ulSerialErrorFlags = ulgErrorflags;
 80012ec:	60e6      	str	r6, [r4, #12]
  if (!boInterruptOccurred)
 80012ee:	e7e2      	b.n	80012b6 <fvdSerialChannelISR+0x26>

080012f0 <pstCreateSerialChannel>:
 *
 */

stSERIAL_CHANNELTypeDef* pstCreateSerialChannel(UART_HandleTypeDef *pstHuart,
  uint16_t uinRxBufSize, uint16_t uinTxBufSize)
{
 80012f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f4:	4680      	mov	r8, r0
 80012f6:	460f      	mov	r7, r1
 80012f8:	4691      	mov	r9, r2
  stSERIAL_CHANNELTypeDef * pstSerialChannel;

  // First step is to create the Rx and Tx structures.
  // First allocate the buffers
  // used for the Rx and Tx channels
  if ((pchRxBufTmp = (int8_t*) calloc(uinRxBufSize, sizeof(int8_t))) == NULL)
 80012fa:	2101      	movs	r1, #1
 80012fc:	4638      	mov	r0, r7
 80012fe:	f000 fb67 	bl	80019d0 <calloc>
 8001302:	4606      	mov	r6, r0
 8001304:	2800      	cmp	r0, #0
 8001306:	d061      	beq.n	80013cc <pstCreateSerialChannel+0xdc>
  {
    // Not enough memory so return
    return (stSERIAL_CHANNELTypeDef*) pchRxBufTmp;
  }

  if ((pchTxBufTmp = (int8_t*) calloc(uinRxBufSize, sizeof(int8_t))) == NULL)
 8001308:	2101      	movs	r1, #1
 800130a:	4638      	mov	r0, r7
 800130c:	f000 fb60 	bl	80019d0 <calloc>
 8001310:	4682      	mov	sl, r0
 8001312:	2800      	cmp	r0, #0
 8001314:	d069      	beq.n	80013ea <pstCreateSerialChannel+0xfa>

  // Get here if the buffers have been allocated correctly.
  // Now allocate the storage for the main structures

  // RX data structure
  if ((pstRX_Serial_Channel = (stRX_SERIAL_CHANNELTypeDef*) calloc(1, sizeof(stRX_SERIAL_CHANNELTypeDef))) == NULL)
 8001316:	211c      	movs	r1, #28
 8001318:	2001      	movs	r0, #1
 800131a:	f000 fb59 	bl	80019d0 <calloc>
 800131e:	4604      	mov	r4, r0
 8001320:	2800      	cmp	r0, #0
 8001322:	d064      	beq.n	80013ee <pstCreateSerialChannel+0xfe>
  {
    return (stSERIAL_CHANNELTypeDef*) pstRX_Serial_Channel;
  }

  // TX data structure
  if ((pstTX_Serial_Channel = (stTX_SERIAL_CHANNELTypeDef*) calloc(1, sizeof(stRX_SERIAL_CHANNELTypeDef))) == NULL)
 8001324:	211c      	movs	r1, #28
 8001326:	2001      	movs	r0, #1
 8001328:	f000 fb52 	bl	80019d0 <calloc>
 800132c:	4605      	mov	r5, r0
 800132e:	2800      	cmp	r0, #0
 8001330:	d05f      	beq.n	80013f2 <pstCreateSerialChannel+0x102>
  // Now fill in the data structure.
  // NOTE: The basic asynchronous communication parameters are in the *pstHuart structure and do not have to
  // be set up. They have been set up and programmed into the hardware by the HAL initialisation.

  // Firstly set up the RX data structure
  pstRX_Serial_Channel->pstUartHALHandle = pstHuart;
 8001332:	f8c4 8000 	str.w	r8, [r4]
  pstRX_Serial_Channel->uinHead = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	80a3      	strh	r3, [r4, #4]
  pstRX_Serial_Channel->uinTail = 0;
 800133a:	80e3      	strh	r3, [r4, #6]
  pstRX_Serial_Channel->uinFree = uinRxBufSize;
 800133c:	8127      	strh	r7, [r4, #8]
  pstRX_Serial_Channel->uinUsed = 0;
 800133e:	8163      	strh	r3, [r4, #10]
  pstRX_Serial_Channel->uinBufSize = uinRxBufSize;
 8001340:	81a7      	strh	r7, [r4, #12]
  pstRX_Serial_Channel->chCtrlSCtrlQ = 0;
 8001342:	73a3      	strb	r3, [r4, #14]
  pstRX_Serial_Channel->boHysteresisActive = False;
 8001344:	73e3      	strb	r3, [r4, #15]
  pstRX_Serial_Channel->uinCtrlSThreshold = RX_CTRLS_LEVEL;
 8001346:	220c      	movs	r2, #12
 8001348:	8222      	strh	r2, [r4, #16]
  pstRX_Serial_Channel->uinCtrlQThreshold = RX_CTRLQ_LEVEL;
 800134a:	8263      	strh	r3, [r4, #18]
  pstRX_Serial_Channel->boOverflowErr = False;
 800134c:	7523      	strb	r3, [r4, #20]
  pstRX_Serial_Channel->boParityErr = False;
 800134e:	7563      	strb	r3, [r4, #21]
  pstRX_Serial_Channel->pchSerialBuffer = pchRxBufTmp;
 8001350:	61a6      	str	r6, [r4, #24]

  // Now set up the TX data structure
  pstTX_Serial_Channel->pstUartHALHandle = pstHuart;
 8001352:	f8c0 8000 	str.w	r8, [r0]
  pstTX_Serial_Channel->uinHead = 0;
 8001356:	8083      	strh	r3, [r0, #4]
  pstTX_Serial_Channel->uinTail = 0;
 8001358:	80c3      	strh	r3, [r0, #6]
  pstTX_Serial_Channel->uinFree = uinTxBufSize;
 800135a:	f8a0 9008 	strh.w	r9, [r0, #8]
  pstTX_Serial_Channel->uinUsed = 0;
 800135e:	8143      	strh	r3, [r0, #10]
  pstTX_Serial_Channel->uinBufSize = uinTxBufSize;
 8001360:	f8a0 900c 	strh.w	r9, [r0, #12]
  pstTX_Serial_Channel->boTxUserCtrlS = False;
 8001364:	7383      	strb	r3, [r0, #14]
  pstTX_Serial_Channel->pchSerialBuffer = pchTxBufTmp;
 8001366:	f8c0 a010 	str.w	sl, [r0, #16]

  // Serial Channel data structure
  if ((pstSerialChannel = (stSERIAL_CHANNELTypeDef*) calloc(1, sizeof(stSERIAL_CHANNELTypeDef))) == NULL)
 800136a:	2114      	movs	r1, #20
 800136c:	2001      	movs	r0, #1
 800136e:	f000 fb2f 	bl	80019d0 <calloc>
 8001372:	4606      	mov	r6, r0
 8001374:	b350      	cbz	r0, 80013cc <pstCreateSerialChannel+0xdc>
  {
    return pstSerialChannel;
  }

  // Now assign the pointers to the RX and TX structure in the stSERIAL_CHANNELTypeDef structure
  pstSerialChannel->pstRxChannel = pstRX_Serial_Channel;
 8001376:	6004      	str	r4, [r0, #0]
  pstSerialChannel->pstTxChannel = pstTX_Serial_Channel;
 8001378:	6045      	str	r5, [r0, #4]
  // This particular processor has USARTs 1 -> 3 and UARTs 4->6. These USARTs
  // each have a different register base address that is defined in stm32f767xx.h
  // of the form USART1, USART2, USART3 etc. Therefore in order to find out
  // which UART we are dealing with and what the interrupt is for this we
  // can simply check the base address.
  if (pstHuart->Instance == USART1)
 800137a:	f8d8 3000 	ldr.w	r3, [r8]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <pstCreateSerialChannel+0x10c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d011      	beq.n	80013a8 <pstCreateSerialChannel+0xb8>
    pstSerialChannel->uinIRQn = USART1_IRQn;
  else if (pstHuart->Instance == USART2)
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <pstCreateSerialChannel+0x110>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d023      	beq.n	80013d2 <pstCreateSerialChannel+0xe2>
    pstSerialChannel->uinIRQn = USART2_IRQn;
  else if (pstHuart->Instance == USART3)
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <pstCreateSerialChannel+0x114>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d023      	beq.n	80013d8 <pstCreateSerialChannel+0xe8>
    pstSerialChannel->uinIRQn = USART3_IRQn;
  else if (pstHuart->Instance == UART4)
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <pstCreateSerialChannel+0x118>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d023      	beq.n	80013de <pstCreateSerialChannel+0xee>
    pstSerialChannel->uinIRQn = UART4_IRQn;
  else if (pstHuart->Instance == UART5)
 8001396:	4a1d      	ldr	r2, [pc, #116]	; (800140c <pstCreateSerialChannel+0x11c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d023      	beq.n	80013e4 <pstCreateSerialChannel+0xf4>
    pstSerialChannel->uinIRQn = UART5_IRQn;
  else if (pstHuart->Instance == USART6)
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <pstCreateSerialChannel+0x120>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d129      	bne.n	80013f6 <pstCreateSerialChannel+0x106>
    pstSerialChannel->uinIRQn = USART6_IRQn;
 80013a2:	2347      	movs	r3, #71	; 0x47
 80013a4:	7203      	strb	r3, [r0, #8]
 80013a6:	e001      	b.n	80013ac <pstCreateSerialChannel+0xbc>
    pstSerialChannel->uinIRQn = USART1_IRQn;
 80013a8:	2325      	movs	r3, #37	; 0x25
 80013aa:	7203      	strb	r3, [r0, #8]
  else
    // Problem - instance does not make sense - does not exist
    return (stSERIAL_CHANNELTypeDef*) NULL;

  // Initialise to no errors.
  pstSerialChannel->ulSerialErrorFlags = 0U;
 80013ac:	2400      	movs	r4, #0
 80013ae:	60f4      	str	r4, [r6, #12]

  // Initialise the error codes equal to zero
  pstSerialChannel->ulSerialErrorCodes = 0U;
 80013b0:	6134      	str	r4, [r6, #16]

  // RED LED used to indicate Rx Buffer overflow
  HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_RESET);
 80013b2:	4d18      	ldr	r5, [pc, #96]	; (8001414 <pstCreateSerialChannel+0x124>)
 80013b4:	4622      	mov	r2, r4
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	4628      	mov	r0, r5
 80013bc:	f7ff fa40 	bl	8000840 <HAL_GPIO_WritePin>

  // ORANGE LED toggles on with CTRL S, and off with CTRL Q
  HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 80013c0:	4622      	mov	r2, r4
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	4628      	mov	r0, r5
 80013c8:	f7ff fa3a 	bl	8000840 <HAL_GPIO_WritePin>

  // Now return a pointer to the filled in structure.
  return pstSerialChannel;

}
 80013cc:	4630      	mov	r0, r6
 80013ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pstSerialChannel->uinIRQn = USART2_IRQn;
 80013d2:	2326      	movs	r3, #38	; 0x26
 80013d4:	7203      	strb	r3, [r0, #8]
 80013d6:	e7e9      	b.n	80013ac <pstCreateSerialChannel+0xbc>
    pstSerialChannel->uinIRQn = USART3_IRQn;
 80013d8:	2327      	movs	r3, #39	; 0x27
 80013da:	7203      	strb	r3, [r0, #8]
 80013dc:	e7e6      	b.n	80013ac <pstCreateSerialChannel+0xbc>
    pstSerialChannel->uinIRQn = UART4_IRQn;
 80013de:	2334      	movs	r3, #52	; 0x34
 80013e0:	7203      	strb	r3, [r0, #8]
 80013e2:	e7e3      	b.n	80013ac <pstCreateSerialChannel+0xbc>
    pstSerialChannel->uinIRQn = UART5_IRQn;
 80013e4:	2335      	movs	r3, #53	; 0x35
 80013e6:	7203      	strb	r3, [r0, #8]
 80013e8:	e7e0      	b.n	80013ac <pstCreateSerialChannel+0xbc>
    return (stSERIAL_CHANNELTypeDef*) pchTxBufTmp;
 80013ea:	4606      	mov	r6, r0
 80013ec:	e7ee      	b.n	80013cc <pstCreateSerialChannel+0xdc>
    return (stSERIAL_CHANNELTypeDef*) pstRX_Serial_Channel;
 80013ee:	4606      	mov	r6, r0
 80013f0:	e7ec      	b.n	80013cc <pstCreateSerialChannel+0xdc>
    return (stSERIAL_CHANNELTypeDef*) pstTX_Serial_Channel;
 80013f2:	4606      	mov	r6, r0
 80013f4:	e7ea      	b.n	80013cc <pstCreateSerialChannel+0xdc>
    return (stSERIAL_CHANNELTypeDef*) NULL;
 80013f6:	2600      	movs	r6, #0
 80013f8:	e7e8      	b.n	80013cc <pstCreateSerialChannel+0xdc>
 80013fa:	bf00      	nop
 80013fc:	40011000 	.word	0x40011000
 8001400:	40004400 	.word	0x40004400
 8001404:	40004800 	.word	0x40004800
 8001408:	40004c00 	.word	0x40004c00
 800140c:	40005000 	.word	0x40005000
 8001410:	40011400 	.word	0x40011400
 8001414:	40020c00 	.word	0x40020c00

08001418 <fvdEnableSerialChInterrupts>:
 * channel -- i.e. it enables RX and TX for the particular
 * interrupt, and globally enables interrupts in the NVIC.
 */

void fvdEnableSerialChInterrupts(stSERIAL_CHANNELTypeDef *pstSerialCh)
{
 8001418:	b508      	push	{r3, lr}
  // Enable RX not empty interrupt
  ENABLE_RXNE_INT(pstSerialCh->pstRxChannel);
 800141a:	6803      	ldr	r3, [r0, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68d3      	ldr	r3, [r2, #12]
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	60d3      	str	r3, [r2, #12]
  // SET_BIT(pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->CR1, USART_CR1_TXEIE);
  // ENABLE_TXE_INT(pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->CR1);

  // Globally enable interrupts for this USART. Not necessary as enabled in HAL_UART_MspInit
  // in the normal initialisation procedures.
  HAL_NVIC_EnableIRQ(pstSerialCh->uinIRQn);
 8001428:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800142c:	f7ff f8de 	bl	80005ec <HAL_NVIC_EnableIRQ>
}
 8001430:	bd08      	pop	{r3, pc}

08001432 <fchGetChar>:
 * character in the buffer.
 *
 */

char fchGetChar(stSERIAL_CHANNELTypeDef *pstSerialCh, enum BOOL boBlocking)
{
 8001432:	b538      	push	{r3, r4, r5, lr}
 8001434:	4604      	mov	r4, r0
  char chTempChar;

  if (!boBlocking)
 8001436:	b919      	cbnz	r1, 8001440 <fchGetChar+0xe>
  {
    // Enter here is non-blocking. Check to see if data is there. If
    // not then return with a NON-ASCII character.

    if (pstSerialCh->pstRxChannel->uinUsed == 0)
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	895b      	ldrh	r3, [r3, #10]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d034      	beq.n	80014aa <fchGetChar+0x78>
  }

  // Enter here if there is data (non-blocking), or regardless of if there
  // is data or not for non-blocking.
  // Loop until data is available
  while (pstSerialCh->pstRxChannel->uinUsed == 0)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	895b      	ldrh	r3, [r3, #10]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0fb      	beq.n	8001440 <fchGetChar+0xe>

  // There is data in the buffer so get a character out and update all
  // of the housekeeping information

  // !!!!!! START OF CRITICAL SECTION !!!!!!
  HAL_NVIC_DisableIRQ(pstSerialCh->uinIRQn);
 8001448:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800144c:	f7ff f8dc 	bl	8000608 <HAL_NVIC_DisableIRQ>

  //DISABLE_RXNE_INT(pstSerialCh->pstRxChannel);
  chTempChar = pstSerialCh->pstRxChannel->pchSerialBuffer[pstSerialCh->pstRxChannel->uinTail];
 8001450:	6822      	ldr	r2, [r4, #0]
 8001452:	6991      	ldr	r1, [r2, #24]
 8001454:	88d3      	ldrh	r3, [r2, #6]
 8001456:	56cd      	ldrsb	r5, [r1, r3]
 8001458:	b2ed      	uxtb	r5, r5
  pstSerialCh->pstRxChannel->uinTail = (pstSerialCh->pstRxChannel->uinTail + 1) %
 800145a:	3301      	adds	r3, #1
                                                      (pstSerialCh->pstRxChannel->uinBufSize);
 800145c:	8990      	ldrh	r0, [r2, #12]
  pstSerialCh->pstRxChannel->uinTail = (pstSerialCh->pstRxChannel->uinTail + 1) %
 800145e:	fb93 f1f0 	sdiv	r1, r3, r0
 8001462:	fb00 3311 	mls	r3, r0, r1, r3
 8001466:	80d3      	strh	r3, [r2, #6]
  pstSerialCh->pstRxChannel->uinFree++;
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	8913      	ldrh	r3, [r2, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	8113      	strh	r3, [r2, #8]
  pstSerialCh->pstRxChannel->uinUsed--;
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	8953      	ldrh	r3, [r2, #10]
 8001474:	3b01      	subs	r3, #1
 8001476:	8153      	strh	r3, [r2, #10]

  // Now check to see if the upper threshold CtrlS has been issued whether the lower threshold
  // is now been reached.  If so then instruct the transmitted to send out a CtrlQ.
  if (pstSerialCh->pstRxChannel->boHysteresisActive &&
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	7bda      	ldrb	r2, [r3, #15]
 800147c:	b17a      	cbz	r2, 800149e <fchGetChar+0x6c>
          (pstSerialCh->pstRxChannel->uinUsed <= pstSerialCh->pstRxChannel->uinCtrlQThreshold))
 800147e:	8959      	ldrh	r1, [r3, #10]
 8001480:	8a5a      	ldrh	r2, [r3, #18]
  if (pstSerialCh->pstRxChannel->boHysteresisActive &&
 8001482:	4291      	cmp	r1, r2
 8001484:	d80b      	bhi.n	800149e <fchGetChar+0x6c>
  {
    // We are below the lower threshold for used locations in the buffer.
    // So instruct the TX to send out a CtrlQ to restart characters.
    pstSerialCh->pstRxChannel->chCtrlSCtrlQ = CTRLQ;
 8001486:	2211      	movs	r2, #17
 8001488:	739a      	strb	r2, [r3, #14]

    // Reset the flag to indicate we are no longer are the CtrlS mode.
    pstSerialCh->pstRxChannel->boHysteresisActive = False;
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	73da      	strb	r2, [r3, #15]

    // Make sure the the TX interrupts are enable so that this can be checked by the
    // transmitter and the ctrlQ is sent.
    ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68d3      	ldr	r3, [r2, #12]
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	60d3      	str	r3, [r2, #12]
  }

  HAL_NVIC_EnableIRQ(pstSerialCh->uinIRQn);
 800149e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80014a2:	f7ff f8a3 	bl	80005ec <HAL_NVIC_EnableIRQ>
  // !!!!!! END OF CRITICAL SECTION !!!!!!

  return chTempChar;

} // end fchGetChar
 80014a6:	4628      	mov	r0, r5
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
      return 255;
 80014aa:	25ff      	movs	r5, #255	; 0xff
 80014ac:	e7fb      	b.n	80014a6 <fchGetChar+0x74>

080014ae <fuinPutChar>:
 * Returns: number of free characters in the TX buffer.
 *
 */

uint8_t fuinPutChar(stSERIAL_CHANNELTypeDef *pstSerialCh, char chCharacter, enum BOOL boBlocking)
{
 80014ae:	b570      	push	{r4, r5, r6, lr}
 80014b0:	4604      	mov	r4, r0
 80014b2:	460d      	mov	r5, r1
  uint8_t uinFreeLoc;

  // Get the number of free locations in the TX buffer
  // DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
  uinFreeLoc = pstSerialCh->pstTxChannel->uinFree;
 80014b4:	6843      	ldr	r3, [r0, #4]
 80014b6:	891b      	ldrh	r3, [r3, #8]

  // If non-blocking check to see if there is a free location.
  if (!boBlocking && (uinFreeLoc == 0))
 80014b8:	b90a      	cbnz	r2, 80014be <fuinPutChar+0x10>
 80014ba:	b2de      	uxtb	r6, r3
 80014bc:	b346      	cbz	r6, 8001510 <fuinPutChar+0x62>
  // Loop until space is available or the user has requested transmission to
  // commence.
  //
  // Note that the user CtrlS can result in the code execution being stuck here
  // for indeterminate periods of time.
  while (pstSerialCh->pstTxChannel->uinFree == 0)
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0fd      	beq.n	80014be <fuinPutChar+0x10>
  }

  // Enter this point if there is at least one free location in the TX buffer

  // !!!!!!!! START OF CRITICAL SECTION !!!!!!!!!
  HAL_NVIC_DisableIRQ(pstSerialCh->uinIRQn);
 80014c2:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80014c6:	f7ff f89f 	bl	8000608 <HAL_NVIC_DisableIRQ>

  // Now put the character passed in into the TX buffer.
  //DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
  pstSerialCh->pstTxChannel->pchSerialBuffer[pstSerialCh->pstTxChannel->uinHead] = chCharacter;
 80014ca:	6863      	ldr	r3, [r4, #4]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	889b      	ldrh	r3, [r3, #4]
 80014d0:	54d5      	strb	r5, [r2, r3]
  pstSerialCh->pstTxChannel->uinHead = (pstSerialCh->pstTxChannel->uinHead + 1) %
 80014d2:	6862      	ldr	r2, [r4, #4]
 80014d4:	8893      	ldrh	r3, [r2, #4]
 80014d6:	3301      	adds	r3, #1
                                                        (pstSerialCh->pstTxChannel->uinBufSize);
 80014d8:	8990      	ldrh	r0, [r2, #12]
  pstSerialCh->pstTxChannel->uinHead = (pstSerialCh->pstTxChannel->uinHead + 1) %
 80014da:	fb93 f1f0 	sdiv	r1, r3, r0
 80014de:	fb00 3311 	mls	r3, r0, r1, r3
 80014e2:	8093      	strh	r3, [r2, #4]
  pstSerialCh->pstTxChannel->uinUsed++;
 80014e4:	6862      	ldr	r2, [r4, #4]
 80014e6:	8953      	ldrh	r3, [r2, #10]
 80014e8:	3301      	adds	r3, #1
 80014ea:	8153      	strh	r3, [r2, #10]
  pstSerialCh->pstTxChannel->uinFree--;
 80014ec:	6862      	ldr	r2, [r4, #4]
 80014ee:	8913      	ldrh	r3, [r2, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	8113      	strh	r3, [r2, #8]
  uinFreeLoc = pstSerialCh->pstTxChannel->uinFree;
 80014f4:	6863      	ldr	r3, [r4, #4]
 80014f6:	7a1e      	ldrb	r6, [r3, #8]

  // Only enable the transmit interrupts if the user has not requested transmission to
  // stop
  if (!(pstSerialCh->pstTxChannel->boTxUserCtrlS))
 80014f8:	7b9a      	ldrb	r2, [r3, #14]
 80014fa:	b92a      	cbnz	r2, 8001508 <fuinPutChar+0x5a>
  {
    ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68d3      	ldr	r3, [r2, #12]
 8001502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001506:	60d3      	str	r3, [r2, #12]
  }
  HAL_NVIC_EnableIRQ(pstSerialCh->uinIRQn);
 8001508:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800150c:	f7ff f86e 	bl	80005ec <HAL_NVIC_EnableIRQ>
  // !!!!!!!! END OF CRTICIAL SECTION !!!!!!!!
  return uinFreeLoc;

}
 8001510:	4630      	mov	r0, r6
 8001512:	bd70      	pop	{r4, r5, r6, pc}

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001518:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	2400      	movs	r4, #0
 800151c:	9407      	str	r4, [sp, #28]
 800151e:	9408      	str	r4, [sp, #32]
 8001520:	9409      	str	r4, [sp, #36]	; 0x24
 8001522:	940a      	str	r4, [sp, #40]	; 0x28
 8001524:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	9401      	str	r4, [sp, #4]
 8001528:	4b77      	ldr	r3, [pc, #476]	; (8001708 <MX_GPIO_Init+0x1f4>)
 800152a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152c:	f042 0210 	orr.w	r2, r2, #16
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	f002 0210 	and.w	r2, r2, #16
 8001538:	9201      	str	r2, [sp, #4]
 800153a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	9402      	str	r4, [sp, #8]
 800153e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001540:	f042 0204 	orr.w	r2, r2, #4
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
 8001546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001548:	f002 0204 	and.w	r2, r2, #4
 800154c:	9202      	str	r2, [sp, #8]
 800154e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001550:	9403      	str	r4, [sp, #12]
 8001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001554:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
 800155a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001560:	9203      	str	r2, [sp, #12]
 8001562:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	9404      	str	r4, [sp, #16]
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	f042 0201 	orr.w	r2, r2, #1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f002 0201 	and.w	r2, r2, #1
 8001574:	9204      	str	r2, [sp, #16]
 8001576:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	9405      	str	r4, [sp, #20]
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f042 0202 	orr.w	r2, r2, #2
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
 8001582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001584:	f002 0202 	and.w	r2, r2, #2
 8001588:	9205      	str	r2, [sp, #20]
 800158a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	9406      	str	r4, [sp, #24]
 800158e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001590:	f042 0208 	orr.w	r2, r2, #8
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	9306      	str	r3, [sp, #24]
 800159e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80015a0:	4622      	mov	r2, r4
 80015a2:	2108      	movs	r1, #8
 80015a4:	4859      	ldr	r0, [pc, #356]	; (800170c <MX_GPIO_Init+0x1f8>)
 80015a6:	f7ff f94b 	bl	8000840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015aa:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001718 <MX_GPIO_Init+0x204>
 80015ae:	2201      	movs	r2, #1
 80015b0:	4611      	mov	r1, r2
 80015b2:	4640      	mov	r0, r8
 80015b4:	f7ff f944 	bl	8000840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80015b8:	f8df a160 	ldr.w	sl, [pc, #352]	; 800171c <MX_GPIO_Init+0x208>
 80015bc:	4622      	mov	r2, r4
 80015be:	f24f 0110 	movw	r1, #61456	; 0xf010
 80015c2:	4650      	mov	r0, sl
 80015c4:	f7ff f93c 	bl	8000840 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015c8:	2508      	movs	r5, #8
 80015ca:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2601      	movs	r6, #1
 80015ce:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015d4:	a907      	add	r1, sp, #28
 80015d6:	484d      	ldr	r0, [pc, #308]	; (800170c <MX_GPIO_Init+0x1f8>)
 80015d8:	f7ff f84c 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015dc:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e4:	a907      	add	r1, sp, #28
 80015e6:	4640      	mov	r0, r8
 80015e8:	f7ff f844 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015ec:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2502      	movs	r5, #2
 80015f0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f6:	f04f 0b05 	mov.w	fp, #5
 80015fa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015fe:	a907      	add	r1, sp, #28
 8001600:	4640      	mov	r0, r8
 8001602:	f7ff f837 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001606:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001608:	4b41      	ldr	r3, [pc, #260]	; (8001710 <MX_GPIO_Init+0x1fc>)
 800160a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800160e:	4f41      	ldr	r7, [pc, #260]	; (8001714 <MX_GPIO_Init+0x200>)
 8001610:	a907      	add	r1, sp, #28
 8001612:	4638      	mov	r0, r7
 8001614:	f7ff f82e 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001618:	2310      	movs	r3, #16
 800161a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001622:	2206      	movs	r2, #6
 8001624:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001626:	a907      	add	r1, sp, #28
 8001628:	4638      	mov	r0, r7
 800162a:	f7ff f823 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800162e:	23e0      	movs	r3, #224	; 0xe0
 8001630:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001638:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	a907      	add	r1, sp, #28
 800163e:	4638      	mov	r0, r7
 8001640:	f7ff f818 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001644:	2204      	movs	r2, #4
 8001646:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800164c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001720 <MX_GPIO_Init+0x20c>
 8001650:	a907      	add	r1, sp, #28
 8001652:	4648      	mov	r0, r9
 8001654:	f7ff f80e 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001664:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001668:	a907      	add	r1, sp, #28
 800166a:	4648      	mov	r0, r9
 800166c:	f7ff f802 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001670:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001674:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	a907      	add	r1, sp, #28
 800167e:	4650      	mov	r0, sl
 8001680:	f7fe fff8 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001684:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001688:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001690:	2206      	movs	r2, #6
 8001692:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	a907      	add	r1, sp, #28
 8001696:	4640      	mov	r0, r8
 8001698:	f7fe ffec 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80016a6:	a907      	add	r1, sp, #28
 80016a8:	4638      	mov	r0, r7
 80016aa:	f7fe ffe3 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80016ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016b2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016ba:	230a      	movs	r3, #10
 80016bc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	a907      	add	r1, sp, #28
 80016c0:	4638      	mov	r0, r7
 80016c2:	f7fe ffd7 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016c6:	2320      	movs	r3, #32
 80016c8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ce:	a907      	add	r1, sp, #28
 80016d0:	4650      	mov	r0, sl
 80016d2:	f7fe ffcf 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016dc:	2312      	movs	r3, #18
 80016de:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e0:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e4:	2204      	movs	r2, #4
 80016e6:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	a907      	add	r1, sp, #28
 80016ea:	4648      	mov	r0, r9
 80016ec:	f7fe ffc2 	bl	8000674 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016f0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_GPIO_Init+0x1fc>)
 80016f4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016f8:	a907      	add	r1, sp, #28
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_GPIO_Init+0x1f8>)
 80016fc:	f7fe ffba 	bl	8000674 <HAL_GPIO_Init>

}
 8001700:	b00d      	add	sp, #52	; 0x34
 8001702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40021000 	.word	0x40021000
 8001710:	10120000 	.word	0x10120000
 8001714:	40020000 	.word	0x40020000
 8001718:	40020800 	.word	0x40020800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40020400 	.word	0x40020400

08001724 <MX_USART2_UART_Init>:
{
 8001724:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <MX_USART2_UART_Init+0x24>)
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART2_UART_Init+0x28>)
 800172a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800172c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001730:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	2300      	movs	r3, #0
 8001734:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001736:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001738:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173a:	220c      	movs	r2, #12
 800173c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001742:	f7ff fca9 	bl	8001098 <HAL_UART_Init>
}
 8001746:	bd08      	pop	{r3, pc}
 8001748:	200000a4 	.word	0x200000a4
 800174c:	40004400 	.word	0x40004400

08001750 <SystemClock_Config>:
{
 8001750:	b530      	push	{r4, r5, lr}
 8001752:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001754:	2230      	movs	r2, #48	; 0x30
 8001756:	2100      	movs	r1, #0
 8001758:	a808      	add	r0, sp, #32
 800175a:	f000 f96b 	bl	8001a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175e:	2400      	movs	r4, #0
 8001760:	9403      	str	r4, [sp, #12]
 8001762:	9404      	str	r4, [sp, #16]
 8001764:	9405      	str	r4, [sp, #20]
 8001766:	9406      	str	r4, [sp, #24]
 8001768:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	9401      	str	r4, [sp, #4]
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <SystemClock_Config+0x90>)
 800176e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001770:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	9402      	str	r4, [sp, #8]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <SystemClock_Config+0x94>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001796:	2301      	movs	r3, #1
 8001798:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a0:	2502      	movs	r5, #2
 80017a2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017aa:	2308      	movs	r3, #8
 80017ac:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017b2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017b6:	2307      	movs	r3, #7
 80017b8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ba:	a808      	add	r0, sp, #32
 80017bc:	f7ff f846 	bl	800084c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017cc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d4:	2105      	movs	r1, #5
 80017d6:	a803      	add	r0, sp, #12
 80017d8:	f7ff fa94 	bl	8000d04 <HAL_RCC_ClockConfig>
}
 80017dc:	b015      	add	sp, #84	; 0x54
 80017de:	bd30      	pop	{r4, r5, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <main>:
{
 80017e8:	b508      	push	{r3, lr}
  HAL_Init();
 80017ea:	f7fe fe8d 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 80017ee:	f7ff ffaf 	bl	8001750 <SystemClock_Config>
  MX_GPIO_Init();
 80017f2:	f7ff fe8f 	bl	8001514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017f6:	f7ff ff95 	bl	8001724 <MX_USART2_UART_Init>
  fvdMyMain(&huart2);
 80017fa:	4802      	ldr	r0, [pc, #8]	; (8001804 <main+0x1c>)
 80017fc:	f000 f804 	bl	8001808 <fvdMyMain>
  while (1)
 8001800:	e7fe      	b.n	8001800 <main+0x18>
 8001802:	bf00      	nop
 8001804:	200000a4 	.word	0x200000a4

08001808 <fvdMyMain>:
 *
 * Parameters: none
 * Return: nothing
 */
void fvdMyMain(UART_HandleTypeDef *pstHuart2)
{
 8001808:	b508      	push	{r3, lr}
  char chRxChar;
  // Create the external USART (interrupt driven)
  pstSerialChannel2 = pstCreateSerialChannel(pstHuart2, RX_BUFFER_SIZE, TX_BUFFER_SIZE);
 800180a:	2228      	movs	r2, #40	; 0x28
 800180c:	4611      	mov	r1, r2
 800180e:	f7ff fd6f 	bl	80012f0 <pstCreateSerialChannel>
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <fvdMyMain+0x30>)
 8001814:	6018      	str	r0, [r3, #0]
  fvdEnableSerialChInterrupts(pstSerialChannel2);
 8001816:	f7ff fdff 	bl	8001418 <fvdEnableSerialChInterrupts>
 800181a:	e005      	b.n	8001828 <fvdMyMain+0x20>
  {
    chRxChar = fchGetChar(pstSerialChannel2, NON_BLOCKING);

    if ((uint8_t)chRxChar != 255)
    {
        fuinPutChar(pstSerialChannel2, chRxChar, BLOCKING);
 800181c:	2201      	movs	r2, #1
 800181e:	4601      	mov	r1, r0
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <fvdMyMain+0x30>)
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	f7ff fe43 	bl	80014ae <fuinPutChar>
    chRxChar = fchGetChar(pstSerialChannel2, NON_BLOCKING);
 8001828:	2100      	movs	r1, #0
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <fvdMyMain+0x30>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f7ff fe00 	bl	8001432 <fchGetChar>
    if ((uint8_t)chRxChar != 255)
 8001832:	28ff      	cmp	r0, #255	; 0xff
 8001834:	d0f8      	beq.n	8001828 <fvdMyMain+0x20>
 8001836:	e7f1      	b.n	800181c <fvdMyMain+0x14>
 8001838:	200000e4 	.word	0x200000e4

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b500      	push	{lr}
 800183e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	2100      	movs	r1, #0
 8001842:	9100      	str	r1, [sp, #0]
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_MspInit+0x3c>)
 8001846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
 800184e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001850:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001854:	9200      	str	r2, [sp, #0]
 8001856:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	9101      	str	r1, [sp, #4]
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186c:	2007      	movs	r0, #7
 800186e:	f7fe fe77 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	b003      	add	sp, #12
 8001874:	f85d fb04 	ldr.w	pc, [sp], #4
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b510      	push	{r4, lr}
 800187e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	2300      	movs	r3, #0
 8001882:	9303      	str	r3, [sp, #12]
 8001884:	9304      	str	r3, [sp, #16]
 8001886:	9305      	str	r3, [sp, #20]
 8001888:	9306      	str	r3, [sp, #24]
 800188a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_UART_MspInit+0x78>)
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001894:	b008      	add	sp, #32
 8001896:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001898:	2400      	movs	r4, #0
 800189a:	9401      	str	r4, [sp, #4]
 800189c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80018a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
 80018a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018aa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80018ae:	9201      	str	r2, [sp, #4]
 80018b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	9402      	str	r4, [sp, #8]
 80018b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018c6:	230c      	movs	r3, #12
 80018c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d4:	2307      	movs	r3, #7
 80018d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	a903      	add	r1, sp, #12
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <HAL_UART_MspInit+0x7c>)
 80018dc:	f7fe feca 	bl	8000674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80018e0:	2201      	movs	r2, #1
 80018e2:	4621      	mov	r1, r4
 80018e4:	2026      	movs	r0, #38	; 0x26
 80018e6:	f7fe fe4d 	bl	8000584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ea:	2026      	movs	r0, #38	; 0x26
 80018ec:	f7fe fe7e 	bl	80005ec <HAL_NVIC_EnableIRQ>
}
 80018f0:	e7d0      	b.n	8001894 <HAL_UART_MspInit+0x18>
 80018f2:	bf00      	nop
 80018f4:	40004400 	.word	0x40004400
 80018f8:	40020000 	.word	0x40020000

080018fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018fc:	4770      	bx	lr

080018fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler>

08001900 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler>

08001902 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler>

08001904 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler>

08001906 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190e:	f7fe fe15 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001912:	bd08      	pop	{r3, pc}

08001914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001914:	b508      	push	{r3, lr}
// 	HAL_UART_IRQHandler(&huart2);
	// HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin); // Blue LED
	fvdSerialChannelISR(pstSerialChannel2);
 8001916:	4b02      	ldr	r3, [pc, #8]	; (8001920 <USART2_IRQHandler+0xc>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f7ff fcb9 	bl	8001290 <fvdSerialChannelISR>
	{
		HAL_UART_Receive_IT(&huart2, rec_data, 4);  // Reset the buffers, enable Rx Ints
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);  // Orange LED
	}
*/
}
 800191e:	bd08      	pop	{r3, pc}
 8001920:	200000e4 	.word	0x200000e4

08001924 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001924:	b508      	push	{r3, lr}
 8001926:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <_sbrk+0x34>)
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	b142      	cbz	r2, 8001940 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <_sbrk+0x34>)
 8001930:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001932:	4403      	add	r3, r0
 8001934:	466a      	mov	r2, sp
 8001936:	4293      	cmp	r3, r2
 8001938:	d806      	bhi.n	8001948 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <_sbrk+0x34>)
 800193c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800193e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001940:	4a05      	ldr	r2, [pc, #20]	; (8001958 <_sbrk+0x34>)
 8001942:	4906      	ldr	r1, [pc, #24]	; (800195c <_sbrk+0x38>)
 8001944:	6011      	str	r1, [r2, #0]
 8001946:	e7f2      	b.n	800192e <_sbrk+0xa>
		errno = ENOMEM;
 8001948:	f000 f84a 	bl	80019e0 <__errno>
 800194c:	230c      	movs	r3, #12
 800194e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	e7f3      	b.n	800193e <_sbrk+0x1a>
 8001956:	bf00      	nop
 8001958:	20000090 	.word	0x20000090
 800195c:	200000f8 	.word	0x200000f8

08001960 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SystemInit+0x18>)
 8001962:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001966:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800196a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001972:	609a      	str	r2, [r3, #8]
#endif
}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001980:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001982:	e003      	b.n	800198c <LoopCopyDataInit>

08001984 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001986:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001988:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800198a:	3104      	adds	r1, #4

0800198c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800198c:	480b      	ldr	r0, [pc, #44]	; (80019bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001990:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001992:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001994:	d3f6      	bcc.n	8001984 <CopyDataInit>
  ldr  r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001998:	e002      	b.n	80019a0 <LoopFillZerobss>

0800199a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800199a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800199c:	f842 3b04 	str.w	r3, [r2], #4

080019a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019a4:	d3f9      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ffdb 	bl	8001960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f000 f81f 	bl	80019ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff ff1b 	bl	80017e8 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019b8:	08001b94 	.word	0x08001b94
  ldr  r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80019c4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80019c8:	200000f8 	.word	0x200000f8

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <calloc>:
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <calloc+0xc>)
 80019d2:	460a      	mov	r2, r1
 80019d4:	4601      	mov	r1, r0
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	f000 b834 	b.w	8001a44 <_calloc_r>
 80019dc:	2000000c 	.word	0x2000000c

080019e0 <__errno>:
 80019e0:	4b01      	ldr	r3, [pc, #4]	; (80019e8 <__errno+0x8>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c

080019ec <__libc_init_array>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	4d0d      	ldr	r5, [pc, #52]	; (8001a24 <__libc_init_array+0x38>)
 80019f0:	4c0d      	ldr	r4, [pc, #52]	; (8001a28 <__libc_init_array+0x3c>)
 80019f2:	1b64      	subs	r4, r4, r5
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	2600      	movs	r6, #0
 80019f8:	42a6      	cmp	r6, r4
 80019fa:	d109      	bne.n	8001a10 <__libc_init_array+0x24>
 80019fc:	4d0b      	ldr	r5, [pc, #44]	; (8001a2c <__libc_init_array+0x40>)
 80019fe:	4c0c      	ldr	r4, [pc, #48]	; (8001a30 <__libc_init_array+0x44>)
 8001a00:	f000 f8a8 	bl	8001b54 <_init>
 8001a04:	1b64      	subs	r4, r4, r5
 8001a06:	10a4      	asrs	r4, r4, #2
 8001a08:	2600      	movs	r6, #0
 8001a0a:	42a6      	cmp	r6, r4
 8001a0c:	d105      	bne.n	8001a1a <__libc_init_array+0x2e>
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a14:	4798      	blx	r3
 8001a16:	3601      	adds	r6, #1
 8001a18:	e7ee      	b.n	80019f8 <__libc_init_array+0xc>
 8001a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1e:	4798      	blx	r3
 8001a20:	3601      	adds	r6, #1
 8001a22:	e7f2      	b.n	8001a0a <__libc_init_array+0x1e>
 8001a24:	08001b8c 	.word	0x08001b8c
 8001a28:	08001b8c 	.word	0x08001b8c
 8001a2c:	08001b8c 	.word	0x08001b8c
 8001a30:	08001b90 	.word	0x08001b90

08001a34 <memset>:
 8001a34:	4402      	add	r2, r0
 8001a36:	4603      	mov	r3, r0
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <memset+0xa>
 8001a3c:	4770      	bx	lr
 8001a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a42:	e7f9      	b.n	8001a38 <memset+0x4>

08001a44 <_calloc_r>:
 8001a44:	b513      	push	{r0, r1, r4, lr}
 8001a46:	434a      	muls	r2, r1
 8001a48:	4611      	mov	r1, r2
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	f000 f80a 	bl	8001a64 <_malloc_r>
 8001a50:	4604      	mov	r4, r0
 8001a52:	b118      	cbz	r0, 8001a5c <_calloc_r+0x18>
 8001a54:	9a01      	ldr	r2, [sp, #4]
 8001a56:	2100      	movs	r1, #0
 8001a58:	f7ff ffec 	bl	8001a34 <memset>
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd10      	pop	{r4, pc}
	...

08001a64 <_malloc_r>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	1ccd      	adds	r5, r1, #3
 8001a68:	f025 0503 	bic.w	r5, r5, #3
 8001a6c:	3508      	adds	r5, #8
 8001a6e:	2d0c      	cmp	r5, #12
 8001a70:	bf38      	it	cc
 8001a72:	250c      	movcc	r5, #12
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	4606      	mov	r6, r0
 8001a78:	db01      	blt.n	8001a7e <_malloc_r+0x1a>
 8001a7a:	42a9      	cmp	r1, r5
 8001a7c:	d903      	bls.n	8001a86 <_malloc_r+0x22>
 8001a7e:	230c      	movs	r3, #12
 8001a80:	6033      	str	r3, [r6, #0]
 8001a82:	2000      	movs	r0, #0
 8001a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a86:	f000 f857 	bl	8001b38 <__malloc_lock>
 8001a8a:	4921      	ldr	r1, [pc, #132]	; (8001b10 <_malloc_r+0xac>)
 8001a8c:	680a      	ldr	r2, [r1, #0]
 8001a8e:	4614      	mov	r4, r2
 8001a90:	b99c      	cbnz	r4, 8001aba <_malloc_r+0x56>
 8001a92:	4f20      	ldr	r7, [pc, #128]	; (8001b14 <_malloc_r+0xb0>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b923      	cbnz	r3, 8001aa2 <_malloc_r+0x3e>
 8001a98:	4621      	mov	r1, r4
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f000 f83c 	bl	8001b18 <_sbrk_r>
 8001aa0:	6038      	str	r0, [r7, #0]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	f000 f837 	bl	8001b18 <_sbrk_r>
 8001aaa:	1c43      	adds	r3, r0, #1
 8001aac:	d123      	bne.n	8001af6 <_malloc_r+0x92>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	6033      	str	r3, [r6, #0]
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	f000 f846 	bl	8001b44 <__malloc_unlock>
 8001ab8:	e7e3      	b.n	8001a82 <_malloc_r+0x1e>
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	1b5b      	subs	r3, r3, r5
 8001abe:	d417      	bmi.n	8001af0 <_malloc_r+0x8c>
 8001ac0:	2b0b      	cmp	r3, #11
 8001ac2:	d903      	bls.n	8001acc <_malloc_r+0x68>
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	441c      	add	r4, r3
 8001ac8:	6025      	str	r5, [r4, #0]
 8001aca:	e004      	b.n	8001ad6 <_malloc_r+0x72>
 8001acc:	6863      	ldr	r3, [r4, #4]
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	bf0c      	ite	eq
 8001ad2:	600b      	streq	r3, [r1, #0]
 8001ad4:	6053      	strne	r3, [r2, #4]
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f000 f834 	bl	8001b44 <__malloc_unlock>
 8001adc:	f104 000b 	add.w	r0, r4, #11
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	f020 0007 	bic.w	r0, r0, #7
 8001ae6:	1ac2      	subs	r2, r0, r3
 8001ae8:	d0cc      	beq.n	8001a84 <_malloc_r+0x20>
 8001aea:	1a1b      	subs	r3, r3, r0
 8001aec:	50a3      	str	r3, [r4, r2]
 8001aee:	e7c9      	b.n	8001a84 <_malloc_r+0x20>
 8001af0:	4622      	mov	r2, r4
 8001af2:	6864      	ldr	r4, [r4, #4]
 8001af4:	e7cc      	b.n	8001a90 <_malloc_r+0x2c>
 8001af6:	1cc4      	adds	r4, r0, #3
 8001af8:	f024 0403 	bic.w	r4, r4, #3
 8001afc:	42a0      	cmp	r0, r4
 8001afe:	d0e3      	beq.n	8001ac8 <_malloc_r+0x64>
 8001b00:	1a21      	subs	r1, r4, r0
 8001b02:	4630      	mov	r0, r6
 8001b04:	f000 f808 	bl	8001b18 <_sbrk_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d1dd      	bne.n	8001ac8 <_malloc_r+0x64>
 8001b0c:	e7cf      	b.n	8001aae <_malloc_r+0x4a>
 8001b0e:	bf00      	nop
 8001b10:	20000098 	.word	0x20000098
 8001b14:	2000009c 	.word	0x2000009c

08001b18 <_sbrk_r>:
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4d06      	ldr	r5, [pc, #24]	; (8001b34 <_sbrk_r+0x1c>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	602b      	str	r3, [r5, #0]
 8001b24:	f7ff fefe 	bl	8001924 <_sbrk>
 8001b28:	1c43      	adds	r3, r0, #1
 8001b2a:	d102      	bne.n	8001b32 <_sbrk_r+0x1a>
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	b103      	cbz	r3, 8001b32 <_sbrk_r+0x1a>
 8001b30:	6023      	str	r3, [r4, #0]
 8001b32:	bd38      	pop	{r3, r4, r5, pc}
 8001b34:	200000e8 	.word	0x200000e8

08001b38 <__malloc_lock>:
 8001b38:	4801      	ldr	r0, [pc, #4]	; (8001b40 <__malloc_lock+0x8>)
 8001b3a:	f000 b809 	b.w	8001b50 <__retarget_lock_acquire_recursive>
 8001b3e:	bf00      	nop
 8001b40:	200000f0 	.word	0x200000f0

08001b44 <__malloc_unlock>:
 8001b44:	4801      	ldr	r0, [pc, #4]	; (8001b4c <__malloc_unlock+0x8>)
 8001b46:	f000 b804 	b.w	8001b52 <__retarget_lock_release_recursive>
 8001b4a:	bf00      	nop
 8001b4c:	200000f0 	.word	0x200000f0

08001b50 <__retarget_lock_acquire_recursive>:
 8001b50:	4770      	bx	lr

08001b52 <__retarget_lock_release_recursive>:
 8001b52:	4770      	bx	lr

08001b54 <_init>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	bf00      	nop
 8001b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b5a:	bc08      	pop	{r3}
 8001b5c:	469e      	mov	lr, r3
 8001b5e:	4770      	bx	lr

08001b60 <_fini>:
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	bf00      	nop
 8001b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b66:	bc08      	pop	{r3}
 8001b68:	469e      	mov	lr, r3
 8001b6a:	4770      	bx	lr
