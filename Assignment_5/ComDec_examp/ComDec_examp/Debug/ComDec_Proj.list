
ComDec_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006898  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d7c  08006d7c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d84  08006d84  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a38  200000a4  08006e30  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004adc  08006e30  00024adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bed  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003298  00000000  00000000  00039cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003e368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a74  00000000  00000000  0003f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149bd  00000000  00000000  000450cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5a78  00000000  00000000  00059a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f501  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000558c  00000000  00000000  0012f554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a10 	.word	0x08006a10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08006a10 	.word	0x08006a10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <decode_binary>:
|
===========================================================================
*/

static void decode_binary(dec_input_struc *input_ptr)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  void(*context_handler)(dec_input_struc *input_ptr);
  unsigned char *valid_data_table_ptr, *bit_table_ptr;
  void(**vector_table_ptr)(dec_input_struc *input_ptr);
  unsigned char valid_data_index = 0,
 80004e0:	2300      	movs	r3, #0
 80004e2:	77fb      	strb	r3, [r7, #31]
    vector_table_index = 0,
 80004e4:	2300      	movs	r3, #0
 80004e6:	77bb      	strb	r3, [r7, #30]
    bit_table_index = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	777b      	strb	r3, [r7, #29]
  unsigned char bit_test_pattern;

  valid_data_table_ptr = input_ptr->valid_data_table_ptr;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	61bb      	str	r3, [r7, #24]
  vector_table_ptr = input_ptr->vector_table_ptr;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	617b      	str	r3, [r7, #20]
  bit_table_ptr = input_ptr->bit_table_ptr;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	613b      	str	r3, [r7, #16]
  while (TRUE)
  {
    /*firstly calculate the byte of interest in the bit table and then
    determine the test bit pattern for the required bit in the bit table
    */
    bit_table_index = valid_data_index / 8;
 80004fe:	7ffb      	ldrb	r3, [r7, #31]
 8000500:	08db      	lsrs	r3, r3, #3
 8000502:	777b      	strb	r3, [r7, #29]
    bit_test_pattern = 0x01 << (valid_data_index % 8);
 8000504:	7ffb      	ldrb	r3, [r7, #31]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	2201      	movs	r2, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	73fb      	strb	r3, [r7, #15]

    /*now test the contents of the bit table */
    if (bit_table_ptr[bit_table_index] &bit_test_pattern)
 8000512:	7f7b      	ldrb	r3, [r7, #29]
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4413      	add	r3, r2
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	4013      	ands	r3, r2
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d048      	beq.n	80005b6 <decode_binary+0xde>
    {
      /*possibility of a range or end of table.  Test the next bit
      to find if it is 1 or 0
      */
      bit_table_index = (valid_data_index + 1) / 8;
 8000524:	7ffb      	ldrb	r3, [r7, #31]
 8000526:	3301      	adds	r3, #1
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <decode_binary+0x56>
 800052c:	3307      	adds	r3, #7
 800052e:	10db      	asrs	r3, r3, #3
 8000530:	777b      	strb	r3, [r7, #29]
      bit_test_pattern = 0x01 << ((valid_data_index + 1) % 8);
 8000532:	7ffb      	ldrb	r3, [r7, #31]
 8000534:	3301      	adds	r3, #1
 8000536:	425a      	negs	r2, r3
 8000538:	f003 0307 	and.w	r3, r3, #7
 800053c:	f002 0207 	and.w	r2, r2, #7
 8000540:	bf58      	it	pl
 8000542:	4253      	negpl	r3, r2
 8000544:	2201      	movs	r2, #1
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	73fb      	strb	r3, [r7, #15]

      if (bit_table_ptr[bit_table_index] &bit_test_pattern)
 800054c:	7f7b      	ldrb	r3, [r7, #29]
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	4413      	add	r3, r2
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	4013      	ands	r3, r2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d009      	beq.n	8000572 <decode_binary+0x9a>
      {
        /*have hit the end of the table - the vector table
        index should be pointing to the default handler
        */
        context_handler = vector_table_ptr[vector_table_index];
 800055e:	7fbb      	ldrb	r3, [r7, #30]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	4413      	add	r3, r2
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60bb      	str	r3, [r7, #8]
        (*context_handler)(input_ptr);
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	4798      	blx	r3
        return;
 8000570:	e03a      	b.n	80005e8 <decode_binary+0x110>
      else
      {
        /*have a valid command range - check whether data in
        the range */

        if ((input_ptr->data_byte >= valid_data_table_ptr[
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	785a      	ldrb	r2, [r3, #1]
 8000576:	7ffb      	ldrb	r3, [r7, #31]
 8000578:	69b9      	ldr	r1, [r7, #24]
 800057a:	440b      	add	r3, r1
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d312      	bcc.n	80005a8 <decode_binary+0xd0>
            valid_data_index]) &&
          (input_ptr->data_byte <= valid_data_table_ptr[
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	785a      	ldrb	r2, [r3, #1]
 8000586:	7ffb      	ldrb	r3, [r7, #31]
 8000588:	3301      	adds	r3, #1
 800058a:	69b9      	ldr	r1, [r7, #24]
 800058c:	440b      	add	r3, r1
 800058e:	781b      	ldrb	r3, [r3, #0]
            valid_data_index]) &&
 8000590:	429a      	cmp	r2, r3
 8000592:	d809      	bhi.n	80005a8 <decode_binary+0xd0>
            valid_data_index + 1]))
        {
          /*data within range */
          context_handler = vector_table_ptr[vector_table_index];
 8000594:	7fbb      	ldrb	r3, [r7, #30]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	697a      	ldr	r2, [r7, #20]
 800059a:	4413      	add	r3, r2
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	60bb      	str	r3, [r7, #8]
          (*context_handler)(input_ptr);
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	4798      	blx	r3
          return;
 80005a6:	e01f      	b.n	80005e8 <decode_binary+0x110>
        } /*if */
        else
        {
          /*data not within range so update the table
          indexes */
          valid_data_index += 2;
 80005a8:	7ffb      	ldrb	r3, [r7, #31]
 80005aa:	3302      	adds	r3, #2
 80005ac:	77fb      	strb	r3, [r7, #31]
          vector_table_index++;
 80005ae:	7fbb      	ldrb	r3, [r7, #30]
 80005b0:	3301      	adds	r3, #1
 80005b2:	77bb      	strb	r3, [r7, #30]
 80005b4:	e7a3      	b.n	80004fe <decode_binary+0x26>
    else
    {
      /*bit in bit_table a zero so simply compare data with the
      currently pointed to location in the valid_data_table
      */
      if (input_ptr->data_byte ==
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	785a      	ldrb	r2, [r3, #1]
        valid_data_table_ptr[valid_data_index])
 80005ba:	7ffb      	ldrb	r3, [r7, #31]
 80005bc:	69b9      	ldr	r1, [r7, #24]
 80005be:	440b      	add	r3, r1
 80005c0:	781b      	ldrb	r3, [r3, #0]
      if (input_ptr->data_byte ==
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d109      	bne.n	80005da <decode_binary+0x102>
      {
        context_handler = vector_table_ptr[vector_table_index];
 80005c6:	7fbb      	ldrb	r3, [r7, #30]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	4413      	add	r3, r2
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60bb      	str	r3, [r7, #8]
        (*context_handler)(input_ptr);
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	4798      	blx	r3
        return;
 80005d8:	e006      	b.n	80005e8 <decode_binary+0x110>
      else
      {
        /*data not in valid_data_table so increment the table
        indexes
        */
        valid_data_index++;
 80005da:	7ffb      	ldrb	r3, [r7, #31]
 80005dc:	3301      	adds	r3, #1
 80005de:	77fb      	strb	r3, [r7, #31]
        vector_table_index++;
 80005e0:	7fbb      	ldrb	r3, [r7, #30]
 80005e2:	3301      	adds	r3, #1
 80005e4:	77bb      	strb	r3, [r7, #30]
    bit_table_index = valid_data_index / 8;
 80005e6:	e78a      	b.n	80004fe <decode_binary+0x26>
      } /*else */
    } /*else */
  } /*while */
} /*end of decode_binary */
 80005e8:	3720      	adds	r7, #32
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <decode_ascii>:
|
=============================================================================
*/

static void decode_ascii(dec_input_struc *input_ptr)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]

  void(*command_handler)(dec_input_struc*);
  unsigned char *valid_data_table_ptr;
  void(**vector_table_ptr)(dec_input_struc*);
  unsigned char valid_data_index = 0, vector_table_index = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	75fb      	strb	r3, [r7, #23]
 80005fa:	2300      	movs	r3, #0
 80005fc:	75bb      	strb	r3, [r7, #22]

  valid_data_table_ptr = input_ptr->valid_data_table_ptr;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	613b      	str	r3, [r7, #16]
  vector_table_ptr = input_ptr->vector_table_ptr;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	60fb      	str	r3, [r7, #12]

  while (valid_data_table_ptr[valid_data_index] != 0xff)
 800060a:	e043      	b.n	8000694 <decode_ascii+0xa6>
  {
    if (valid_data_table_ptr[valid_data_index] &0x80)
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b25b      	sxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	da24      	bge.n	8000664 <decode_ascii+0x76>
    {
      /*high bit is set so must be the beginning of a valid data
      range
      */
      if ((input_ptr->data_byte >= (valid_data_table_ptr[
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	4619      	mov	r1, r3
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
          valid_data_index] &0x7f)) &&
 8000628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      if ((input_ptr->data_byte >= (valid_data_table_ptr[
 800062c:	4299      	cmp	r1, r3
 800062e:	db12      	blt.n	8000656 <decode_ascii+0x68>
        (input_ptr->data_byte<=
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	785a      	ldrb	r2, [r3, #1]
          valid_data_table_ptr[valid_data_index + 1]))
 8000634:	7dfb      	ldrb	r3, [r7, #23]
 8000636:	3301      	adds	r3, #1
 8000638:	6939      	ldr	r1, [r7, #16]
 800063a:	440b      	add	r3, r1
 800063c:	781b      	ldrb	r3, [r3, #0]
          valid_data_index] &0x7f)) &&
 800063e:	429a      	cmp	r2, r3
 8000640:	d809      	bhi.n	8000656 <decode_ascii+0x68>
      {
        /*input belongs to the valid command range so vector
        to the handling routine
        */
        command_handler = vector_table_ptr[vector_table_index];
 8000642:	7dbb      	ldrb	r3, [r7, #22]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60bb      	str	r3, [r7, #8]
        (*command_handler)(input_ptr);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	4798      	blx	r3
        return;
 8000654:	e02d      	b.n	80006b2 <decode_ascii+0xc4>
      else
      {
        /*not in valid command range so increment the table
        indexes appropriately
        */
        valid_data_index += 2;
 8000656:	7dfb      	ldrb	r3, [r7, #23]
 8000658:	3302      	adds	r3, #2
 800065a:	75fb      	strb	r3, [r7, #23]
        vector_table_index++;
 800065c:	7dbb      	ldrb	r3, [r7, #22]
 800065e:	3301      	adds	r3, #1
 8000660:	75bb      	strb	r3, [r7, #22]
 8000662:	e017      	b.n	8000694 <decode_ascii+0xa6>
      } /*else */
    } /*if */
    else
    {
      /*does not belong to a command range so process normally */
      if (input_ptr->data_byte ==
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	785a      	ldrb	r2, [r3, #1]
        valid_data_table_ptr[valid_data_index])
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	6939      	ldr	r1, [r7, #16]
 800066c:	440b      	add	r3, r1
 800066e:	781b      	ldrb	r3, [r3, #0]
      if (input_ptr->data_byte ==
 8000670:	429a      	cmp	r2, r3
 8000672:	d109      	bne.n	8000688 <decode_ascii+0x9a>
      {
        command_handler = vector_table_ptr[vector_table_index];
 8000674:	7dbb      	ldrb	r3, [r7, #22]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	60bb      	str	r3, [r7, #8]
        (*command_handler)(input_ptr);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	4798      	blx	r3
        return;
 8000686:	e014      	b.n	80006b2 <decode_ascii+0xc4>
      else
      {
        /*not equal to the currently indexed valid command so
        increment the table pointers
        */
        valid_data_index++;
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	3301      	adds	r3, #1
 800068c:	75fb      	strb	r3, [r7, #23]
        vector_table_index++;
 800068e:	7dbb      	ldrb	r3, [r7, #22]
 8000690:	3301      	adds	r3, #1
 8000692:	75bb      	strb	r3, [r7, #22]
  while (valid_data_table_ptr[valid_data_index] != 0xff)
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2bff      	cmp	r3, #255	; 0xff
 800069e:	d1b5      	bne.n	800060c <decode_ascii+0x1e>
  } /*while */

  /*only enter this section if the end of the table has been reached - have
  to vector to the currently pointed to procedure
  */
  command_handler = vector_table_ptr[vector_table_index];
 80006a0:	7dbb      	ldrb	r3, [r7, #22]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	60bb      	str	r3, [r7, #8]
  (*command_handler)(input_ptr);
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	4798      	blx	r3
} /*end of decode_ascii */
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <char_decode>:
|
=========================================================================
*/

void char_decode(dec_input_struc *input_ptr)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  /*firstly determine the mode - 0=> ascii, 1=> binary and then branch to
  the appropriate handling routine.
  */
  switch (input_ptr->char_dec_mode)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <char_decode+0x16>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d004      	beq.n	80006d6 <char_decode+0x1e>
      break;
    case BINARY_DECODING:
      decode_binary(input_ptr);
      break;
  } /*switch */
} /*end of char_decode */
 80006cc:	e007      	b.n	80006de <char_decode+0x26>
      decode_ascii(input_ptr);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff8d 	bl	80005ee <decode_ascii>
      break;
 80006d4:	e003      	b.n	80006de <char_decode+0x26>
      decode_binary(input_ptr);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff fefe 	bl	80004d8 <decode_binary>
      break;
 80006dc:	bf00      	nop
} /*end of char_decode */
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <addr_decode>:
|
==========================================================================
*/

static dec_input_struc* addr_decode(addr_struc *addr_struc_ptr)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]

  /*search through the address table until the task queu address is found or
  the terminating address is located in the table
  */

  for (addr_tab_index = 0; addr_struc_ptr->valid_addr_tab_ptr[
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e013      	b.n	800071c <addr_decode+0x36>
      addr_tab_index] != NULL_PTR; addr_tab_index++)
  {
    if (addr_struc_ptr->valid_addr_tab_ptr[addr_tab_index] ==
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	681a      	ldr	r2, [r3, #0]
                                            addr_struc_ptr->pvdRtnAddrQueueId)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
    if (addr_struc_ptr->valid_addr_tab_ptr[addr_tab_index] ==
 8000704:	429a      	cmp	r2, r3
 8000706:	d106      	bne.n	8000716 <addr_decode+0x30>
    {
      return (addr_struc_ptr->addr_vector_ptr[addr_tab_index]);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68da      	ldr	r2, [r3, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	e010      	b.n	8000738 <addr_decode+0x52>
      addr_tab_index] != NULL_PTR; addr_tab_index++)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
  for (addr_tab_index = 0; addr_struc_ptr->valid_addr_tab_ptr[
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1e3      	bne.n	80006f4 <addr_decode+0xe>
    }
  }

  /*if control reaches here then the end of the table has been reached */
  return (addr_struc_ptr->addr_vector_ptr[addr_tab_index]);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	681b      	ldr	r3, [r3, #0]
} /*end of addr_decode */
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <decode_mbx_mess>:
============================================================================
*/


osStatus_t decode_mbx_mess(addr_struc *addr_struc_ptr, unsigned long timeout)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  uint16_t mess_index, left_to_decode;
  dec_input_struc *input_ptr;
  tstMessEnvelope stMessEnvelope;

  /*the first thing to do is to get the message from the mail box */
  return_code = osMessageQueueGet(addr_struc_ptr->pvdTaskQueueId,
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	f107 0108 	add.w	r1, r7, #8
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	f002 fd6d 	bl	8003238 <osMessageQueueGet>
 800075e:	6278      	str	r0, [r7, #36]	; 0x24
                                            &stMessEnvelope, 0, timeout);
  /*now check to see if a message has been received */
  if (return_code != osOK)
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <decode_mbx_mess+0x26>
  {
    return return_code;
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	e02c      	b.n	80007c4 <decode_mbx_mess+0x80>
   */

  /*return code contains the address of the task from which the message
  has been sent so put it into the addr_struc
  */
  addr_struc_ptr->pvdRtnAddrQueueId = stMessEnvelope.pvdSendTaskQueueId;
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	605a      	str	r2, [r3, #4]
   * sending task. If the address is not a legal one the routine still returns
   * with a pointer to a dec_input_struc. However it is a special one which
   * will handle the error and effectively flush the message from the illegal
   * sending task.
  */
  input_ptr = addr_decode(addr_struc_ptr);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ffb8 	bl	80006e6 <addr_decode>
 8000776:	61f8      	str	r0, [r7, #28]

  /*
   * now copy the info_struc_ptr from the addr_struc to the dec_input_struc.
   */
  input_ptr->info_struc_ptr = addr_struc_ptr->info_struc_ptr;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	691a      	ldr	r2, [r3, #16]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	611a      	str	r2, [r3, #16]

  /*
   * now enter the character decode loop an carry out the decoding of the
   * message received.
  */
  mess_index = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
  left_to_decode = stMessEnvelope.suinMessSize;
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	843b      	strh	r3, [r7, #32]
  while (left_to_decode--)
 8000788:	e00b      	b.n	80007a2 <decode_mbx_mess+0x5e>
  {
    input_ptr->data_byte = stMessEnvelope.puchMess[mess_index];
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800078e:	4413      	add	r3, r2
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	705a      	strb	r2, [r3, #1]
    char_decode(input_ptr);
 8000796:	69f8      	ldr	r0, [r7, #28]
 8000798:	f7ff ff8e 	bl	80006b8 <char_decode>
    mess_index++;
 800079c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800079e:	3301      	adds	r3, #1
 80007a0:	847b      	strh	r3, [r7, #34]	; 0x22
  while (left_to_decode--)
 80007a2:	8c3b      	ldrh	r3, [r7, #32]
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	843a      	strh	r2, [r7, #32]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1ee      	bne.n	800078a <decode_mbx_mess+0x46>
  } /*while */

  if (stMessEnvelope.uchDynamicMemFlag == TRUE)
 80007ac:	7e3b      	ldrb	r3, [r7, #24]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d107      	bne.n	80007c2 <decode_mbx_mess+0x7e>
  {
    /* Deallocate the memory for the message */
    return_code =  osMemoryPoolFree(addr_struc_ptr->pvdMemoryPoolId, (void*)(stMessEnvelope.puchMess));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4611      	mov	r1, r2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fee6 	bl	800358c <osMemoryPoolFree>
 80007c0:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return return_code;
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /*end of decode_mbx_mess */
 80007c4:	4618      	mov	r0, r3
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09a      	sub	sp, #104	; 0x68
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t a0chSignOnMess[] = "\r\n\r\nCommand Decoder Demo Program\r\n\r\nInput memory location to view from 20000000 to 20020000 (in hex): ";
 80007d2:	4a21      	ldr	r2, [pc, #132]	; (8000858 <main+0x8c>)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4611      	mov	r1, r2
 80007d8:	2267      	movs	r2, #103	; 0x67
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 f832 	bl	8006844 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fd5a 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f852 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f8e4 	bl	80009b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 f8b8 	bl	8000960 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f0:	f002 fb58 	bl	8002ea4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CharGenThreadQ */
  CharGenThreadQHandle = osMessageQueueNew (16, sizeof(tstMessEnvelope), &CharGenThreadQ_attributes);
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <main+0x90>)
 80007f6:	2114      	movs	r1, #20
 80007f8:	2010      	movs	r0, #16
 80007fa:	f002 fc4a 	bl	8003092 <osMessageQueueNew>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <main+0x94>)
 8000802:	6013      	str	r3, [r2, #0]

  /* creation of DecodingThreadQ */
  DecodingThreadQHandle = osMessageQueueNew (16, sizeof(tstMessEnvelope), &DecodingThreadQ_attributes);
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <main+0x98>)
 8000806:	2114      	movs	r1, #20
 8000808:	2010      	movs	r0, #16
 800080a:	f002 fc42 	bl	8003092 <osMessageQueueNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <main+0x9c>)
 8000812:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DecodingThread */
  DecodingThreadHandle = osThreadNew(fvdDecodingThread, NULL, &DecodingThread_attributes);
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <main+0xa0>)
 8000816:	2100      	movs	r1, #0
 8000818:	4815      	ldr	r0, [pc, #84]	; (8000870 <main+0xa4>)
 800081a:	f002 fb8d 	bl	8002f38 <osThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <main+0xa8>)
 8000822:	6013      	str	r3, [r2, #0]

  /* creation of CharGenThread */
  CharGenThreadHandle = osThreadNew(fvdCharGenThread, NULL, &CharGenThread_attributes);
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <main+0xac>)
 8000826:	2100      	movs	r1, #0
 8000828:	4814      	ldr	r0, [pc, #80]	; (800087c <main+0xb0>)
 800082a:	f002 fb85 	bl	8002f38 <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <main+0xb4>)
 8000832:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /*
   * Allocate a pool of Dynamic memory from the Heap
   */
  pvdMyDynamicMemory = osMemoryPoolNew(1000, 1, NULL);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083c:	f002 fd5a 	bl	80032f4 <osMemoryPoolNew>
 8000840:	4603      	mov	r3, r0
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <main+0xb8>)
 8000844:	6013      	str	r3, [r2, #0]

  HAL_UART_Transmit(&huart2, a0chSignOnMess, sizeof(a0chSignOnMess), 20);
 8000846:	4639      	mov	r1, r7
 8000848:	2314      	movs	r3, #20
 800084a:	2267      	movs	r2, #103	; 0x67
 800084c:	480e      	ldr	r0, [pc, #56]	; (8000888 <main+0xbc>)
 800084e:	f001 ff9e 	bl	800278e <HAL_UART_Transmit>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000852:	f002 fb4b 	bl	8002eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000856:	e7fe      	b.n	8000856 <main+0x8a>
 8000858:	08006a88 	.word	0x08006a88
 800085c:	08006c0c 	.word	0x08006c0c
 8000860:	200049fc 	.word	0x200049fc
 8000864:	08006c24 	.word	0x08006c24
 8000868:	20004a4c 	.word	0x20004a4c
 800086c:	08006bc4 	.word	0x08006bc4
 8000870:	08000f09 	.word	0x08000f09
 8000874:	200049f4 	.word	0x200049f4
 8000878:	08006be8 	.word	0x08006be8
 800087c:	08000fad 	.word	0x08000fad
 8000880:	200049f0 	.word	0x200049f0
 8000884:	20004a04 	.word	0x20004a04
 8000888:	20004a08 	.word	0x20004a08

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	; 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f005 ffe0 	bl	8006860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <SystemClock_Config+0xcc>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a27      	ldr	r2, [pc, #156]	; (8000958 <SystemClock_Config+0xcc>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <SystemClock_Config+0xd0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <SystemClock_Config+0xd0>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008fc:	2308      	movs	r3, #8
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000900:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000904:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800090a:	2307      	movs	r3, #7
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	4618      	mov	r0, r3
 8000914:	f000 ff9a 	bl	800184c <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800091e:	f000 fb8b 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2302      	movs	r3, #2
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2105      	movs	r1, #5
 8000940:	4618      	mov	r0, r3
 8000942:	f001 f9fb 	bl	8001d3c <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800094c:	f000 fb74 	bl	8001038 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3750      	adds	r7, #80	; 0x50
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART2_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000998:	f001 feac 	bl	80026f4 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 fb49 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20004a08 	.word	0x20004a08
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4ba1      	ldr	r3, [pc, #644]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4aa0      	ldr	r2, [pc, #640]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b9e      	ldr	r3, [pc, #632]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b9a      	ldr	r3, [pc, #616]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a99      	ldr	r2, [pc, #612]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b97      	ldr	r3, [pc, #604]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b93      	ldr	r3, [pc, #588]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a92      	ldr	r2, [pc, #584]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b90      	ldr	r3, [pc, #576]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b8c      	ldr	r3, [pc, #560]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a8b      	ldr	r2, [pc, #556]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b89      	ldr	r3, [pc, #548]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b85      	ldr	r3, [pc, #532]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a84      	ldr	r2, [pc, #528]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b82      	ldr	r3, [pc, #520]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b7e      	ldr	r3, [pc, #504]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a7d      	ldr	r2, [pc, #500]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <MX_GPIO_Init+0x2a0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2108      	movs	r1, #8
 8000a76:	4878      	ldr	r0, [pc, #480]	; (8000c58 <MX_GPIO_Init+0x2a4>)
 8000a78:	f000 fece 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4876      	ldr	r0, [pc, #472]	; (8000c5c <MX_GPIO_Init+0x2a8>)
 8000a82:	f000 fec9 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a86:	2200      	movs	r2, #0
 8000a88:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a8c:	4874      	ldr	r0, [pc, #464]	; (8000c60 <MX_GPIO_Init+0x2ac>)
 8000a8e:	f000 fec3 	bl	8001818 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a92:	2308      	movs	r3, #8
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	486b      	ldr	r0, [pc, #428]	; (8000c58 <MX_GPIO_Init+0x2a4>)
 8000aaa:	f000 fd19 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4865      	ldr	r0, [pc, #404]	; (8000c5c <MX_GPIO_Init+0x2a8>)
 8000ac6:	f000 fd0b 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aca:	2308      	movs	r3, #8
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ada:	2305      	movs	r3, #5
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	485d      	ldr	r0, [pc, #372]	; (8000c5c <MX_GPIO_Init+0x2a8>)
 8000ae6:	f000 fcfb 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aee:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <MX_GPIO_Init+0x2b0>)
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	485a      	ldr	r0, [pc, #360]	; (8000c68 <MX_GPIO_Init+0x2b4>)
 8000afe:	f000 fcef 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b02:	2310      	movs	r3, #16
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b12:	2306      	movs	r3, #6
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4852      	ldr	r0, [pc, #328]	; (8000c68 <MX_GPIO_Init+0x2b4>)
 8000b1e:	f000 fcdf 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b22:	23e0      	movs	r3, #224	; 0xe0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b32:	2305      	movs	r3, #5
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	484a      	ldr	r0, [pc, #296]	; (8000c68 <MX_GPIO_Init+0x2b4>)
 8000b3e:	f000 fccf 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b42:	2304      	movs	r3, #4
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4845      	ldr	r0, [pc, #276]	; (8000c6c <MX_GPIO_Init+0x2b8>)
 8000b56:	f000 fcc3 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	483d      	ldr	r0, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x2b8>)
 8000b78:	f000 fcb2 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b7c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b80:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4832      	ldr	r0, [pc, #200]	; (8000c60 <MX_GPIO_Init+0x2ac>)
 8000b96:	f000 fca3 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b9a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bac:	2306      	movs	r3, #6
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4829      	ldr	r0, [pc, #164]	; (8000c5c <MX_GPIO_Init+0x2a8>)
 8000bb8:	f000 fc92 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4825      	ldr	r0, [pc, #148]	; (8000c68 <MX_GPIO_Init+0x2b4>)
 8000bd2:	f000 fc85 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000bd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000be8:	230a      	movs	r3, #10
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481d      	ldr	r0, [pc, #116]	; (8000c68 <MX_GPIO_Init+0x2b4>)
 8000bf4:	f000 fc74 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <MX_GPIO_Init+0x2ac>)
 8000c0c:	f000 fc68 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c10:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <MX_GPIO_Init+0x2b8>)
 8000c2e:	f000 fc57 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_GPIO_Init+0x2b0>)
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_GPIO_Init+0x2a4>)
 8000c46:	f000 fc4b 	bl	80014e0 <HAL_GPIO_Init>

}
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	10120000 	.word	0x10120000
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400

08000c70 <fvdAccum_AsciiNum>:
 * Param: dec_input_struc *
 *
 * Return: void
 */
void fvdAccum_AsciiNum(dec_input_struc *pstDecoderStruc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint8_t uchInputChar = pstDecoderStruc->data_byte;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	72fb      	strb	r3, [r7, #11]
  stCharInfo_Type * pstCharInfo;

  /* Check to see if the array length is going to be exceeded
   * if we put the new character into the array.
   */
  pstCharInfo = (stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	60fb      	str	r3, [r7, #12]

  if ( pstCharInfo->uchCharCnt < pstCharInfo->uchArraySize - 1)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	7adb      	ldrb	r3, [r3, #11]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	429a      	cmp	r2, r3
 8000c92:	da11      	bge.n	8000cb8 <fvdAccum_AsciiNum+0x48>
  {
    pstCharInfo->a0uchHexNum[pstCharInfo->uchCharCnt++] = uchInputChar;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	b2d1      	uxtb	r1, r2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	7011      	strb	r1, [r2, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	7afa      	ldrb	r2, [r7, #11]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	440b      	add	r3, r1
 8000ca8:	705a      	strb	r2, [r3, #1]
    // Echo to the terminal
    HAL_UART_Transmit(&huart2, &uchInputChar, 1, 10);
 8000caa:	f107 010b 	add.w	r1, r7, #11
 8000cae:	230a      	movs	r3, #10
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <fvdAccum_AsciiNum+0x50>)
 8000cb4:	f001 fd6b 	bl	800278e <HAL_UART_Transmit>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20004a08 	.word	0x20004a08

08000cc4 <fvdCR_received>:
 *
 * Returns: void
 *
 */
void fvdCR_received(dec_input_struc *pstDecoderStruc)
{
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b0ac      	sub	sp, #176	; 0xb0
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t *puinMemLoc;

  char a20chReturned_ascii[20];

  // Messages
  char a0chMess1[] =
 8000ccc:	4b61      	ldr	r3, [pc, #388]	; (8000e54 <fvdCR_received+0x190>)
 8000cce:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000cd2:	461d      	mov	r5, r3
 8000cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	8023      	strh	r3, [r4, #0]
      {
          "Contents of memory location are: "
      };
  char a0chMess2[] =
 8000ce0:	4b5d      	ldr	r3, [pc, #372]	; (8000e58 <fvdCR_received+0x194>)
 8000ce2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	7023      	strb	r3, [r4, #0]
      {
          "No characters input. Try again\r\n"
      };

  char a0chMess3[] =
 8000cf4:	4b59      	ldr	r3, [pc, #356]	; (8000e5c <fvdCR_received+0x198>)
 8000cf6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	8023      	strh	r3, [r4, #0]
      {
          "Illegal memory range. Try again\r\n"
      };

  char a0chMess4[] =
 8000d08:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <fvdCR_received+0x19c>)
 8000d0a:	f107 0408 	add.w	r4, r7, #8
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d18:	c407      	stmia	r4!, {r0, r1, r2}
 8000d1a:	8023      	strh	r3, [r4, #0]
      {
          "Input a new memory address:\r\n"
      };

  // Write CRLF to the terminal
  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	2202      	movs	r2, #2
 8000d20:	4950      	ldr	r1, [pc, #320]	; (8000e64 <fvdCR_received+0x1a0>)
 8000d22:	4851      	ldr	r0, [pc, #324]	; (8000e68 <fvdCR_received+0x1a4>)
 8000d24:	f001 fd33 	bl	800278e <HAL_UART_Transmit>

  puchCharCnt = &(((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (*puchCharCnt != 0)
 8000d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d076      	beq.n	8000e28 <fvdCR_received+0x164>
  {
    // There are ascii characters in the buffer.
    // Convert the buffer contents to a string
    ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->a0uchHexNum[*puchCharCnt] = '\0';
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	705a      	strb	r2, [r3, #1]

    // Now convert ascii hex number to an binary integer
    puinMemLoc = (uint32_t*)strtol((char *)((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->a0uchHexNum,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	2210      	movs	r2, #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 fe0f 	bl	8006978 <strtol>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                                                   NULL, 16);
    ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uintAddress = (uint32_t)puinMemLoc;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d68:	60da      	str	r2, [r3, #12]

    if (((uint32_t)puinMemLoc >= 0x20000000) && ((uint32_t)puinMemLoc < 0x20020000))
 8000d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d72:	d33e      	bcc.n	8000df2 <fvdCR_received+0x12e>
 8000d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d78:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <fvdCR_received+0x1a8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d839      	bhi.n	8000df2 <fvdCR_received+0x12e>
       * It corrupts the software as it uses the malloc routine somewhere
       * under the hood. This is not consistent with FreeRTOS.
       */
      // sprintf(a20chReturned_ascii, "%lx", (uint32_t)puinMemLoc);

      itoa((uint32_t)*puinMemLoc, a20chReturned_ascii, 16);
 8000d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d8a:	2210      	movs	r2, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f005 fd57 	bl	8006840 <itoa>
      strcat(a20chReturned_ascii, "\r\n");
 8000d92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fa1a 	bl	80001d0 <strlen>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000da4:	4413      	add	r3, r2
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <fvdCR_received+0x1a0>)
 8000da8:	8811      	ldrh	r1, [r2, #0]
 8000daa:	7892      	ldrb	r2, [r2, #2]
 8000dac:	8019      	strh	r1, [r3, #0]
 8000dae:	709a      	strb	r2, [r3, #2]

      HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess1, strlen(a0chMess1), 10);
 8000db0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fa0b 	bl	80001d0 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <fvdCR_received+0x1a4>)
 8000dc6:	f001 fce2 	bl	800278e <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)a20chReturned_ascii, strlen(a20chReturned_ascii), 10);
 8000dca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff f9fe 	bl	80001d0 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000ddc:	230a      	movs	r3, #10
 8000dde:	4822      	ldr	r0, [pc, #136]	; (8000e68 <fvdCR_received+0x1a4>)
 8000de0:	f001 fcd5 	bl	800278e <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nInput a new memory location in hex: ",
 8000de4:	230a      	movs	r3, #10
 8000de6:	2226      	movs	r2, #38	; 0x26
 8000de8:	4921      	ldr	r1, [pc, #132]	; (8000e70 <fvdCR_received+0x1ac>)
 8000dea:	481f      	ldr	r0, [pc, #124]	; (8000e68 <fvdCR_received+0x1a4>)
 8000dec:	f001 fccf 	bl	800278e <HAL_UART_Transmit>
 8000df0:	e027      	b.n	8000e42 <fvdCR_received+0x17e>
                                    strlen("\r\nInput a new memory location in hex: "), 10);
    }
    else
    {
      HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess3, strlen(a0chMess3), 10);
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff f9ea 	bl	80001d0 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e04:	230a      	movs	r3, #10
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <fvdCR_received+0x1a4>)
 8000e08:	f001 fcc1 	bl	800278e <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess4, strlen(a0chMess4), 10);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9dd 	bl	80001d0 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f107 0108 	add.w	r1, r7, #8
 8000e1e:	230a      	movs	r3, #10
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <fvdCR_received+0x1a4>)
 8000e22:	f001 fcb4 	bl	800278e <HAL_UART_Transmit>
 8000e26:	e00c      	b.n	8000e42 <fvdCR_received+0x17e>
    }
  }
  else
  {
    // No valid characters have been input
    HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess2, strlen(a0chMess2), 10);
 8000e28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f9cf 	bl	80001d0 <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	480a      	ldr	r0, [pc, #40]	; (8000e68 <fvdCR_received+0x1a4>)
 8000e3e:	f001 fca6 	bl	800278e <HAL_UART_Transmit>
  }
  // HAL_UART_Transmit(&huart2, (uint8_t*)"Got to CR handler", strlen("Got to CR handler"), 10);
  *puchCharCnt = 0;
 8000e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	37b0      	adds	r7, #176	; 0xb0
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bdb0      	pop	{r4, r5, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	08006b1c 	.word	0x08006b1c
 8000e58:	08006b40 	.word	0x08006b40
 8000e5c:	08006b64 	.word	0x08006b64
 8000e60:	08006b88 	.word	0x08006b88
 8000e64:	08006af0 	.word	0x08006af0
 8000e68:	20004a08 	.word	0x20004a08
 8000e6c:	2001ffff 	.word	0x2001ffff
 8000e70:	08006af4 	.word	0x08006af4

08000e74 <fvdBS_received>:
 *
 * Simply deletes a character if there is a character to be deleted.
 *
 */
void fvdBS_received(dec_input_struc *pstDecoderStruc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint16_t uchCharCnt;

  // The user has request that the previous character be deleted.
  uchCharCnt = ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	81fb      	strh	r3, [r7, #14]

  if (uchCharCnt > 0)
 8000e84:	89fb      	ldrh	r3, [r7, #14]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <fvdBS_received+0x2e>
  {
    (((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt)--;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	3a01      	subs	r2, #1
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)"\b \b", 3, 10);
 8000e96:	230a      	movs	r3, #10
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4904      	ldr	r1, [pc, #16]	; (8000eac <fvdBS_received+0x38>)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <fvdBS_received+0x3c>)
 8000e9e:	f001 fc76 	bl	800278e <HAL_UART_Transmit>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	08006ba8 	.word	0x08006ba8
 8000eb0:	20004a08 	.word	0x20004a08

08000eb4 <fvdDEL_received>:
 *
 * Simply deletes a character if there is a character to be deleted.
 *
 */
void fvdDEL_received(dec_input_struc *pstDecoderStruc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint8_t uchCharCnt;

  // The user has request that the previous character be deleted.
  uchCharCnt = ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if (uchCharCnt > 0)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <fvdDEL_received+0x2e>
  {
    (((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt)--;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	3a01      	subs	r2, #1
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)"\b \b", 3, 10);
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	2203      	movs	r2, #3
 8000eda:	4904      	ldr	r1, [pc, #16]	; (8000eec <fvdDEL_received+0x38>)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <fvdDEL_received+0x3c>)
 8000ede:	f001 fc56 	bl	800278e <HAL_UART_Transmit>
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08006ba8 	.word	0x08006ba8
 8000ef0:	20004a08 	.word	0x20004a08

08000ef4 <fvdInvalid_Char>:
 * This function is entered if the user types and invalid character in a particular input table
 * Does not echo the character and returns to the same set of tables.
 *
 */
void fvdInvalid_Char(dec_input_struc *pstDecoderStruc)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  ;
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <fvdDecodingThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fvdDecodingThread */
void fvdDecodingThread(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b09a      	sub	sp, #104	; 0x68
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  // Allocate valid tasks table
  osMessageQueueId_t pvdValidAddr_DecodingThread[2];

  // Initialise valid tasks table.
  pvdValidAddr_DecodingThread[0] = CharGenThreadQHandle;    // CharGenThread Q handle
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <fvdDecodingThread+0x88>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	613b      	str	r3, [r7, #16]
  pvdValidAddr_DecodingThread[1] = NULL;                    // Termination NULL
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

  // Associated decode structures for the sending tasks
  dec_input_struc *pstSenderDecStruc[2] =
 8000f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	60fb      	str	r3, [r7, #12]

  /*
   * Initialise the dec_input_struc with initial decode tables
  */
  // Firstly the table for the valid sending task CharGenThread
  stDecodingTaskDecStruc.char_dec_mode = ASCII_DECODING;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  stDecodingTaskDecStruc.valid_data_table_ptr = a10uchVdt_DT0;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <fvdDecodingThread+0x8c>)
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  stDecodingTaskDecStruc.vector_table_ptr = a7pfvdVt_DT0;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <fvdDecodingThread+0x90>)
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  stDecodingTaskDecStruc.bit_table_ptr = NULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  stDecodingTaskDecStruc.info_struc_ptr = (void*)&stInputDataStore;
 8000f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // Now the initial the table if there is an error in the sending task
  stDecodingTaskAddrERROR.char_dec_mode = ASCII_DECODING;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	763b      	strb	r3, [r7, #24]
  stDecodingTaskAddrERROR.valid_data_table_ptr = a1uchVdt_DT0;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <fvdDecodingThread+0x94>)
 8000f44:	61fb      	str	r3, [r7, #28]
  stDecodingTaskAddrERROR.vector_table_ptr = a1pfvdVt_DT0;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <fvdDecodingThread+0x98>)
 8000f48:	623b      	str	r3, [r7, #32]
  stDecodingTaskAddrERROR.bit_table_ptr = NULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24

  /*
   * Initialise components of the valid sending task address structure
   */
  stDecTaskAddrStruc.pvdTaskQueueId = DecodingThreadQHandle;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <fvdDecodingThread+0x9c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	653b      	str	r3, [r7, #80]	; 0x50
  stDecTaskAddrStruc.valid_addr_tab_ptr = pvdValidAddr_DecodingThread;
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	65bb      	str	r3, [r7, #88]	; 0x58
  stDecTaskAddrStruc.addr_vector_ptr = pstSenderDecStruc;
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  stDecTaskAddrStruc.pvdMemoryPoolId = pvdMyDynamicMemory;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <fvdDecodingThread+0xa0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	667b      	str	r3, [r7, #100]	; 0x64
  stDecTaskAddrStruc.info_struc_ptr = (void*)&stInputDataStore;
 8000f66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f6a:	663b      	str	r3, [r7, #96]	; 0x60

  /*
   * Initialise the structure used to accumulate the user input characters
   */
  stInputDataStore.uchCharCnt = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  stInputDataStore.uchArraySize = INT_ARRAY_SIZE;
 8000f72:	2309      	movs	r3, #9
 8000f74:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 f86f 	bl	800305c <osDelay>
    // Now call the decoder with the relevant data structures
    decode_mbx_mess(&stDecTaskAddrStruc, osWaitForever);
 8000f7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fbdc 	bl	8000744 <decode_mbx_mess>
    osDelay(1);
 8000f8c:	e7f4      	b.n	8000f78 <fvdDecodingThread+0x70>
 8000f8e:	bf00      	nop
 8000f90:	200049fc 	.word	0x200049fc
 8000f94:	20000000 	.word	0x20000000
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000028 	.word	0x20000028
 8000fa0:	2000002c 	.word	0x2000002c
 8000fa4:	20004a4c 	.word	0x20004a4c
 8000fa8:	20004a04 	.word	0x20004a04

08000fac <fvdCharGenThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fvdCharGenThread */
void fvdCharGenThread(void *argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint8_t chCharData[2];

  /*
   * Now set up some static values in the envelope
   */
  stMyEnvelope.pvdRecipientQueueId = DecodingThreadQHandle;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <fvdCharGenThread+0x58>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  stMyEnvelope.pvdSendTaskQueueId = CharGenThreadQHandle;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <fvdCharGenThread+0x5c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
  stMyEnvelope.uchDynamicMemFlag = TRUE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	773b      	strb	r3, [r7, #28]
  stMyEnvelope.suinMessSize = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
    HAL_UART_Receive(&huart2, chCharData, 1, HAL_MAX_DELAY);
 8000fc8:	f107 0108 	add.w	r1, r7, #8
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <fvdCharGenThread+0x60>)
 8000fd4:	f001 fc6d 	bl	80028b2 <HAL_UART_Receive>
     * Have now received a character so send it to the decoding task.
     *
     * Firstly allocated a byte of memory for the message, assign
     * the received byte to it, place the pointer in the envelope.
     */
    stMyEnvelope.puchMess = (uint8_t*)osMemoryPoolAlloc(pvdMyDynamicMemory, osWaitForever);
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <fvdCharGenThread+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fa5d 	bl	80034a0 <osMemoryPoolAlloc>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	61bb      	str	r3, [r7, #24]

    // Now copy the received character into the newly allocated memory
    *(stMyEnvelope.puchMess) = chCharData[0];
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	7a3a      	ldrb	r2, [r7, #8]
 8000fee:	701a      	strb	r2, [r3, #0]

    osMessageQueuePut( stMyEnvelope.pvdRecipientQueueId, &stMyEnvelope, 0, osWaitForever);
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f107 010c 	add.w	r1, r7, #12
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f002 f8bc 	bl	8003178 <osMessageQueuePut>
    HAL_UART_Receive(&huart2, chCharData, 1, HAL_MAX_DELAY);
 8001000:	e7e2      	b.n	8000fc8 <fvdCharGenThread+0x1c>
 8001002:	bf00      	nop
 8001004:	20004a4c 	.word	0x20004a4c
 8001008:	200049fc 	.word	0x200049fc
 800100c:	20004a08 	.word	0x20004a08
 8001010:	20004a04 	.word	0x20004a04

08001014 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001026:	f000 f959 	bl	80012dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40001000 	.word	0x40001000

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_MspInit+0x54>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_MspInit+0x54>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x54>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_MspInit+0x54>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_MspInit+0x54>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_MspInit+0x54>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	210f      	movs	r1, #15
 8001086:	f06f 0001 	mvn.w	r0, #1
 800108a:	f000 f9ff 	bl	800148c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_UART_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12b      	bne.n	8001116 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f6:	230c      	movs	r3, #12
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0x8c>)
 8001112:	f000 f9e5 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	2036      	movs	r0, #54	; 0x36
 8001142:	f000 f9a3 	bl	800148c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001146:	2036      	movs	r0, #54	; 0x36
 8001148:	f000 f9bc 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_InitTick+0xa4>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <HAL_InitTick+0xa4>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_InitTick+0xa4>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001168:	f107 0210 	add.w	r2, r7, #16
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 ffde 	bl	8002134 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001178:	f000 ffb4 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 800117c:	4603      	mov	r3, r0
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_InitTick+0xa8>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0c9b      	lsrs	r3, r3, #18
 800118c:	3b01      	subs	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_InitTick+0xac>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_InitTick+0xb0>)
 8001194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_InitTick+0xac>)
 8001198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800119c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_InitTick+0xac>)
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_InitTick+0xac>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_InitTick+0xac>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <HAL_InitTick+0xac>)
 80011b2:	f000 fff1 	bl	8002198 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <HAL_InitTick+0xac>)
 80011be:	f001 f845 	bl	800224c <HAL_TIM_Base_Start_IT>
 80011c2:	4603      	mov	r3, r0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	20004a50 	.word	0x20004a50
 80011dc:	40001000 	.word	0x40001000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <TIM6_DAC_IRQHandler+0x10>)
 8001212:	f001 f88b 	bl	800232c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20004a50 	.word	0x20004a50

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800124c:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001260:	4c0b      	ldr	r4, [pc, #44]	; (8001290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd7 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f005 faa9 	bl	80067c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff faa9 	bl	80007cc <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001288:	08006d8c 	.word	0x08006d8c
  ldr r2, =_sbss
 800128c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001290:	20004adc 	.word	0x20004adc

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f8d8 	bl	8001476 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ff30 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff feba 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000038 	.word	0x20000038
 8001300:	20004a98 	.word	0x20004a98

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20004a98 	.word	0x20004a98

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff4c 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149e:	f7ff ff61 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f7ff ffb1 	bl	8001410 <NVIC_EncodePriority>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff80 	bl	80013bc <__NVIC_SetPriority>
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff54 	bl	8001380 <__NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e16b      	b.n	80017d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 815a 	bne.w	80017ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	2b02      	cmp	r3, #2
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80b4 	beq.w	80017ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_GPIO_Init+0x30c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a5f      	ldr	r2, [pc, #380]	; (80017ec <HAL_GPIO_Init+0x30c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <HAL_GPIO_Init+0x310>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_GPIO_Init+0x314>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02b      	beq.n	8001706 <HAL_GPIO_Init+0x226>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a51      	ldr	r2, [pc, #324]	; (80017f8 <HAL_GPIO_Init+0x318>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x222>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a50      	ldr	r2, [pc, #320]	; (80017fc <HAL_GPIO_Init+0x31c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x21e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4f      	ldr	r2, [pc, #316]	; (8001800 <HAL_GPIO_Init+0x320>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x21a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <HAL_GPIO_Init+0x324>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x216>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x328>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x212>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_GPIO_Init+0x32c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <HAL_GPIO_Init+0x330>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x20a>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e00e      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ea:	2308      	movs	r3, #8
 80016ec:	e00c      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ee:	2306      	movs	r3, #6
 80016f0:	e00a      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f2:	2305      	movs	r3, #5
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001706:	2300      	movs	r3, #0
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f002 0203 	and.w	r2, r2, #3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_GPIO_Init+0x310>)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_GPIO_Init+0x334>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <HAL_GPIO_Init+0x334>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_GPIO_Init+0x334>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001774:	4a27      	ldr	r2, [pc, #156]	; (8001814 <HAL_GPIO_Init+0x334>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_GPIO_Init+0x334>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179e:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_GPIO_Init+0x334>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_GPIO_Init+0x334>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_GPIO_Init+0x334>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f67f ae90 	bls.w	80014fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40021400 	.word	0x40021400
 800180c:	40021800 	.word	0x40021800
 8001810:	40021c00 	.word	0x40021c00
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e264      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d075      	beq.n	8001956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186a:	4ba3      	ldr	r3, [pc, #652]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b04      	cmp	r3, #4
 8001874:	d00c      	beq.n	8001890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800187e:	2b08      	cmp	r3, #8
 8001880:	d112      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001882:	4b9d      	ldr	r3, [pc, #628]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188e:	d10b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4b99      	ldr	r3, [pc, #612]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d05b      	beq.n	8001954 <HAL_RCC_OscConfig+0x108>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d157      	bne.n	8001954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e23f      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x74>
 80018b2:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a90      	ldr	r2, [pc, #576]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xb0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x98>
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a8a      	ldr	r2, [pc, #552]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xb0>
 80018e4:	4b84      	ldr	r3, [pc, #528]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a83      	ldr	r2, [pc, #524]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b81      	ldr	r3, [pc, #516]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a80      	ldr	r2, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fcfe 	bl	8001304 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fcfa 	bl	8001304 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e204      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xc0>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fcea 	bl	8001304 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fce6 	bl	8001304 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1f0      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0xe8>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001962:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001976:	2b08      	cmp	r3, #8
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x152>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1c4      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4952      	ldr	r1, [pc, #328]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_RCC_OscConfig+0x2b0>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fc9f 	bl	8001304 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fc9b 	bl	8001304 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1a5      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4940      	ldr	r1, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x2b0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc7e 	bl	8001304 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fc7a 	bl	8001304 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e184      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d030      	beq.n	8001a98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x2b4>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fc5e 	bl	8001304 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc5a 	bl	8001304 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e164      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x200>
 8001a6a:	e015      	b.n	8001a98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x2b4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fc47 	bl	8001304 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fc43 	bl	8001304 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e14d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80a0 	beq.w	8001be6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x2b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d121      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_RCC_OscConfig+0x2b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_RCC_OscConfig+0x2b8>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fc09 	bl	8001304 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e011      	b.n	8001b1a <HAL_RCC_OscConfig+0x2ce>
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470000 	.word	0x42470000
 8001b00:	42470e80 	.word	0x42470e80
 8001b04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b08:	f7ff fbfc 	bl	8001304 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e106      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b85      	ldr	r3, [pc, #532]	; (8001d30 <HAL_RCC_OscConfig+0x4e4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d106      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2f0>
 8001b2e:	4b81      	ldr	r3, [pc, #516]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a80      	ldr	r2, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	e01c      	b.n	8001b76 <HAL_RCC_OscConfig+0x32a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x312>
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x32a>
 8001b5e:	4b75      	ldr	r3, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a74      	ldr	r2, [pc, #464]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fbc1 	bl	8001304 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff fbbd 	bl	8001304 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0c5      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	4b65      	ldr	r3, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCC_OscConfig+0x33a>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fbab 	bl	8001304 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fba7 	bl	8001304 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0af      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bda:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 809b 	beq.w	8001d26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d05c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d141      	bne.n	8001c88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x4ec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fb7b 	bl	8001304 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fb77 	bl	8001304 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e081      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c24:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5a:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <HAL_RCC_OscConfig+0x4ec>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb50 	bl	8001304 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff fb4c 	bl	8001304 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e056      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x41c>
 8001c86:	e04e      	b.n	8001d26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x4ec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fb39 	bl	8001304 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff fb35 	bl	8001304 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e03f      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x44a>
 8001cb4:	e037      	b.n	8001d26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e032      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d028      	beq.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d121      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d11a      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d111      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40007000 	.word	0x40007000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	42470060 	.word	0x42470060

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0cc      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d90c      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d044      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e067      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4934      	ldr	r1, [pc, #208]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff fa6a 	bl	8001304 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff fa66 	bl	8001304 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e04f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f821 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	490a      	ldr	r1, [pc, #40]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	5ccb      	ldrb	r3, [r1, r3]
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f922 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08006c3c 	.word	0x08006c3c
 8001f00:	20000030 	.word	0x20000030
 8001f04:	20000034 	.word	0x20000034

08001f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f20:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d00d      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x40>
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	f200 80bd 	bhi.w	80020ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x34>
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f3a:	e0b7      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f3e:	60bb      	str	r3, [r7, #8]
       break;
 8001f40:	e0b7      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f42:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f44:	60bb      	str	r3, [r7, #8]
      break;
 8001f46:	e0b4      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f48:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d04d      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	099b      	lsrs	r3, r3, #6
 8001f64:	461a      	mov	r2, r3
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	ea02 0800 	and.w	r8, r2, r0
 8001f76:	ea03 0901 	and.w	r9, r3, r1
 8001f7a:	4640      	mov	r0, r8
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	014b      	lsls	r3, r1, #5
 8001f88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f8c:	0142      	lsls	r2, r0, #5
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	ebb0 0008 	subs.w	r0, r0, r8
 8001f96:	eb61 0109 	sbc.w	r1, r1, r9
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	018b      	lsls	r3, r1, #6
 8001fa4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fa8:	0182      	lsls	r2, r0, #6
 8001faa:	1a12      	subs	r2, r2, r0
 8001fac:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb0:	f04f 0000 	mov.w	r0, #0
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	00d9      	lsls	r1, r3, #3
 8001fba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fbe:	00d0      	lsls	r0, r2, #3
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	eb12 0208 	adds.w	r2, r2, r8
 8001fc8:	eb43 0309 	adc.w	r3, r3, r9
 8001fcc:	f04f 0000 	mov.w	r0, #0
 8001fd0:	f04f 0100 	mov.w	r1, #0
 8001fd4:	0259      	lsls	r1, r3, #9
 8001fd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fda:	0250      	lsls	r0, r2, #9
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	f7fe f8f8 	bl	80001e0 <__aeabi_uldivmod>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e04a      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	099b      	lsrs	r3, r3, #6
 8002000:	461a      	mov	r2, r3
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800200a:	f04f 0100 	mov.w	r1, #0
 800200e:	ea02 0400 	and.w	r4, r2, r0
 8002012:	ea03 0501 	and.w	r5, r3, r1
 8002016:	4620      	mov	r0, r4
 8002018:	4629      	mov	r1, r5
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	014b      	lsls	r3, r1, #5
 8002024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002028:	0142      	lsls	r2, r0, #5
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	1b00      	subs	r0, r0, r4
 8002030:	eb61 0105 	sbc.w	r1, r1, r5
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	018b      	lsls	r3, r1, #6
 800203e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002042:	0182      	lsls	r2, r0, #6
 8002044:	1a12      	subs	r2, r2, r0
 8002046:	eb63 0301 	sbc.w	r3, r3, r1
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	00d9      	lsls	r1, r3, #3
 8002054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002058:	00d0      	lsls	r0, r2, #3
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	1912      	adds	r2, r2, r4
 8002060:	eb45 0303 	adc.w	r3, r5, r3
 8002064:	f04f 0000 	mov.w	r0, #0
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	0299      	lsls	r1, r3, #10
 800206e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002072:	0290      	lsls	r0, r2, #10
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	461a      	mov	r2, r3
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	f7fe f8ac 	bl	80001e0 <__aeabi_uldivmod>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4613      	mov	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	3301      	adds	r3, #1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	60bb      	str	r3, [r7, #8]
      break;
 80020aa:	e002      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020ae:	60bb      	str	r3, [r7, #8]
      break;
 80020b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b2:	68bb      	ldr	r3, [r7, #8]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000030 	.word	0x20000030

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	08006c4c 	.word	0x08006c4c

0800210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002110:	f7ff ffdc 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0b5b      	lsrs	r3, r3, #13
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	08006c4c 	.word	0x08006c4c

08002134 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	220f      	movs	r2, #15
 8002142:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_RCC_GetClockConfig+0x60>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e041      	b.n	800222e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f839 	bl	8002236 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 f9d8 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e04e      	b.n	8002302 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a23      	ldr	r2, [pc, #140]	; (8002310 <HAL_TIM_Base_Start_IT+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d022      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x80>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228e:	d01d      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x80>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_TIM_Base_Start_IT+0xc8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d018      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x80>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_TIM_Base_Start_IT+0xcc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d013      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x80>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_TIM_Base_Start_IT+0xd0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00e      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x80>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_TIM_Base_Start_IT+0xd4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d009      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x80>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_TIM_Base_Start_IT+0xd8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x80>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_TIM_Base_Start_IT+0xdc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d111      	bne.n	80022f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d010      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ee:	e007      	b.n	8002300 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40010000 	.word	0x40010000
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800
 800231c:	40000c00 	.word	0x40000c00
 8002320:	40010400 	.word	0x40010400
 8002324:	40014000 	.word	0x40014000
 8002328:	40001800 	.word	0x40001800

0800232c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0202 	mvn.w	r2, #2
 8002358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8ee 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8e0 	bl	800253c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8f1 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b04      	cmp	r3, #4
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0204 	mvn.w	r2, #4
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8c4 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8b6 	bl	800253c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8c7 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0208 	mvn.w	r2, #8
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f89a 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f88c 	bl	800253c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f89d 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b10      	cmp	r3, #16
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b10      	cmp	r3, #16
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0210 	mvn.w	r2, #16
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2208      	movs	r2, #8
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f870 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f862 	bl	800253c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f873 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0201 	mvn.w	r2, #1
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fdb2 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d107      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f902 	bl	80026e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f838 	bl	8002578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d10e      	bne.n	8002534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d107      	bne.n	8002534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0220 	mvn.w	r2, #32
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f8cc 	bl	80026cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a40      	ldr	r2, [pc, #256]	; (80026a0 <TIM_Base_SetConfig+0x114>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <TIM_Base_SetConfig+0x40>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025aa:	d00f      	beq.n	80025cc <TIM_Base_SetConfig+0x40>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a3d      	ldr	r2, [pc, #244]	; (80026a4 <TIM_Base_SetConfig+0x118>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00b      	beq.n	80025cc <TIM_Base_SetConfig+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a3c      	ldr	r2, [pc, #240]	; (80026a8 <TIM_Base_SetConfig+0x11c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d007      	beq.n	80025cc <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a3b      	ldr	r2, [pc, #236]	; (80026ac <TIM_Base_SetConfig+0x120>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d003      	beq.n	80025cc <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3a      	ldr	r2, [pc, #232]	; (80026b0 <TIM_Base_SetConfig+0x124>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d108      	bne.n	80025de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <TIM_Base_SetConfig+0x114>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d02b      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d027      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <TIM_Base_SetConfig+0x118>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d023      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <TIM_Base_SetConfig+0x11c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01f      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <TIM_Base_SetConfig+0x120>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01b      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <TIM_Base_SetConfig+0x124>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d017      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <TIM_Base_SetConfig+0x128>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <TIM_Base_SetConfig+0x12c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00f      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a26      	ldr	r2, [pc, #152]	; (80026bc <TIM_Base_SetConfig+0x130>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00b      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <TIM_Base_SetConfig+0x134>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <TIM_Base_SetConfig+0x138>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <TIM_Base_SetConfig+0x13c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d108      	bne.n	8002650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <TIM_Base_SetConfig+0x114>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <TIM_Base_SetConfig+0xf8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <TIM_Base_SetConfig+0x124>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d103      	bne.n	800268c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	615a      	str	r2, [r3, #20]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40010000 	.word	0x40010000
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40000800 	.word	0x40000800
 80026ac:	40000c00 	.word	0x40000c00
 80026b0:	40010400 	.word	0x40010400
 80026b4:	40014000 	.word	0x40014000
 80026b8:	40014400 	.word	0x40014400
 80026bc:	40014800 	.word	0x40014800
 80026c0:	40001800 	.word	0x40001800
 80026c4:	40001c00 	.word	0x40001c00
 80026c8:	40002000 	.word	0x40002000

080026cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e03f      	b.n	8002786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fcbe 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f9a7 	bl	8002a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800274c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800275c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800276c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b08a      	sub	sp, #40	; 0x28
 8002792:	af02      	add	r7, sp, #8
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d17c      	bne.n	80028a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_UART_Transmit+0x2c>
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e075      	b.n	80028aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Transmit+0x3e>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e06e      	b.n	80028aa <HAL_UART_Transmit+0x11c>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2221      	movs	r2, #33	; 0x21
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fd8f 	bl	8001304 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d108      	bne.n	8002810 <HAL_UART_Transmit+0x82>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e003      	b.n	8002818 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002820:	e02a      	b.n	8002878 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f8e2 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e036      	b.n	80028aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10b      	bne.n	800285a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3302      	adds	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e007      	b.n	800286a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3301      	adds	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1cf      	bne.n	8002822 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f8b2 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e006      	b.n	80028aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b08a      	sub	sp, #40	; 0x28
 80028b6:	af02      	add	r7, sp, #8
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	f040 808c 	bne.w	80029ec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_UART_Receive+0x2e>
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e084      	b.n	80029ee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Receive+0x40>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e07d      	b.n	80029ee <HAL_UART_Receive+0x13c>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2222      	movs	r2, #34	; 0x22
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800290e:	f7fe fcf9 	bl	8001304 <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	d108      	bne.n	800293c <HAL_UART_Receive+0x8a>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	e003      	b.n	8002944 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800294c:	e043      	b.n	80029d6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	2120      	movs	r1, #32
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f84c 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e042      	b.n	80029ee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297a:	b29a      	uxth	r2, r3
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	3302      	adds	r3, #2
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	e01f      	b.n	80029c8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d007      	beq.n	80029a2 <HAL_UART_Receive+0xf0>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_UART_Receive+0xfe>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e008      	b.n	80029c2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1b6      	bne.n	800294e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a06:	e02c      	b.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d028      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a16:	f7fe fc75 	bl	8001304 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d21d      	bcs.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d0c3      	beq.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a90:	b09f      	sub	sp, #124	; 0x7c
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa2:	68d9      	ldr	r1, [r3, #12]
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	ea40 0301 	orr.w	r3, r0, r1
 8002aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ad0:	f021 010c 	bic.w	r1, r1, #12
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ada:	430b      	orrs	r3, r1
 8002adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	6999      	ldr	r1, [r3, #24]
 8002aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	ea40 0301 	orr.w	r3, r0, r1
 8002af4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4bc5      	ldr	r3, [pc, #788]	; (8002e10 <UART_SetConfig+0x384>)
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d004      	beq.n	8002b0a <UART_SetConfig+0x7e>
 8002b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4bc3      	ldr	r3, [pc, #780]	; (8002e14 <UART_SetConfig+0x388>)
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d103      	bne.n	8002b12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b0a:	f7ff faff 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8002b0e:	6778      	str	r0, [r7, #116]	; 0x74
 8002b10:	e002      	b.n	8002b18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b12:	f7ff fae7 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002b16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b20:	f040 80b6 	bne.w	8002c90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b26:	461c      	mov	r4, r3
 8002b28:	f04f 0500 	mov.w	r5, #0
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	462b      	mov	r3, r5
 8002b30:	1891      	adds	r1, r2, r2
 8002b32:	6439      	str	r1, [r7, #64]	; 0x40
 8002b34:	415b      	adcs	r3, r3
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
 8002b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b3c:	1912      	adds	r2, r2, r4
 8002b3e:	eb45 0303 	adc.w	r3, r5, r3
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	00d9      	lsls	r1, r3, #3
 8002b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b50:	00d0      	lsls	r0, r2, #3
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	1911      	adds	r1, r2, r4
 8002b58:	6639      	str	r1, [r7, #96]	; 0x60
 8002b5a:	416b      	adcs	r3, r5
 8002b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	1891      	adds	r1, r2, r2
 8002b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b6c:	415b      	adcs	r3, r3
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002b78:	f7fd fb32 	bl	80001e0 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <UART_SetConfig+0x38c>)
 8002b82:	fba3 2302 	umull	r2, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	011e      	lsls	r6, r3, #4
 8002b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8c:	461c      	mov	r4, r3
 8002b8e:	f04f 0500 	mov.w	r5, #0
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	1891      	adds	r1, r2, r2
 8002b98:	6339      	str	r1, [r7, #48]	; 0x30
 8002b9a:	415b      	adcs	r3, r3
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ba2:	1912      	adds	r2, r2, r4
 8002ba4:	eb45 0303 	adc.w	r3, r5, r3
 8002ba8:	f04f 0000 	mov.w	r0, #0
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	00d9      	lsls	r1, r3, #3
 8002bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bb6:	00d0      	lsls	r0, r2, #3
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	1911      	adds	r1, r2, r4
 8002bbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bc0:	416b      	adcs	r3, r5
 8002bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	1891      	adds	r1, r2, r2
 8002bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bd2:	415b      	adcs	r3, r3
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002bde:	f7fd faff 	bl	80001e0 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <UART_SetConfig+0x38c>)
 8002be8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	2164      	movs	r1, #100	; 0x64
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	3332      	adds	r3, #50	; 0x32
 8002bfa:	4a87      	ldr	r2, [pc, #540]	; (8002e18 <UART_SetConfig+0x38c>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c08:	441e      	add	r6, r3
 8002c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	1894      	adds	r4, r2, r2
 8002c18:	623c      	str	r4, [r7, #32]
 8002c1a:	415b      	adcs	r3, r3
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c22:	1812      	adds	r2, r2, r0
 8002c24:	eb41 0303 	adc.w	r3, r1, r3
 8002c28:	f04f 0400 	mov.w	r4, #0
 8002c2c:	f04f 0500 	mov.w	r5, #0
 8002c30:	00dd      	lsls	r5, r3, #3
 8002c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c36:	00d4      	lsls	r4, r2, #3
 8002c38:	4622      	mov	r2, r4
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	1814      	adds	r4, r2, r0
 8002c3e:	653c      	str	r4, [r7, #80]	; 0x50
 8002c40:	414b      	adcs	r3, r1
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	1891      	adds	r1, r2, r2
 8002c50:	61b9      	str	r1, [r7, #24]
 8002c52:	415b      	adcs	r3, r3
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002c5e:	f7fd fabf 	bl	80001e0 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <UART_SetConfig+0x38c>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a67      	ldr	r2, [pc, #412]	; (8002e18 <UART_SetConfig+0x38c>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 0207 	and.w	r2, r3, #7
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4432      	add	r2, r6
 8002c8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c8e:	e0b9      	b.n	8002e04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c92:	461c      	mov	r4, r3
 8002c94:	f04f 0500 	mov.w	r5, #0
 8002c98:	4622      	mov	r2, r4
 8002c9a:	462b      	mov	r3, r5
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	6139      	str	r1, [r7, #16]
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ca8:	1912      	adds	r2, r2, r4
 8002caa:	eb45 0303 	adc.w	r3, r5, r3
 8002cae:	f04f 0000 	mov.w	r0, #0
 8002cb2:	f04f 0100 	mov.w	r1, #0
 8002cb6:	00d9      	lsls	r1, r3, #3
 8002cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cbc:	00d0      	lsls	r0, r2, #3
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	eb12 0804 	adds.w	r8, r2, r4
 8002cc6:	eb43 0905 	adc.w	r9, r3, r5
 8002cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	008b      	lsls	r3, r1, #2
 8002cde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ce2:	0082      	lsls	r2, r0, #2
 8002ce4:	4640      	mov	r0, r8
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	f7fd fa7a 	bl	80001e0 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <UART_SetConfig+0x38c>)
 8002cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	011e      	lsls	r6, r3, #4
 8002cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	1894      	adds	r4, r2, r2
 8002d08:	60bc      	str	r4, [r7, #8]
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d12:	1812      	adds	r2, r2, r0
 8002d14:	eb41 0303 	adc.w	r3, r1, r3
 8002d18:	f04f 0400 	mov.w	r4, #0
 8002d1c:	f04f 0500 	mov.w	r5, #0
 8002d20:	00dd      	lsls	r5, r3, #3
 8002d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d26:	00d4      	lsls	r4, r2, #3
 8002d28:	4622      	mov	r2, r4
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	1814      	adds	r4, r2, r0
 8002d2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d30:	414b      	adcs	r3, r1
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	008b      	lsls	r3, r1, #2
 8002d48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d4c:	0082      	lsls	r2, r0, #2
 8002d4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d52:	f7fd fa45 	bl	80001e0 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <UART_SetConfig+0x38c>)
 8002d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	2164      	movs	r1, #100	; 0x64
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	3332      	adds	r3, #50	; 0x32
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <UART_SetConfig+0x38c>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7a:	441e      	add	r6, r3
 8002d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	1894      	adds	r4, r2, r2
 8002d8a:	603c      	str	r4, [r7, #0]
 8002d8c:	415b      	adcs	r3, r3
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d94:	1812      	adds	r2, r2, r0
 8002d96:	eb41 0303 	adc.w	r3, r1, r3
 8002d9a:	f04f 0400 	mov.w	r4, #0
 8002d9e:	f04f 0500 	mov.w	r5, #0
 8002da2:	00dd      	lsls	r5, r3, #3
 8002da4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002da8:	00d4      	lsls	r4, r2, #3
 8002daa:	4622      	mov	r2, r4
 8002dac:	462b      	mov	r3, r5
 8002dae:	eb12 0a00 	adds.w	sl, r2, r0
 8002db2:	eb43 0b01 	adc.w	fp, r3, r1
 8002db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	008b      	lsls	r3, r1, #2
 8002dca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002dce:	0082      	lsls	r2, r0, #2
 8002dd0:	4650      	mov	r0, sl
 8002dd2:	4659      	mov	r1, fp
 8002dd4:	f7fd fa04 	bl	80001e0 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <UART_SetConfig+0x38c>)
 8002dde:	fba3 1302 	umull	r1, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2164      	movs	r1, #100	; 0x64
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	3332      	adds	r3, #50	; 0x32
 8002df0:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <UART_SetConfig+0x38c>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4432      	add	r2, r6
 8002e02:	609a      	str	r2, [r3, #8]
}
 8002e04:	bf00      	nop
 8002e06:	377c      	adds	r7, #124	; 0x7c
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0e:	bf00      	nop
 8002e10:	40011000 	.word	0x40011000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	51eb851f 	.word	0x51eb851f

08002e1c <__NVIC_SetPriority>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	db0a      	blt.n	8002e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	490c      	ldr	r1, [pc, #48]	; (8002e68 <__NVIC_SetPriority+0x4c>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e44:	e00a      	b.n	8002e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4908      	ldr	r1, [pc, #32]	; (8002e6c <__NVIC_SetPriority+0x50>)
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	3b04      	subs	r3, #4
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	440b      	add	r3, r1
 8002e5a:	761a      	strb	r2, [r3, #24]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000e100 	.word	0xe000e100
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <SysTick_Handler+0x1c>)
 8002e76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e78:	f002 fb3c 	bl	80054f4 <xTaskGetSchedulerState>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d001      	beq.n	8002e86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e82:	f003 fa21 	bl	80062c8 <xPortSysTickHandler>
  }
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e94:	2100      	movs	r1, #0
 8002e96:	f06f 0004 	mvn.w	r0, #4
 8002e9a:	f7ff ffbf 	bl	8002e1c <__NVIC_SetPriority>
#endif
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eaa:	f3ef 8305 	mrs	r3, IPSR
 8002eae:	603b      	str	r3, [r7, #0]
  return(result);
 8002eb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002eb6:	f06f 0305 	mvn.w	r3, #5
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	e00c      	b.n	8002ed8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <osKernelInitialize+0x44>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <osKernelInitialize+0x44>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e002      	b.n	8002ed8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200000c0 	.word	0x200000c0

08002eec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef2:	f3ef 8305 	mrs	r3, IPSR
 8002ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002efe:	f06f 0305 	mvn.w	r3, #5
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e010      	b.n	8002f28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <osKernelStart+0x48>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d109      	bne.n	8002f22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f0e:	f7ff ffbf 	bl	8002e90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <osKernelStart+0x48>)
 8002f14:	2202      	movs	r2, #2
 8002f16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f18:	f001 fea4 	bl	8004c64 <vTaskStartScheduler>
      stat = osOK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	e002      	b.n	8002f28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200000c0 	.word	0x200000c0

08002f38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	; 0x38
 8002f3c:	af04      	add	r7, sp, #16
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f48:	f3ef 8305 	mrs	r3, IPSR
 8002f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d17e      	bne.n	8003052 <osThreadNew+0x11a>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d07b      	beq.n	8003052 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f5e:	2318      	movs	r3, #24
 8002f60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d045      	beq.n	8002ffe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <osThreadNew+0x48>
        name = attr->name;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <osThreadNew+0x6e>
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b38      	cmp	r3, #56	; 0x38
 8002f98:	d805      	bhi.n	8002fa6 <osThreadNew+0x6e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <osThreadNew+0x72>
        return (NULL);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e054      	b.n	8003054 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00e      	beq.n	8002fe0 <osThreadNew+0xa8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b6b      	cmp	r3, #107	; 0x6b
 8002fc8:	d90a      	bls.n	8002fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <osThreadNew+0xa8>
        mem = 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e010      	b.n	8003002 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <osThreadNew+0xca>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d108      	bne.n	8003002 <osThreadNew+0xca>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <osThreadNew+0xca>
          mem = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e001      	b.n	8003002 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d110      	bne.n	800302a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003010:	9202      	str	r2, [sp, #8]
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6a3a      	ldr	r2, [r7, #32]
 800301c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f001 fc4a 	bl	80048b8 <xTaskCreateStatic>
 8003024:	4603      	mov	r3, r0
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e013      	b.n	8003052 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d110      	bne.n	8003052 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	b29a      	uxth	r2, r3
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f001 fc95 	bl	8004972 <xTaskCreate>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <osThreadNew+0x11a>
            hTask = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003052:	693b      	ldr	r3, [r7, #16]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3728      	adds	r7, #40	; 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003064:	f3ef 8305 	mrs	r3, IPSR
 8003068:	60bb      	str	r3, [r7, #8]
  return(result);
 800306a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <osDelay+0x1c>
    stat = osErrorISR;
 8003070:	f06f 0305 	mvn.w	r3, #5
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e007      	b.n	8003088 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f001 fdba 	bl	8004bfc <vTaskDelay>
    }
  }

  return (stat);
 8003088:	68fb      	ldr	r3, [r7, #12]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003092:	b580      	push	{r7, lr}
 8003094:	b08a      	sub	sp, #40	; 0x28
 8003096:	af02      	add	r7, sp, #8
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a2:	f3ef 8305 	mrs	r3, IPSR
 80030a6:	613b      	str	r3, [r7, #16]
  return(result);
 80030a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d15f      	bne.n	800316e <osMessageQueueNew+0xdc>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d05c      	beq.n	800316e <osMessageQueueNew+0xdc>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d059      	beq.n	800316e <osMessageQueueNew+0xdc>
    mem = -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d029      	beq.n	800311a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <osMessageQueueNew+0x62>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b4f      	cmp	r3, #79	; 0x4f
 80030d4:	d90e      	bls.n	80030f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <osMessageQueueNew+0x62>
        mem = 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	e014      	b.n	800311e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d110      	bne.n	800311e <osMessageQueueNew+0x8c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10c      	bne.n	800311e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d108      	bne.n	800311e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <osMessageQueueNew+0x8c>
          mem = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e001      	b.n	800311e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10b      	bne.n	800313c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2100      	movs	r1, #0
 800312e:	9100      	str	r1, [sp, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fc60 	bl	80039f8 <xQueueGenericCreateStatic>
 8003138:	61f8      	str	r0, [r7, #28]
 800313a:	e008      	b.n	800314e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003142:	2200      	movs	r2, #0
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fcce 	bl	8003ae8 <xQueueGenericCreate>
 800314c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <osMessageQueueNew+0xd0>
        name = attr->name;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e001      	b.n	8003166 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003166:	6979      	ldr	r1, [r7, #20]
 8003168:	69f8      	ldr	r0, [r7, #28]
 800316a:	f001 fb47 	bl	80047fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800316e:	69fb      	ldr	r3, [r7, #28]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003190:	f3ef 8305 	mrs	r3, IPSR
 8003194:	617b      	str	r3, [r7, #20]
  return(result);
 8003196:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003198:	2b00      	cmp	r3, #0
 800319a:	d028      	beq.n	80031ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <osMessageQueuePut+0x36>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <osMessageQueuePut+0x36>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80031ae:	f06f 0303 	mvn.w	r3, #3
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e038      	b.n	8003228 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80031ba:	f107 0210 	add.w	r2, r7, #16
 80031be:	2300      	movs	r3, #0
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	69b8      	ldr	r0, [r7, #24]
 80031c4:	f000 fe22 	bl	8003e0c <xQueueGenericSendFromISR>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d003      	beq.n	80031d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80031ce:	f06f 0302 	mvn.w	r3, #2
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	e028      	b.n	8003228 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d025      	beq.n	8003228 <osMessageQueuePut+0xb0>
 80031dc:	4b15      	ldr	r3, [pc, #84]	; (8003234 <osMessageQueuePut+0xbc>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	e01c      	b.n	8003228 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <osMessageQueuePut+0x82>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80031fa:	f06f 0303 	mvn.w	r3, #3
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e012      	b.n	8003228 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003202:	2300      	movs	r3, #0
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	69b8      	ldr	r0, [r7, #24]
 800320a:	f000 fd01 	bl	8003c10 <xQueueGenericSend>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d009      	beq.n	8003228 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800321a:	f06f 0301 	mvn.w	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	e002      	b.n	8003228 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003222:	f06f 0302 	mvn.w	r3, #2
 8003226:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003228:	69fb      	ldr	r3, [r7, #28]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800324e:	f3ef 8305 	mrs	r3, IPSR
 8003252:	617b      	str	r3, [r7, #20]
  return(result);
 8003254:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003256:	2b00      	cmp	r3, #0
 8003258:	d028      	beq.n	80032ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <osMessageQueueGet+0x34>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <osMessageQueueGet+0x34>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800326c:	f06f 0303 	mvn.w	r3, #3
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e037      	b.n	80032e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003278:	f107 0310 	add.w	r3, r7, #16
 800327c:	461a      	mov	r2, r3
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	69b8      	ldr	r0, [r7, #24]
 8003282:	f001 f8d7 	bl	8004434 <xQueueReceiveFromISR>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d003      	beq.n	8003294 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800328c:	f06f 0302 	mvn.w	r3, #2
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e027      	b.n	80032e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d024      	beq.n	80032e4 <osMessageQueueGet+0xac>
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <osMessageQueueGet+0xb8>)
 800329c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	e01b      	b.n	80032e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <osMessageQueueGet+0x80>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80032b8:	f06f 0303 	mvn.w	r3, #3
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e011      	b.n	80032e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	69b8      	ldr	r0, [r7, #24]
 80032c6:	f000 fec9 	bl	800405c <xQueueReceive>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d009      	beq.n	80032e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80032d6:	f06f 0301 	mvn.w	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e002      	b.n	80032e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80032de:	f06f 0302 	mvn.w	r3, #2
 80032e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80032e4:	69fb      	ldr	r3, [r7, #28]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003300:	f3ef 8305 	mrs	r3, IPSR
 8003304:	613b      	str	r3, [r7, #16]
  return(result);
 8003306:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <osMemoryPoolNew+0x1e>
    mp = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
 8003310:	e0be      	b.n	8003490 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <osMemoryPoolNew+0x2a>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <osMemoryPoolNew+0x30>
    mp = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	e0b5      	b.n	8003490 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3303      	adds	r3, #3
 800332c:	f023 0203 	bic.w	r2, r3, #3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]

    name = NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d038      	beq.n	80033c0 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <osMemoryPoolNew+0x68>
        name = attr->name;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d006      	beq.n	8003372 <osMemoryPoolNew+0x7e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b73      	cmp	r3, #115	; 0x73
 800336a:	d902      	bls.n	8003372 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 800336c:	2301      	movs	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e009      	b.n	8003386 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <osMemoryPoolNew+0x92>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <osMemoryPoolNew+0xa8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e015      	b.n	80033c8 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d806      	bhi.n	80033c8 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e003      	b.n	80033c8 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 80033ce:	2074      	movs	r0, #116	; 0x74
 80033d0:	f003 f80a 	bl	80063e8 <pvPortMalloc>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24
 80033d6:	e002      	b.n	80033de <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	3324      	adds	r3, #36	; 0x24
 80033e8:	461a      	mov	r2, r3
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fbd8 	bl	8003ba2 <xQueueCreateCountingSemaphoreStatic>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 8003406:	6978      	ldr	r0, [r7, #20]
 8003408:	f002 ffee 	bl	80063e8 <pvPortMalloc>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e003      	b.n	800341c <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d02b      	beq.n	800347a <osMemoryPoolNew+0x186>
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d027      	beq.n	800347a <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <osMemoryPoolNew+0x1a8>)
 8003452:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f043 0202 	orr.w	r2, r3, #2
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 8003478:	e00a      	b.n	8003490 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <osMemoryPoolNew+0x198>
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 8003486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003488:	f003 f87a 	bl	8006580 <vPortFree>
      }
      mp = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003492:	4618      	mov	r0, r3
 8003494:	3728      	adds	r7, #40	; 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	5eed0000 	.word	0x5eed0000

080034a0 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	e062      	b.n	800357c <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	4b31      	ldr	r3, [pc, #196]	; (8003588 <osMemoryPoolAlloc+0xe8>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	4a30      	ldr	r2, [pc, #192]	; (8003588 <osMemoryPoolAlloc+0xe8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d157      	bne.n	800357c <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034cc:	f3ef 8305 	mrs	r3, IPSR
 80034d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80034d2:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d032      	beq.n	800353e <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d14e      	bne.n	800357c <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 ffa4 	bl	8004434 <xQueueReceiveFromISR>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d144      	bne.n	800357c <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <osMemoryPoolAlloc+0xe8>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	4a23      	ldr	r2, [pc, #140]	; (8003588 <osMemoryPoolAlloc+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d13d      	bne.n	800357c <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003500:	f3ef 8211 	mrs	r2, BASEPRI
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	617a      	str	r2, [r7, #20]
 8003516:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003518:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 800351a:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 800351c:	6a38      	ldr	r0, [r7, #32]
 800351e:	f000 f8ef 	bl	8003700 <AllocBlock>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 800352a:	6a38      	ldr	r0, [r7, #32]
 800352c:	f000 f8c6 	bl	80036bc <CreateBlock>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800353c:	e01e      	b.n	800357c <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	6839      	ldr	r1, [r7, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fe69 	bl	800421c <xQueueSemaphoreTake>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d115      	bne.n	800357c <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <osMemoryPoolAlloc+0xe8>)
 8003556:	4013      	ands	r3, r2
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <osMemoryPoolAlloc+0xe8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10e      	bne.n	800357c <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 800355e:	f002 fe21 	bl	80061a4 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 8003562:	6a38      	ldr	r0, [r7, #32]
 8003564:	f000 f8cc 	bl	8003700 <AllocBlock>
 8003568:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 8003570:	6a38      	ldr	r0, [r7, #32]
 8003572:	f000 f8a3 	bl	80036bc <CreateBlock>
 8003576:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 8003578:	f002 fe44 	bl	8006204 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800357e:	4618      	mov	r0, r3
 8003580:	3728      	adds	r7, #40	; 0x28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	5eed0000 	.word	0x5eed0000

0800358c <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <osMemoryPoolFree+0x16>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 80035a2:	f06f 0303 	mvn.w	r3, #3
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
 80035a8:	e07f      	b.n	80036aa <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <osMemoryPoolFree+0x128>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	4a3f      	ldr	r2, [pc, #252]	; (80036b4 <osMemoryPoolFree+0x128>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 80035bc:	f06f 0302 	mvn.w	r3, #2
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e072      	b.n	80036aa <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d308      	bcc.n	80035e0 <osMemoryPoolFree+0x54>
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d903      	bls.n	80035e8 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 80035e0:	f06f 0303 	mvn.w	r3, #3
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	e060      	b.n	80036aa <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ec:	f3ef 8305 	mrs	r3, IPSR
 80035f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80035f2:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d03b      	beq.n	8003670 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 ffb7 	bl	8004570 <uxQueueMessagesWaitingFromISR>
 8003602:	4602      	mov	r2, r0
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d103      	bne.n	8003614 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 800360c:	f06f 0302 	mvn.w	r3, #2
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	e04a      	b.n	80036aa <osMemoryPoolFree+0x11e>
	__asm volatile
 8003614:	f3ef 8211 	mrs	r2, BASEPRI
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	613a      	str	r2, [r7, #16]
 800362a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800362c:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 800362e:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8003630:	6839      	ldr	r1, [r7, #0]
 8003632:	6a38      	ldr	r0, [r7, #32]
 8003634:	f000 f87c 	bl	8003730 <FreeBlock>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f383 8811 	msr	BASEPRI, r3
}
 8003642:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f107 0208 	add.w	r2, r7, #8
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fc75 	bl	8003f42 <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d025      	beq.n	80036aa <osMemoryPoolFree+0x11e>
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <osMemoryPoolFree+0x12c>)
 8003660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	e01c      	b.n	80036aa <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 ff5d 	bl	8004534 <uxQueueMessagesWaiting>
 800367a:	4602      	mov	r2, r0
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	d103      	bne.n	800368c <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 8003684:	f06f 0302 	mvn.w	r3, #2
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e00e      	b.n	80036aa <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 800368c:	f002 fd8a 	bl	80061a4 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	6a38      	ldr	r0, [r7, #32]
 8003694:	f000 f84c 	bl	8003730 <FreeBlock>

          taskEXIT_CRITICAL();
 8003698:	f002 fdb4 	bl	8006204 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	6858      	ldr	r0, [r3, #4]
 80036a0:	2300      	movs	r3, #0
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	f000 fab3 	bl	8003c10 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3728      	adds	r7, #40	; 0x28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	5eed0000 	.word	0x5eed0000
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d20e      	bcs.n	80036f2 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	69c9      	ldr	r1, [r1, #28]
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	61da      	str	r2, [r3, #28]
  }

  return (p);
 80036f2:	68fb      	ldr	r3, [r7, #12]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
  }

  return (p);
 8003722:	68fb      	ldr	r3, [r7, #12]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a07      	ldr	r2, [pc, #28]	; (8003784 <vApplicationGetIdleTaskMemory+0x2c>)
 8003768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a06      	ldr	r2, [pc, #24]	; (8003788 <vApplicationGetIdleTaskMemory+0x30>)
 800376e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	200000c4 	.word	0x200000c4
 8003788:	20000130 	.word	0x20000130

0800378c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800379c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a06      	ldr	r2, [pc, #24]	; (80037bc <vApplicationGetTimerTaskMemory+0x30>)
 80037a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037aa:	601a      	str	r2, [r3, #0]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	20000330 	.word	0x20000330
 80037bc:	2000039c 	.word	0x2000039c

080037c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 0208 	add.w	r2, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f103 0208 	add.w	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0208 	add.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d103      	bne.n	8003882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e00c      	b.n	800389c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3308      	adds	r3, #8
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e002      	b.n	8003890 <vListInsert+0x2e>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d2f6      	bcs.n	800388a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6852      	ldr	r2, [r2, #4]
 80038f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d103      	bne.n	8003908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1e5a      	subs	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xQueueGenericReset+0x2a>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60bb      	str	r3, [r7, #8]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003952:	f002 fc27 	bl	80061a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	3b01      	subs	r3, #1
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	22ff      	movs	r2, #255	; 0xff
 800399e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d114      	bne.n	80039d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01a      	beq.n	80039e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3310      	adds	r3, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fbdf 	bl	8005178 <xTaskRemoveFromEventList>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <xQueueGenericReset+0xcc>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	e009      	b.n	80039e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3310      	adds	r3, #16
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fef2 	bl	80037c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff feed 	bl	80037c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039e6:	f002 fc0d 	bl	8006204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <xQueueGenericCreateStatic+0x52>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <xQueueGenericCreateStatic+0x56>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericCreateStatic+0x58>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <xQueueGenericCreateStatic+0x7e>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <xQueueGenericCreateStatic+0x82>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <xQueueGenericCreateStatic+0x84>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	61fb      	str	r3, [r7, #28]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a96:	2350      	movs	r3, #80	; 0x50
 8003a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b50      	cmp	r3, #80	; 0x50
 8003a9e:	d00a      	beq.n	8003ab6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	61bb      	str	r3, [r7, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f83f 	bl	8003b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3730      	adds	r7, #48	; 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	613b      	str	r3, [r7, #16]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	3350      	adds	r3, #80	; 0x50
 8003b20:	4618      	mov	r0, r3
 8003b22:	f002 fc61 	bl	80063e8 <pvPortMalloc>
 8003b26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d011      	beq.n	8003b52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3350      	adds	r3, #80	; 0x50
 8003b36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b40:	79fa      	ldrb	r2, [r7, #7]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f805 	bl	8003b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b52:	69bb      	ldr	r3, [r7, #24]
	}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e002      	b.n	8003b7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	69b8      	ldr	r0, [r7, #24]
 8003b8e:	f7ff fecb 	bl	8003928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b08a      	sub	sp, #40	; 0x28
 8003ba6:	af02      	add	r7, sp, #8
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	61bb      	str	r3, [r7, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d90a      	bls.n	8003be8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	617b      	str	r3, [r7, #20]
}
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003be8:	2302      	movs	r3, #2
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff ff00 	bl	80039f8 <xQueueGenericCreateStatic>
 8003bf8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c06:	69fb      	ldr	r3, [r7, #28]
	}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08e      	sub	sp, #56	; 0x38
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xQueueGenericSend+0x32>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d103      	bne.n	8003c50 <xQueueGenericSend+0x40>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <xQueueGenericSend+0x44>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <xQueueGenericSend+0x46>
 8003c54:	2300      	movs	r3, #0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <xQueueGenericSend+0x60>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d103      	bne.n	8003c7e <xQueueGenericSend+0x6e>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <xQueueGenericSend+0x72>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <xQueueGenericSend+0x74>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	623b      	str	r3, [r7, #32]
}
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c9e:	f001 fc29 	bl	80054f4 <xTaskGetSchedulerState>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <xQueueGenericSend+0x9e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <xQueueGenericSend+0xa2>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <xQueueGenericSend+0xa4>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <xQueueGenericSend+0xbe>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	61fb      	str	r3, [r7, #28]
}
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cce:	f002 fa69 	bl	80061a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <xQueueGenericSend+0xd4>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d129      	bne.n	8003d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cea:	f000 fc77 	bl	80045dc <prvCopyDataToQueue>
 8003cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	3324      	adds	r3, #36	; 0x24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fa3b 	bl	8005178 <xTaskRemoveFromEventList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d08:	4b3f      	ldr	r3, [pc, #252]	; (8003e08 <xQueueGenericSend+0x1f8>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	e00a      	b.n	8003d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d20:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <xQueueGenericSend+0x1f8>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d30:	f002 fa68 	bl	8006204 <vPortExitCritical>
				return pdPASS;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e063      	b.n	8003e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d3e:	f002 fa61 	bl	8006204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e05c      	b.n	8003e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fa75 	bl	8005240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d5a:	f002 fa53 	bl	8006204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d5e:	f000 ffe7 	bl	8004d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d62:	f002 fa1f 	bl	80061a4 <vPortEnterCritical>
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d103      	bne.n	8003d7c <xQueueGenericSend+0x16c>
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d103      	bne.n	8003d92 <xQueueGenericSend+0x182>
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d92:	f002 fa37 	bl	8006204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d96:	1d3a      	adds	r2, r7, #4
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 fa64 	bl	800526c <xTaskCheckForTimeOut>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d124      	bne.n	8003df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dac:	f000 fd0e 	bl	80047cc <prvIsQueueFull>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	3310      	adds	r3, #16
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f98a 	bl	80050d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc6:	f000 fc99 	bl	80046fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dca:	f000 ffbf 	bl	8004d4c <xTaskResumeAll>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f af7c 	bne.w	8003cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <xQueueGenericSend+0x1f8>)
 8003dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	e772      	b.n	8003cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dea:	f000 fc87 	bl	80046fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dee:	f000 ffad 	bl	8004d4c <xTaskResumeAll>
 8003df2:	e76c      	b.n	8003cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df6:	f000 fc81 	bl	80046fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dfa:	f000 ffa7 	bl	8004d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3738      	adds	r7, #56	; 0x38
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b090      	sub	sp, #64	; 0x40
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <xQueueGenericSendFromISR+0x3c>
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <xQueueGenericSendFromISR+0x40>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <xQueueGenericSendFromISR+0x42>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d103      	bne.n	8003e76 <xQueueGenericSendFromISR+0x6a>
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <xQueueGenericSendFromISR+0x6e>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <xQueueGenericSendFromISR+0x70>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	623b      	str	r3, [r7, #32]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e96:	f002 fa67 	bl	8006368 <vPortValidateInterruptPriority>
	__asm volatile
 8003e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	61fa      	str	r2, [r7, #28]
 8003eb0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <xQueueGenericSendFromISR+0xbc>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d12f      	bne.n	8003f28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ede:	f000 fb7d 	bl	80045dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d112      	bne.n	8003f12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	3324      	adds	r3, #36	; 0x24
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f93d 	bl	8005178 <xTaskRemoveFromEventList>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e007      	b.n	8003f22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f16:	3301      	adds	r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	b25a      	sxtb	r2, r3
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f22:	2301      	movs	r3, #1
 8003f24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f26:	e001      	b.n	8003f2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f383 8811 	msr	BASEPRI, r3
}
 8003f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3740      	adds	r7, #64	; 0x40
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08e      	sub	sp, #56	; 0x38
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	623b      	str	r3, [r7, #32]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <xQueueGiveFromISR+0x48>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61fb      	str	r3, [r7, #28]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <xQueueGiveFromISR+0x58>
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <xQueueGiveFromISR+0x5c>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <xQueueGiveFromISR+0x5e>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xQueueGiveFromISR+0x78>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	61bb      	str	r3, [r7, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fba:	f002 f9d5 	bl	8006368 <vPortValidateInterruptPriority>
	__asm volatile
 8003fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	617a      	str	r2, [r7, #20]
 8003fd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003fd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d22b      	bcs.n	8004042 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ffc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d112      	bne.n	800402c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	3324      	adds	r3, #36	; 0x24
 8004012:	4618      	mov	r0, r3
 8004014:	f001 f8b0 	bl	8005178 <xTaskRemoveFromEventList>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00e      	beq.n	800403c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e007      	b.n	800403c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800402c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004030:	3301      	adds	r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	b25a      	sxtb	r2, r3
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800403c:	2301      	movs	r3, #1
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
 8004040:	e001      	b.n	8004046 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004042:	2300      	movs	r3, #0
 8004044:	637b      	str	r3, [r7, #52]	; 0x34
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f383 8811 	msr	BASEPRI, r3
}
 8004050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004054:	4618      	mov	r0, r3
 8004056:	3738      	adds	r7, #56	; 0x38
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	; 0x30
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <xQueueReceive+0x30>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	623b      	str	r3, [r7, #32]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <xQueueReceive+0x3e>
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <xQueueReceive+0x42>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <xQueueReceive+0x44>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xQueueReceive+0x5e>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	61fb      	str	r3, [r7, #28]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ba:	f001 fa1b 	bl	80054f4 <xTaskGetSchedulerState>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <xQueueReceive+0x6e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <xQueueReceive+0x72>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <xQueueReceive+0x74>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <xQueueReceive+0x8e>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	61bb      	str	r3, [r7, #24]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ea:	f002 f85b 	bl	80061a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01f      	beq.n	800413a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040fe:	f000 fad7 	bl	80046b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00f      	beq.n	8004132 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	3310      	adds	r3, #16
 8004116:	4618      	mov	r0, r3
 8004118:	f001 f82e 	bl	8005178 <xTaskRemoveFromEventList>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004122:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <xQueueReceive+0x1bc>)
 8004124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004132:	f002 f867 	bl	8006204 <vPortExitCritical>
				return pdPASS;
 8004136:	2301      	movs	r3, #1
 8004138:	e069      	b.n	800420e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004140:	f002 f860 	bl	8006204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004144:	2300      	movs	r3, #0
 8004146:	e062      	b.n	800420e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800414e:	f107 0310 	add.w	r3, r7, #16
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f874 	bl	8005240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800415c:	f002 f852 	bl	8006204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004160:	f000 fde6 	bl	8004d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004164:	f002 f81e 	bl	80061a4 <vPortEnterCritical>
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800416e:	b25b      	sxtb	r3, r3
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d103      	bne.n	800417e <xQueueReceive+0x122>
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004184:	b25b      	sxtb	r3, r3
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d103      	bne.n	8004194 <xQueueReceive+0x138>
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004194:	f002 f836 	bl	8006204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004198:	1d3a      	adds	r2, r7, #4
 800419a:	f107 0310 	add.w	r3, r7, #16
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 f863 	bl	800526c <xTaskCheckForTimeOut>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d123      	bne.n	80041f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ae:	f000 faf7 	bl	80047a0 <prvIsQueueEmpty>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d017      	beq.n	80041e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	3324      	adds	r3, #36	; 0x24
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 ff89 	bl	80050d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c8:	f000 fa98 	bl	80046fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041cc:	f000 fdbe 	bl	8004d4c <xTaskResumeAll>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d189      	bne.n	80040ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <xQueueReceive+0x1bc>)
 80041d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	e780      	b.n	80040ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ea:	f000 fa87 	bl	80046fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041ee:	f000 fdad 	bl	8004d4c <xTaskResumeAll>
 80041f2:	e77a      	b.n	80040ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f6:	f000 fa81 	bl	80046fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041fa:	f000 fda7 	bl	8004d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004200:	f000 face 	bl	80047a0 <prvIsQueueEmpty>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	f43f af6f 	beq.w	80040ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800420c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800420e:	4618      	mov	r0, r3
 8004210:	3730      	adds	r7, #48	; 0x30
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08e      	sub	sp, #56	; 0x38
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	61fb      	str	r3, [r7, #28]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800426c:	f001 f942 	bl	80054f4 <xTaskGetSchedulerState>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <xQueueSemaphoreTake+0x60>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <xQueueSemaphoreTake+0x64>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <xQueueSemaphoreTake+0x66>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	61bb      	str	r3, [r7, #24]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800429c:	f001 ff82 	bl	80061a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d024      	beq.n	80042f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042bc:	f001 fa90 	bl	80057e0 <pvTaskIncrementMutexHeldCount>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00f      	beq.n	80042ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	3310      	adds	r3, #16
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 ff50 	bl	8005178 <xTaskRemoveFromEventList>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042de:	4b54      	ldr	r3, [pc, #336]	; (8004430 <xQueueSemaphoreTake+0x214>)
 80042e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042ee:	f001 ff89 	bl	8006204 <vPortExitCritical>
				return pdPASS;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e097      	b.n	8004426 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	617b      	str	r3, [r7, #20]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004318:	f001 ff74 	bl	8006204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800431c:	2300      	movs	r3, #0
 800431e:	e082      	b.n	8004426 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004326:	f107 030c 	add.w	r3, r7, #12
 800432a:	4618      	mov	r0, r3
 800432c:	f000 ff88 	bl	8005240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004330:	2301      	movs	r3, #1
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004334:	f001 ff66 	bl	8006204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004338:	f000 fcfa 	bl	8004d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800433c:	f001 ff32 	bl	80061a4 <vPortEnterCritical>
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004346:	b25b      	sxtb	r3, r3
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d103      	bne.n	8004356 <xQueueSemaphoreTake+0x13a>
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800435c:	b25b      	sxtb	r3, r3
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d103      	bne.n	800436c <xQueueSemaphoreTake+0x150>
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800436c:	f001 ff4a 	bl	8006204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004370:	463a      	mov	r2, r7
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 ff77 	bl	800526c <xTaskCheckForTimeOut>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d132      	bne.n	80043ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004386:	f000 fa0b 	bl	80047a0 <prvIsQueueEmpty>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d026      	beq.n	80043de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004398:	f001 ff04 	bl	80061a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 f8c5 	bl	8005530 <xTaskPriorityInherit>
 80043a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80043a8:	f001 ff2c 	bl	8006204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fe8f 	bl	80050d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043bc:	f000 f99e 	bl	80046fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043c0:	f000 fcc4 	bl	8004d4c <xTaskResumeAll>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f47f af68 	bne.w	800429c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <xQueueSemaphoreTake+0x214>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	e75e      	b.n	800429c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043e0:	f000 f98c 	bl	80046fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043e4:	f000 fcb2 	bl	8004d4c <xTaskResumeAll>
 80043e8:	e758      	b.n	800429c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043ec:	f000 f986 	bl	80046fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043f0:	f000 fcac 	bl	8004d4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043f6:	f000 f9d3 	bl	80047a0 <prvIsQueueEmpty>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f43f af4d 	beq.w	800429c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004408:	f001 fecc 	bl	80061a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800440c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800440e:	f000 f8cd 	bl	80045ac <prvGetDisinheritPriorityAfterTimeout>
 8004412:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800441a:	4618      	mov	r0, r3
 800441c:	f001 f95e 	bl	80056dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004420:	f001 fef0 	bl	8006204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004426:	4618      	mov	r0, r3
 8004428:	3738      	adds	r7, #56	; 0x38
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08e      	sub	sp, #56	; 0x38
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	623b      	str	r3, [r7, #32]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <xQueueReceiveFromISR+0x3a>
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <xQueueReceiveFromISR+0x3e>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <xQueueReceiveFromISR+0x40>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	61fb      	str	r3, [r7, #28]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800448e:	f001 ff6b 	bl	8006368 <vPortValidateInterruptPriority>
	__asm volatile
 8004492:	f3ef 8211 	mrs	r2, BASEPRI
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	61ba      	str	r2, [r7, #24]
 80044a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80044aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02f      	beq.n	800451a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c8:	f000 f8f2 	bl	80046b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	1e5a      	subs	r2, r3, #1
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d112      	bne.n	8004504 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	3310      	adds	r3, #16
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fe44 	bl	8005178 <xTaskRemoveFromEventList>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00e      	beq.n	8004514 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e007      	b.n	8004514 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004508:	3301      	adds	r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	b25a      	sxtb	r2, r3
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004514:	2301      	movs	r3, #1
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
 8004518:	e001      	b.n	800451e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800451a:	2300      	movs	r3, #0
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f383 8811 	msr	BASEPRI, r3
}
 8004528:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800452c:	4618      	mov	r0, r3
 800452e:	3738      	adds	r7, #56	; 0x38
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60bb      	str	r3, [r7, #8]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004558:	f001 fe24 	bl	80061a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004562:	f001 fe4f 	bl	8006204 <vPortExitCritical>

	return uxReturn;
 8004566:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60fb      	str	r3, [r7, #12]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800459e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80045a0:	4618      	mov	r0, r3
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d006      	beq.n	80045ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e001      	b.n	80045ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80045ce:	68fb      	ldr	r3, [r7, #12]
	}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d14d      	bne.n	800469e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fffa 	bl	8005600 <xTaskPriorityDisinherit>
 800460c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	e043      	b.n	800469e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d119      	bne.n	8004650 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6858      	ldr	r0, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	461a      	mov	r2, r3
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	f002 f90c 	bl	8006844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	441a      	add	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	429a      	cmp	r2, r3
 8004644:	d32b      	bcc.n	800469e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	e026      	b.n	800469e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68d8      	ldr	r0, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	461a      	mov	r2, r3
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	f002 f8f2 	bl	8006844 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	425b      	negs	r3, r3
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d207      	bcs.n	800468c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	425b      	negs	r3, r3
 8004686:	441a      	add	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d105      	bne.n	800469e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3b01      	subs	r3, #1
 800469c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046a6:	697b      	ldr	r3, [r7, #20]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	441a      	add	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d303      	bcc.n	80046e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68d9      	ldr	r1, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	461a      	mov	r2, r3
 80046ee:	6838      	ldr	r0, [r7, #0]
 80046f0:	f002 f8a8 	bl	8006844 <memcpy>
	}
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004704:	f001 fd4e 	bl	80061a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004710:	e011      	b.n	8004736 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d012      	beq.n	8004740 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3324      	adds	r3, #36	; 0x24
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fd2a 	bl	8005178 <xTaskRemoveFromEventList>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800472a:	f000 fe01 	bl	8005330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	3b01      	subs	r3, #1
 8004732:	b2db      	uxtb	r3, r3
 8004734:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	dce9      	bgt.n	8004712 <prvUnlockQueue+0x16>
 800473e:	e000      	b.n	8004742 <prvUnlockQueue+0x46>
					break;
 8004740:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	22ff      	movs	r2, #255	; 0xff
 8004746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800474a:	f001 fd5b 	bl	8006204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800474e:	f001 fd29 	bl	80061a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004758:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800475a:	e011      	b.n	8004780 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d012      	beq.n	800478a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3310      	adds	r3, #16
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fd05 	bl	8005178 <xTaskRemoveFromEventList>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004774:	f000 fddc 	bl	8005330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004778:	7bbb      	ldrb	r3, [r7, #14]
 800477a:	3b01      	subs	r3, #1
 800477c:	b2db      	uxtb	r3, r3
 800477e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004784:	2b00      	cmp	r3, #0
 8004786:	dce9      	bgt.n	800475c <prvUnlockQueue+0x60>
 8004788:	e000      	b.n	800478c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800478a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	22ff      	movs	r2, #255	; 0xff
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004794:	f001 fd36 	bl	8006204 <vPortExitCritical>
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047a8:	f001 fcfc 	bl	80061a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e001      	b.n	80047be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047be:	f001 fd21 	bl	8006204 <vPortExitCritical>

	return xReturn;
 80047c2:	68fb      	ldr	r3, [r7, #12]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047d4:	f001 fce6 	bl	80061a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d102      	bne.n	80047ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047e4:	2301      	movs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e001      	b.n	80047ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047ee:	f001 fd09 	bl	8006204 <vPortExitCritical>

	return xReturn;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e014      	b.n	8004836 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800480c:	4a0f      	ldr	r2, [pc, #60]	; (800484c <vQueueAddToRegistry+0x50>)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004818:	490c      	ldr	r1, [pc, #48]	; (800484c <vQueueAddToRegistry+0x50>)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <vQueueAddToRegistry+0x50>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800482e:	e006      	b.n	800483e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3301      	adds	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b07      	cmp	r3, #7
 800483a:	d9e7      	bls.n	800480c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20004a9c 	.word	0x20004a9c

08004850 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004860:	f001 fca0 	bl	80061a4 <vPortEnterCritical>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800486a:	b25b      	sxtb	r3, r3
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d103      	bne.n	800487a <vQueueWaitForMessageRestricted+0x2a>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004880:	b25b      	sxtb	r3, r3
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d103      	bne.n	8004890 <vQueueWaitForMessageRestricted+0x40>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004890:	f001 fcb8 	bl	8006204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	3324      	adds	r3, #36	; 0x24
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fc3b 	bl	8005120 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7ff ff26 	bl	80046fc <prvUnlockQueue>
	}
 80048b0:	bf00      	nop
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08e      	sub	sp, #56	; 0x38
 80048bc:	af04      	add	r7, sp, #16
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	623b      	str	r3, [r7, #32]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xTaskCreateStatic+0x46>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	61fb      	str	r3, [r7, #28]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048fe:	236c      	movs	r3, #108	; 0x6c
 8004900:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b6c      	cmp	r3, #108	; 0x6c
 8004906:	d00a      	beq.n	800491e <xTaskCreateStatic+0x66>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	61bb      	str	r3, [r7, #24]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800491e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01e      	beq.n	8004964 <xTaskCreateStatic+0xac>
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004934:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800493e:	2300      	movs	r3, #0
 8004940:	9303      	str	r3, [sp, #12]
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	9302      	str	r3, [sp, #8]
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f850 	bl	80049fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800495c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800495e:	f000 f8dd 	bl	8004b1c <prvAddNewTaskToReadyList>
 8004962:	e001      	b.n	8004968 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004968:	697b      	ldr	r3, [r7, #20]
	}
 800496a:	4618      	mov	r0, r3
 800496c:	3728      	adds	r7, #40	; 0x28
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004972:	b580      	push	{r7, lr}
 8004974:	b08c      	sub	sp, #48	; 0x30
 8004976:	af04      	add	r7, sp, #16
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fd2e 	bl	80063e8 <pvPortMalloc>
 800498c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004994:	206c      	movs	r0, #108	; 0x6c
 8004996:	f001 fd27 	bl	80063e8 <pvPortMalloc>
 800499a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
 80049a8:	e005      	b.n	80049b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049aa:	6978      	ldr	r0, [r7, #20]
 80049ac:	f001 fde8 	bl	8006580 <vPortFree>
 80049b0:	e001      	b.n	80049b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	2300      	movs	r3, #0
 80049c8:	9303      	str	r3, [sp, #12]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	9302      	str	r3, [sp, #8]
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f80e 	bl	80049fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049e0:	69f8      	ldr	r0, [r7, #28]
 80049e2:	f000 f89b 	bl	8004b1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e002      	b.n	80049f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049f2:	69bb      	ldr	r3, [r7, #24]
	}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	461a      	mov	r2, r3
 8004a14:	21a5      	movs	r1, #165	; 0xa5
 8004a16:	f001 ff23 	bl	8006860 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a24:	3b01      	subs	r3, #1
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	617b      	str	r3, [r7, #20]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d01f      	beq.n	8004a9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	e012      	b.n	8004a86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	7819      	ldrb	r1, [r3, #0]
 8004a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3334      	adds	r3, #52	; 0x34
 8004a70:	460a      	mov	r2, r1
 8004a72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d006      	beq.n	8004a8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b1f      	cmp	r3, #31
 8004a8a:	d9e9      	bls.n	8004a60 <prvInitialiseNewTask+0x64>
 8004a8c:	e000      	b.n	8004a90 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004a98:	e003      	b.n	8004aa2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b37      	cmp	r3, #55	; 0x37
 8004aa6:	d901      	bls.n	8004aac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004aa8:	2337      	movs	r3, #55	; 0x37
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	2200      	movs	r2, #0
 8004abc:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe fe9c 	bl	8003800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	3318      	adds	r3, #24
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe fe97 	bl	8003800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	2200      	movs	r2, #0
 8004aec:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	69b8      	ldr	r0, [r7, #24]
 8004afc:	f001 fa26 	bl	8005f4c <pxPortInitialiseStack>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b12:	bf00      	nop
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b24:	f001 fb3e 	bl	80061a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b28:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <prvAddNewTaskToReadyList+0xc4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <prvAddNewTaskToReadyList+0xc4>)
 8004b30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b32:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b3a:	4a2a      	ldr	r2, [pc, #168]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b40:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <prvAddNewTaskToReadyList+0xc4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d110      	bne.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b48:	f000 fc16 	bl	8005378 <prvInitialiseTaskLists>
 8004b4c:	e00d      	b.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <prvAddNewTaskToReadyList+0xcc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d802      	bhi.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <prvAddNewTaskToReadyList+0xd0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <prvAddNewTaskToReadyList+0xd0>)
 8004b72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b74:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <prvAddNewTaskToReadyList+0xd0>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <prvAddNewTaskToReadyList+0xd4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d903      	bls.n	8004b90 <prvAddNewTaskToReadyList+0x74>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <prvAddNewTaskToReadyList+0xd4>)
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <prvAddNewTaskToReadyList+0xd8>)
 8004b9e:	441a      	add	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7fe fe37 	bl	800381a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bac:	f001 fb2a 	bl	8006204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bb0:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <prvAddNewTaskToReadyList+0xcc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00e      	beq.n	8004bd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d207      	bcs.n	8004bd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <prvAddNewTaskToReadyList+0xdc>)
 8004bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000c70 	.word	0x20000c70
 8004be4:	2000079c 	.word	0x2000079c
 8004be8:	20000c7c 	.word	0x20000c7c
 8004bec:	20000c8c 	.word	0x20000c8c
 8004bf0:	20000c78 	.word	0x20000c78
 8004bf4:	200007a0 	.word	0x200007a0
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d017      	beq.n	8004c3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <vTaskDelay+0x60>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <vTaskDelay+0x30>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60bb      	str	r3, [r7, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c2c:	f000 f880 	bl	8004d30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c30:	2100      	movs	r1, #0
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fde8 	bl	8005808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c38:	f000 f888 	bl	8004d4c <xTaskResumeAll>
 8004c3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <vTaskDelay+0x64>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000c98 	.word	0x20000c98
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c72:	463a      	mov	r2, r7
 8004c74:	1d39      	adds	r1, r7, #4
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fd6c 	bl	8003758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	9202      	str	r2, [sp, #8]
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	460a      	mov	r2, r1
 8004c92:	4921      	ldr	r1, [pc, #132]	; (8004d18 <vTaskStartScheduler+0xb4>)
 8004c94:	4821      	ldr	r0, [pc, #132]	; (8004d1c <vTaskStartScheduler+0xb8>)
 8004c96:	f7ff fe0f 	bl	80048b8 <xTaskCreateStatic>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <vTaskStartScheduler+0xbc>)
 8004c9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ca0:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <vTaskStartScheduler+0xbc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e001      	b.n	8004cb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d102      	bne.n	8004cbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cb8:	f000 fdfa 	bl	80058b0 <xTimerCreateTimerTask>
 8004cbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d116      	bne.n	8004cf2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	613b      	str	r3, [r7, #16]
}
 8004cd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <vTaskStartScheduler+0xc0>)
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ce0:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <vTaskStartScheduler+0xc4>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <vTaskStartScheduler+0xc8>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cec:	f001 f9b8 	bl	8006060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cf0:	e00e      	b.n	8004d10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d10a      	bne.n	8004d10 <vTaskStartScheduler+0xac>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60fb      	str	r3, [r7, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <vTaskStartScheduler+0xaa>
}
 8004d10:	bf00      	nop
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	08006bac 	.word	0x08006bac
 8004d1c:	08005349 	.word	0x08005349
 8004d20:	20000c94 	.word	0x20000c94
 8004d24:	20000c90 	.word	0x20000c90
 8004d28:	20000c7c 	.word	0x20000c7c
 8004d2c:	20000c74 	.word	0x20000c74

08004d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <vTaskSuspendAll+0x18>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	4a03      	ldr	r2, [pc, #12]	; (8004d48 <vTaskSuspendAll+0x18>)
 8004d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	20000c98 	.word	0x20000c98

08004d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d5a:	4b42      	ldr	r3, [pc, #264]	; (8004e64 <xTaskResumeAll+0x118>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	603b      	str	r3, [r7, #0]
}
 8004d74:	bf00      	nop
 8004d76:	e7fe      	b.n	8004d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d78:	f001 fa14 	bl	80061a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <xTaskResumeAll+0x118>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <xTaskResumeAll+0x118>)
 8004d84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d86:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <xTaskResumeAll+0x118>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d162      	bne.n	8004e54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d8e:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <xTaskResumeAll+0x11c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d05e      	beq.n	8004e54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d96:	e02f      	b.n	8004df8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d98:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <xTaskResumeAll+0x120>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3318      	adds	r3, #24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe fd95 	bl	80038d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fd90 	bl	80038d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <xTaskResumeAll+0x124>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d903      	bls.n	8004dc8 <xTaskResumeAll+0x7c>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <xTaskResumeAll+0x124>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a27      	ldr	r2, [pc, #156]	; (8004e74 <xTaskResumeAll+0x128>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7fe fd1b 	bl	800381a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <xTaskResumeAll+0x12c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004df2:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <xTaskResumeAll+0x130>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <xTaskResumeAll+0x120>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1cb      	bne.n	8004d98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e06:	f000 fb55 	bl	80054b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <xTaskResumeAll+0x134>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e16:	f000 f847 	bl	8004ea8 <xTaskIncrementTick>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <xTaskResumeAll+0x130>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f1      	bne.n	8004e16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <xTaskResumeAll+0x134>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <xTaskResumeAll+0x130>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e44:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <xTaskResumeAll+0x138>)
 8004e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e54:	f001 f9d6 	bl	8006204 <vPortExitCritical>

	return xAlreadyYielded;
 8004e58:	68bb      	ldr	r3, [r7, #8]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000c98 	.word	0x20000c98
 8004e68:	20000c70 	.word	0x20000c70
 8004e6c:	20000c30 	.word	0x20000c30
 8004e70:	20000c78 	.word	0x20000c78
 8004e74:	200007a0 	.word	0x200007a0
 8004e78:	2000079c 	.word	0x2000079c
 8004e7c:	20000c84 	.word	0x20000c84
 8004e80:	20000c80 	.word	0x20000c80
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <xTaskGetTickCount+0x1c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e94:	687b      	ldr	r3, [r7, #4]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000c74 	.word	0x20000c74

08004ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb2:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <xTaskIncrementTick+0x148>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 808f 	bne.w	8004fda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ebc:	4b4d      	ldr	r3, [pc, #308]	; (8004ff4 <xTaskIncrementTick+0x14c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ec4:	4a4b      	ldr	r2, [pc, #300]	; (8004ff4 <xTaskIncrementTick+0x14c>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d120      	bne.n	8004f12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ed0:	4b49      	ldr	r3, [pc, #292]	; (8004ff8 <xTaskIncrementTick+0x150>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	603b      	str	r3, [r7, #0]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xTaskIncrementTick+0x46>
 8004ef0:	4b41      	ldr	r3, [pc, #260]	; (8004ff8 <xTaskIncrementTick+0x150>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	4b41      	ldr	r3, [pc, #260]	; (8004ffc <xTaskIncrementTick+0x154>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a3f      	ldr	r2, [pc, #252]	; (8004ff8 <xTaskIncrementTick+0x150>)
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4a3f      	ldr	r2, [pc, #252]	; (8004ffc <xTaskIncrementTick+0x154>)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <xTaskIncrementTick+0x158>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <xTaskIncrementTick+0x158>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	f000 fad1 	bl	80054b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f12:	4b3c      	ldr	r3, [pc, #240]	; (8005004 <xTaskIncrementTick+0x15c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d349      	bcc.n	8004fb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1c:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <xTaskIncrementTick+0x150>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f26:	4b37      	ldr	r3, [pc, #220]	; (8005004 <xTaskIncrementTick+0x15c>)
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	601a      	str	r2, [r3, #0]
					break;
 8004f2e:	e03f      	b.n	8004fb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f30:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <xTaskIncrementTick+0x150>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d203      	bcs.n	8004f50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f48:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <xTaskIncrementTick+0x15c>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f4e:	e02f      	b.n	8004fb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fcbd 	bl	80038d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3318      	adds	r3, #24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fcb4 	bl	80038d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	4b25      	ldr	r3, [pc, #148]	; (8005008 <xTaskIncrementTick+0x160>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d903      	bls.n	8004f80 <xTaskIncrementTick+0xd8>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a22      	ldr	r2, [pc, #136]	; (8005008 <xTaskIncrementTick+0x160>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	; (800500c <xTaskIncrementTick+0x164>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe fc3f 	bl	800381a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <xTaskIncrementTick+0x168>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d3b8      	bcc.n	8004f1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fae:	e7b5      	b.n	8004f1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <xTaskIncrementTick+0x168>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4915      	ldr	r1, [pc, #84]	; (800500c <xTaskIncrementTick+0x164>)
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d901      	bls.n	8004fcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fcc:	4b11      	ldr	r3, [pc, #68]	; (8005014 <xTaskIncrementTick+0x16c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e004      	b.n	8004fe4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <xTaskIncrementTick+0x170>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4a0d      	ldr	r2, [pc, #52]	; (8005018 <xTaskIncrementTick+0x170>)
 8004fe2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fe4:	697b      	ldr	r3, [r7, #20]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000c98 	.word	0x20000c98
 8004ff4:	20000c74 	.word	0x20000c74
 8004ff8:	20000c28 	.word	0x20000c28
 8004ffc:	20000c2c 	.word	0x20000c2c
 8005000:	20000c88 	.word	0x20000c88
 8005004:	20000c90 	.word	0x20000c90
 8005008:	20000c78 	.word	0x20000c78
 800500c:	200007a0 	.word	0x200007a0
 8005010:	2000079c 	.word	0x2000079c
 8005014:	20000c84 	.word	0x20000c84
 8005018:	20000c80 	.word	0x20000c80

0800501c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005022:	4b28      	ldr	r3, [pc, #160]	; (80050c4 <vTaskSwitchContext+0xa8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800502a:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <vTaskSwitchContext+0xac>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005030:	e041      	b.n	80050b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005032:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <vTaskSwitchContext+0xac>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <vTaskSwitchContext+0xb0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e010      	b.n	8005062 <vTaskSwitchContext+0x46>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <vTaskSwitchContext+0x40>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	607b      	str	r3, [r7, #4]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <vTaskSwitchContext+0x3e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b01      	subs	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	491b      	ldr	r1, [pc, #108]	; (80050d0 <vTaskSwitchContext+0xb4>)
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0e4      	beq.n	8005040 <vTaskSwitchContext+0x24>
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <vTaskSwitchContext+0xb4>)
 8005082:	4413      	add	r3, r2
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	3308      	adds	r3, #8
 8005098:	429a      	cmp	r2, r3
 800509a:	d104      	bne.n	80050a6 <vTaskSwitchContext+0x8a>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <vTaskSwitchContext+0xb8>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4a06      	ldr	r2, [pc, #24]	; (80050cc <vTaskSwitchContext+0xb0>)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000c98 	.word	0x20000c98
 80050c8:	20000c84 	.word	0x20000c84
 80050cc:	20000c78 	.word	0x20000c78
 80050d0:	200007a0 	.word	0x200007a0
 80050d4:	2000079c 	.word	0x2000079c

080050d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	60fb      	str	r3, [r7, #12]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <vTaskPlaceOnEventList+0x44>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3318      	adds	r3, #24
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fe fbab 	bl	8003862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800510c:	2101      	movs	r1, #1
 800510e:	6838      	ldr	r0, [r7, #0]
 8005110:	f000 fb7a 	bl	8005808 <prvAddCurrentTaskToDelayedList>
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	2000079c 	.word	0x2000079c

08005120 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	617b      	str	r3, [r7, #20]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <vTaskPlaceOnEventListRestricted+0x54>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3318      	adds	r3, #24
 800514e:	4619      	mov	r1, r3
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7fe fb62 	bl	800381a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295
 8005160:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	68b8      	ldr	r0, [r7, #8]
 8005166:	f000 fb4f 	bl	8005808 <prvAddCurrentTaskToDelayedList>
	}
 800516a:	bf00      	nop
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	2000079c 	.word	0x2000079c

08005178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	60fb      	str	r3, [r7, #12]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3318      	adds	r3, #24
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fe fb93 	bl	80038d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ae:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <xTaskRemoveFromEventList+0xb0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d11d      	bne.n	80051f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fb8a 	bl	80038d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c4:	4b19      	ldr	r3, [pc, #100]	; (800522c <xTaskRemoveFromEventList+0xb4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d903      	bls.n	80051d4 <xTaskRemoveFromEventList+0x5c>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4a16      	ldr	r2, [pc, #88]	; (800522c <xTaskRemoveFromEventList+0xb4>)
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <xTaskRemoveFromEventList+0xb8>)
 80051e2:	441a      	add	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f7fe fb15 	bl	800381a <vListInsertEnd>
 80051f0:	e005      	b.n	80051fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3318      	adds	r3, #24
 80051f6:	4619      	mov	r1, r3
 80051f8:	480e      	ldr	r0, [pc, #56]	; (8005234 <xTaskRemoveFromEventList+0xbc>)
 80051fa:	f7fe fb0e 	bl	800381a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <xTaskRemoveFromEventList+0xc0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	429a      	cmp	r2, r3
 800520a:	d905      	bls.n	8005218 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <xTaskRemoveFromEventList+0xc4>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e001      	b.n	800521c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800521c:	697b      	ldr	r3, [r7, #20]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000c98 	.word	0x20000c98
 800522c:	20000c78 	.word	0x20000c78
 8005230:	200007a0 	.word	0x200007a0
 8005234:	20000c30 	.word	0x20000c30
 8005238:	2000079c 	.word	0x2000079c
 800523c:	20000c84 	.word	0x20000c84

08005240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <vTaskInternalSetTimeOutState+0x24>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <vTaskInternalSetTimeOutState+0x28>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	605a      	str	r2, [r3, #4]
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	20000c88 	.word	0x20000c88
 8005268:	20000c74 	.word	0x20000c74

0800526c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	613b      	str	r3, [r7, #16]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60fb      	str	r3, [r7, #12]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80052ae:	f000 ff79 	bl	80061a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052b2:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <xTaskCheckForTimeOut+0xbc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d102      	bne.n	80052d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	e023      	b.n	800531a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <xTaskCheckForTimeOut+0xc0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d007      	beq.n	80052ee <xTaskCheckForTimeOut+0x82>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d302      	bcc.n	80052ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e015      	b.n	800531a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d20b      	bcs.n	8005310 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff9b 	bl	8005240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e004      	b.n	800531a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005316:	2301      	movs	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800531a:	f000 ff73 	bl	8006204 <vPortExitCritical>

	return xReturn;
 800531e:	69fb      	ldr	r3, [r7, #28]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000c74 	.word	0x20000c74
 800532c:	20000c88 	.word	0x20000c88

08005330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <vTaskMissedYield+0x14>)
 8005336:	2201      	movs	r2, #1
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	20000c84 	.word	0x20000c84

08005348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005350:	f000 f852 	bl	80053f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <prvIdleTask+0x28>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d9f9      	bls.n	8005350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <prvIdleTask+0x2c>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800536c:	e7f0      	b.n	8005350 <prvIdleTask+0x8>
 800536e:	bf00      	nop
 8005370:	200007a0 	.word	0x200007a0
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	e00c      	b.n	800539e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <prvInitialiseTaskLists+0x60>)
 8005390:	4413      	add	r3, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe fa14 	bl	80037c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3301      	adds	r3, #1
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b37      	cmp	r3, #55	; 0x37
 80053a2:	d9ef      	bls.n	8005384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053a4:	480d      	ldr	r0, [pc, #52]	; (80053dc <prvInitialiseTaskLists+0x64>)
 80053a6:	f7fe fa0b 	bl	80037c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053aa:	480d      	ldr	r0, [pc, #52]	; (80053e0 <prvInitialiseTaskLists+0x68>)
 80053ac:	f7fe fa08 	bl	80037c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053b0:	480c      	ldr	r0, [pc, #48]	; (80053e4 <prvInitialiseTaskLists+0x6c>)
 80053b2:	f7fe fa05 	bl	80037c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053b6:	480c      	ldr	r0, [pc, #48]	; (80053e8 <prvInitialiseTaskLists+0x70>)
 80053b8:	f7fe fa02 	bl	80037c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053bc:	480b      	ldr	r0, [pc, #44]	; (80053ec <prvInitialiseTaskLists+0x74>)
 80053be:	f7fe f9ff 	bl	80037c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <prvInitialiseTaskLists+0x78>)
 80053c4:	4a05      	ldr	r2, [pc, #20]	; (80053dc <prvInitialiseTaskLists+0x64>)
 80053c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <prvInitialiseTaskLists+0x7c>)
 80053ca:	4a05      	ldr	r2, [pc, #20]	; (80053e0 <prvInitialiseTaskLists+0x68>)
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200007a0 	.word	0x200007a0
 80053dc:	20000c00 	.word	0x20000c00
 80053e0:	20000c14 	.word	0x20000c14
 80053e4:	20000c30 	.word	0x20000c30
 80053e8:	20000c44 	.word	0x20000c44
 80053ec:	20000c5c 	.word	0x20000c5c
 80053f0:	20000c28 	.word	0x20000c28
 80053f4:	20000c2c 	.word	0x20000c2c

080053f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053fe:	e019      	b.n	8005434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005400:	f000 fed0 	bl	80061a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <prvCheckTasksWaitingTermination+0x50>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fa5f 	bl	80038d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <prvCheckTasksWaitingTermination+0x54>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a0b      	ldr	r2, [pc, #44]	; (800544c <prvCheckTasksWaitingTermination+0x54>)
 800541e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3b01      	subs	r3, #1
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800542a:	f000 feeb 	bl	8006204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f810 	bl	8005454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e1      	bne.n	8005400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000c44 	.word	0x20000c44
 800544c:	20000c70 	.word	0x20000c70
 8005450:	20000c58 	.word	0x20000c58

08005454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005462:	2b00      	cmp	r3, #0
 8005464:	d108      	bne.n	8005478 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	4618      	mov	r0, r3
 800546c:	f001 f888 	bl	8006580 <vPortFree>
				vPortFree( pxTCB );
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 f885 	bl	8006580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005476:	e018      	b.n	80054aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800547e:	2b01      	cmp	r3, #1
 8005480:	d103      	bne.n	800548a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 f87c 	bl	8006580 <vPortFree>
	}
 8005488:	e00f      	b.n	80054aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005490:	2b02      	cmp	r3, #2
 8005492:	d00a      	beq.n	80054aa <prvDeleteTCB+0x56>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60fb      	str	r3, [r7, #12]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <prvDeleteTCB+0x54>
	}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <prvResetNextTaskUnblockTime+0x38>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <prvResetNextTaskUnblockTime+0x3c>)
 80054c6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054cc:	e008      	b.n	80054e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ce:	4b07      	ldr	r3, [pc, #28]	; (80054ec <prvResetNextTaskUnblockTime+0x38>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <prvResetNextTaskUnblockTime+0x3c>)
 80054de:	6013      	str	r3, [r2, #0]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	20000c28 	.word	0x20000c28
 80054f0:	20000c90 	.word	0x20000c90

080054f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <xTaskGetSchedulerState+0x34>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005502:	2301      	movs	r3, #1
 8005504:	607b      	str	r3, [r7, #4]
 8005506:	e008      	b.n	800551a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005508:	4b08      	ldr	r3, [pc, #32]	; (800552c <xTaskGetSchedulerState+0x38>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005510:	2302      	movs	r3, #2
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	e001      	b.n	800551a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005516:	2300      	movs	r3, #0
 8005518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800551a:	687b      	ldr	r3, [r7, #4]
	}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000c7c 	.word	0x20000c7c
 800552c:	20000c98 	.word	0x20000c98

08005530 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d051      	beq.n	80055ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554a:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <xTaskPriorityInherit+0xc4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	429a      	cmp	r2, r3
 8005552:	d241      	bcs.n	80055d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	db06      	blt.n	800556a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <xTaskPriorityInherit+0xc4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6959      	ldr	r1, [r3, #20]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <xTaskPriorityInherit+0xc8>)
 800557c:	4413      	add	r3, r2
 800557e:	4299      	cmp	r1, r3
 8005580:	d122      	bne.n	80055c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	3304      	adds	r3, #4
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe f9a4 	bl	80038d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800558c:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <xTaskPriorityInherit+0xc4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4b18      	ldr	r3, [pc, #96]	; (80055fc <xTaskPriorityInherit+0xcc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d903      	bls.n	80055aa <xTaskPriorityInherit+0x7a>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <xTaskPriorityInherit+0xcc>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <xTaskPriorityInherit+0xc8>)
 80055b8:	441a      	add	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7fe f92a 	bl	800381a <vListInsertEnd>
 80055c6:	e004      	b.n	80055d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <xTaskPriorityInherit+0xc4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e008      	b.n	80055ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <xTaskPriorityInherit+0xc4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d201      	bcs.n	80055ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055ea:	68fb      	ldr	r3, [r7, #12]
	}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	2000079c 	.word	0x2000079c
 80055f8:	200007a0 	.word	0x200007a0
 80055fc:	20000c78 	.word	0x20000c78

08005600 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d056      	beq.n	80056c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005616:	4b2e      	ldr	r3, [pc, #184]	; (80056d0 <xTaskPriorityDisinherit+0xd0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	429a      	cmp	r2, r3
 800561e:	d00a      	beq.n	8005636 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	60bb      	str	r3, [r7, #8]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	429a      	cmp	r2, r3
 8005668:	d02c      	beq.n	80056c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566e:	2b00      	cmp	r3, #0
 8005670:	d128      	bne.n	80056c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3304      	adds	r3, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe f92c 	bl	80038d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <xTaskPriorityDisinherit+0xd4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d903      	bls.n	80056a4 <xTaskPriorityDisinherit+0xa4>
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <xTaskPriorityDisinherit+0xd4>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <xTaskPriorityDisinherit+0xd8>)
 80056b2:	441a      	add	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f7fe f8ad 	bl	800381a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056c4:	697b      	ldr	r3, [r7, #20]
	}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	2000079c 	.word	0x2000079c
 80056d4:	20000c78 	.word	0x20000c78
 80056d8:	200007a0 	.word	0x200007a0

080056dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80056ea:	2301      	movs	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d06a      	beq.n	80057ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
}
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d902      	bls.n	8005722 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e002      	b.n	8005728 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	429a      	cmp	r2, r3
 8005730:	d04b      	beq.n	80057ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	429a      	cmp	r2, r3
 800573a:	d146      	bne.n	80057ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	429a      	cmp	r2, r3
 8005744:	d10a      	bne.n	800575c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60bb      	str	r3, [r7, #8]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db04      	blt.n	800577a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	6959      	ldr	r1, [r3, #20]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800578a:	4413      	add	r3, r2
 800578c:	4299      	cmp	r1, r3
 800578e:	d11c      	bne.n	80057ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	3304      	adds	r3, #4
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe f89d 	bl	80038d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d903      	bls.n	80057ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80057bc:	441a      	add	r2, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f7fe f828 	bl	800381a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057ca:	bf00      	nop
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	2000079c 	.word	0x2000079c
 80057d8:	200007a0 	.word	0x200007a0
 80057dc:	20000c78 	.word	0x20000c78

080057e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80057e4:	4b07      	ldr	r3, [pc, #28]	; (8005804 <pvTaskIncrementMutexHeldCount+0x24>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <pvTaskIncrementMutexHeldCount+0x24>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057f2:	3201      	adds	r2, #1
 80057f4:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80057f6:	4b03      	ldr	r3, [pc, #12]	; (8005804 <pvTaskIncrementMutexHeldCount+0x24>)
 80057f8:	681b      	ldr	r3, [r3, #0]
	}
 80057fa:	4618      	mov	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	2000079c 	.word	0x2000079c

08005808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005812:	4b21      	ldr	r3, [pc, #132]	; (8005898 <prvAddCurrentTaskToDelayedList+0x90>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <prvAddCurrentTaskToDelayedList+0x94>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3304      	adds	r3, #4
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe f858 	bl	80038d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582a:	d10a      	bne.n	8005842 <prvAddCurrentTaskToDelayedList+0x3a>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005832:	4b1a      	ldr	r3, [pc, #104]	; (800589c <prvAddCurrentTaskToDelayedList+0x94>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4819      	ldr	r0, [pc, #100]	; (80058a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800583c:	f7fd ffed 	bl	800381a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005840:	e026      	b.n	8005890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4413      	add	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800584a:	4b14      	ldr	r3, [pc, #80]	; (800589c <prvAddCurrentTaskToDelayedList+0x94>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	429a      	cmp	r2, r3
 8005858:	d209      	bcs.n	800586e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b0f      	ldr	r3, [pc, #60]	; (800589c <prvAddCurrentTaskToDelayedList+0x94>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7fd fffb 	bl	8003862 <vListInsert>
}
 800586c:	e010      	b.n	8005890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800586e:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <prvAddCurrentTaskToDelayedList+0x94>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3304      	adds	r3, #4
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f7fd fff1 	bl	8003862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d202      	bcs.n	8005890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800588a:	4a08      	ldr	r2, [pc, #32]	; (80058ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6013      	str	r3, [r2, #0]
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000c74 	.word	0x20000c74
 800589c:	2000079c 	.word	0x2000079c
 80058a0:	20000c5c 	.word	0x20000c5c
 80058a4:	20000c2c 	.word	0x20000c2c
 80058a8:	20000c28 	.word	0x20000c28
 80058ac:	20000c90 	.word	0x20000c90

080058b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058ba:	f000 fb07 	bl	8005ecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058be:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <xTimerCreateTimerTask+0x80>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d021      	beq.n	800590a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058ce:	1d3a      	adds	r2, r7, #4
 80058d0:	f107 0108 	add.w	r1, r7, #8
 80058d4:	f107 030c 	add.w	r3, r7, #12
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fd ff57 	bl	800378c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	9202      	str	r2, [sp, #8]
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	2302      	movs	r3, #2
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	2300      	movs	r3, #0
 80058ee:	460a      	mov	r2, r1
 80058f0:	4910      	ldr	r1, [pc, #64]	; (8005934 <xTimerCreateTimerTask+0x84>)
 80058f2:	4811      	ldr	r0, [pc, #68]	; (8005938 <xTimerCreateTimerTask+0x88>)
 80058f4:	f7fe ffe0 	bl	80048b8 <xTaskCreateStatic>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4a10      	ldr	r2, [pc, #64]	; (800593c <xTimerCreateTimerTask+0x8c>)
 80058fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <xTimerCreateTimerTask+0x8c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005906:	2301      	movs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005926:	697b      	ldr	r3, [r7, #20]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000ccc 	.word	0x20000ccc
 8005934:	08006bb4 	.word	0x08006bb4
 8005938:	08005a75 	.word	0x08005a75
 800593c:	20000cd0 	.word	0x20000cd0

08005940 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800594e:	2300      	movs	r3, #0
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800596e:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <xTimerGenericCommand+0x98>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02a      	beq.n	80059cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b05      	cmp	r3, #5
 8005986:	dc18      	bgt.n	80059ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005988:	f7ff fdb4 	bl	80054f4 <xTaskGetSchedulerState>
 800598c:	4603      	mov	r3, r0
 800598e:	2b02      	cmp	r3, #2
 8005990:	d109      	bne.n	80059a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005992:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <xTimerGenericCommand+0x98>)
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	f107 0110 	add.w	r1, r7, #16
 800599a:	2300      	movs	r3, #0
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	f7fe f937 	bl	8003c10 <xQueueGenericSend>
 80059a2:	6278      	str	r0, [r7, #36]	; 0x24
 80059a4:	e012      	b.n	80059cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <xTimerGenericCommand+0x98>)
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	f107 0110 	add.w	r1, r7, #16
 80059ae:	2300      	movs	r3, #0
 80059b0:	2200      	movs	r2, #0
 80059b2:	f7fe f92d 	bl	8003c10 <xQueueGenericSend>
 80059b6:	6278      	str	r0, [r7, #36]	; 0x24
 80059b8:	e008      	b.n	80059cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <xTimerGenericCommand+0x98>)
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	f107 0110 	add.w	r1, r7, #16
 80059c2:	2300      	movs	r3, #0
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	f7fe fa21 	bl	8003e0c <xQueueGenericSendFromISR>
 80059ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3728      	adds	r7, #40	; 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000ccc 	.word	0x20000ccc

080059dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e6:	4b22      	ldr	r3, [pc, #136]	; (8005a70 <prvProcessExpiredTimer+0x94>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fd ff6d 	bl	80038d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d022      	beq.n	8005a4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	18d1      	adds	r1, r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	6978      	ldr	r0, [r7, #20]
 8005a16:	f000 f8d1 	bl	8005bbc <prvInsertTimerInActiveList>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01f      	beq.n	8005a60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a20:	2300      	movs	r3, #0
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f7ff ff88 	bl	8005940 <xTimerGenericCommand>
 8005a30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d113      	bne.n	8005a60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	60fb      	str	r3, [r7, #12]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	4798      	blx	r3
}
 8005a68:	bf00      	nop
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000cc4 	.word	0x20000cc4

08005a74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a7c:	f107 0308 	add.w	r3, r7, #8
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f857 	bl	8005b34 <prvGetNextExpireTime>
 8005a86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f803 	bl	8005a98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a92:	f000 f8d5 	bl	8005c40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a96:	e7f1      	b.n	8005a7c <prvTimerTask+0x8>

08005a98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005aa2:	f7ff f945 	bl	8004d30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f866 	bl	8005b7c <prvSampleTimeNow>
 8005ab0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d130      	bne.n	8005b1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <prvProcessTimerOrBlockTask+0x3c>
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d806      	bhi.n	8005ad4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ac6:	f7ff f941 	bl	8004d4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ff85 	bl	80059dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ad2:	e024      	b.n	8005b1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ada:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <prvProcessTimerOrBlockTask+0x90>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <prvProcessTimerOrBlockTask+0x50>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <prvProcessTimerOrBlockTask+0x52>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <prvProcessTimerOrBlockTask+0x94>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	4619      	mov	r1, r3
 8005afa:	f7fe fea9 	bl	8004850 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005afe:	f7ff f925 	bl	8004d4c <xTaskResumeAll>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <prvProcessTimerOrBlockTask+0x98>)
 8005b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	f3bf 8f6f 	isb	sy
}
 8005b18:	e001      	b.n	8005b1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b1a:	f7ff f917 	bl	8004d4c <xTaskResumeAll>
}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000cc8 	.word	0x20000cc8
 8005b2c:	20000ccc 	.word	0x20000ccc
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b3c:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <prvGetNextExpireTime+0x44>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <prvGetNextExpireTime+0x16>
 8005b46:	2201      	movs	r2, #1
 8005b48:	e000      	b.n	8005b4c <prvGetNextExpireTime+0x18>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b58:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <prvGetNextExpireTime+0x44>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e001      	b.n	8005b68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b68:	68fb      	ldr	r3, [r7, #12]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000cc4 	.word	0x20000cc4

08005b7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b84:	f7ff f980 	bl	8004e88 <xTaskGetTickCount>
 8005b88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <prvSampleTimeNow+0x3c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d205      	bcs.n	8005ba0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b94:	f000 f936 	bl	8005e04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ba6:	4a04      	ldr	r2, [pc, #16]	; (8005bb8 <prvSampleTimeNow+0x3c>)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000cd4 	.word	0x20000cd4

08005bbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d812      	bhi.n	8005c08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	1ad2      	subs	r2, r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e01b      	b.n	8005c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <prvInsertTimerInActiveList+0x7c>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7fd fe2e 	bl	8003862 <vListInsert>
 8005c06:	e012      	b.n	8005c2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d206      	bcs.n	8005c1e <prvInsertTimerInActiveList+0x62>
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d302      	bcc.n	8005c1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e007      	b.n	8005c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c1e:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <prvInsertTimerInActiveList+0x80>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7fd fe1a 	bl	8003862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c2e:	697b      	ldr	r3, [r7, #20]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20000cc8 	.word	0x20000cc8
 8005c3c:	20000cc4 	.word	0x20000cc4

08005c40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	; 0x38
 8005c44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c46:	e0ca      	b.n	8005dde <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da18      	bge.n	8005c80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c4e:	1d3b      	adds	r3, r7, #4
 8005c50:	3304      	adds	r3, #4
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	61fb      	str	r3, [r7, #28]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c76:	6850      	ldr	r0, [r2, #4]
 8005c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c7a:	6892      	ldr	r2, [r2, #8]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f2c0 80aa 	blt.w	8005ddc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fd fe1b 	bl	80038d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff6b 	bl	8005b7c <prvSampleTimeNow>
 8005ca6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	f200 8097 	bhi.w	8005dde <prvProcessReceivedCommands+0x19e>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <prvProcessReceivedCommands+0x78>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce1 	.word	0x08005ce1
 8005cc0:	08005ce1 	.word	0x08005ce1
 8005cc4:	08005d55 	.word	0x08005d55
 8005cc8:	08005d69 	.word	0x08005d69
 8005ccc:	08005db3 	.word	0x08005db3
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005ce1 	.word	0x08005ce1
 8005cd8:	08005d55 	.word	0x08005d55
 8005cdc:	08005d69 	.word	0x08005d69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	18d1      	adds	r1, r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d00:	f7ff ff5c 	bl	8005bbc <prvInsertTimerInActiveList>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d069      	beq.n	8005dde <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05e      	beq.n	8005dde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	441a      	add	r2, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2100      	movs	r1, #0
 8005d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d32:	f7ff fe05 	bl	8005940 <xTimerGenericCommand>
 8005d36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d14f      	bne.n	8005dde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	61bb      	str	r3, [r7, #24]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d66:	e03a      	b.n	8005dde <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	617b      	str	r3, [r7, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	18d1      	adds	r1, r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dac:	f7ff ff06 	bl	8005bbc <prvInsertTimerInActiveList>
					break;
 8005db0:	e015      	b.n	8005dde <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d103      	bne.n	8005dc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc2:	f000 fbdd 	bl	8006580 <vPortFree>
 8005dc6:	e00a      	b.n	8005dde <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005dda:	e000      	b.n	8005dde <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005ddc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dde:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <prvProcessReceivedCommands+0x1c0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1d39      	adds	r1, r7, #4
 8005de4:	2200      	movs	r2, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe f938 	bl	800405c <xQueueReceive>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f47f af2a 	bne.w	8005c48 <prvProcessReceivedCommands+0x8>
	}
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	3730      	adds	r7, #48	; 0x30
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000ccc 	.word	0x20000ccc

08005e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e0a:	e048      	b.n	8005e9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ec4 <prvSwitchTimerLists+0xc0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e16:	4b2b      	ldr	r3, [pc, #172]	; (8005ec4 <prvSwitchTimerLists+0xc0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fd fd55 	bl	80038d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02e      	beq.n	8005e9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4413      	add	r3, r2
 8005e48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d90e      	bls.n	8005e70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e5e:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <prvSwitchTimerLists+0xc0>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7fd fcfa 	bl	8003862 <vListInsert>
 8005e6e:	e016      	b.n	8005e9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e70:	2300      	movs	r3, #0
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	2100      	movs	r1, #0
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff fd60 	bl	8005940 <xTimerGenericCommand>
 8005e80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	603b      	str	r3, [r7, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e9e:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <prvSwitchTimerLists+0xc0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1b1      	bne.n	8005e0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <prvSwitchTimerLists+0xc0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <prvSwitchTimerLists+0xc4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <prvSwitchTimerLists+0xc0>)
 8005eb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005eb6:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <prvSwitchTimerLists+0xc4>)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000cc4 	.word	0x20000cc4
 8005ec8:	20000cc8 	.word	0x20000cc8

08005ecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ed2:	f000 f967 	bl	80061a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ed6:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d120      	bne.n	8005f20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ede:	4814      	ldr	r0, [pc, #80]	; (8005f30 <prvCheckForValidListAndQueue+0x64>)
 8005ee0:	f7fd fc6e 	bl	80037c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ee4:	4813      	ldr	r0, [pc, #76]	; (8005f34 <prvCheckForValidListAndQueue+0x68>)
 8005ee6:	f7fd fc6b 	bl	80037c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <prvCheckForValidListAndQueue+0x6c>)
 8005eec:	4a10      	ldr	r2, [pc, #64]	; (8005f30 <prvCheckForValidListAndQueue+0x64>)
 8005eee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ef0:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <prvCheckForValidListAndQueue+0x70>)
 8005ef2:	4a10      	ldr	r2, [pc, #64]	; (8005f34 <prvCheckForValidListAndQueue+0x68>)
 8005ef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <prvCheckForValidListAndQueue+0x74>)
 8005efc:	4a11      	ldr	r2, [pc, #68]	; (8005f44 <prvCheckForValidListAndQueue+0x78>)
 8005efe:	2110      	movs	r1, #16
 8005f00:	200a      	movs	r0, #10
 8005f02:	f7fd fd79 	bl	80039f8 <xQueueGenericCreateStatic>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005f0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f0c:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <prvCheckForValidListAndQueue+0x60>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	490b      	ldr	r1, [pc, #44]	; (8005f48 <prvCheckForValidListAndQueue+0x7c>)
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fc6e 	bl	80047fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f20:	f000 f970 	bl	8006204 <vPortExitCritical>
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000ccc 	.word	0x20000ccc
 8005f30:	20000c9c 	.word	0x20000c9c
 8005f34:	20000cb0 	.word	0x20000cb0
 8005f38:	20000cc4 	.word	0x20000cc4
 8005f3c:	20000cc8 	.word	0x20000cc8
 8005f40:	20000d78 	.word	0x20000d78
 8005f44:	20000cd8 	.word	0x20000cd8
 8005f48:	08006bbc 	.word	0x08006bbc

08005f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b04      	subs	r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3b04      	subs	r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f7c:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <pxPortInitialiseStack+0x64>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b14      	subs	r3, #20
 8005f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f06f 0202 	mvn.w	r2, #2
 8005f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b20      	subs	r3, #32
 8005fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	08005fb5 	.word	0x08005fb5

08005fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <prvTaskExitError+0x54>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d00a      	beq.n	8005fde <prvTaskExitError+0x2a>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60fb      	str	r3, [r7, #12]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <prvTaskExitError+0x28>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	60bb      	str	r3, [r7, #8]
}
 8005ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ff2:	bf00      	nop
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0fc      	beq.n	8005ff4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	2000003c 	.word	0x2000003c
 800600c:	00000000 	.word	0x00000000

08006010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <pxCurrentTCBConst2>)
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	f380 8809 	msr	PSP, r0
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8811 	msr	BASEPRI, r0
 800602a:	4770      	bx	lr
 800602c:	f3af 8000 	nop.w

08006030 <pxCurrentTCBConst2>:
 8006030:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006038:	4808      	ldr	r0, [pc, #32]	; (800605c <prvPortStartFirstTask+0x24>)
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f380 8808 	msr	MSP, r0
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8814 	msr	CONTROL, r0
 800604a:	b662      	cpsie	i
 800604c:	b661      	cpsie	f
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	df00      	svc	0
 8006058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800605a:	bf00      	nop
 800605c:	e000ed08 	.word	0xe000ed08

08006060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006066:	4b46      	ldr	r3, [pc, #280]	; (8006180 <xPortStartScheduler+0x120>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a46      	ldr	r2, [pc, #280]	; (8006184 <xPortStartScheduler+0x124>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10a      	bne.n	8006086 <xPortStartScheduler+0x26>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	613b      	str	r3, [r7, #16]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006086:	4b3e      	ldr	r3, [pc, #248]	; (8006180 <xPortStartScheduler+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <xPortStartScheduler+0x128>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10a      	bne.n	80060a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060a6:	4b39      	ldr	r3, [pc, #228]	; (800618c <xPortStartScheduler+0x12c>)
 80060a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	22ff      	movs	r2, #255	; 0xff
 80060b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	4b31      	ldr	r3, [pc, #196]	; (8006190 <xPortStartScheduler+0x130>)
 80060cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <xPortStartScheduler+0x134>)
 80060d0:	2207      	movs	r2, #7
 80060d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060d4:	e009      	b.n	80060ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060d6:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <xPortStartScheduler+0x134>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3b01      	subs	r3, #1
 80060dc:	4a2d      	ldr	r2, [pc, #180]	; (8006194 <xPortStartScheduler+0x134>)
 80060de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d0ef      	beq.n	80060d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060f6:	4b27      	ldr	r3, [pc, #156]	; (8006194 <xPortStartScheduler+0x134>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1c3 0307 	rsb	r3, r3, #7
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d00a      	beq.n	8006118 <xPortStartScheduler+0xb8>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60bb      	str	r3, [r7, #8]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <xPortStartScheduler+0x134>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <xPortStartScheduler+0x134>)
 8006120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <xPortStartScheduler+0x134>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800612a:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <xPortStartScheduler+0x134>)
 800612c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006136:	4b18      	ldr	r3, [pc, #96]	; (8006198 <xPortStartScheduler+0x138>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a17      	ldr	r2, [pc, #92]	; (8006198 <xPortStartScheduler+0x138>)
 800613c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <xPortStartScheduler+0x138>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a14      	ldr	r2, [pc, #80]	; (8006198 <xPortStartScheduler+0x138>)
 8006148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800614c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800614e:	f000 f8dd 	bl	800630c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <xPortStartScheduler+0x13c>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006158:	f000 f8fc 	bl	8006354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <xPortStartScheduler+0x140>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <xPortStartScheduler+0x140>)
 8006162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006168:	f7ff ff66 	bl	8006038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800616c:	f7fe ff56 	bl	800501c <vTaskSwitchContext>
	prvTaskExitError();
 8006170:	f7ff ff20 	bl	8005fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	e000ed00 	.word	0xe000ed00
 8006184:	410fc271 	.word	0x410fc271
 8006188:	410fc270 	.word	0x410fc270
 800618c:	e000e400 	.word	0xe000e400
 8006190:	20000dc8 	.word	0x20000dc8
 8006194:	20000dcc 	.word	0x20000dcc
 8006198:	e000ed20 	.word	0xe000ed20
 800619c:	2000003c 	.word	0x2000003c
 80061a0:	e000ef34 	.word	0xe000ef34

080061a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	607b      	str	r3, [r7, #4]
}
 80061bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <vPortEnterCritical+0x58>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <vPortEnterCritical+0x58>)
 80061c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <vPortEnterCritical+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10f      	bne.n	80061f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <vPortEnterCritical+0x5c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	603b      	str	r3, [r7, #0]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <vPortEnterCritical+0x4a>
	}
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	2000003c 	.word	0x2000003c
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <vPortExitCritical+0x50>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <vPortExitCritical+0x24>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	607b      	str	r3, [r7, #4]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <vPortExitCritical+0x50>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3b01      	subs	r3, #1
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <vPortExitCritical+0x50>)
 8006230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <vPortExitCritical+0x50>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <vPortExitCritical+0x42>
 800623a:	2300      	movs	r3, #0
 800623c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f383 8811 	msr	BASEPRI, r3
}
 8006244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000003c 	.word	0x2000003c
	...

08006260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006260:	f3ef 8009 	mrs	r0, PSP
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <pxCurrentTCBConst>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	f01e 0f10 	tst.w	lr, #16
 8006270:	bf08      	it	eq
 8006272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	6010      	str	r0, [r2, #0]
 800627c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006284:	f380 8811 	msr	BASEPRI, r0
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f7fe fec4 	bl	800501c <vTaskSwitchContext>
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	f380 8811 	msr	BASEPRI, r0
 800629c:	bc09      	pop	{r0, r3}
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	6808      	ldr	r0, [r1, #0]
 80062a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a6:	f01e 0f10 	tst.w	lr, #16
 80062aa:	bf08      	it	eq
 80062ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062b0:	f380 8809 	msr	PSP, r0
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	f3af 8000 	nop.w

080062c0 <pxCurrentTCBConst>:
 80062c0:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop

080062c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
}
 80062e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062e2:	f7fe fde1 	bl	8004ea8 <xTaskIncrementTick>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <xPortSysTickHandler+0x40>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f383 8811 	msr	BASEPRI, r3
}
 80062fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortSetupTimerInterrupt+0x34>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <vPortSetupTimerInterrupt+0x38>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <vPortSetupTimerInterrupt+0x3c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a0a      	ldr	r2, [pc, #40]	; (800634c <vPortSetupTimerInterrupt+0x40>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	099b      	lsrs	r3, r3, #6
 8006328:	4a09      	ldr	r2, [pc, #36]	; (8006350 <vPortSetupTimerInterrupt+0x44>)
 800632a:	3b01      	subs	r3, #1
 800632c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800632e:	4b04      	ldr	r3, [pc, #16]	; (8006340 <vPortSetupTimerInterrupt+0x34>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	e000e010 	.word	0xe000e010
 8006344:	e000e018 	.word	0xe000e018
 8006348:	20000030 	.word	0x20000030
 800634c:	10624dd3 	.word	0x10624dd3
 8006350:	e000e014 	.word	0xe000e014

08006354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006364 <vPortEnableVFP+0x10>
 8006358:	6801      	ldr	r1, [r0, #0]
 800635a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800635e:	6001      	str	r1, [r0, #0]
 8006360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006362:	bf00      	nop
 8006364:	e000ed88 	.word	0xe000ed88

08006368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800636e:	f3ef 8305 	mrs	r3, IPSR
 8006372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d914      	bls.n	80063a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <vPortValidateInterruptPriority+0x70>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <vPortValidateInterruptPriority+0x74>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	7afa      	ldrb	r2, [r7, #11]
 800638a:	429a      	cmp	r2, r3
 800638c:	d20a      	bcs.n	80063a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	607b      	str	r3, [r7, #4]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <vPortValidateInterruptPriority+0x78>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063ac:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <vPortValidateInterruptPriority+0x7c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d90a      	bls.n	80063ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	603b      	str	r3, [r7, #0]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <vPortValidateInterruptPriority+0x60>
	}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	e000e3f0 	.word	0xe000e3f0
 80063dc:	20000dc8 	.word	0x20000dc8
 80063e0:	e000ed0c 	.word	0xe000ed0c
 80063e4:	20000dcc 	.word	0x20000dcc

080063e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063f4:	f7fe fc9c 	bl	8004d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063f8:	4b5b      	ldr	r3, [pc, #364]	; (8006568 <pvPortMalloc+0x180>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006400:	f000 f920 	bl	8006644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006404:	4b59      	ldr	r3, [pc, #356]	; (800656c <pvPortMalloc+0x184>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 8093 	bne.w	8006538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01d      	beq.n	8006454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006418:	2208      	movs	r2, #8
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f023 0307 	bic.w	r3, r3, #7
 8006430:	3308      	adds	r3, #8
 8006432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <pvPortMalloc+0x6c>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	617b      	str	r3, [r7, #20]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d06e      	beq.n	8006538 <pvPortMalloc+0x150>
 800645a:	4b45      	ldr	r3, [pc, #276]	; (8006570 <pvPortMalloc+0x188>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d869      	bhi.n	8006538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006464:	4b43      	ldr	r3, [pc, #268]	; (8006574 <pvPortMalloc+0x18c>)
 8006466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006468:	4b42      	ldr	r3, [pc, #264]	; (8006574 <pvPortMalloc+0x18c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800646e:	e004      	b.n	800647a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d903      	bls.n	800648c <pvPortMalloc+0xa4>
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f1      	bne.n	8006470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800648c:	4b36      	ldr	r3, [pc, #216]	; (8006568 <pvPortMalloc+0x180>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006492:	429a      	cmp	r2, r3
 8006494:	d050      	beq.n	8006538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2208      	movs	r2, #8
 800649c:	4413      	add	r3, r2
 800649e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	2308      	movs	r3, #8
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d91f      	bls.n	80064f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <pvPortMalloc+0xf8>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	613b      	str	r3, [r7, #16]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064f2:	69b8      	ldr	r0, [r7, #24]
 80064f4:	f000 f908 	bl	8006708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <pvPortMalloc+0x188>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <pvPortMalloc+0x188>)
 8006504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <pvPortMalloc+0x188>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <pvPortMalloc+0x190>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d203      	bcs.n	800651a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <pvPortMalloc+0x188>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <pvPortMalloc+0x190>)
 8006518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <pvPortMalloc+0x184>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	431a      	orrs	r2, r3
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800652e:	4b13      	ldr	r3, [pc, #76]	; (800657c <pvPortMalloc+0x194>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a11      	ldr	r2, [pc, #68]	; (800657c <pvPortMalloc+0x194>)
 8006536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006538:	f7fe fc08 	bl	8004d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <pvPortMalloc+0x174>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	60fb      	str	r3, [r7, #12]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <pvPortMalloc+0x172>
	return pvReturn;
 800655c:	69fb      	ldr	r3, [r7, #28]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3728      	adds	r7, #40	; 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200049d8 	.word	0x200049d8
 800656c:	200049ec 	.word	0x200049ec
 8006570:	200049dc 	.word	0x200049dc
 8006574:	200049d0 	.word	0x200049d0
 8006578:	200049e0 	.word	0x200049e0
 800657c:	200049e4 	.word	0x200049e4

08006580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d04d      	beq.n	800662e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006592:	2308      	movs	r3, #8
 8006594:	425b      	negs	r3, r3
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4413      	add	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	4b24      	ldr	r3, [pc, #144]	; (8006638 <vPortFree+0xb8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <vPortFree+0x44>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60fb      	str	r3, [r7, #12]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <vPortFree+0x62>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	60bb      	str	r3, [r7, #8]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <vPortFree+0xb8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4013      	ands	r3, r2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01e      	beq.n	800662e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11a      	bne.n	800662e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <vPortFree+0xb8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	43db      	mvns	r3, r3
 8006602:	401a      	ands	r2, r3
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006608:	f7fe fb92 	bl	8004d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <vPortFree+0xbc>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4413      	add	r3, r2
 8006616:	4a09      	ldr	r2, [pc, #36]	; (800663c <vPortFree+0xbc>)
 8006618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800661a:	6938      	ldr	r0, [r7, #16]
 800661c:	f000 f874 	bl	8006708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <vPortFree+0xc0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vPortFree+0xc0>)
 8006628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800662a:	f7fe fb8f 	bl	8004d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800662e:	bf00      	nop
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200049ec 	.word	0x200049ec
 800663c:	200049dc 	.word	0x200049dc
 8006640:	200049e8 	.word	0x200049e8

08006644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800664a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800664e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006650:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <prvHeapInit+0xac>)
 8006652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3307      	adds	r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0307 	bic.w	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <prvHeapInit+0xac>)
 8006674:	4413      	add	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <prvHeapInit+0xb0>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <prvHeapInit+0xb0>)
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4413      	add	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006690:	2208      	movs	r2, #8
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <prvHeapInit+0xb4>)
 80066a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <prvHeapInit+0xb4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <prvHeapInit+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <prvHeapInit+0xb4>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <prvHeapInit+0xb8>)
 80066d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a09      	ldr	r2, [pc, #36]	; (8006700 <prvHeapInit+0xbc>)
 80066da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <prvHeapInit+0xc0>)
 80066de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000dd0 	.word	0x20000dd0
 80066f4:	200049d0 	.word	0x200049d0
 80066f8:	200049d8 	.word	0x200049d8
 80066fc:	200049e0 	.word	0x200049e0
 8006700:	200049dc 	.word	0x200049dc
 8006704:	200049ec 	.word	0x200049ec

08006708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006710:	4b28      	ldr	r3, [pc, #160]	; (80067b4 <prvInsertBlockIntoFreeList+0xac>)
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e002      	b.n	800671c <prvInsertBlockIntoFreeList+0x14>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d8f7      	bhi.n	8006716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d108      	bne.n	800674a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d118      	bne.n	8006790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d00d      	beq.n	8006786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e008      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e003      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d002      	beq.n	80067a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	200049d0 	.word	0x200049d0
 80067b8:	200049d8 	.word	0x200049d8

080067bc <__errno>:
 80067bc:	4b01      	ldr	r3, [pc, #4]	; (80067c4 <__errno+0x8>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000040 	.word	0x20000040

080067c8 <__libc_init_array>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	4d0d      	ldr	r5, [pc, #52]	; (8006800 <__libc_init_array+0x38>)
 80067cc:	4c0d      	ldr	r4, [pc, #52]	; (8006804 <__libc_init_array+0x3c>)
 80067ce:	1b64      	subs	r4, r4, r5
 80067d0:	10a4      	asrs	r4, r4, #2
 80067d2:	2600      	movs	r6, #0
 80067d4:	42a6      	cmp	r6, r4
 80067d6:	d109      	bne.n	80067ec <__libc_init_array+0x24>
 80067d8:	4d0b      	ldr	r5, [pc, #44]	; (8006808 <__libc_init_array+0x40>)
 80067da:	4c0c      	ldr	r4, [pc, #48]	; (800680c <__libc_init_array+0x44>)
 80067dc:	f000 f918 	bl	8006a10 <_init>
 80067e0:	1b64      	subs	r4, r4, r5
 80067e2:	10a4      	asrs	r4, r4, #2
 80067e4:	2600      	movs	r6, #0
 80067e6:	42a6      	cmp	r6, r4
 80067e8:	d105      	bne.n	80067f6 <__libc_init_array+0x2e>
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f0:	4798      	blx	r3
 80067f2:	3601      	adds	r6, #1
 80067f4:	e7ee      	b.n	80067d4 <__libc_init_array+0xc>
 80067f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fa:	4798      	blx	r3
 80067fc:	3601      	adds	r6, #1
 80067fe:	e7f2      	b.n	80067e6 <__libc_init_array+0x1e>
 8006800:	08006d84 	.word	0x08006d84
 8006804:	08006d84 	.word	0x08006d84
 8006808:	08006d84 	.word	0x08006d84
 800680c:	08006d88 	.word	0x08006d88

08006810 <__itoa>:
 8006810:	1e93      	subs	r3, r2, #2
 8006812:	2b22      	cmp	r3, #34	; 0x22
 8006814:	b510      	push	{r4, lr}
 8006816:	460c      	mov	r4, r1
 8006818:	d904      	bls.n	8006824 <__itoa+0x14>
 800681a:	2300      	movs	r3, #0
 800681c:	700b      	strb	r3, [r1, #0]
 800681e:	461c      	mov	r4, r3
 8006820:	4620      	mov	r0, r4
 8006822:	bd10      	pop	{r4, pc}
 8006824:	2a0a      	cmp	r2, #10
 8006826:	d109      	bne.n	800683c <__itoa+0x2c>
 8006828:	2800      	cmp	r0, #0
 800682a:	da07      	bge.n	800683c <__itoa+0x2c>
 800682c:	232d      	movs	r3, #45	; 0x2d
 800682e:	700b      	strb	r3, [r1, #0]
 8006830:	4240      	negs	r0, r0
 8006832:	2101      	movs	r1, #1
 8006834:	4421      	add	r1, r4
 8006836:	f000 f8a9 	bl	800698c <__utoa>
 800683a:	e7f1      	b.n	8006820 <__itoa+0x10>
 800683c:	2100      	movs	r1, #0
 800683e:	e7f9      	b.n	8006834 <__itoa+0x24>

08006840 <itoa>:
 8006840:	f7ff bfe6 	b.w	8006810 <__itoa>

08006844 <memcpy>:
 8006844:	440a      	add	r2, r1
 8006846:	4291      	cmp	r1, r2
 8006848:	f100 33ff 	add.w	r3, r0, #4294967295
 800684c:	d100      	bne.n	8006850 <memcpy+0xc>
 800684e:	4770      	bx	lr
 8006850:	b510      	push	{r4, lr}
 8006852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685a:	4291      	cmp	r1, r2
 800685c:	d1f9      	bne.n	8006852 <memcpy+0xe>
 800685e:	bd10      	pop	{r4, pc}

08006860 <memset>:
 8006860:	4402      	add	r2, r0
 8006862:	4603      	mov	r3, r0
 8006864:	4293      	cmp	r3, r2
 8006866:	d100      	bne.n	800686a <memset+0xa>
 8006868:	4770      	bx	lr
 800686a:	f803 1b01 	strb.w	r1, [r3], #1
 800686e:	e7f9      	b.n	8006864 <memset+0x4>

08006870 <_strtol_l.isra.0>:
 8006870:	2b01      	cmp	r3, #1
 8006872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006876:	d001      	beq.n	800687c <_strtol_l.isra.0+0xc>
 8006878:	2b24      	cmp	r3, #36	; 0x24
 800687a:	d906      	bls.n	800688a <_strtol_l.isra.0+0x1a>
 800687c:	f7ff ff9e 	bl	80067bc <__errno>
 8006880:	2316      	movs	r3, #22
 8006882:	6003      	str	r3, [r0, #0]
 8006884:	2000      	movs	r0, #0
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688a:	4f3a      	ldr	r7, [pc, #232]	; (8006974 <_strtol_l.isra.0+0x104>)
 800688c:	468e      	mov	lr, r1
 800688e:	4676      	mov	r6, lr
 8006890:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006894:	5de5      	ldrb	r5, [r4, r7]
 8006896:	f015 0508 	ands.w	r5, r5, #8
 800689a:	d1f8      	bne.n	800688e <_strtol_l.isra.0+0x1e>
 800689c:	2c2d      	cmp	r4, #45	; 0x2d
 800689e:	d134      	bne.n	800690a <_strtol_l.isra.0+0x9a>
 80068a0:	f89e 4000 	ldrb.w	r4, [lr]
 80068a4:	f04f 0801 	mov.w	r8, #1
 80068a8:	f106 0e02 	add.w	lr, r6, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d05c      	beq.n	800696a <_strtol_l.isra.0+0xfa>
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d10c      	bne.n	80068ce <_strtol_l.isra.0+0x5e>
 80068b4:	2c30      	cmp	r4, #48	; 0x30
 80068b6:	d10a      	bne.n	80068ce <_strtol_l.isra.0+0x5e>
 80068b8:	f89e 4000 	ldrb.w	r4, [lr]
 80068bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80068c0:	2c58      	cmp	r4, #88	; 0x58
 80068c2:	d14d      	bne.n	8006960 <_strtol_l.isra.0+0xf0>
 80068c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80068c8:	2310      	movs	r3, #16
 80068ca:	f10e 0e02 	add.w	lr, lr, #2
 80068ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80068d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80068d6:	2600      	movs	r6, #0
 80068d8:	fbbc f9f3 	udiv	r9, ip, r3
 80068dc:	4635      	mov	r5, r6
 80068de:	fb03 ca19 	mls	sl, r3, r9, ip
 80068e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80068e6:	2f09      	cmp	r7, #9
 80068e8:	d818      	bhi.n	800691c <_strtol_l.isra.0+0xac>
 80068ea:	463c      	mov	r4, r7
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	dd24      	ble.n	800693a <_strtol_l.isra.0+0xca>
 80068f0:	2e00      	cmp	r6, #0
 80068f2:	db1f      	blt.n	8006934 <_strtol_l.isra.0+0xc4>
 80068f4:	45a9      	cmp	r9, r5
 80068f6:	d31d      	bcc.n	8006934 <_strtol_l.isra.0+0xc4>
 80068f8:	d101      	bne.n	80068fe <_strtol_l.isra.0+0x8e>
 80068fa:	45a2      	cmp	sl, r4
 80068fc:	db1a      	blt.n	8006934 <_strtol_l.isra.0+0xc4>
 80068fe:	fb05 4503 	mla	r5, r5, r3, r4
 8006902:	2601      	movs	r6, #1
 8006904:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006908:	e7eb      	b.n	80068e2 <_strtol_l.isra.0+0x72>
 800690a:	2c2b      	cmp	r4, #43	; 0x2b
 800690c:	bf08      	it	eq
 800690e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006912:	46a8      	mov	r8, r5
 8006914:	bf08      	it	eq
 8006916:	f106 0e02 	addeq.w	lr, r6, #2
 800691a:	e7c7      	b.n	80068ac <_strtol_l.isra.0+0x3c>
 800691c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006920:	2f19      	cmp	r7, #25
 8006922:	d801      	bhi.n	8006928 <_strtol_l.isra.0+0xb8>
 8006924:	3c37      	subs	r4, #55	; 0x37
 8006926:	e7e1      	b.n	80068ec <_strtol_l.isra.0+0x7c>
 8006928:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800692c:	2f19      	cmp	r7, #25
 800692e:	d804      	bhi.n	800693a <_strtol_l.isra.0+0xca>
 8006930:	3c57      	subs	r4, #87	; 0x57
 8006932:	e7db      	b.n	80068ec <_strtol_l.isra.0+0x7c>
 8006934:	f04f 36ff 	mov.w	r6, #4294967295
 8006938:	e7e4      	b.n	8006904 <_strtol_l.isra.0+0x94>
 800693a:	2e00      	cmp	r6, #0
 800693c:	da05      	bge.n	800694a <_strtol_l.isra.0+0xda>
 800693e:	2322      	movs	r3, #34	; 0x22
 8006940:	6003      	str	r3, [r0, #0]
 8006942:	4665      	mov	r5, ip
 8006944:	b942      	cbnz	r2, 8006958 <_strtol_l.isra.0+0xe8>
 8006946:	4628      	mov	r0, r5
 8006948:	e79d      	b.n	8006886 <_strtol_l.isra.0+0x16>
 800694a:	f1b8 0f00 	cmp.w	r8, #0
 800694e:	d000      	beq.n	8006952 <_strtol_l.isra.0+0xe2>
 8006950:	426d      	negs	r5, r5
 8006952:	2a00      	cmp	r2, #0
 8006954:	d0f7      	beq.n	8006946 <_strtol_l.isra.0+0xd6>
 8006956:	b10e      	cbz	r6, 800695c <_strtol_l.isra.0+0xec>
 8006958:	f10e 31ff 	add.w	r1, lr, #4294967295
 800695c:	6011      	str	r1, [r2, #0]
 800695e:	e7f2      	b.n	8006946 <_strtol_l.isra.0+0xd6>
 8006960:	2430      	movs	r4, #48	; 0x30
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1b3      	bne.n	80068ce <_strtol_l.isra.0+0x5e>
 8006966:	2308      	movs	r3, #8
 8006968:	e7b1      	b.n	80068ce <_strtol_l.isra.0+0x5e>
 800696a:	2c30      	cmp	r4, #48	; 0x30
 800696c:	d0a4      	beq.n	80068b8 <_strtol_l.isra.0+0x48>
 800696e:	230a      	movs	r3, #10
 8006970:	e7ad      	b.n	80068ce <_strtol_l.isra.0+0x5e>
 8006972:	bf00      	nop
 8006974:	08006c7a 	.word	0x08006c7a

08006978 <strtol>:
 8006978:	4613      	mov	r3, r2
 800697a:	460a      	mov	r2, r1
 800697c:	4601      	mov	r1, r0
 800697e:	4802      	ldr	r0, [pc, #8]	; (8006988 <strtol+0x10>)
 8006980:	6800      	ldr	r0, [r0, #0]
 8006982:	f7ff bf75 	b.w	8006870 <_strtol_l.isra.0>
 8006986:	bf00      	nop
 8006988:	20000040 	.word	0x20000040

0800698c <__utoa>:
 800698c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698e:	4c1f      	ldr	r4, [pc, #124]	; (8006a0c <__utoa+0x80>)
 8006990:	b08b      	sub	sp, #44	; 0x2c
 8006992:	4605      	mov	r5, r0
 8006994:	460b      	mov	r3, r1
 8006996:	466e      	mov	r6, sp
 8006998:	f104 0c20 	add.w	ip, r4, #32
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	6861      	ldr	r1, [r4, #4]
 80069a0:	4637      	mov	r7, r6
 80069a2:	c703      	stmia	r7!, {r0, r1}
 80069a4:	3408      	adds	r4, #8
 80069a6:	4564      	cmp	r4, ip
 80069a8:	463e      	mov	r6, r7
 80069aa:	d1f7      	bne.n	800699c <__utoa+0x10>
 80069ac:	7921      	ldrb	r1, [r4, #4]
 80069ae:	7139      	strb	r1, [r7, #4]
 80069b0:	1e91      	subs	r1, r2, #2
 80069b2:	6820      	ldr	r0, [r4, #0]
 80069b4:	6038      	str	r0, [r7, #0]
 80069b6:	2922      	cmp	r1, #34	; 0x22
 80069b8:	f04f 0100 	mov.w	r1, #0
 80069bc:	d904      	bls.n	80069c8 <__utoa+0x3c>
 80069be:	7019      	strb	r1, [r3, #0]
 80069c0:	460b      	mov	r3, r1
 80069c2:	4618      	mov	r0, r3
 80069c4:	b00b      	add	sp, #44	; 0x2c
 80069c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c8:	1e58      	subs	r0, r3, #1
 80069ca:	4684      	mov	ip, r0
 80069cc:	fbb5 f7f2 	udiv	r7, r5, r2
 80069d0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80069d4:	fb02 5617 	mls	r6, r2, r7, r5
 80069d8:	4476      	add	r6, lr
 80069da:	460c      	mov	r4, r1
 80069dc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80069e0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80069e4:	462e      	mov	r6, r5
 80069e6:	42b2      	cmp	r2, r6
 80069e8:	f101 0101 	add.w	r1, r1, #1
 80069ec:	463d      	mov	r5, r7
 80069ee:	d9ed      	bls.n	80069cc <__utoa+0x40>
 80069f0:	2200      	movs	r2, #0
 80069f2:	545a      	strb	r2, [r3, r1]
 80069f4:	1919      	adds	r1, r3, r4
 80069f6:	1aa5      	subs	r5, r4, r2
 80069f8:	42aa      	cmp	r2, r5
 80069fa:	dae2      	bge.n	80069c2 <__utoa+0x36>
 80069fc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006a00:	780e      	ldrb	r6, [r1, #0]
 8006a02:	7006      	strb	r6, [r0, #0]
 8006a04:	3201      	adds	r2, #1
 8006a06:	f801 5901 	strb.w	r5, [r1], #-1
 8006a0a:	e7f4      	b.n	80069f6 <__utoa+0x6a>
 8006a0c:	08006c54 	.word	0x08006c54

08006a10 <_init>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr

08006a1c <_fini>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr
