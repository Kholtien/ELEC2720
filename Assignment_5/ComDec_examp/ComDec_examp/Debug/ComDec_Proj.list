
ComDec_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d00  08006d00  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d08  08006d08  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08006d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a30  20000210  08006f20  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c40  08006f20  00024c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cbb  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e9b  00000000  00000000  00038efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  0003bd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  0003d190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000597b  00000000  00000000  0003e470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f79b  00000000  00000000  00043deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d593a  00000000  00000000  00053586  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  00128f3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069ac 	.word	0x080069ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	080069ac 	.word	0x080069ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <decode_binary>:
|
===========================================================================
*/

static void decode_binary(dec_input_struc *input_ptr)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  void(*context_handler)(dec_input_struc *input_ptr);
  unsigned char *valid_data_table_ptr, *bit_table_ptr;
  void(**vector_table_ptr)(dec_input_struc *input_ptr);
  unsigned char valid_data_index = 0,
 80004e8:	2300      	movs	r3, #0
 80004ea:	77fb      	strb	r3, [r7, #31]
    vector_table_index = 0,
 80004ec:	2300      	movs	r3, #0
 80004ee:	77bb      	strb	r3, [r7, #30]
    bit_table_index = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	777b      	strb	r3, [r7, #29]
  unsigned char bit_test_pattern;

  valid_data_table_ptr = input_ptr->valid_data_table_ptr;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	61bb      	str	r3, [r7, #24]
  vector_table_ptr = input_ptr->vector_table_ptr;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	617b      	str	r3, [r7, #20]
  bit_table_ptr = input_ptr->bit_table_ptr;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	613b      	str	r3, [r7, #16]
  while (TRUE)
  {
    /*firstly calculate the byte of interest in the bit table and then
    determine the test bit pattern for the required bit in the bit table
    */
    bit_table_index = valid_data_index / 8;
 8000506:	7ffb      	ldrb	r3, [r7, #31]
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	777b      	strb	r3, [r7, #29]
    bit_test_pattern = 0x01 << (valid_data_index % 8);
 800050c:	7ffb      	ldrb	r3, [r7, #31]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	2201      	movs	r2, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	73fb      	strb	r3, [r7, #15]

    /*now test the contents of the bit table */
    if (bit_table_ptr[bit_table_index] &bit_test_pattern)
 800051a:	7f7b      	ldrb	r3, [r7, #29]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	4413      	add	r3, r2
 8000520:	781a      	ldrb	r2, [r3, #0]
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	4013      	ands	r3, r2
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	d048      	beq.n	80005be <decode_binary+0xde>
    {
      /*possibility of a range or end of table.  Test the next bit
      to find if it is 1 or 0
      */
      bit_table_index = (valid_data_index + 1) / 8;
 800052c:	7ffb      	ldrb	r3, [r7, #31]
 800052e:	3301      	adds	r3, #1
 8000530:	2b00      	cmp	r3, #0
 8000532:	da00      	bge.n	8000536 <decode_binary+0x56>
 8000534:	3307      	adds	r3, #7
 8000536:	10db      	asrs	r3, r3, #3
 8000538:	777b      	strb	r3, [r7, #29]
      bit_test_pattern = 0x01 << ((valid_data_index + 1) % 8);
 800053a:	7ffb      	ldrb	r3, [r7, #31]
 800053c:	3301      	adds	r3, #1
 800053e:	425a      	negs	r2, r3
 8000540:	f003 0307 	and.w	r3, r3, #7
 8000544:	f002 0207 	and.w	r2, r2, #7
 8000548:	bf58      	it	pl
 800054a:	4253      	negpl	r3, r2
 800054c:	2201      	movs	r2, #1
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	73fb      	strb	r3, [r7, #15]

      if (bit_table_ptr[bit_table_index] &bit_test_pattern)
 8000554:	7f7b      	ldrb	r3, [r7, #29]
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	4413      	add	r3, r2
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	4013      	ands	r3, r2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d009      	beq.n	800057a <decode_binary+0x9a>
      {
        /*have hit the end of the table - the vector table
        index should be pointing to the default handler
        */
        context_handler = vector_table_ptr[vector_table_index];
 8000566:	7fbb      	ldrb	r3, [r7, #30]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	4413      	add	r3, r2
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60bb      	str	r3, [r7, #8]
        (*context_handler)(input_ptr);
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	4798      	blx	r3
        return;
 8000578:	e03a      	b.n	80005f0 <decode_binary+0x110>
      else
      {
        /*have a valid command range - check whether data in
        the range */

        if ((input_ptr->data_byte >= valid_data_table_ptr[
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	785a      	ldrb	r2, [r3, #1]
 800057e:	7ffb      	ldrb	r3, [r7, #31]
 8000580:	69b9      	ldr	r1, [r7, #24]
 8000582:	440b      	add	r3, r1
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d312      	bcc.n	80005b0 <decode_binary+0xd0>
            valid_data_index]) &&
          (input_ptr->data_byte <= valid_data_table_ptr[
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	7ffb      	ldrb	r3, [r7, #31]
 8000590:	3301      	adds	r3, #1
 8000592:	69b9      	ldr	r1, [r7, #24]
 8000594:	440b      	add	r3, r1
 8000596:	781b      	ldrb	r3, [r3, #0]
            valid_data_index]) &&
 8000598:	429a      	cmp	r2, r3
 800059a:	d809      	bhi.n	80005b0 <decode_binary+0xd0>
            valid_data_index + 1]))
        {
          /*data within range */
          context_handler = vector_table_ptr[vector_table_index];
 800059c:	7fbb      	ldrb	r3, [r7, #30]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	4413      	add	r3, r2
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	60bb      	str	r3, [r7, #8]
          (*context_handler)(input_ptr);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	4798      	blx	r3
          return;
 80005ae:	e01f      	b.n	80005f0 <decode_binary+0x110>
        } /*if */
        else
        {
          /*data not within range so update the table
          indexes */
          valid_data_index += 2;
 80005b0:	7ffb      	ldrb	r3, [r7, #31]
 80005b2:	3302      	adds	r3, #2
 80005b4:	77fb      	strb	r3, [r7, #31]
          vector_table_index++;
 80005b6:	7fbb      	ldrb	r3, [r7, #30]
 80005b8:	3301      	adds	r3, #1
 80005ba:	77bb      	strb	r3, [r7, #30]
 80005bc:	e7a3      	b.n	8000506 <decode_binary+0x26>
    else
    {
      /*bit in bit_table a zero so simply compare data with the
      currently pointed to location in the valid_data_table
      */
      if (input_ptr->data_byte ==
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	785a      	ldrb	r2, [r3, #1]
        valid_data_table_ptr[valid_data_index])
 80005c2:	7ffb      	ldrb	r3, [r7, #31]
 80005c4:	69b9      	ldr	r1, [r7, #24]
 80005c6:	440b      	add	r3, r1
 80005c8:	781b      	ldrb	r3, [r3, #0]
      if (input_ptr->data_byte ==
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d109      	bne.n	80005e2 <decode_binary+0x102>
      {
        context_handler = vector_table_ptr[vector_table_index];
 80005ce:	7fbb      	ldrb	r3, [r7, #30]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	4413      	add	r3, r2
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60bb      	str	r3, [r7, #8]
        (*context_handler)(input_ptr);
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	4798      	blx	r3
        return;
 80005e0:	e006      	b.n	80005f0 <decode_binary+0x110>
      else
      {
        /*data not in valid_data_table so increment the table
        indexes
        */
        valid_data_index++;
 80005e2:	7ffb      	ldrb	r3, [r7, #31]
 80005e4:	3301      	adds	r3, #1
 80005e6:	77fb      	strb	r3, [r7, #31]
        vector_table_index++;
 80005e8:	7fbb      	ldrb	r3, [r7, #30]
 80005ea:	3301      	adds	r3, #1
 80005ec:	77bb      	strb	r3, [r7, #30]
    bit_table_index = valid_data_index / 8;
 80005ee:	e78a      	b.n	8000506 <decode_binary+0x26>
      } /*else */
    } /*else */
  } /*while */
} /*end of decode_binary */
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <decode_ascii>:
|
=============================================================================
*/

static void decode_ascii(dec_input_struc *input_ptr)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]

  void(*command_handler)(dec_input_struc*);
  unsigned char *valid_data_table_ptr;
  void(**vector_table_ptr)(dec_input_struc*);
  unsigned char valid_data_index = 0, vector_table_index = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	75fb      	strb	r3, [r7, #23]
 8000602:	2300      	movs	r3, #0
 8000604:	75bb      	strb	r3, [r7, #22]

  valid_data_table_ptr = input_ptr->valid_data_table_ptr;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	613b      	str	r3, [r7, #16]
  vector_table_ptr = input_ptr->vector_table_ptr;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	60fb      	str	r3, [r7, #12]

  while (valid_data_table_ptr[valid_data_index] != 0xff)
 8000612:	e043      	b.n	800069c <decode_ascii+0xa6>
  {
    if (valid_data_table_ptr[valid_data_index] &0x80)
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b25b      	sxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	da24      	bge.n	800066c <decode_ascii+0x76>
    {
      /*high bit is set so must be the beginning of a valid data
      range
      */
      if ((input_ptr->data_byte >= (valid_data_table_ptr[
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	4619      	mov	r1, r3
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	4413      	add	r3, r2
 800062e:	781b      	ldrb	r3, [r3, #0]
          valid_data_index] &0x7f)) &&
 8000630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      if ((input_ptr->data_byte >= (valid_data_table_ptr[
 8000634:	4299      	cmp	r1, r3
 8000636:	db12      	blt.n	800065e <decode_ascii+0x68>
        (input_ptr->data_byte<=
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	785a      	ldrb	r2, [r3, #1]
          valid_data_table_ptr[valid_data_index + 1]))
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	3301      	adds	r3, #1
 8000640:	6939      	ldr	r1, [r7, #16]
 8000642:	440b      	add	r3, r1
 8000644:	781b      	ldrb	r3, [r3, #0]
          valid_data_index] &0x7f)) &&
 8000646:	429a      	cmp	r2, r3
 8000648:	d809      	bhi.n	800065e <decode_ascii+0x68>
      {
        /*input belongs to the valid command range so vector
        to the handling routine
        */
        command_handler = vector_table_ptr[vector_table_index];
 800064a:	7dbb      	ldrb	r3, [r7, #22]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4413      	add	r3, r2
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60bb      	str	r3, [r7, #8]
        (*command_handler)(input_ptr);
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	4798      	blx	r3
        return;
 800065c:	e02d      	b.n	80006ba <decode_ascii+0xc4>
      else
      {
        /*not in valid command range so increment the table
        indexes appropriately
        */
        valid_data_index += 2;
 800065e:	7dfb      	ldrb	r3, [r7, #23]
 8000660:	3302      	adds	r3, #2
 8000662:	75fb      	strb	r3, [r7, #23]
        vector_table_index++;
 8000664:	7dbb      	ldrb	r3, [r7, #22]
 8000666:	3301      	adds	r3, #1
 8000668:	75bb      	strb	r3, [r7, #22]
 800066a:	e017      	b.n	800069c <decode_ascii+0xa6>
      } /*else */
    } /*if */
    else
    {
      /*does not belong to a command range so process normally */
      if (input_ptr->data_byte ==
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	785a      	ldrb	r2, [r3, #1]
        valid_data_table_ptr[valid_data_index])
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	6939      	ldr	r1, [r7, #16]
 8000674:	440b      	add	r3, r1
 8000676:	781b      	ldrb	r3, [r3, #0]
      if (input_ptr->data_byte ==
 8000678:	429a      	cmp	r2, r3
 800067a:	d109      	bne.n	8000690 <decode_ascii+0x9a>
      {
        command_handler = vector_table_ptr[vector_table_index];
 800067c:	7dbb      	ldrb	r3, [r7, #22]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	60bb      	str	r3, [r7, #8]
        (*command_handler)(input_ptr);
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	4798      	blx	r3
        return;
 800068e:	e014      	b.n	80006ba <decode_ascii+0xc4>
      else
      {
        /*not equal to the currently indexed valid command so
        increment the table pointers
        */
        valid_data_index++;
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	3301      	adds	r3, #1
 8000694:	75fb      	strb	r3, [r7, #23]
        vector_table_index++;
 8000696:	7dbb      	ldrb	r3, [r7, #22]
 8000698:	3301      	adds	r3, #1
 800069a:	75bb      	strb	r3, [r7, #22]
  while (valid_data_table_ptr[valid_data_index] != 0xff)
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2bff      	cmp	r3, #255	; 0xff
 80006a6:	d1b5      	bne.n	8000614 <decode_ascii+0x1e>
  } /*while */

  /*only enter this section if the end of the table has been reached - have
  to vector to the currently pointed to procedure
  */
  command_handler = vector_table_ptr[vector_table_index];
 80006a8:	7dbb      	ldrb	r3, [r7, #22]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	60bb      	str	r3, [r7, #8]
  (*command_handler)(input_ptr);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	4798      	blx	r3
} /*end of decode_ascii */
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <char_decode>:
|
=========================================================================
*/

void char_decode(dec_input_struc *input_ptr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  /*firstly determine the mode - 0=> ascii, 1=> binary and then branch to
  the appropriate handling routine.
  */
  switch (input_ptr->char_dec_mode)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <char_decode+0x16>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d004      	beq.n	80006de <char_decode+0x1e>
      break;
    case BINARY_DECODING:
      decode_binary(input_ptr);
      break;
  } /*switch */
} /*end of char_decode */
 80006d4:	e007      	b.n	80006e6 <char_decode+0x26>
      decode_ascii(input_ptr);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff8d 	bl	80005f6 <decode_ascii>
      break;
 80006dc:	e003      	b.n	80006e6 <char_decode+0x26>
      decode_binary(input_ptr);
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fefe 	bl	80004e0 <decode_binary>
      break;
 80006e4:	bf00      	nop
} /*end of char_decode */
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <addr_decode>:
|
==========================================================================
*/

static dec_input_struc* addr_decode(addr_struc *addr_struc_ptr)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b085      	sub	sp, #20
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]

  /*search through the address table until the task queu address is found or
  the terminating address is located in the table
  */

  for (addr_tab_index = 0; addr_struc_ptr->valid_addr_tab_ptr[
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e013      	b.n	8000724 <addr_decode+0x36>
      addr_tab_index] != NULL_PTR; addr_tab_index++)
  {
    if (addr_struc_ptr->valid_addr_tab_ptr[addr_tab_index] ==
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	681a      	ldr	r2, [r3, #0]
                                            addr_struc_ptr->pvdRtnAddrQueueId)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	685b      	ldr	r3, [r3, #4]
    if (addr_struc_ptr->valid_addr_tab_ptr[addr_tab_index] ==
 800070c:	429a      	cmp	r2, r3
 800070e:	d106      	bne.n	800071e <addr_decode+0x30>
    {
      return (addr_struc_ptr->addr_vector_ptr[addr_tab_index]);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	e010      	b.n	8000740 <addr_decode+0x52>
      addr_tab_index] != NULL_PTR; addr_tab_index++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
  for (addr_tab_index = 0; addr_struc_ptr->valid_addr_tab_ptr[
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1e3      	bne.n	80006fc <addr_decode+0xe>
    }
  }

  /*if control reaches here then the end of the table has been reached */
  return (addr_struc_ptr->addr_vector_ptr[addr_tab_index]);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	681b      	ldr	r3, [r3, #0]
} /*end of addr_decode */
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <decode_mbx_mess>:
============================================================================
*/


osStatus_t decode_mbx_mess(addr_struc *addr_struc_ptr, unsigned long timeout)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint16_t mess_index, left_to_decode;
  dec_input_struc *input_ptr;
  tstMessEnvelope stMessEnvelope;

  /*the first thing to do is to get the message from the mail box */
  return_code = osMessageQueueGet(addr_struc_ptr->pvdTaskQueueId,
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f107 0108 	add.w	r1, r7, #8
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	f002 fd75 	bl	8003250 <osMessageQueueGet>
 8000766:	6278      	str	r0, [r7, #36]	; 0x24
                                            &stMessEnvelope, 0, timeout);
  /*now check to see if a message has been received */
  if (return_code != osOK)
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <decode_mbx_mess+0x26>
  {
    return return_code;
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	e02c      	b.n	80007cc <decode_mbx_mess+0x80>
   */

  /*return code contains the address of the task from which the message
  has been sent so put it into the addr_struc
  */
  addr_struc_ptr->pvdRtnAddrQueueId = stMessEnvelope.pvdSendTaskQueueId;
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	605a      	str	r2, [r3, #4]
   * sending task. If the address is not a legal one the routine still returns
   * with a pointer to a dec_input_struc. However it is a special one which
   * will handle the error and effectively flush the message from the illegal
   * sending task.
  */
  input_ptr = addr_decode(addr_struc_ptr);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ffb8 	bl	80006ee <addr_decode>
 800077e:	61f8      	str	r0, [r7, #28]

  /*
   * now copy the info_struc_ptr from the addr_struc to the dec_input_struc.
   */
  input_ptr->info_struc_ptr = addr_struc_ptr->info_struc_ptr;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	691a      	ldr	r2, [r3, #16]
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	611a      	str	r2, [r3, #16]

  /*
   * now enter the character decode loop an carry out the decoding of the
   * message received.
  */
  mess_index = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	847b      	strh	r3, [r7, #34]	; 0x22
  left_to_decode = stMessEnvelope.suinMessSize;
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	843b      	strh	r3, [r7, #32]
  while (left_to_decode--)
 8000790:	e00b      	b.n	80007aa <decode_mbx_mess+0x5e>
  {
    input_ptr->data_byte = stMessEnvelope.puchMess[mess_index];
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000796:	4413      	add	r3, r2
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	705a      	strb	r2, [r3, #1]
    char_decode(input_ptr);
 800079e:	69f8      	ldr	r0, [r7, #28]
 80007a0:	f7ff ff8e 	bl	80006c0 <char_decode>
    mess_index++;
 80007a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007a6:	3301      	adds	r3, #1
 80007a8:	847b      	strh	r3, [r7, #34]	; 0x22
  while (left_to_decode--)
 80007aa:	8c3b      	ldrh	r3, [r7, #32]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	843a      	strh	r2, [r7, #32]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1ee      	bne.n	8000792 <decode_mbx_mess+0x46>
  } /*while */

  if (stMessEnvelope.uchDynamicMemFlag == TRUE)
 80007b4:	7e3b      	ldrb	r3, [r7, #24]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d107      	bne.n	80007ca <decode_mbx_mess+0x7e>
  {
    /* Deallocate the memory for the message */
    return_code =  osMemoryPoolFree(addr_struc_ptr->pvdMemoryPoolId, (void*)(stMessEnvelope.puchMess));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 feee 	bl	80035a4 <osMemoryPoolFree>
 80007c8:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return return_code;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /*end of decode_mbx_mess */
 80007cc:	4618      	mov	r0, r3
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b09a      	sub	sp, #104	; 0x68
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t a0chSignOnMess[] = "\r\n\r\nCommand Decoder Demo Program\r\n\r\nInput memory location to view from 20000000 to 20020000 (in hex): ";
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <main+0x8c>)
 80007dc:	463b      	mov	r3, r7
 80007de:	4611      	mov	r1, r2
 80007e0:	2267      	movs	r2, #103	; 0x67
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 ffde 	bl	80067a4 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fd58 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f852 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 f8e4 	bl	80009bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f4:	f000 f8b8 	bl	8000968 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f8:	f002 fb5e 	bl	8002eb8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CharGenThreadQ */
  CharGenThreadQHandle = osMessageQueueNew (16, sizeof(tstMessEnvelope), &CharGenThreadQ_attributes);
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <main+0x90>)
 80007fe:	2114      	movs	r1, #20
 8000800:	2010      	movs	r0, #16
 8000802:	f002 fc50 	bl	80030a6 <osMessageQueueNew>
 8000806:	4602      	mov	r2, r0
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <main+0x94>)
 800080a:	601a      	str	r2, [r3, #0]

  /* creation of DecodingThreadQ */
  DecodingThreadQHandle = osMessageQueueNew (16, sizeof(tstMessEnvelope), &DecodingThreadQ_attributes);
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <main+0x98>)
 800080e:	2114      	movs	r1, #20
 8000810:	2010      	movs	r0, #16
 8000812:	f002 fc48 	bl	80030a6 <osMessageQueueNew>
 8000816:	4602      	mov	r2, r0
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <main+0x9c>)
 800081a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DecodingThread */
  DecodingThreadHandle = osThreadNew(fvdDecodingThread, NULL, &DecodingThread_attributes);
 800081c:	4a15      	ldr	r2, [pc, #84]	; (8000874 <main+0xa0>)
 800081e:	2100      	movs	r1, #0
 8000820:	4815      	ldr	r0, [pc, #84]	; (8000878 <main+0xa4>)
 8000822:	f002 fb93 	bl	8002f4c <osThreadNew>
 8000826:	4602      	mov	r2, r0
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <main+0xa8>)
 800082a:	601a      	str	r2, [r3, #0]

  /* creation of CharGenThread */
  CharGenThreadHandle = osThreadNew(fvdCharGenThread, NULL, &CharGenThread_attributes);
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <main+0xac>)
 800082e:	2100      	movs	r1, #0
 8000830:	4814      	ldr	r0, [pc, #80]	; (8000884 <main+0xb0>)
 8000832:	f002 fb8b 	bl	8002f4c <osThreadNew>
 8000836:	4602      	mov	r2, r0
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <main+0xb4>)
 800083a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /*
   * Allocate a pool of Dynamic memory from the Heap
   */
  pvdMyDynamicMemory = osMemoryPoolNew(1000, 1, NULL);
 800083c:	2200      	movs	r2, #0
 800083e:	2101      	movs	r1, #1
 8000840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000844:	f002 fd62 	bl	800330c <osMemoryPoolNew>
 8000848:	4602      	mov	r2, r0
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <main+0xb8>)
 800084c:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, a0chSignOnMess, sizeof(a0chSignOnMess), 20);
 800084e:	4639      	mov	r1, r7
 8000850:	2314      	movs	r3, #20
 8000852:	2267      	movs	r2, #103	; 0x67
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <main+0xbc>)
 8000856:	f001 ff90 	bl	800277a <HAL_UART_Transmit>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800085a:	f002 fb51 	bl	8002f00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x8a>
 8000860:	08006a04 	.word	0x08006a04
 8000864:	08006b88 	.word	0x08006b88
 8000868:	20004b64 	.word	0x20004b64
 800086c:	08006ba0 	.word	0x08006ba0
 8000870:	20004bb0 	.word	0x20004bb0
 8000874:	08006b40 	.word	0x08006b40
 8000878:	08000f11 	.word	0x08000f11
 800087c:	20004b60 	.word	0x20004b60
 8000880:	08006b64 	.word	0x08006b64
 8000884:	08000fb5 	.word	0x08000fb5
 8000888:	20004b5c 	.word	0x20004b5c
 800088c:	20004b68 	.word	0x20004b68
 8000890:	20004b6c 	.word	0x20004b6c

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 ff89 	bl	80067ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a27      	ldr	r2, [pc, #156]	; (8000960 <SystemClock_Config+0xcc>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <SystemClock_Config+0xcc>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <SystemClock_Config+0xd0>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <SystemClock_Config+0xd0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000904:	2308      	movs	r3, #8
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000908:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000912:	2307      	movs	r3, #7
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	4618      	mov	r0, r3
 800091c:	f000 ff96 	bl	800184c <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000926:	f000 fb8b 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2302      	movs	r3, #2
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000936:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2105      	movs	r1, #5
 8000948:	4618      	mov	r0, r3
 800094a:	f001 f9f7 	bl	8001d3c <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000954:	f000 fb74 	bl	8001040 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3750      	adds	r7, #80	; 0x50
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f001 fe9e 	bl	80026e0 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 fb49 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20004b6c 	.word	0x20004b6c
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	4ba1      	ldr	r3, [pc, #644]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4aa0      	ldr	r2, [pc, #640]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b9e      	ldr	r3, [pc, #632]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	4b9a      	ldr	r3, [pc, #616]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a99      	ldr	r2, [pc, #612]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b97      	ldr	r3, [pc, #604]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b93      	ldr	r3, [pc, #588]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a92      	ldr	r2, [pc, #584]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b90      	ldr	r3, [pc, #576]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b8c      	ldr	r3, [pc, #560]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a8b      	ldr	r2, [pc, #556]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b89      	ldr	r3, [pc, #548]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b85      	ldr	r3, [pc, #532]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a84      	ldr	r2, [pc, #528]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b82      	ldr	r3, [pc, #520]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b7e      	ldr	r3, [pc, #504]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a7d      	ldr	r2, [pc, #500]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b7b      	ldr	r3, [pc, #492]	; (8000c5c <MX_GPIO_Init+0x2a0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4878      	ldr	r0, [pc, #480]	; (8000c60 <MX_GPIO_Init+0x2a4>)
 8000a80:	f000 feca 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	4876      	ldr	r0, [pc, #472]	; (8000c64 <MX_GPIO_Init+0x2a8>)
 8000a8a:	f000 fec5 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a94:	4874      	ldr	r0, [pc, #464]	; (8000c68 <MX_GPIO_Init+0x2ac>)
 8000a96:	f000 febf 	bl	8001818 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	486b      	ldr	r0, [pc, #428]	; (8000c60 <MX_GPIO_Init+0x2a4>)
 8000ab2:	f000 fd17 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4865      	ldr	r0, [pc, #404]	; (8000c64 <MX_GPIO_Init+0x2a8>)
 8000ace:	f000 fd09 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	485d      	ldr	r0, [pc, #372]	; (8000c64 <MX_GPIO_Init+0x2a8>)
 8000aee:	f000 fcf9 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000af6:	4b5d      	ldr	r3, [pc, #372]	; (8000c6c <MX_GPIO_Init+0x2b0>)
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	485a      	ldr	r0, [pc, #360]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000b06:	f000 fced 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4852      	ldr	r0, [pc, #328]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000b26:	f000 fcdd 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b2a:	23e0      	movs	r3, #224	; 0xe0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	484a      	ldr	r0, [pc, #296]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000b46:	f000 fccd 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4845      	ldr	r0, [pc, #276]	; (8000c74 <MX_GPIO_Init+0x2b8>)
 8000b5e:	f000 fcc1 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b74:	2305      	movs	r3, #5
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	483d      	ldr	r0, [pc, #244]	; (8000c74 <MX_GPIO_Init+0x2b8>)
 8000b80:	f000 fcb0 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b84:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b88:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4832      	ldr	r0, [pc, #200]	; (8000c68 <MX_GPIO_Init+0x2ac>)
 8000b9e:	f000 fca1 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4829      	ldr	r0, [pc, #164]	; (8000c64 <MX_GPIO_Init+0x2a8>)
 8000bc0:	f000 fc90 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4825      	ldr	r0, [pc, #148]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000bda:	f000 fc83 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000bde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481d      	ldr	r0, [pc, #116]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000bfc:	f000 fc72 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c00:	2320      	movs	r3, #32
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4815      	ldr	r0, [pc, #84]	; (8000c68 <MX_GPIO_Init+0x2ac>)
 8000c14:	f000 fc66 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <MX_GPIO_Init+0x2b8>)
 8000c36:	f000 fc55 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_GPIO_Init+0x2b0>)
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_GPIO_Init+0x2a4>)
 8000c4e:	f000 fc49 	bl	80014e4 <HAL_GPIO_Init>

}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	; 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	10120000 	.word	0x10120000
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400

08000c78 <fvdAccum_AsciiNum>:
 * Param: dec_input_struc *
 *
 * Return: void
 */
void fvdAccum_AsciiNum(dec_input_struc *pstDecoderStruc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint8_t uchInputChar = pstDecoderStruc->data_byte;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	72fb      	strb	r3, [r7, #11]
  stCharInfo_Type * pstCharInfo;

  /* Check to see if the array length is going to be exceeded
   * if we put the new character into the array.
   */
  pstCharInfo = (stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	60fb      	str	r3, [r7, #12]

  if ( pstCharInfo->uchCharCnt < pstCharInfo->uchArraySize - 1)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	7adb      	ldrb	r3, [r3, #11]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	da11      	bge.n	8000cc0 <fvdAccum_AsciiNum+0x48>
  {
    pstCharInfo->a0uchHexNum[pstCharInfo->uchCharCnt++] = uchInputChar;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	b2d1      	uxtb	r1, r2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	7011      	strb	r1, [r2, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	7afa      	ldrb	r2, [r7, #11]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	440b      	add	r3, r1
 8000cb0:	705a      	strb	r2, [r3, #1]
    // Echo to the terminal
    HAL_UART_Transmit(&huart2, &uchInputChar, 1, 10);
 8000cb2:	f107 010b 	add.w	r1, r7, #11
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <fvdAccum_AsciiNum+0x50>)
 8000cbc:	f001 fd5d 	bl	800277a <HAL_UART_Transmit>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20004b6c 	.word	0x20004b6c

08000ccc <fvdCR_received>:
 *
 * Returns: void
 *
 */
void fvdCR_received(dec_input_struc *pstDecoderStruc)
{
 8000ccc:	b5b0      	push	{r4, r5, r7, lr}
 8000cce:	b0ac      	sub	sp, #176	; 0xb0
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t *puinMemLoc;

  char a20chReturned_ascii[20];

  // Messages
  char a0chMess1[] =
 8000cd4:	4b61      	ldr	r3, [pc, #388]	; (8000e5c <fvdCR_received+0x190>)
 8000cd6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000cda:	461d      	mov	r5, r3
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	8023      	strh	r3, [r4, #0]
      {
          "Contents of memory location are: "
      };
  char a0chMess2[] =
 8000ce8:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <fvdCR_received+0x194>)
 8000cea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000cee:	461d      	mov	r5, r3
 8000cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	7023      	strb	r3, [r4, #0]
      {
          "No characters input. Try again\r\n"
      };

  char a0chMess3[] =
 8000cfc:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <fvdCR_received+0x198>)
 8000cfe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000d02:	461d      	mov	r5, r3
 8000d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	8023      	strh	r3, [r4, #0]
      {
          "Illegal memory range. Try again\r\n"
      };

  char a0chMess4[] =
 8000d10:	4b55      	ldr	r3, [pc, #340]	; (8000e68 <fvdCR_received+0x19c>)
 8000d12:	f107 0408 	add.w	r4, r7, #8
 8000d16:	461d      	mov	r5, r3
 8000d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d20:	c407      	stmia	r4!, {r0, r1, r2}
 8000d22:	8023      	strh	r3, [r4, #0]
      {
          "Input a new memory address:\r\n"
      };

  // Write CRLF to the terminal
  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8000d24:	230a      	movs	r3, #10
 8000d26:	2202      	movs	r2, #2
 8000d28:	4950      	ldr	r1, [pc, #320]	; (8000e6c <fvdCR_received+0x1a0>)
 8000d2a:	4851      	ldr	r0, [pc, #324]	; (8000e70 <fvdCR_received+0x1a4>)
 8000d2c:	f001 fd25 	bl	800277a <HAL_UART_Transmit>

  puchCharCnt = &(((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (*puchCharCnt != 0)
 8000d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d076      	beq.n	8000e30 <fvdCR_received+0x164>
  {
    // There are ascii characters in the buffer.
    // Convert the buffer contents to a string
    ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->a0uchHexNum[*puchCharCnt] = '\0';
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2200      	movs	r2, #0
 8000d50:	705a      	strb	r2, [r3, #1]

    // Now convert ascii hex number to an binary integer
    puinMemLoc = (uint32_t*)strtol((char *)((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->a0uchHexNum,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	3301      	adds	r3, #1
 8000d58:	2210      	movs	r2, #16
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fdaf 	bl	80068c0 <strtol>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                                                   NULL, 16);
    ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uintAddress = (uint32_t)puinMemLoc;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d70:	60da      	str	r2, [r3, #12]

    if (((uint32_t)puinMemLoc >= 0x20000000) && ((uint32_t)puinMemLoc < 0x20020000))
 8000d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d7a:	d33e      	bcc.n	8000dfa <fvdCR_received+0x12e>
 8000d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d80:	4a3c      	ldr	r2, [pc, #240]	; (8000e74 <fvdCR_received+0x1a8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d839      	bhi.n	8000dfa <fvdCR_received+0x12e>
       * It corrupts the software as it uses the malloc routine somewhere
       * under the hood. This is not consistent with FreeRTOS.
       */
      // sprintf(a20chReturned_ascii, "%lx", (uint32_t)puinMemLoc);

      itoa((uint32_t)*puinMemLoc, a20chReturned_ascii, 16);
 8000d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d92:	2210      	movs	r2, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	f005 fd03 	bl	80067a0 <itoa>
      strcat(a20chReturned_ascii, "\r\n");
 8000d9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fa16 	bl	80001d0 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dac:	4413      	add	r3, r2
 8000dae:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <fvdCR_received+0x1a0>)
 8000db0:	8811      	ldrh	r1, [r2, #0]
 8000db2:	7892      	ldrb	r2, [r2, #2]
 8000db4:	8019      	strh	r1, [r3, #0]
 8000db6:	709a      	strb	r2, [r3, #2]

      HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess1, strlen(a0chMess1), 10);
 8000db8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fa07 	bl	80001d0 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000dca:	230a      	movs	r3, #10
 8000dcc:	4828      	ldr	r0, [pc, #160]	; (8000e70 <fvdCR_received+0x1a4>)
 8000dce:	f001 fcd4 	bl	800277a <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)a20chReturned_ascii, strlen(a20chReturned_ascii), 10);
 8000dd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff f9fa 	bl	80001d0 <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000de4:	230a      	movs	r3, #10
 8000de6:	4822      	ldr	r0, [pc, #136]	; (8000e70 <fvdCR_received+0x1a4>)
 8000de8:	f001 fcc7 	bl	800277a <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nInput a new memory location in hex: ",
 8000dec:	230a      	movs	r3, #10
 8000dee:	2226      	movs	r2, #38	; 0x26
 8000df0:	4921      	ldr	r1, [pc, #132]	; (8000e78 <fvdCR_received+0x1ac>)
 8000df2:	481f      	ldr	r0, [pc, #124]	; (8000e70 <fvdCR_received+0x1a4>)
 8000df4:	f001 fcc1 	bl	800277a <HAL_UART_Transmit>
 8000df8:	e027      	b.n	8000e4a <fvdCR_received+0x17e>
                                    strlen("\r\nInput a new memory location in hex: "), 10);
    }
    else
    {
      HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess3, strlen(a0chMess3), 10);
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e6 	bl	80001d0 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	4818      	ldr	r0, [pc, #96]	; (8000e70 <fvdCR_received+0x1a4>)
 8000e10:	f001 fcb3 	bl	800277a <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess4, strlen(a0chMess4), 10);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f9d9 	bl	80001d0 <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f107 0108 	add.w	r1, r7, #8
 8000e26:	230a      	movs	r3, #10
 8000e28:	4811      	ldr	r0, [pc, #68]	; (8000e70 <fvdCR_received+0x1a4>)
 8000e2a:	f001 fca6 	bl	800277a <HAL_UART_Transmit>
 8000e2e:	e00c      	b.n	8000e4a <fvdCR_received+0x17e>
    }
  }
  else
  {
    // No valid characters have been input
    HAL_UART_Transmit(&huart2, (uint8_t*)a0chMess2, strlen(a0chMess2), 10);
 8000e30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff f9cb 	bl	80001d0 <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000e42:	230a      	movs	r3, #10
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <fvdCR_received+0x1a4>)
 8000e46:	f001 fc98 	bl	800277a <HAL_UART_Transmit>
  }
  // HAL_UART_Transmit(&huart2, (uint8_t*)"Got to CR handler", strlen("Got to CR handler"), 10);
  *puchCharCnt = 0;
 8000e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	37b0      	adds	r7, #176	; 0xb0
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bdb0      	pop	{r4, r5, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08006a98 	.word	0x08006a98
 8000e60:	08006abc 	.word	0x08006abc
 8000e64:	08006ae0 	.word	0x08006ae0
 8000e68:	08006b04 	.word	0x08006b04
 8000e6c:	08006a6c 	.word	0x08006a6c
 8000e70:	20004b6c 	.word	0x20004b6c
 8000e74:	2001ffff 	.word	0x2001ffff
 8000e78:	08006a70 	.word	0x08006a70

08000e7c <fvdBS_received>:
 *
 * Simply deletes a character if there is a character to be deleted.
 *
 */
void fvdBS_received(dec_input_struc *pstDecoderStruc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint16_t uchCharCnt;

  // The user has request that the previous character be deleted.
  uchCharCnt = ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	81fb      	strh	r3, [r7, #14]

  if (uchCharCnt > 0)
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <fvdBS_received+0x2e>
  {
    (((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt)--;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	3a01      	subs	r2, #1
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)"\b \b", 3, 10);
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4904      	ldr	r1, [pc, #16]	; (8000eb4 <fvdBS_received+0x38>)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <fvdBS_received+0x3c>)
 8000ea6:	f001 fc68 	bl	800277a <HAL_UART_Transmit>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08006b24 	.word	0x08006b24
 8000eb8:	20004b6c 	.word	0x20004b6c

08000ebc <fvdDEL_received>:
 *
 * Simply deletes a character if there is a character to be deleted.
 *
 */
void fvdDEL_received(dec_input_struc *pstDecoderStruc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint8_t uchCharCnt;

  // The user has request that the previous character be deleted.
  uchCharCnt = ((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	73fb      	strb	r3, [r7, #15]

  if (uchCharCnt > 0)
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <fvdDEL_received+0x2e>
  {
    (((stCharInfo_Type *)(pstDecoderStruc->info_struc_ptr))->uchCharCnt)--;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)"\b \b", 3, 10);
 8000ede:	230a      	movs	r3, #10
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <fvdDEL_received+0x38>)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <fvdDEL_received+0x3c>)
 8000ee6:	f001 fc48 	bl	800277a <HAL_UART_Transmit>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08006b24 	.word	0x08006b24
 8000ef8:	20004b6c 	.word	0x20004b6c

08000efc <fvdInvalid_Char>:
 * This function is entered if the user types and invalid character in a particular input table
 * Does not echo the character and returns to the same set of tables.
 *
 */
void fvdInvalid_Char(dec_input_struc *pstDecoderStruc)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  ;
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <fvdDecodingThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fvdDecodingThread */
void fvdDecodingThread(void *argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b09a      	sub	sp, #104	; 0x68
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  // Allocate valid tasks table
  osMessageQueueId_t pvdValidAddr_DecodingThread[2];

  // Initialise valid tasks table.
  pvdValidAddr_DecodingThread[0] = CharGenThreadQHandle;    // CharGenThread Q handle
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <fvdDecodingThread+0x88>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	613b      	str	r3, [r7, #16]
  pvdValidAddr_DecodingThread[1] = NULL;                    // Termination NULL
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]

  // Associated decode structures for the sending tasks
  dec_input_struc *pstSenderDecStruc[2] =
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	60fb      	str	r3, [r7, #12]

  /*
   * Initialise the dec_input_struc with initial decode tables
  */
  // Firstly the table for the valid sending task CharGenThread
  stDecodingTaskDecStruc.char_dec_mode = ASCII_DECODING;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  stDecodingTaskDecStruc.valid_data_table_ptr = a10uchVdt_DT0;
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <fvdDecodingThread+0x8c>)
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  stDecodingTaskDecStruc.vector_table_ptr = a7pfvdVt_DT0;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <fvdDecodingThread+0x90>)
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  stDecodingTaskDecStruc.bit_table_ptr = NULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  stDecodingTaskDecStruc.info_struc_ptr = (void*)&stInputDataStore;
 8000f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c

  // Now the initial the table if there is an error in the sending task
  stDecodingTaskAddrERROR.char_dec_mode = ASCII_DECODING;
 8000f46:	2300      	movs	r3, #0
 8000f48:	763b      	strb	r3, [r7, #24]
  stDecodingTaskAddrERROR.valid_data_table_ptr = a1uchVdt_DT0;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <fvdDecodingThread+0x94>)
 8000f4c:	61fb      	str	r3, [r7, #28]
  stDecodingTaskAddrERROR.vector_table_ptr = a1pfvdVt_DT0;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <fvdDecodingThread+0x98>)
 8000f50:	623b      	str	r3, [r7, #32]
  stDecodingTaskAddrERROR.bit_table_ptr = NULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24

  /*
   * Initialise components of the valid sending task address structure
   */
  stDecTaskAddrStruc.pvdTaskQueueId = DecodingThreadQHandle;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <fvdDecodingThread+0x9c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	653b      	str	r3, [r7, #80]	; 0x50
  stDecTaskAddrStruc.valid_addr_tab_ptr = pvdValidAddr_DecodingThread;
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
  stDecTaskAddrStruc.addr_vector_ptr = pstSenderDecStruc;
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	65fb      	str	r3, [r7, #92]	; 0x5c
  stDecTaskAddrStruc.pvdMemoryPoolId = pvdMyDynamicMemory;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <fvdDecodingThread+0xa0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	667b      	str	r3, [r7, #100]	; 0x64
  stDecTaskAddrStruc.info_struc_ptr = (void*)&stInputDataStore;
 8000f6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60

  /*
   * Initialise the structure used to accumulate the user input characters
   */
  stInputDataStore.uchCharCnt = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  stInputDataStore.uchArraySize = INT_ARRAY_SIZE;
 8000f7a:	2309      	movs	r3, #9
 8000f7c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f002 f875 	bl	8003070 <osDelay>
    // Now call the decoder with the relevant data structures
    decode_mbx_mess(&stDecTaskAddrStruc, osWaitForever);
 8000f86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fbdc 	bl	800074c <decode_mbx_mess>
    osDelay(1);
 8000f94:	e7f4      	b.n	8000f80 <fvdDecodingThread+0x70>
 8000f96:	bf00      	nop
 8000f98:	20004b64 	.word	0x20004b64
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000028 	.word	0x20000028
 8000fa8:	2000002c 	.word	0x2000002c
 8000fac:	20004bb0 	.word	0x20004bb0
 8000fb0:	20004b68 	.word	0x20004b68

08000fb4 <fvdCharGenThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fvdCharGenThread */
void fvdCharGenThread(void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint8_t chCharData[2];

  /*
   * Now set up some static values in the envelope
   */
  stMyEnvelope.pvdRecipientQueueId = DecodingThreadQHandle;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <fvdCharGenThread+0x58>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  stMyEnvelope.pvdSendTaskQueueId = CharGenThreadQHandle;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <fvdCharGenThread+0x5c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
  stMyEnvelope.uchDynamicMemFlag = TRUE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	773b      	strb	r3, [r7, #28]
  stMyEnvelope.suinMessSize = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
    HAL_UART_Receive(&huart2, chCharData, 1, HAL_MAX_DELAY);
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2201      	movs	r2, #1
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <fvdCharGenThread+0x60>)
 8000fdc:	f001 fc5f 	bl	800289e <HAL_UART_Receive>
     * Have now received a character so send it to the decoding task.
     *
     * Firstly allocated a byte of memory for the message, assign
     * the received byte to it, place the pointer in the envelope.
     */
    stMyEnvelope.puchMess = (uint8_t*)osMemoryPoolAlloc(pvdMyDynamicMemory, osWaitForever);
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <fvdCharGenThread+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fa65 	bl	80034b8 <osMemoryPoolAlloc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	61bb      	str	r3, [r7, #24]

    // Now copy the received character into the newly allocated memory
    *(stMyEnvelope.puchMess) = chCharData[0];
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	7a3a      	ldrb	r2, [r7, #8]
 8000ff6:	701a      	strb	r2, [r3, #0]

    osMessageQueuePut( stMyEnvelope.pvdRecipientQueueId, &stMyEnvelope, 0, osWaitForever);
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f107 010c 	add.w	r1, r7, #12
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	2200      	movs	r2, #0
 8001004:	f002 f8c4 	bl	8003190 <osMessageQueuePut>
    HAL_UART_Receive(&huart2, chCharData, 1, HAL_MAX_DELAY);
 8001008:	e7e2      	b.n	8000fd0 <fvdCharGenThread+0x1c>
 800100a:	bf00      	nop
 800100c:	20004bb0 	.word	0x20004bb0
 8001010:	20004b64 	.word	0x20004b64
 8001014:	20004b6c 	.word	0x20004b6c
 8001018:	20004b68 	.word	0x20004b68

0800101c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800102e:	f000 f957 	bl	80012e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40001000 	.word	0x40001000

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001046:	e7fe      	b.n	8001046 <Error_Handler+0x6>

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_MspInit+0x54>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_MspInit+0x54>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x54>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_MspInit+0x54>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_MspInit+0x54>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_MspInit+0x54>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	210f      	movs	r1, #15
 800108a:	f06f 0001 	mvn.w	r0, #1
 800108e:	f000 f9ff 	bl	8001490 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_UART_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12b      	bne.n	800111a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_UART_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fa:	230c      	movs	r3, #12
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110a:	2307      	movs	r3, #7
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_UART_MspInit+0x8c>)
 8001116:	f000 f9e5 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40004400 	.word	0x40004400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	2036      	movs	r0, #54	; 0x36
 8001146:	f000 f9a3 	bl	8001490 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800114a:	2036      	movs	r0, #54	; 0x36
 800114c:	f000 f9bc 	bl	80014c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_InitTick+0xa4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_InitTick+0xa4>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_InitTick+0xa4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800116c:	f107 0210 	add.w	r2, r7, #16
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 ffd2 	bl	8002120 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800117c:	f000 ffa8 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8001180:	4603      	mov	r3, r0
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_InitTick+0xa8>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9b      	lsrs	r3, r3, #18
 8001190:	3b01      	subs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_InitTick+0xac>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_InitTick+0xb0>)
 8001198:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_InitTick+0xac>)
 800119c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_InitTick+0xac>)
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_InitTick+0xac>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_InitTick+0xac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_InitTick+0xac>)
 80011b6:	f000 ffe5 	bl	8002184 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d104      	bne.n	80011ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <HAL_InitTick+0xac>)
 80011c2:	f001 f839 	bl	8002238 <HAL_TIM_Base_Start_IT>
 80011c6:	4603      	mov	r3, r0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3730      	adds	r7, #48	; 0x30
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	20004bb4 	.word	0x20004bb4
 80011e0:	40001000 	.word	0x40001000

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <NMI_Handler+0x4>

080011ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler+0x4>

08001202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM6_DAC_IRQHandler+0x10>)
 8001216:	f001 f87f 	bl	8002318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20004bb4 	.word	0x20004bb4

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001264:	4c0b      	ldr	r4, [pc, #44]	; (8001294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001272:	f7ff ffd7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f005 fa57 	bl	8006728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff faab 	bl	80007d4 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800128c:	08006d10 	.word	0x08006d10
  ldr r2, =_sbss
 8001290:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001294:	20004c40 	.word	0x20004c40

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f8d8 	bl	800147a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff ff30 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff feba 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000038 	.word	0x20000038
 8001304:	20004bfc 	.word	0x20004bfc

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20004bfc 	.word	0x20004bfc

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff4c 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a2:	f7ff ff61 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	6978      	ldr	r0, [r7, #20]
 80014ae:	f7ff ffb1 	bl	8001414 <NVIC_EncodePriority>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff80 	bl	80013c0 <__NVIC_SetPriority>
}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff54 	bl	8001384 <__NVIC_EnableIRQ>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e16b      	b.n	80017d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001500:	2201      	movs	r2, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	f040 815a 	bne.w	80017d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d005      	beq.n	8001536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	2b02      	cmp	r3, #2
 8001534:	d130      	bne.n	8001598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 0201 	and.w	r2, r3, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d017      	beq.n	80015d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d123      	bne.n	8001628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80b4 	beq.w	80017d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <HAL_GPIO_Init+0x308>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a5e      	ldr	r2, [pc, #376]	; (80017ec <HAL_GPIO_Init+0x308>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <HAL_GPIO_Init+0x308>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001686:	4a5a      	ldr	r2, [pc, #360]	; (80017f0 <HAL_GPIO_Init+0x30c>)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_GPIO_Init+0x310>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d02b      	beq.n	800170a <HAL_GPIO_Init+0x226>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a50      	ldr	r2, [pc, #320]	; (80017f8 <HAL_GPIO_Init+0x314>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d025      	beq.n	8001706 <HAL_GPIO_Init+0x222>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4f      	ldr	r2, [pc, #316]	; (80017fc <HAL_GPIO_Init+0x318>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01f      	beq.n	8001702 <HAL_GPIO_Init+0x21e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4e      	ldr	r2, [pc, #312]	; (8001800 <HAL_GPIO_Init+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d019      	beq.n	80016fe <HAL_GPIO_Init+0x21a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4d      	ldr	r2, [pc, #308]	; (8001804 <HAL_GPIO_Init+0x320>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0x216>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <HAL_GPIO_Init+0x324>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_GPIO_Init+0x212>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4b      	ldr	r2, [pc, #300]	; (800180c <HAL_GPIO_Init+0x328>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x20e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4a      	ldr	r2, [pc, #296]	; (8001810 <HAL_GPIO_Init+0x32c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_GPIO_Init+0x20a>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e00e      	b.n	800170c <HAL_GPIO_Init+0x228>
 80016ee:	2308      	movs	r3, #8
 80016f0:	e00c      	b.n	800170c <HAL_GPIO_Init+0x228>
 80016f2:	2306      	movs	r3, #6
 80016f4:	e00a      	b.n	800170c <HAL_GPIO_Init+0x228>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e008      	b.n	800170c <HAL_GPIO_Init+0x228>
 80016fa:	2304      	movs	r3, #4
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x228>
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x228>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x228>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x228>
 800170a:	2300      	movs	r3, #0
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f002 0203 	and.w	r2, r2, #3
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	4093      	lsls	r3, r2
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171c:	4934      	ldr	r1, [pc, #208]	; (80017f0 <HAL_GPIO_Init+0x30c>)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <HAL_GPIO_Init+0x330>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800174e:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_GPIO_Init+0x330>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_GPIO_Init+0x330>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <HAL_GPIO_Init+0x330>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_GPIO_Init+0x330>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <HAL_GPIO_Init+0x330>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x330>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_GPIO_Init+0x330>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	f67f ae90 	bls.w	8001500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e0:	bf00      	nop
 80017e2:	3724      	adds	r7, #36	; 0x24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40021400 	.word	0x40021400
 800180c:	40021800 	.word	0x40021800
 8001810:	40021c00 	.word	0x40021c00
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e264      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d075      	beq.n	8001956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186a:	4ba3      	ldr	r3, [pc, #652]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b04      	cmp	r3, #4
 8001874:	d00c      	beq.n	8001890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800187e:	2b08      	cmp	r3, #8
 8001880:	d112      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001882:	4b9d      	ldr	r3, [pc, #628]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188e:	d10b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4b99      	ldr	r3, [pc, #612]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d05b      	beq.n	8001954 <HAL_RCC_OscConfig+0x108>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d157      	bne.n	8001954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e23f      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x74>
 80018b2:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a90      	ldr	r2, [pc, #576]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xb0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x98>
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a8a      	ldr	r2, [pc, #552]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xb0>
 80018e4:	4b84      	ldr	r3, [pc, #528]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a83      	ldr	r2, [pc, #524]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b81      	ldr	r3, [pc, #516]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a80      	ldr	r2, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fd00 	bl	8001308 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fcfc 	bl	8001308 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e204      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xc0>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fcec 	bl	8001308 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fce8 	bl	8001308 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1f0      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0xe8>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001962:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001976:	2b08      	cmp	r3, #8
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x152>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1c4      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4952      	ldr	r1, [pc, #328]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_RCC_OscConfig+0x2b0>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fca1 	bl	8001308 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fc9d 	bl	8001308 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1a5      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4940      	ldr	r1, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x2b0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc80 	bl	8001308 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fc7c 	bl	8001308 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e184      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d030      	beq.n	8001a98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x2b4>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fc60 	bl	8001308 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc5c 	bl	8001308 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e164      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x200>
 8001a6a:	e015      	b.n	8001a98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x2b4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fc49 	bl	8001308 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fc45 	bl	8001308 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e14d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80a0 	beq.w	8001be6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x2b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d121      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_RCC_OscConfig+0x2b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_RCC_OscConfig+0x2b8>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fc0b 	bl	8001308 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e011      	b.n	8001b1a <HAL_RCC_OscConfig+0x2ce>
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470000 	.word	0x42470000
 8001b00:	42470e80 	.word	0x42470e80
 8001b04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b08:	f7ff fbfe 	bl	8001308 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e106      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b85      	ldr	r3, [pc, #532]	; (8001d30 <HAL_RCC_OscConfig+0x4e4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d106      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2f0>
 8001b2e:	4b81      	ldr	r3, [pc, #516]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a80      	ldr	r2, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	e01c      	b.n	8001b76 <HAL_RCC_OscConfig+0x32a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x312>
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x32a>
 8001b5e:	4b75      	ldr	r3, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a74      	ldr	r2, [pc, #464]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fbc3 	bl	8001308 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff fbbf 	bl	8001308 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0c5      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	4b65      	ldr	r3, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCC_OscConfig+0x33a>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fbad 	bl	8001308 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fba9 	bl	8001308 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0af      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bda:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 809b 	beq.w	8001d26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d05c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d141      	bne.n	8001c88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x4ec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fb7d 	bl	8001308 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fb79 	bl	8001308 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e081      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c24:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5a:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <HAL_RCC_OscConfig+0x4ec>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb52 	bl	8001308 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff fb4e 	bl	8001308 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e056      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x41c>
 8001c86:	e04e      	b.n	8001d26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x4ec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fb3b 	bl	8001308 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff fb37 	bl	8001308 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e03f      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x44a>
 8001cb4:	e037      	b.n	8001d26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e032      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_RCC_OscConfig+0x4e8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d028      	beq.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d121      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d11a      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d111      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40007000 	.word	0x40007000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	42470060 	.word	0x42470060

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0cc      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d90c      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d044      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e067      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4934      	ldr	r1, [pc, #208]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff fa6c 	bl	8001308 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff fa68 	bl	8001308 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e04f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f821 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f924 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08006bb8 	.word	0x08006bb8
 8001f00:	20000030 	.word	0x20000030
 8001f04:	20000034 	.word	0x20000034

08001f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	2300      	movs	r3, #0
 8001f18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d007      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0x32>
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d008      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x38>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 80b4 	bne.w	800209c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b5e      	ldr	r3, [pc, #376]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f36:	60bb      	str	r3, [r7, #8]
       break;
 8001f38:	e0b3      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f3a:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f3c:	60bb      	str	r3, [r7, #8]
      break;
 8001f3e:	e0b0      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f40:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4a:	4b58      	ldr	r3, [pc, #352]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d04a      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f56:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	f04f 0400 	mov.w	r4, #0
 8001f60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	ea03 0501 	and.w	r5, r3, r1
 8001f6c:	ea04 0602 	and.w	r6, r4, r2
 8001f70:	4629      	mov	r1, r5
 8001f72:	4632      	mov	r2, r6
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	0154      	lsls	r4, r2, #5
 8001f7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f82:	014b      	lsls	r3, r1, #5
 8001f84:	4619      	mov	r1, r3
 8001f86:	4622      	mov	r2, r4
 8001f88:	1b49      	subs	r1, r1, r5
 8001f8a:	eb62 0206 	sbc.w	r2, r2, r6
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	0194      	lsls	r4, r2, #6
 8001f98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f9c:	018b      	lsls	r3, r1, #6
 8001f9e:	1a5b      	subs	r3, r3, r1
 8001fa0:	eb64 0402 	sbc.w	r4, r4, r2
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	00e2      	lsls	r2, r4, #3
 8001fae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fb2:	00d9      	lsls	r1, r3, #3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	195b      	adds	r3, r3, r5
 8001fba:	eb44 0406 	adc.w	r4, r4, r6
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	0262      	lsls	r2, r4, #9
 8001fc8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fcc:	0259      	lsls	r1, r3, #9
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4623      	mov	r3, r4
 8001fe0:	f7fe f8fe 	bl	80001e0 <__aeabi_uldivmod>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e049      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	f04f 0400 	mov.w	r4, #0
 8001ff6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	ea03 0501 	and.w	r5, r3, r1
 8002002:	ea04 0602 	and.w	r6, r4, r2
 8002006:	4629      	mov	r1, r5
 8002008:	4632      	mov	r2, r6
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	0154      	lsls	r4, r2, #5
 8002014:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002018:	014b      	lsls	r3, r1, #5
 800201a:	4619      	mov	r1, r3
 800201c:	4622      	mov	r2, r4
 800201e:	1b49      	subs	r1, r1, r5
 8002020:	eb62 0206 	sbc.w	r2, r2, r6
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	f04f 0400 	mov.w	r4, #0
 800202c:	0194      	lsls	r4, r2, #6
 800202e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002032:	018b      	lsls	r3, r1, #6
 8002034:	1a5b      	subs	r3, r3, r1
 8002036:	eb64 0402 	sbc.w	r4, r4, r2
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	00e2      	lsls	r2, r4, #3
 8002044:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002048:	00d9      	lsls	r1, r3, #3
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	195b      	adds	r3, r3, r5
 8002050:	eb44 0406 	adc.w	r4, r4, r6
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	02a2      	lsls	r2, r4, #10
 800205e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002062:	0299      	lsls	r1, r3, #10
 8002064:	460b      	mov	r3, r1
 8002066:	4614      	mov	r4, r2
 8002068:	4618      	mov	r0, r3
 800206a:	4621      	mov	r1, r4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f04f 0400 	mov.w	r4, #0
 8002072:	461a      	mov	r2, r3
 8002074:	4623      	mov	r3, r4
 8002076:	f7fe f8b3 	bl	80001e0 <__aeabi_uldivmod>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	3301      	adds	r3, #1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	60bb      	str	r3, [r7, #8]
      break;
 800209a:	e002      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800209e:	60bb      	str	r3, [r7, #8]
      break;
 80020a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a2:	68bb      	ldr	r3, [r7, #8]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000030 	.word	0x20000030

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d8:	4601      	mov	r1, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0a9b      	lsrs	r3, r3, #10
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08006bc8 	.word	0x08006bc8

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020fc:	f7ff ffdc 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 8002100:	4601      	mov	r1, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0b5b      	lsrs	r3, r3, #13
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4a03      	ldr	r2, [pc, #12]	; (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	08006bc8 	.word	0x08006bc8

08002120 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	220f      	movs	r2, #15
 800212e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_RCC_GetClockConfig+0x60>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0207 	and.w	r2, r3, #7
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40023c00 	.word	0x40023c00

08002184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e041      	b.n	800221a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f839 	bl	8002222 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f000 f9d8 	bl	8002578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d001      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e04e      	b.n	80022ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <HAL_TIM_Base_Start_IT+0xc4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d022      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x80>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d01d      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x80>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_TIM_Base_Start_IT+0xc8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d018      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x80>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_TIM_Base_Start_IT+0xcc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x80>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_TIM_Base_Start_IT+0xd0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00e      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x80>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_TIM_Base_Start_IT+0xd4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x80>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_TIM_Base_Start_IT+0xd8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x80>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_TIM_Base_Start_IT+0xdc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d111      	bne.n	80022dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d010      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	e007      	b.n	80022ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010000 	.word	0x40010000
 8002300:	40000400 	.word	0x40000400
 8002304:	40000800 	.word	0x40000800
 8002308:	40000c00 	.word	0x40000c00
 800230c:	40010400 	.word	0x40010400
 8002310:	40014000 	.word	0x40014000
 8002314:	40001800 	.word	0x40001800

08002318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b02      	cmp	r3, #2
 800232c:	d122      	bne.n	8002374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d11b      	bne.n	8002374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0202 	mvn.w	r2, #2
 8002344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8ee 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8e0 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f8f1 	bl	8002550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d122      	bne.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d11b      	bne.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0204 	mvn.w	r2, #4
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8c4 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f8b6 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8c7 	bl	8002550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d122      	bne.n	800241c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d11b      	bne.n	800241c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0208 	mvn.w	r2, #8
 80023ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2204      	movs	r2, #4
 80023f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f89a 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f88c 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f89d 	bl	8002550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b10      	cmp	r3, #16
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b10      	cmp	r3, #16
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0210 	mvn.w	r2, #16
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2208      	movs	r2, #8
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f870 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f862 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f873 	bl	8002550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d10e      	bne.n	800249c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0201 	mvn.w	r2, #1
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fdc0 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d10e      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d107      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f902 	bl	80026cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f838 	bl	8002564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b20      	cmp	r3, #32
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0220 	mvn.w	r2, #32
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8cc 	bl	80026b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <TIM_Base_SetConfig+0x114>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d013      	beq.n	80025b8 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002596:	d00f      	beq.n	80025b8 <TIM_Base_SetConfig+0x40>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a3d      	ldr	r2, [pc, #244]	; (8002690 <TIM_Base_SetConfig+0x118>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00b      	beq.n	80025b8 <TIM_Base_SetConfig+0x40>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a3c      	ldr	r2, [pc, #240]	; (8002694 <TIM_Base_SetConfig+0x11c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d007      	beq.n	80025b8 <TIM_Base_SetConfig+0x40>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <TIM_Base_SetConfig+0x120>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3a      	ldr	r2, [pc, #232]	; (800269c <TIM_Base_SetConfig+0x124>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d108      	bne.n	80025ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2f      	ldr	r2, [pc, #188]	; (800268c <TIM_Base_SetConfig+0x114>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02b      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d8:	d027      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <TIM_Base_SetConfig+0x118>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d023      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <TIM_Base_SetConfig+0x11c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01f      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a2a      	ldr	r2, [pc, #168]	; (8002698 <TIM_Base_SetConfig+0x120>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01b      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a29      	ldr	r2, [pc, #164]	; (800269c <TIM_Base_SetConfig+0x124>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d017      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a28      	ldr	r2, [pc, #160]	; (80026a0 <TIM_Base_SetConfig+0x128>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <TIM_Base_SetConfig+0x12c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <TIM_Base_SetConfig+0x130>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a25      	ldr	r2, [pc, #148]	; (80026ac <TIM_Base_SetConfig+0x134>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <TIM_Base_SetConfig+0x138>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a23      	ldr	r2, [pc, #140]	; (80026b4 <TIM_Base_SetConfig+0x13c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <TIM_Base_SetConfig+0x114>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <TIM_Base_SetConfig+0xf8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <TIM_Base_SetConfig+0x124>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d103      	bne.n	8002678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	615a      	str	r2, [r3, #20]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40010400 	.word	0x40010400
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40014400 	.word	0x40014400
 80026a8:	40014800 	.word	0x40014800
 80026ac:	40001800 	.word	0x40001800
 80026b0:	40001c00 	.word	0x40001c00
 80026b4:	40002000 	.word	0x40002000

080026b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e03f      	b.n	8002772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fcca 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	; 0x24
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f9a7 	bl	8002a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b08a      	sub	sp, #40	; 0x28
 800277e:	af02      	add	r7, sp, #8
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	d17c      	bne.n	8002894 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_UART_Transmit+0x2c>
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e075      	b.n	8002896 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Transmit+0x3e>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e06e      	b.n	8002896 <HAL_UART_Transmit+0x11c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2221      	movs	r2, #33	; 0x21
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ce:	f7fe fd9b 	bl	8001308 <HAL_GetTick>
 80027d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e8:	d108      	bne.n	80027fc <HAL_UART_Transmit+0x82>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e003      	b.n	8002804 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800280c:	e02a      	b.n	8002864 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f8e2 	bl	80029e2 <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e036      	b.n	8002896 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800283c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3302      	adds	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e007      	b.n	8002856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	3301      	adds	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1cf      	bne.n	800280e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f8b2 	bl	80029e2 <UART_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e006      	b.n	8002896 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b08a      	sub	sp, #40	; 0x28
 80028a2:	af02      	add	r7, sp, #8
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	f040 808c 	bne.w	80029d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_UART_Receive+0x2e>
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e084      	b.n	80029da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Receive+0x40>
 80028da:	2302      	movs	r3, #2
 80028dc:	e07d      	b.n	80029da <HAL_UART_Receive+0x13c>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2222      	movs	r2, #34	; 0x22
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028fa:	f7fe fd05 	bl	8001308 <HAL_GetTick>
 80028fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	88fa      	ldrh	r2, [r7, #6]
 8002904:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	88fa      	ldrh	r2, [r7, #6]
 800290a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d108      	bne.n	8002928 <HAL_UART_Receive+0x8a>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e003      	b.n	8002930 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002938:	e043      	b.n	80029c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	2120      	movs	r1, #32
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f84c 	bl	80029e2 <UART_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e042      	b.n	80029da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	b29b      	uxth	r3, r3
 8002962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002966:	b29a      	uxth	r2, r3
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	3302      	adds	r3, #2
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e01f      	b.n	80029b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297c:	d007      	beq.n	800298e <HAL_UART_Receive+0xf0>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_UART_Receive+0xfe>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e008      	b.n	80029ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1b6      	bne.n	800293a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f2:	e02c      	b.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d028      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a02:	f7fe fc81 	bl	8001308 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d21d      	bcs.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e00f      	b.n	8002a6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d0c3      	beq.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002aba:	f023 030c 	bic.w	r3, r3, #12
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4ad0      	ldr	r2, [pc, #832]	; (8002e24 <UART_SetConfig+0x3ac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <UART_SetConfig+0x7a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4ace      	ldr	r2, [pc, #824]	; (8002e28 <UART_SetConfig+0x3b0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d103      	bne.n	8002afa <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af2:	f7ff fb01 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	e002      	b.n	8002b00 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002afa:	f7ff fae9 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002afe:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b08:	f040 80ba 	bne.w	8002c80 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	461d      	mov	r5, r3
 8002b10:	f04f 0600 	mov.w	r6, #0
 8002b14:	46a8      	mov	r8, r5
 8002b16:	46b1      	mov	r9, r6
 8002b18:	eb18 0308 	adds.w	r3, r8, r8
 8002b1c:	eb49 0409 	adc.w	r4, r9, r9
 8002b20:	4698      	mov	r8, r3
 8002b22:	46a1      	mov	r9, r4
 8002b24:	eb18 0805 	adds.w	r8, r8, r5
 8002b28:	eb49 0906 	adc.w	r9, r9, r6
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b40:	4688      	mov	r8, r1
 8002b42:	4691      	mov	r9, r2
 8002b44:	eb18 0005 	adds.w	r0, r8, r5
 8002b48:	eb49 0106 	adc.w	r1, r9, r6
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	461d      	mov	r5, r3
 8002b52:	f04f 0600 	mov.w	r6, #0
 8002b56:	196b      	adds	r3, r5, r5
 8002b58:	eb46 0406 	adc.w	r4, r6, r6
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4623      	mov	r3, r4
 8002b60:	f7fd fb3e 	bl	80001e0 <__aeabi_uldivmod>
 8002b64:	4603      	mov	r3, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4bb0      	ldr	r3, [pc, #704]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	461d      	mov	r5, r3
 8002b7a:	f04f 0600 	mov.w	r6, #0
 8002b7e:	46a9      	mov	r9, r5
 8002b80:	46b2      	mov	sl, r6
 8002b82:	eb19 0309 	adds.w	r3, r9, r9
 8002b86:	eb4a 040a 	adc.w	r4, sl, sl
 8002b8a:	4699      	mov	r9, r3
 8002b8c:	46a2      	mov	sl, r4
 8002b8e:	eb19 0905 	adds.w	r9, r9, r5
 8002b92:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002baa:	4689      	mov	r9, r1
 8002bac:	4692      	mov	sl, r2
 8002bae:	eb19 0005 	adds.w	r0, r9, r5
 8002bb2:	eb4a 0106 	adc.w	r1, sl, r6
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	461d      	mov	r5, r3
 8002bbc:	f04f 0600 	mov.w	r6, #0
 8002bc0:	196b      	adds	r3, r5, r5
 8002bc2:	eb46 0406 	adc.w	r4, r6, r6
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4623      	mov	r3, r4
 8002bca:	f7fd fb09 	bl	80001e0 <__aeabi_uldivmod>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b95      	ldr	r3, [pc, #596]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2164      	movs	r1, #100	; 0x64
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	3332      	adds	r3, #50	; 0x32
 8002be8:	4a90      	ldr	r2, [pc, #576]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bf6:	4498      	add	r8, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	f04f 0600 	mov.w	r6, #0
 8002c00:	46a9      	mov	r9, r5
 8002c02:	46b2      	mov	sl, r6
 8002c04:	eb19 0309 	adds.w	r3, r9, r9
 8002c08:	eb4a 040a 	adc.w	r4, sl, sl
 8002c0c:	4699      	mov	r9, r3
 8002c0e:	46a2      	mov	sl, r4
 8002c10:	eb19 0905 	adds.w	r9, r9, r5
 8002c14:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c2c:	4689      	mov	r9, r1
 8002c2e:	4692      	mov	sl, r2
 8002c30:	eb19 0005 	adds.w	r0, r9, r5
 8002c34:	eb4a 0106 	adc.w	r1, sl, r6
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	461d      	mov	r5, r3
 8002c3e:	f04f 0600 	mov.w	r6, #0
 8002c42:	196b      	adds	r3, r5, r5
 8002c44:	eb46 0406 	adc.w	r4, r6, r6
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	f7fd fac8 	bl	80001e0 <__aeabi_uldivmod>
 8002c50:	4603      	mov	r3, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b75      	ldr	r3, [pc, #468]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002c58:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	2164      	movs	r1, #100	; 0x64
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	3332      	adds	r3, #50	; 0x32
 8002c6a:	4a70      	ldr	r2, [pc, #448]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	f003 0207 	and.w	r2, r3, #7
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4442      	add	r2, r8
 8002c7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c7e:	e0cc      	b.n	8002e1a <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	469a      	mov	sl, r3
 8002c84:	f04f 0b00 	mov.w	fp, #0
 8002c88:	46d0      	mov	r8, sl
 8002c8a:	46d9      	mov	r9, fp
 8002c8c:	eb18 0308 	adds.w	r3, r8, r8
 8002c90:	eb49 0409 	adc.w	r4, r9, r9
 8002c94:	4698      	mov	r8, r3
 8002c96:	46a1      	mov	r9, r4
 8002c98:	eb18 080a 	adds.w	r8, r8, sl
 8002c9c:	eb49 090b 	adc.w	r9, r9, fp
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cb4:	4688      	mov	r8, r1
 8002cb6:	4691      	mov	r9, r2
 8002cb8:	eb1a 0508 	adds.w	r5, sl, r8
 8002cbc:	eb4b 0609 	adc.w	r6, fp, r9
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	f04f 0400 	mov.w	r4, #0
 8002cd2:	0094      	lsls	r4, r2, #2
 8002cd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cd8:	008b      	lsls	r3, r1, #2
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4623      	mov	r3, r4
 8002cde:	4628      	mov	r0, r5
 8002ce0:	4631      	mov	r1, r6
 8002ce2:	f7fd fa7d 	bl	80001e0 <__aeabi_uldivmod>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002cee:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	469b      	mov	fp, r3
 8002cfc:	f04f 0c00 	mov.w	ip, #0
 8002d00:	46d9      	mov	r9, fp
 8002d02:	46e2      	mov	sl, ip
 8002d04:	eb19 0309 	adds.w	r3, r9, r9
 8002d08:	eb4a 040a 	adc.w	r4, sl, sl
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	46a2      	mov	sl, r4
 8002d10:	eb19 090b 	adds.w	r9, r9, fp
 8002d14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d18:	f04f 0100 	mov.w	r1, #0
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d2c:	4689      	mov	r9, r1
 8002d2e:	4692      	mov	sl, r2
 8002d30:	eb1b 0509 	adds.w	r5, fp, r9
 8002d34:	eb4c 060a 	adc.w	r6, ip, sl
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	f04f 0400 	mov.w	r4, #0
 8002d4a:	0094      	lsls	r4, r2, #2
 8002d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d50:	008b      	lsls	r3, r1, #2
 8002d52:	461a      	mov	r2, r3
 8002d54:	4623      	mov	r3, r4
 8002d56:	4628      	mov	r0, r5
 8002d58:	4631      	mov	r1, r6
 8002d5a:	f7fd fa41 	bl	80001e0 <__aeabi_uldivmod>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	460c      	mov	r4, r1
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002d66:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2164      	movs	r1, #100	; 0x64
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	3332      	adds	r3, #50	; 0x32
 8002d78:	4a2c      	ldr	r2, [pc, #176]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d84:	4498      	add	r8, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	469b      	mov	fp, r3
 8002d8a:	f04f 0c00 	mov.w	ip, #0
 8002d8e:	46d9      	mov	r9, fp
 8002d90:	46e2      	mov	sl, ip
 8002d92:	eb19 0309 	adds.w	r3, r9, r9
 8002d96:	eb4a 040a 	adc.w	r4, sl, sl
 8002d9a:	4699      	mov	r9, r3
 8002d9c:	46a2      	mov	sl, r4
 8002d9e:	eb19 090b 	adds.w	r9, r9, fp
 8002da2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dba:	4689      	mov	r9, r1
 8002dbc:	4692      	mov	sl, r2
 8002dbe:	eb1b 0509 	adds.w	r5, fp, r9
 8002dc2:	eb4c 060a 	adc.w	r6, ip, sl
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	f04f 0400 	mov.w	r4, #0
 8002dd8:	0094      	lsls	r4, r2, #2
 8002dda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dde:	008b      	lsls	r3, r1, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	4628      	mov	r0, r5
 8002de6:	4631      	mov	r1, r6
 8002de8:	f7fd f9fa 	bl	80001e0 <__aeabi_uldivmod>
 8002dec:	4603      	mov	r3, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2164      	movs	r1, #100	; 0x64
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3332      	adds	r3, #50	; 0x32
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <UART_SetConfig+0x3b4>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 020f 	and.w	r2, r3, #15
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4442      	add	r2, r8
 8002e18:	609a      	str	r2, [r3, #8]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e24:	40011000 	.word	0x40011000
 8002e28:	40011400 	.word	0x40011400
 8002e2c:	51eb851f 	.word	0x51eb851f

08002e30 <__NVIC_SetPriority>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Handler+0x1c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e8c:	f002 fb06 	bl	800549c <xTaskGetSchedulerState>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d001      	beq.n	8002e9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e96:	f003 f9d7 	bl	8006248 <xPortSysTickHandler>
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f06f 0004 	mvn.w	r0, #4
 8002eae:	f7ff ffbf 	bl	8002e30 <__NVIC_SetPriority>
#endif
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ebe:	f3ef 8305 	mrs	r3, IPSR
 8002ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ec4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002eca:	f06f 0305 	mvn.w	r3, #5
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e00c      	b.n	8002eec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <osKernelInitialize+0x44>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <osKernelInitialize+0x44>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e002      	b.n	8002eec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002eec:	687b      	ldr	r3, [r7, #4]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	2000022c 	.word	0x2000022c

08002f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f06:	f3ef 8305 	mrs	r3, IPSR
 8002f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f12:	f06f 0305 	mvn.w	r3, #5
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e010      	b.n	8002f3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <osKernelStart+0x48>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d109      	bne.n	8002f36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f22:	f7ff ffbf 	bl	8002ea4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <osKernelStart+0x48>)
 8002f28:	2202      	movs	r2, #2
 8002f2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f2c:	f001 fe80 	bl	8004c30 <vTaskStartScheduler>
      stat = osOK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	e002      	b.n	8002f3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f3c:	687b      	ldr	r3, [r7, #4]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000022c 	.word	0x2000022c

08002f4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	; 0x38
 8002f50:	af04      	add	r7, sp, #16
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f5c:	f3ef 8305 	mrs	r3, IPSR
 8002f60:	617b      	str	r3, [r7, #20]
  return(result);
 8002f62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d17e      	bne.n	8003066 <osThreadNew+0x11a>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d07b      	beq.n	8003066 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f72:	2318      	movs	r3, #24
 8002f74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d045      	beq.n	8003012 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <osThreadNew+0x48>
        name = attr->name;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <osThreadNew+0x6e>
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b38      	cmp	r3, #56	; 0x38
 8002fac:	d805      	bhi.n	8002fba <osThreadNew+0x6e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <osThreadNew+0x72>
        return (NULL);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e054      	b.n	8003068 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00e      	beq.n	8002ff4 <osThreadNew+0xa8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b6b      	cmp	r3, #107	; 0x6b
 8002fdc:	d90a      	bls.n	8002ff4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <osThreadNew+0xa8>
        mem = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e010      	b.n	8003016 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10c      	bne.n	8003016 <osThreadNew+0xca>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d108      	bne.n	8003016 <osThreadNew+0xca>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <osThreadNew+0xca>
          mem = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e001      	b.n	8003016 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d110      	bne.n	800303e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003024:	9202      	str	r2, [sp, #8]
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f001 fc2a 	bl	800488c <xTaskCreateStatic>
 8003038:	4603      	mov	r3, r0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e013      	b.n	8003066 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d110      	bne.n	8003066 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	b29a      	uxth	r2, r3
 8003048:	f107 0310 	add.w	r3, r7, #16
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f001 fc72 	bl	8004940 <xTaskCreate>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <osThreadNew+0x11a>
            hTask = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003066:	693b      	ldr	r3, [r7, #16]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003078:	f3ef 8305 	mrs	r3, IPSR
 800307c:	60bb      	str	r3, [r7, #8]
  return(result);
 800307e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <osDelay+0x1c>
    stat = osErrorISR;
 8003084:	f06f 0305 	mvn.w	r3, #5
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e007      	b.n	800309c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f001 fd96 	bl	8004bc8 <vTaskDelay>
    }
  }

  return (stat);
 800309c:	68fb      	ldr	r3, [r7, #12]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b08a      	sub	sp, #40	; 0x28
 80030aa:	af02      	add	r7, sp, #8
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030b6:	f3ef 8305 	mrs	r3, IPSR
 80030ba:	613b      	str	r3, [r7, #16]
  return(result);
 80030bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d160      	bne.n	8003184 <osMessageQueueNew+0xde>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05d      	beq.n	8003184 <osMessageQueueNew+0xde>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d05a      	beq.n	8003184 <osMessageQueueNew+0xde>
    mem = -1;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d029      	beq.n	800312e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <osMessageQueueNew+0x62>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b4f      	cmp	r3, #79	; 0x4f
 80030e8:	d90e      	bls.n	8003108 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <osMessageQueueNew+0x62>
        mem = 1;
 8003102:	2301      	movs	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e014      	b.n	8003132 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d110      	bne.n	8003132 <osMessageQueueNew+0x8c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10c      	bne.n	8003132 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d108      	bne.n	8003132 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <osMessageQueueNew+0x8c>
          mem = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e001      	b.n	8003132 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10c      	bne.n	8003152 <osMessageQueueNew+0xac>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	2300      	movs	r3, #0
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	460b      	mov	r3, r1
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fc61 	bl	8003a10 <xQueueGenericCreateStatic>
 800314e:	61f8      	str	r0, [r7, #28]
 8003150:	e008      	b.n	8003164 <osMessageQueueNew+0xbe>
      #endif
    }
    else {
      if (mem == 0) {
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <osMessageQueueNew+0xbe>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003158:	2200      	movs	r2, #0
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fcca 	bl	8003af6 <xQueueGenericCreate>
 8003162:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00c      	beq.n	8003184 <osMessageQueueNew+0xde>
      if (attr != NULL) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <osMessageQueueNew+0xd2>
        name = attr->name;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e001      	b.n	800317c <osMessageQueueNew+0xd6>
      } else {
        name = NULL;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800317c:	6979      	ldr	r1, [r7, #20]
 800317e:	69f8      	ldr	r0, [r7, #28]
 8003180:	f001 fb28 	bl	80047d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003184:	69fb      	ldr	r3, [r7, #28]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a8:	f3ef 8305 	mrs	r3, IPSR
 80031ac:	617b      	str	r3, [r7, #20]
  return(result);
 80031ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d028      	beq.n	8003206 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <osMessageQueuePut+0x36>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <osMessageQueuePut+0x36>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80031c6:	f06f 0303 	mvn.w	r3, #3
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	e038      	b.n	8003240 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80031d2:	f107 0210 	add.w	r2, r7, #16
 80031d6:	2300      	movs	r3, #0
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	69b8      	ldr	r0, [r7, #24]
 80031dc:	f000 fe16 	bl	8003e0c <xQueueGenericSendFromISR>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d003      	beq.n	80031ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80031e6:	f06f 0302 	mvn.w	r3, #2
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e028      	b.n	8003240 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d025      	beq.n	8003240 <osMessageQueuePut+0xb0>
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <osMessageQueuePut+0xbc>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	e01c      	b.n	8003240 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <osMessageQueuePut+0x82>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003212:	f06f 0303 	mvn.w	r3, #3
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e012      	b.n	8003240 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800321a:	2300      	movs	r3, #0
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	69b8      	ldr	r0, [r7, #24]
 8003222:	f000 fcf9 	bl	8003c18 <xQueueGenericSend>
 8003226:	4603      	mov	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d009      	beq.n	8003240 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003232:	f06f 0301 	mvn.w	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e002      	b.n	8003240 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800323a:	f06f 0302 	mvn.w	r3, #2
 800323e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003240:	69fb      	ldr	r3, [r7, #28]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003266:	f3ef 8305 	mrs	r3, IPSR
 800326a:	617b      	str	r3, [r7, #20]
  return(result);
 800326c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800326e:	2b00      	cmp	r3, #0
 8003270:	d028      	beq.n	80032c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <osMessageQueueGet+0x34>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <osMessageQueueGet+0x34>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003284:	f06f 0303 	mvn.w	r3, #3
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e037      	b.n	80032fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	461a      	mov	r2, r3
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	69b8      	ldr	r0, [r7, #24]
 800329a:	f001 f8bb 	bl	8004414 <xQueueReceiveFromISR>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d003      	beq.n	80032ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80032a4:	f06f 0302 	mvn.w	r3, #2
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	e027      	b.n	80032fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d024      	beq.n	80032fc <osMessageQueueGet+0xac>
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <osMessageQueueGet+0xb8>)
 80032b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	e01b      	b.n	80032fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <osMessageQueueGet+0x80>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d103      	bne.n	80032d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80032d0:	f06f 0303 	mvn.w	r3, #3
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e011      	b.n	80032fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	69b8      	ldr	r0, [r7, #24]
 80032de:	f000 feb5 	bl	800404c <xQueueReceive>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d009      	beq.n	80032fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80032ee:	f06f 0301 	mvn.w	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	e002      	b.n	80032fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80032f6:	f06f 0302 	mvn.w	r3, #2
 80032fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80032fc:	69fb      	ldr	r3, [r7, #28]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003318:	f3ef 8305 	mrs	r3, IPSR
 800331c:	613b      	str	r3, [r7, #16]
  return(result);
 800331e:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <osMemoryPoolNew+0x1e>
    mp = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	e0be      	b.n	80034a8 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <osMemoryPoolNew+0x2a>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <osMemoryPoolNew+0x30>
    mp = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	e0b5      	b.n	80034a8 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3303      	adds	r3, #3
 8003344:	f023 0203 	bic.w	r2, r3, #3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]

    name = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d038      	beq.n	80033d8 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <osMemoryPoolNew+0x68>
        name = attr->name;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <osMemoryPoolNew+0x7e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b73      	cmp	r3, #115	; 0x73
 8003382:	d902      	bls.n	800338a <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 8003384:	2301      	movs	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e009      	b.n	800339e <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <osMemoryPoolNew+0x92>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <osMemoryPoolNew+0xa8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e015      	b.n	80033e0 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d011      	beq.n	80033e0 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d806      	bhi.n	80033e0 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e003      	b.n	80033e0 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 80033e6:	2074      	movs	r0, #116	; 0x74
 80033e8:	f002 ffba 	bl	8006360 <pvPortMalloc>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24
 80033ee:	e002      	b.n	80033f6 <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	3324      	adds	r3, #36	; 0x24
 8003400:	461a      	mov	r2, r3
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fbd2 	bl	8003bae <xQueueCreateCountingSemaphoreStatic>
 800340a:	4602      	mov	r2, r0
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f002 ff9e 	bl	8006360 <pvPortMalloc>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	e003      	b.n	8003434 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02b      	beq.n	8003492 <osMemoryPoolNew+0x186>
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d027      	beq.n	8003492 <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	2200      	movs	r2, #0
 8003464:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <osMemoryPoolNew+0x1a8>)
 800346a:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d111      	bne.n	80034a8 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f043 0202 	orr.w	r2, r3, #2
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 8003490:	e00a      	b.n	80034a8 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <osMemoryPoolNew+0x198>
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 800349e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034a0:	f003 f826 	bl	80064f0 <vPortFree>
      }
      mp = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3728      	adds	r7, #40	; 0x28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	5eed0000 	.word	0x5eed0000

080034b8 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e062      	b.n	8003594 <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <osMemoryPoolAlloc+0xe8>)
 80034dc:	4013      	ands	r3, r2
 80034de:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <osMemoryPoolAlloc+0xe8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d157      	bne.n	8003594 <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e4:	f3ef 8305 	mrs	r3, IPSR
 80034e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80034ea:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d032      	beq.n	8003556 <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d14e      	bne.n	8003594 <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 ff88 	bl	8004414 <xQueueReceiveFromISR>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d144      	bne.n	8003594 <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <osMemoryPoolAlloc+0xe8>)
 8003510:	4013      	ands	r3, r2
 8003512:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <osMemoryPoolAlloc+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d13d      	bne.n	8003594 <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003518:	f3ef 8211 	mrs	r2, BASEPRI
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	617a      	str	r2, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003530:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 8003532:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 8003534:	6a38      	ldr	r0, [r7, #32]
 8003536:	f000 f8ef 	bl	8003718 <AllocBlock>
 800353a:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 8003542:	6a38      	ldr	r0, [r7, #32]
 8003544:	f000 f8c6 	bl	80036d4 <CreateBlock>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	e01e      	b.n	8003594 <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	6839      	ldr	r1, [r7, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fe51 	bl	8004204 <xQueueSemaphoreTake>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d115      	bne.n	8003594 <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <osMemoryPoolAlloc+0xe8>)
 800356e:	4013      	ands	r3, r2
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <osMemoryPoolAlloc+0xe8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10e      	bne.n	8003594 <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 8003576:	f002 fdd9 	bl	800612c <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 800357a:	6a38      	ldr	r0, [r7, #32]
 800357c:	f000 f8cc 	bl	8003718 <AllocBlock>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 8003588:	6a38      	ldr	r0, [r7, #32]
 800358a:	f000 f8a3 	bl	80036d4 <CreateBlock>
 800358e:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 8003590:	f002 fdfa 	bl	8006188 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003596:	4618      	mov	r0, r3
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	5eed0000 	.word	0x5eed0000

080035a4 <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <osMemoryPoolFree+0x16>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 80035ba:	f06f 0303 	mvn.w	r3, #3
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	e07e      	b.n	80036c0 <osMemoryPoolFree+0x11c>
  }
  else {
    mp = (MemPool_t *)mp_id;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	4b40      	ldr	r3, [pc, #256]	; (80036cc <osMemoryPoolFree+0x128>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <osMemoryPoolFree+0x128>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 80035d4:	f06f 0302 	mvn.w	r3, #2
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	e071      	b.n	80036c0 <osMemoryPoolFree+0x11c>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d308      	bcc.n	80035f8 <osMemoryPoolFree+0x54>
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d903      	bls.n	8003600 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 80035f8:	f06f 0303 	mvn.w	r3, #3
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	e05f      	b.n	80036c0 <osMemoryPoolFree+0x11c>
    }
    else {
      stat = osOK;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003604:	f3ef 8305 	mrs	r3, IPSR
 8003608:	61bb      	str	r3, [r7, #24]
  return(result);
 800360a:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03a      	beq.n	8003686 <osMemoryPoolFree+0xe2>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 ff97 	bl	8004548 <uxQueueMessagesWaitingFromISR>
 800361a:	4602      	mov	r2, r0
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	429a      	cmp	r2, r3
 8003622:	d103      	bne.n	800362c <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 8003624:	f06f 0302 	mvn.w	r3, #2
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	e049      	b.n	80036c0 <osMemoryPoolFree+0x11c>
	__asm volatile
 800362c:	f3ef 8211 	mrs	r2, BASEPRI
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	613a      	str	r2, [r7, #16]
 8003642:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8003644:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 8003646:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	6a38      	ldr	r0, [r7, #32]
 800364c:	f000 f87c 	bl	8003748 <FreeBlock>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f383 8811 	msr	BASEPRI, r3

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f107 0208 	add.w	r2, r7, #8
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fc66 	bl	8003f3a <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d025      	beq.n	80036c0 <osMemoryPoolFree+0x11c>
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <osMemoryPoolFree+0x12c>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	e01c      	b.n	80036c0 <osMemoryPoolFree+0x11c>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 ff3f 	bl	800450e <uxQueueMessagesWaiting>
 8003690:	4602      	mov	r2, r0
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	429a      	cmp	r2, r3
 8003698:	d103      	bne.n	80036a2 <osMemoryPoolFree+0xfe>
          stat = osErrorResource;
 800369a:	f06f 0302 	mvn.w	r3, #2
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e00e      	b.n	80036c0 <osMemoryPoolFree+0x11c>
        }
        else {
          taskENTER_CRITICAL();
 80036a2:	f002 fd43 	bl	800612c <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	6a38      	ldr	r0, [r7, #32]
 80036aa:	f000 f84d 	bl	8003748 <FreeBlock>

          taskEXIT_CRITICAL();
 80036ae:	f002 fd6b 	bl	8006188 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	6858      	ldr	r0, [r3, #4]
 80036b6:	2300      	movs	r3, #0
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	f000 faac 	bl	8003c18 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	5eed0000 	.word	0x5eed0000
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d20e      	bcs.n	800370a <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	69c9      	ldr	r1, [r1, #28]
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	61da      	str	r2, [r3, #28]
  }

  return (p);
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
  }

  return (p);
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <vApplicationGetIdleTaskMemory+0x2c>)
 8003780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <vApplicationGetIdleTaskMemory+0x30>)
 8003786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	601a      	str	r2, [r3, #0]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000230 	.word	0x20000230
 80037a0:	2000029c 	.word	0x2000029c

080037a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80037b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <vApplicationGetTimerTaskMemory+0x30>)
 80037ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037c2:	601a      	str	r2, [r3, #0]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	2000049c 	.word	0x2000049c
 80037d4:	20000508 	.word	0x20000508

080037d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f103 0208 	add.w	r2, r3, #8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f04f 32ff 	mov.w	r2, #4294967295
 80037f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f103 0208 	add.w	r2, r3, #8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f103 0208 	add.w	r2, r3, #8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d103      	bne.n	800389a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e00c      	b.n	80038b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3308      	adds	r3, #8
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e002      	b.n	80038a8 <vListInsert+0x2e>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d2f6      	bcs.n	80038a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	601a      	str	r2, [r3, #0]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6892      	ldr	r2, [r2, #8]
 8003902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6852      	ldr	r2, [r2, #4]
 800390c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	d103      	bne.n	8003920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <xQueueGenericReset+0x28>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	e7fe      	b.n	8003966 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003968:	f002 fbe0 	bl	800612c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	441a      	add	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	3b01      	subs	r3, #1
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d114      	bne.n	80039e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01a      	beq.n	80039fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3310      	adds	r3, #16
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fbb0 	bl	8005130 <xTaskRemoveFromEventList>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d012      	beq.n	80039fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <xQueueGenericReset+0xcc>)
 80039d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	e009      	b.n	80039fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3310      	adds	r3, #16
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fef3 	bl	80037d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3324      	adds	r3, #36	; 0x24
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff feee 	bl	80037d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039fc:	f002 fbc4 	bl	8006188 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a00:	2301      	movs	r3, #1
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08e      	sub	sp, #56	; 0x38
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <xQueueGenericCreateStatic+0x28>
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a36:	e7fe      	b.n	8003a36 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <xQueueGenericCreateStatic+0x42>
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	e7fe      	b.n	8003a50 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <xQueueGenericCreateStatic+0x4e>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <xQueueGenericCreateStatic+0x52>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <xQueueGenericCreateStatic+0x54>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <xQueueGenericCreateStatic+0x6c>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	e7fe      	b.n	8003a7a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <xQueueGenericCreateStatic+0x78>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <xQueueGenericCreateStatic+0x7c>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <xQueueGenericCreateStatic+0x7e>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <xQueueGenericCreateStatic+0x96>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003aa6:	2350      	movs	r3, #80	; 0x50
 8003aa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d009      	beq.n	8003ac4 <xQueueGenericCreateStatic+0xb4>
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e7fe      	b.n	8003ac2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ac4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ad8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f83e 	bl	8003b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3730      	adds	r7, #48	; 0x30
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b08a      	sub	sp, #40	; 0x28
 8003afa:	af02      	add	r7, sp, #8
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <xQueueGenericCreate+0x28>
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e7fe      	b.n	8003b1c <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3350      	adds	r3, #80	; 0x50
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 fc17 	bl	8006360 <pvPortMalloc>
 8003b32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d011      	beq.n	8003b5e <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3350      	adds	r3, #80	; 0x50
 8003b42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b4c:	79fa      	ldrb	r2, [r7, #7]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f805 	bl	8003b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
	}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b96:	2101      	movs	r1, #1
 8003b98:	69b8      	ldr	r0, [r7, #24]
 8003b9a:	f7ff fed1 	bl	8003940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08a      	sub	sp, #40	; 0x28
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <xQueueCreateCountingSemaphoreStatic+0x26>
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e7fe      	b.n	8003bd2 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d909      	bls.n	8003bf0 <xQueueCreateCountingSemaphoreStatic+0x42>
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e7fe      	b.n	8003bee <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff ff08 	bl	8003a10 <xQueueGenericCreateStatic>
 8003c00:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
	}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	; 0x38
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c26:	2300      	movs	r3, #0
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <xQueueGenericSend+0x30>
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c46:	e7fe      	b.n	8003c46 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <xQueueGenericSend+0x3e>
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <xQueueGenericSend+0x42>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <xQueueGenericSend+0x44>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <xQueueGenericSend+0x5c>
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
 8003c72:	e7fe      	b.n	8003c72 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d103      	bne.n	8003c82 <xQueueGenericSend+0x6a>
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <xQueueGenericSend+0x6e>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <xQueueGenericSend+0x70>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <xQueueGenericSend+0x88>
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	e7fe      	b.n	8003c9e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ca0:	f001 fbfc 	bl	800549c <xTaskGetSchedulerState>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <xQueueGenericSend+0x98>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <xQueueGenericSend+0x9c>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <xQueueGenericSend+0x9e>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <xQueueGenericSend+0xb6>
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e7fe      	b.n	8003ccc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cce:	f002 fa2d 	bl	800612c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <xQueueGenericSend+0xcc>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d129      	bne.n	8003d38 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cea:	f000 fc62 	bl	80045b2 <prvCopyDataToQueue>
 8003cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	3324      	adds	r3, #36	; 0x24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fa17 	bl	8005130 <xTaskRemoveFromEventList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d08:	4b3f      	ldr	r3, [pc, #252]	; (8003e08 <xQueueGenericSend+0x1f0>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	e00a      	b.n	8003d30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d20:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <xQueueGenericSend+0x1f0>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d30:	f002 fa2a 	bl	8006188 <vPortExitCritical>
				return pdPASS;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e063      	b.n	8003e00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d3e:	f002 fa23 	bl	8006188 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e05c      	b.n	8003e00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fa4f 	bl	80051f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d5a:	f002 fa15 	bl	8006188 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d5e:	f000 ffcb 	bl	8004cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d62:	f002 f9e3 	bl	800612c <vPortEnterCritical>
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d103      	bne.n	8003d7c <xQueueGenericSend+0x164>
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d103      	bne.n	8003d92 <xQueueGenericSend+0x17a>
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d92:	f002 f9f9 	bl	8006188 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d96:	1d3a      	adds	r2, r7, #4
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 fa3e 	bl	8005220 <xTaskCheckForTimeOut>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d124      	bne.n	8003df4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dac:	f000 fcf9 	bl	80047a2 <prvIsQueueFull>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	3310      	adds	r3, #16
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f968 	bl	8005094 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc6:	f000 fc84 	bl	80046d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dca:	f000 ffa3 	bl	8004d14 <xTaskResumeAll>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f af7c 	bne.w	8003cce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <xQueueGenericSend+0x1f0>)
 8003dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	e772      	b.n	8003cce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dea:	f000 fc72 	bl	80046d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dee:	f000 ff91 	bl	8004d14 <xTaskResumeAll>
 8003df2:	e76c      	b.n	8003cce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df6:	f000 fc6c 	bl	80046d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dfa:	f000 ff8b 	bl	8004d14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3738      	adds	r7, #56	; 0x38
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b090      	sub	sp, #64	; 0x40
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <xQueueGenericSendFromISR+0x2c>
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e36:	e7fe      	b.n	8003e36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <xQueueGenericSendFromISR+0x3a>
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <xQueueGenericSendFromISR+0x3e>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <xQueueGenericSendFromISR+0x40>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <xQueueGenericSendFromISR+0x58>
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	e7fe      	b.n	8003e62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d103      	bne.n	8003e72 <xQueueGenericSendFromISR+0x66>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <xQueueGenericSendFromISR+0x6a>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xQueueGenericSendFromISR+0x6c>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <xQueueGenericSendFromISR+0x84>
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	e7fe      	b.n	8003e8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e90:	f002 fa28 	bl	80062e4 <vPortValidateInterruptPriority>
	__asm volatile
 8003e94:	f3ef 8211 	mrs	r2, BASEPRI
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003eac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <xQueueGenericSendFromISR+0xb6>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d12f      	bne.n	8003f22 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ed8:	f000 fb6b 	bl	80045b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003edc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d112      	bne.n	8003f0c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d016      	beq.n	8003f1c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 f91c 	bl	8005130 <xTaskRemoveFromEventList>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e007      	b.n	8003f1c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f10:	3301      	adds	r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	b25a      	sxtb	r2, r3
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f20:	e001      	b.n	8003f26 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f28:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3740      	adds	r7, #64	; 0x40
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b08e      	sub	sp, #56	; 0x38
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	e7fe      	b.n	8003f60 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <xQueueGiveFromISR+0x44>
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e7fe      	b.n	8003f7c <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <xQueueGiveFromISR+0x54>
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <xQueueGiveFromISR+0x58>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <xQueueGiveFromISR+0x5a>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <xQueueGiveFromISR+0x72>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	e7fe      	b.n	8003faa <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fac:	f002 f99a 	bl	80062e4 <vPortValidateInterruptPriority>
	__asm volatile
 8003fb0:	f3ef 8211 	mrs	r2, BASEPRI
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	617a      	str	r2, [r7, #20]
 8003fc6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003fc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d22b      	bcs.n	8004034 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d112      	bne.n	800401e <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d016      	beq.n	800402e <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	3324      	adds	r3, #36	; 0x24
 8004004:	4618      	mov	r0, r3
 8004006:	f001 f893 	bl	8005130 <xTaskRemoveFromEventList>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e007      	b.n	800402e <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800401e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004022:	3301      	adds	r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	b25a      	sxtb	r2, r3
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800402e:	2301      	movs	r3, #1
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	e001      	b.n	8004038 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004034:	2300      	movs	r3, #0
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004044:	4618      	mov	r0, r3
 8004046:	3738      	adds	r7, #56	; 0x38
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <xQueueReceive+0x2e>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	e7fe      	b.n	8004078 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <xQueueReceive+0x3c>
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <xQueueReceive+0x40>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <xQueueReceive+0x42>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <xQueueReceive+0x5a>
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e7fe      	b.n	80040a4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040a6:	f001 f9f9 	bl	800549c <xTaskGetSchedulerState>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <xQueueReceive+0x6a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <xQueueReceive+0x6e>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <xQueueReceive+0x70>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <xQueueReceive+0x88>
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e7fe      	b.n	80040d2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040d4:	f002 f82a 	bl	800612c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01f      	beq.n	8004124 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e8:	f000 facd 	bl	8004686 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00f      	beq.n	800411c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	3310      	adds	r3, #16
 8004100:	4618      	mov	r0, r3
 8004102:	f001 f815 	bl	8005130 <xTaskRemoveFromEventList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800410c:	4b3c      	ldr	r3, [pc, #240]	; (8004200 <xQueueReceive+0x1b4>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800411c:	f002 f834 	bl	8006188 <vPortExitCritical>
				return pdPASS;
 8004120:	2301      	movs	r3, #1
 8004122:	e069      	b.n	80041f8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800412a:	f002 f82d 	bl	8006188 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800412e:	2300      	movs	r3, #0
 8004130:	e062      	b.n	80041f8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004138:	f107 0310 	add.w	r3, r7, #16
 800413c:	4618      	mov	r0, r3
 800413e:	f001 f859 	bl	80051f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004142:	2301      	movs	r3, #1
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004146:	f002 f81f 	bl	8006188 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800414a:	f000 fdd5 	bl	8004cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800414e:	f001 ffed 	bl	800612c <vPortEnterCritical>
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004158:	b25b      	sxtb	r3, r3
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d103      	bne.n	8004168 <xQueueReceive+0x11c>
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800416e:	b25b      	sxtb	r3, r3
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d103      	bne.n	800417e <xQueueReceive+0x132>
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800417e:	f002 f803 	bl	8006188 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004182:	1d3a      	adds	r2, r7, #4
 8004184:	f107 0310 	add.w	r3, r7, #16
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f848 	bl	8005220 <xTaskCheckForTimeOut>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d123      	bne.n	80041de <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004198:	f000 faed 	bl	8004776 <prvIsQueueEmpty>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d017      	beq.n	80041d2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	3324      	adds	r3, #36	; 0x24
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 ff72 	bl	8005094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041b2:	f000 fa8e 	bl	80046d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041b6:	f000 fdad 	bl	8004d14 <xTaskResumeAll>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d189      	bne.n	80040d4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <xQueueReceive+0x1b4>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	e780      	b.n	80040d4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d4:	f000 fa7d 	bl	80046d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041d8:	f000 fd9c 	bl	8004d14 <xTaskResumeAll>
 80041dc:	e77a      	b.n	80040d4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e0:	f000 fa77 	bl	80046d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041e4:	f000 fd96 	bl	8004d14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ea:	f000 fac4 	bl	8004776 <prvIsQueueEmpty>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f43f af6f 	beq.w	80040d4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3730      	adds	r7, #48	; 0x30
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08e      	sub	sp, #56	; 0x38
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <xQueueSemaphoreTake+0x30>
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	e7fe      	b.n	8004232 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <xQueueSemaphoreTake+0x4c>
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e7fe      	b.n	800424e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004250:	f001 f924 	bl	800549c <xTaskGetSchedulerState>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <xQueueSemaphoreTake+0x5c>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <xQueueSemaphoreTake+0x60>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <xQueueSemaphoreTake+0x62>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <xQueueSemaphoreTake+0x7a>
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	e7fe      	b.n	800427c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800427e:	f001 ff55 	bl	800612c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d024      	beq.n	80042d8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800429e:	f001 fa6f 	bl	8005780 <pvTaskIncrementMutexHeldCount>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00f      	beq.n	80042d0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	3310      	adds	r3, #16
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 ff3b 	bl	8005130 <xTaskRemoveFromEventList>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <xQueueSemaphoreTake+0x20c>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042d0:	f001 ff5a 	bl	8006188 <vPortExitCritical>
				return pdPASS;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e096      	b.n	8004406 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d110      	bne.n	8004300 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <xQueueSemaphoreTake+0xf4>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e7fe      	b.n	80042f6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80042f8:	f001 ff46 	bl	8006188 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e082      	b.n	8004406 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004306:	f107 030c 	add.w	r3, r7, #12
 800430a:	4618      	mov	r0, r3
 800430c:	f000 ff72 	bl	80051f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004314:	f001 ff38 	bl	8006188 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004318:	f000 fcee 	bl	8004cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800431c:	f001 ff06 	bl	800612c <vPortEnterCritical>
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004326:	b25b      	sxtb	r3, r3
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d103      	bne.n	8004336 <xQueueSemaphoreTake+0x132>
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800433c:	b25b      	sxtb	r3, r3
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d103      	bne.n	800434c <xQueueSemaphoreTake+0x148>
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800434c:	f001 ff1c 	bl	8006188 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004350:	463a      	mov	r2, r7
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f000 ff61 	bl	8005220 <xTaskCheckForTimeOut>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d132      	bne.n	80043ca <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004366:	f000 fa06 	bl	8004776 <prvIsQueueEmpty>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d026      	beq.n	80043be <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004378:	f001 fed8 	bl	800612c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f001 f8a9 	bl	80054d8 <xTaskPriorityInherit>
 8004386:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004388:	f001 fefe 	bl	8006188 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	3324      	adds	r3, #36	; 0x24
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fe7d 	bl	8005094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800439a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800439c:	f000 f999 	bl	80046d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043a0:	f000 fcb8 	bl	8004d14 <xTaskResumeAll>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f47f af69 	bne.w	800427e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80043ac:	4b18      	ldr	r3, [pc, #96]	; (8004410 <xQueueSemaphoreTake+0x20c>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	e75f      	b.n	800427e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043c0:	f000 f987 	bl	80046d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043c4:	f000 fca6 	bl	8004d14 <xTaskResumeAll>
 80043c8:	e759      	b.n	800427e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043cc:	f000 f981 	bl	80046d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043d0:	f000 fca0 	bl	8004d14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043d6:	f000 f9ce 	bl	8004776 <prvIsQueueEmpty>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f43f af4e 	beq.w	800427e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80043e8:	f001 fea0 	bl	800612c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043ee:	f000 f8c8 	bl	8004582 <prvGetDisinheritPriorityAfterTimeout>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f001 f940 	bl	8005680 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004400:	f001 fec2 	bl	8006188 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004404:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004406:	4618      	mov	r0, r3
 8004408:	3738      	adds	r7, #56	; 0x38
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <xQueueReceiveFromISR+0x2a>
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	e7fe      	b.n	800443c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <xQueueReceiveFromISR+0x38>
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueReceiveFromISR+0x3c>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueReceiveFromISR+0x3e>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <xQueueReceiveFromISR+0x56>
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e7fe      	b.n	8004468 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800446a:	f001 ff3b 	bl	80062e4 <vPortValidateInterruptPriority>
	__asm volatile
 800446e:	f3ef 8211 	mrs	r2, BASEPRI
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	61ba      	str	r2, [r7, #24]
 8004484:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004486:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02f      	beq.n	80044f6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800449c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a4:	f000 f8ef 	bl	8004686 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	1e5a      	subs	r2, r3, #1
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d112      	bne.n	80044e0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	3310      	adds	r3, #16
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fe32 	bl	8005130 <xTaskRemoveFromEventList>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00e      	beq.n	80044f0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e007      	b.n	80044f0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e4:	3301      	adds	r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	b25a      	sxtb	r2, r3
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80044f0:	2301      	movs	r3, #1
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
 80044f4:	e001      	b.n	80044fa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004506:	4618      	mov	r0, r3
 8004508:	3738      	adds	r7, #56	; 0x38
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	e7fe      	b.n	800452e <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004530:	f001 fdfc 	bl	800612c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800453a:	f001 fe25 	bl	8006188 <vPortExitCritical>

	return uxReturn;
 800453e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <uxQueueMessagesWaitingFromISR+0x26>
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e7fe      	b.n	800456c <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8004574:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004576:	4618      	mov	r0, r3
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004582:	b480      	push	{r7}
 8004584:	b085      	sub	sp, #20
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e001      	b.n	80045a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80045a4:	68fb      	ldr	r3, [r7, #12]
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10d      	bne.n	80045ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d14d      	bne.n	8004674 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 ffe3 	bl	80055a8 <xTaskPriorityDisinherit>
 80045e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
 80045ea:	e043      	b.n	8004674 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d119      	bne.n	8004626 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6858      	ldr	r0, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	461a      	mov	r2, r3
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	f002 f8d1 	bl	80067a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	441a      	add	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d32b      	bcc.n	8004674 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	e026      	b.n	8004674 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68d8      	ldr	r0, [r3, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	461a      	mov	r2, r3
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	f002 f8b7 	bl	80067a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	425b      	negs	r3, r3
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d207      	bcs.n	8004662 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	425b      	negs	r3, r3
 800465c:	441a      	add	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d105      	bne.n	8004674 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3b01      	subs	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800467c:	697b      	ldr	r3, [r7, #20]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d018      	beq.n	80046ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d303      	bcc.n	80046ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	461a      	mov	r2, r3
 80046c4:	6838      	ldr	r0, [r7, #0]
 80046c6:	f002 f86d 	bl	80067a4 <memcpy>
	}
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046da:	f001 fd27 	bl	800612c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046e6:	e011      	b.n	800470c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d012      	beq.n	8004716 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fd1b 	bl	8005130 <xTaskRemoveFromEventList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004700:	f000 fdee 	bl	80052e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	3b01      	subs	r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800470c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004710:	2b00      	cmp	r3, #0
 8004712:	dce9      	bgt.n	80046e8 <prvUnlockQueue+0x16>
 8004714:	e000      	b.n	8004718 <prvUnlockQueue+0x46>
					break;
 8004716:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004720:	f001 fd32 	bl	8006188 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004724:	f001 fd02 	bl	800612c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800472e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004730:	e011      	b.n	8004756 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d012      	beq.n	8004760 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3310      	adds	r3, #16
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fcf6 	bl	8005130 <xTaskRemoveFromEventList>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800474a:	f000 fdc9 	bl	80052e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800474e:	7bbb      	ldrb	r3, [r7, #14]
 8004750:	3b01      	subs	r3, #1
 8004752:	b2db      	uxtb	r3, r3
 8004754:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800475a:	2b00      	cmp	r3, #0
 800475c:	dce9      	bgt.n	8004732 <prvUnlockQueue+0x60>
 800475e:	e000      	b.n	8004762 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004760:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	22ff      	movs	r2, #255	; 0xff
 8004766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800476a:	f001 fd0d 	bl	8006188 <vPortExitCritical>
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800477e:	f001 fcd5 	bl	800612c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e001      	b.n	8004794 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004794:	f001 fcf8 	bl	8006188 <vPortExitCritical>

	return xReturn;
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047aa:	f001 fcbf 	bl	800612c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d102      	bne.n	80047c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e001      	b.n	80047c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047c4:	f001 fce0 	bl	8006188 <vPortExitCritical>

	return xReturn;
 80047c8:	68fb      	ldr	r3, [r7, #12]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e014      	b.n	800480e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <vQueueAddToRegistry+0x4c>)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047f0:	490b      	ldr	r1, [pc, #44]	; (8004820 <vQueueAddToRegistry+0x4c>)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <vQueueAddToRegistry+0x4c>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004806:	e005      	b.n	8004814 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b07      	cmp	r3, #7
 8004812:	d9e7      	bls.n	80047e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20004c00 	.word	0x20004c00

08004824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004834:	f001 fc7a 	bl	800612c <vPortEnterCritical>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800483e:	b25b      	sxtb	r3, r3
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d103      	bne.n	800484e <vQueueWaitForMessageRestricted+0x2a>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004854:	b25b      	sxtb	r3, r3
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d103      	bne.n	8004864 <vQueueWaitForMessageRestricted+0x40>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004864:	f001 fc90 	bl	8006188 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3324      	adds	r3, #36	; 0x24
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fc2f 	bl	80050dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	f7ff ff27 	bl	80046d2 <prvUnlockQueue>
	}
 8004884:	bf00      	nop
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	; 0x38
 8004890:	af04      	add	r7, sp, #16
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <xTaskCreateStatic+0x28>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	e7fe      	b.n	80048b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <xTaskCreateStatic+0x42>
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e7fe      	b.n	80048cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048ce:	236c      	movs	r3, #108	; 0x6c
 80048d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b6c      	cmp	r3, #108	; 0x6c
 80048d6:	d009      	beq.n	80048ec <xTaskCreateStatic+0x60>
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	e7fe      	b.n	80048ea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01e      	beq.n	8004932 <xTaskCreateStatic+0xa6>
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01b      	beq.n	8004932 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004902:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800490c:	2300      	movs	r3, #0
 800490e:	9303      	str	r3, [sp, #12]
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	9302      	str	r3, [sp, #8]
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f850 	bl	80049ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800492a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800492c:	f000 f8dc 	bl	8004ae8 <prvAddNewTaskToReadyList>
 8004930:	e001      	b.n	8004936 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004936:	697b      	ldr	r3, [r7, #20]
	}
 8004938:	4618      	mov	r0, r3
 800493a:	3728      	adds	r7, #40	; 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	; 0x30
 8004944:	af04      	add	r7, sp, #16
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fd03 	bl	8006360 <pvPortMalloc>
 800495a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00e      	beq.n	8004980 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004962:	206c      	movs	r0, #108	; 0x6c
 8004964:	f001 fcfc 	bl	8006360 <pvPortMalloc>
 8004968:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
 8004976:	e005      	b.n	8004984 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004978:	6978      	ldr	r0, [r7, #20]
 800497a:	f001 fdb9 	bl	80064f0 <vPortFree>
 800497e:	e001      	b.n	8004984 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	2300      	movs	r3, #0
 8004996:	9303      	str	r3, [sp, #12]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	9302      	str	r3, [sp, #8]
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f80e 	bl	80049ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ae:	69f8      	ldr	r0, [r7, #28]
 80049b0:	f000 f89a 	bl	8004ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049b4:	2301      	movs	r3, #1
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e002      	b.n	80049c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
 80049be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049c0:	69bb      	ldr	r3, [r7, #24]
	}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b088      	sub	sp, #32
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
 80049d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	461a      	mov	r2, r3
 80049e2:	21a5      	movs	r1, #165	; 0xa5
 80049e4:	f001 fee9 	bl	80067ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049f2:	3b01      	subs	r3, #1
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f023 0307 	bic.w	r3, r3, #7
 8004a00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <prvInitialiseNewTask+0x56>
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e7fe      	b.n	8004a1e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01f      	beq.n	8004a66 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	e012      	b.n	8004a52 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	7819      	ldrb	r1, [r3, #0]
 8004a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	3334      	adds	r3, #52	; 0x34
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d006      	beq.n	8004a5a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b1f      	cmp	r3, #31
 8004a56:	d9e9      	bls.n	8004a2c <prvInitialiseNewTask+0x62>
 8004a58:	e000      	b.n	8004a5c <prvInitialiseNewTask+0x92>
			{
				break;
 8004a5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004a64:	e003      	b.n	8004a6e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	2b37      	cmp	r3, #55	; 0x37
 8004a72:	d901      	bls.n	8004a78 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a74:	2337      	movs	r3, #55	; 0x37
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a82:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	2200      	movs	r2, #0
 8004a88:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fec2 	bl	8003818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	3318      	adds	r3, #24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe febd 	bl	8003818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	69b8      	ldr	r0, [r7, #24]
 8004ac8:	f001 fa08 	bl	8005edc <pxPortInitialiseStack>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004adc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ade:	bf00      	nop
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004af0:	f001 fb1c 	bl	800612c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004af4:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <prvAddNewTaskToReadyList+0xc4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <prvAddNewTaskToReadyList+0xc4>)
 8004afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004afe:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <prvAddNewTaskToReadyList+0xc8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b06:	4a2a      	ldr	r2, [pc, #168]	; (8004bb0 <prvAddNewTaskToReadyList+0xc8>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <prvAddNewTaskToReadyList+0xc4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d110      	bne.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b14:	f000 fc08 	bl	8005328 <prvInitialiseTaskLists>
 8004b18:	e00d      	b.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <prvAddNewTaskToReadyList+0xcc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <prvAddNewTaskToReadyList+0xc8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d802      	bhi.n	8004b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b30:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <prvAddNewTaskToReadyList+0xc8>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <prvAddNewTaskToReadyList+0xd0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <prvAddNewTaskToReadyList+0xd0>)
 8004b3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <prvAddNewTaskToReadyList+0xd0>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <prvAddNewTaskToReadyList+0xd4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d903      	bls.n	8004b5c <prvAddNewTaskToReadyList+0x74>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <prvAddNewTaskToReadyList+0xd4>)
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <prvAddNewTaskToReadyList+0xd8>)
 8004b6a:	441a      	add	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f7fe fe5d 	bl	8003832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b78:	f001 fb06 	bl	8006188 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <prvAddNewTaskToReadyList+0xcc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00e      	beq.n	8004ba2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <prvAddNewTaskToReadyList+0xc8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d207      	bcs.n	8004ba2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <prvAddNewTaskToReadyList+0xdc>)
 8004b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000ddc 	.word	0x20000ddc
 8004bb0:	20000908 	.word	0x20000908
 8004bb4:	20000de8 	.word	0x20000de8
 8004bb8:	20000df8 	.word	0x20000df8
 8004bbc:	20000de4 	.word	0x20000de4
 8004bc0:	2000090c 	.word	0x2000090c
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <vTaskDelay+0x60>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <vTaskDelay+0x2e>
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	e7fe      	b.n	8004bf4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004bf6:	f000 f87f 	bl	8004cf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fdd3 	bl	80057a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c02:	f000 f887 	bl	8004d14 <xTaskResumeAll>
 8004c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <vTaskDelay+0x64>)
 8004c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000e04 	.word	0x20000e04
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c3e:	463a      	mov	r2, r7
 8004c40:	1d39      	adds	r1, r7, #4
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe fd92 	bl	8003770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	9202      	str	r2, [sp, #8]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	460a      	mov	r2, r1
 8004c5e:	4920      	ldr	r1, [pc, #128]	; (8004ce0 <vTaskStartScheduler+0xb0>)
 8004c60:	4820      	ldr	r0, [pc, #128]	; (8004ce4 <vTaskStartScheduler+0xb4>)
 8004c62:	f7ff fe13 	bl	800488c <xTaskCreateStatic>
 8004c66:	4602      	mov	r2, r0
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <vTaskStartScheduler+0xb8>)
 8004c6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <vTaskStartScheduler+0xb8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c74:	2301      	movs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e001      	b.n	8004c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d102      	bne.n	8004c8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c84:	f000 fde4 	bl	8005850 <xTimerCreateTimerTask>
 8004c88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d115      	bne.n	8004cbc <vTaskStartScheduler+0x8c>
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <vTaskStartScheduler+0xbc>)
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <vTaskStartScheduler+0xc0>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <vTaskStartScheduler+0xc4>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cb6:	f001 f99b 	bl	8005ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cba:	e00d      	b.n	8004cd8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d109      	bne.n	8004cd8 <vTaskStartScheduler+0xa8>
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e7fe      	b.n	8004cd6 <vTaskStartScheduler+0xa6>
}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08006b28 	.word	0x08006b28
 8004ce4:	080052f9 	.word	0x080052f9
 8004ce8:	20000e00 	.word	0x20000e00
 8004cec:	20000dfc 	.word	0x20000dfc
 8004cf0:	20000de8 	.word	0x20000de8
 8004cf4:	20000de0 	.word	0x20000de0

08004cf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <vTaskSuspendAll+0x18>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <vTaskSuspendAll+0x18>)
 8004d04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000e04 	.word	0x20000e04

08004d14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d22:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <xTaskResumeAll+0x114>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <xTaskResumeAll+0x2a>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	e7fe      	b.n	8004d3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d3e:	f001 f9f5 	bl	800612c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d42:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <xTaskResumeAll+0x114>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	4a37      	ldr	r2, [pc, #220]	; (8004e28 <xTaskResumeAll+0x114>)
 8004d4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <xTaskResumeAll+0x114>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d162      	bne.n	8004e1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d54:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <xTaskResumeAll+0x118>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d05e      	beq.n	8004e1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d5c:	e02f      	b.n	8004dbe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <xTaskResumeAll+0x11c>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3318      	adds	r3, #24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fdbe 	bl	80038ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe fdb9 	bl	80038ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <xTaskResumeAll+0x120>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d903      	bls.n	8004d8e <xTaskResumeAll+0x7a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <xTaskResumeAll+0x120>)
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4a27      	ldr	r2, [pc, #156]	; (8004e38 <xTaskResumeAll+0x124>)
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f7fe fd44 	bl	8003832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <xTaskResumeAll+0x128>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d302      	bcc.n	8004dbe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004db8:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <xTaskResumeAll+0x12c>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <xTaskResumeAll+0x11c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1cb      	bne.n	8004d5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dcc:	f000 fb46 	bl	800545c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <xTaskResumeAll+0x130>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ddc:	f000 f846 	bl	8004e6c <xTaskIncrementTick>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <xTaskResumeAll+0x12c>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f1      	bne.n	8004ddc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004df8:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <xTaskResumeAll+0x130>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <xTaskResumeAll+0x12c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e06:	2301      	movs	r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <xTaskResumeAll+0x134>)
 8004e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e1a:	f001 f9b5 	bl	8006188 <vPortExitCritical>

	return xAlreadyYielded;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000e04 	.word	0x20000e04
 8004e2c:	20000ddc 	.word	0x20000ddc
 8004e30:	20000d9c 	.word	0x20000d9c
 8004e34:	20000de4 	.word	0x20000de4
 8004e38:	2000090c 	.word	0x2000090c
 8004e3c:	20000908 	.word	0x20000908
 8004e40:	20000df0 	.word	0x20000df0
 8004e44:	20000dec 	.word	0x20000dec
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <xTaskGetTickCount+0x1c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e58:	687b      	ldr	r3, [r7, #4]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000de0 	.word	0x20000de0

08004e6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e76:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <xTaskIncrementTick+0x144>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 808e 	bne.w	8004f9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <xTaskIncrementTick+0x148>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e88:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <xTaskIncrementTick+0x148>)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11f      	bne.n	8004ed4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e94:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <xTaskIncrementTick+0x46>
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	e7fe      	b.n	8004eb0 <xTaskIncrementTick+0x44>
 8004eb2:	4b41      	ldr	r3, [pc, #260]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	4b40      	ldr	r3, [pc, #256]	; (8004fbc <xTaskIncrementTick+0x150>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3e      	ldr	r2, [pc, #248]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4a3e      	ldr	r2, [pc, #248]	; (8004fbc <xTaskIncrementTick+0x150>)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b3e      	ldr	r3, [pc, #248]	; (8004fc0 <xTaskIncrementTick+0x154>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <xTaskIncrementTick+0x154>)
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	f000 fac4 	bl	800545c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ed4:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d349      	bcc.n	8004f72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee8:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004eea:	f04f 32ff 	mov.w	r2, #4294967295
 8004eee:	601a      	str	r2, [r3, #0]
					break;
 8004ef0:	e03f      	b.n	8004f72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef2:	4b31      	ldr	r3, [pc, #196]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d203      	bcs.n	8004f12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f0a:	4a2e      	ldr	r2, [pc, #184]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f10:	e02f      	b.n	8004f72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fce8 	bl	80038ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	3318      	adds	r3, #24
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe fcdf 	bl	80038ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <xTaskIncrementTick+0x15c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d903      	bls.n	8004f42 <xTaskIncrementTick+0xd6>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	4a22      	ldr	r2, [pc, #136]	; (8004fc8 <xTaskIncrementTick+0x15c>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <xTaskIncrementTick+0x160>)
 8004f50:	441a      	add	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fe fc6a 	bl	8003832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <xTaskIncrementTick+0x164>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3b8      	bcc.n	8004ede <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f70:	e7b5      	b.n	8004ede <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <xTaskIncrementTick+0x164>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4914      	ldr	r1, [pc, #80]	; (8004fcc <xTaskIncrementTick+0x160>)
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d901      	bls.n	8004f8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <xTaskIncrementTick+0x168>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f96:	2301      	movs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e004      	b.n	8004fa6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <xTaskIncrementTick+0x16c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <xTaskIncrementTick+0x16c>)
 8004fa4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fa6:	697b      	ldr	r3, [r7, #20]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000e04 	.word	0x20000e04
 8004fb4:	20000de0 	.word	0x20000de0
 8004fb8:	20000d94 	.word	0x20000d94
 8004fbc:	20000d98 	.word	0x20000d98
 8004fc0:	20000df4 	.word	0x20000df4
 8004fc4:	20000dfc 	.word	0x20000dfc
 8004fc8:	20000de4 	.word	0x20000de4
 8004fcc:	2000090c 	.word	0x2000090c
 8004fd0:	20000908 	.word	0x20000908
 8004fd4:	20000df0 	.word	0x20000df0
 8004fd8:	20000dec 	.word	0x20000dec

08004fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <vTaskSwitchContext+0xa4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fea:	4b26      	ldr	r3, [pc, #152]	; (8005084 <vTaskSwitchContext+0xa8>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ff0:	e040      	b.n	8005074 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <vTaskSwitchContext+0xa8>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff8:	4b23      	ldr	r3, [pc, #140]	; (8005088 <vTaskSwitchContext+0xac>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e00f      	b.n	8005020 <vTaskSwitchContext+0x44>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <vTaskSwitchContext+0x3e>
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	e7fe      	b.n	8005018 <vTaskSwitchContext+0x3c>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3b01      	subs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	491a      	ldr	r1, [pc, #104]	; (800508c <vTaskSwitchContext+0xb0>)
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0e5      	beq.n	8005000 <vTaskSwitchContext+0x24>
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4a13      	ldr	r2, [pc, #76]	; (800508c <vTaskSwitchContext+0xb0>)
 8005040:	4413      	add	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3308      	adds	r3, #8
 8005056:	429a      	cmp	r2, r3
 8005058:	d104      	bne.n	8005064 <vTaskSwitchContext+0x88>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <vTaskSwitchContext+0xb4>)
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	4a06      	ldr	r2, [pc, #24]	; (8005088 <vTaskSwitchContext+0xac>)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6013      	str	r3, [r2, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	20000e04 	.word	0x20000e04
 8005084:	20000df0 	.word	0x20000df0
 8005088:	20000de4 	.word	0x20000de4
 800508c:	2000090c 	.word	0x2000090c
 8005090:	20000908 	.word	0x20000908

08005094 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <vTaskPlaceOnEventList+0x24>
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e7fe      	b.n	80050b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <vTaskPlaceOnEventList+0x44>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3318      	adds	r3, #24
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fe fbda 	bl	800387a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050c6:	2101      	movs	r1, #1
 80050c8:	6838      	ldr	r0, [r7, #0]
 80050ca:	f000 fb6d 	bl	80057a8 <prvAddCurrentTaskToDelayedList>
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000908 	.word	0x20000908

080050dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <vTaskPlaceOnEventListRestricted+0x26>
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e7fe      	b.n	8005100 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <vTaskPlaceOnEventListRestricted+0x50>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3318      	adds	r3, #24
 8005108:	4619      	mov	r1, r3
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7fe fb91 	bl	8003832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	68b8      	ldr	r0, [r7, #8]
 8005120:	f000 fb42 	bl	80057a8 <prvAddCurrentTaskToDelayedList>
	}
 8005124:	bf00      	nop
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000908 	.word	0x20000908

08005130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <xTaskRemoveFromEventList+0x2a>
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e7fe      	b.n	8005158 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3318      	adds	r3, #24
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fbc4 	bl	80038ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <xTaskRemoveFromEventList+0xac>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11d      	bne.n	80051a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3304      	adds	r3, #4
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fbbb 	bl	80038ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <xTaskRemoveFromEventList+0xb0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <xTaskRemoveFromEventList+0x5a>
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <xTaskRemoveFromEventList+0xb0>)
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <xTaskRemoveFromEventList+0xb4>)
 8005198:	441a      	add	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fe fb46 	bl	8003832 <vListInsertEnd>
 80051a6:	e005      	b.n	80051b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	3318      	adds	r3, #24
 80051ac:	4619      	mov	r1, r3
 80051ae:	480e      	ldr	r0, [pc, #56]	; (80051e8 <xTaskRemoveFromEventList+0xb8>)
 80051b0:	f7fe fb3f 	bl	8003832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <xTaskRemoveFromEventList+0xbc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	429a      	cmp	r2, r3
 80051c0:	d905      	bls.n	80051ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <xTaskRemoveFromEventList+0xc0>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e001      	b.n	80051d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051d2:	697b      	ldr	r3, [r7, #20]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000e04 	.word	0x20000e04
 80051e0:	20000de4 	.word	0x20000de4
 80051e4:	2000090c 	.word	0x2000090c
 80051e8:	20000d9c 	.word	0x20000d9c
 80051ec:	20000908 	.word	0x20000908
 80051f0:	20000df0 	.word	0x20000df0

080051f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <vTaskInternalSetTimeOutState+0x24>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <vTaskInternalSetTimeOutState+0x28>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	20000df4 	.word	0x20000df4
 800521c:	20000de0 	.word	0x20000de0

08005220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <xTaskCheckForTimeOut+0x24>
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e7fe      	b.n	8005242 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <xTaskCheckForTimeOut+0x3e>
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e7fe      	b.n	800525c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800525e:	f000 ff65 	bl	800612c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005262:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <xTaskCheckForTimeOut+0xb8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d102      	bne.n	8005282 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e023      	b.n	80052ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <xTaskCheckForTimeOut+0xbc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d007      	beq.n	800529e <xTaskCheckForTimeOut+0x7e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	429a      	cmp	r2, r3
 8005296:	d302      	bcc.n	800529e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	e015      	b.n	80052ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d20b      	bcs.n	80052c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ff9d 	bl	80051f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e004      	b.n	80052ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052ca:	f000 ff5d 	bl	8006188 <vPortExitCritical>

	return xReturn;
 80052ce:	69fb      	ldr	r3, [r7, #28]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000de0 	.word	0x20000de0
 80052dc:	20000df4 	.word	0x20000df4

080052e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052e4:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <vTaskMissedYield+0x14>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000df0 	.word	0x20000df0

080052f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005300:	f000 f852 	bl	80053a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <prvIdleTask+0x28>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d9f9      	bls.n	8005300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <prvIdleTask+0x2c>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800531c:	e7f0      	b.n	8005300 <prvIdleTask+0x8>
 800531e:	bf00      	nop
 8005320:	2000090c 	.word	0x2000090c
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800532e:	2300      	movs	r3, #0
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	e00c      	b.n	800534e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <prvInitialiseTaskLists+0x60>)
 8005340:	4413      	add	r3, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe fa48 	bl	80037d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3301      	adds	r3, #1
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b37      	cmp	r3, #55	; 0x37
 8005352:	d9ef      	bls.n	8005334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005354:	480d      	ldr	r0, [pc, #52]	; (800538c <prvInitialiseTaskLists+0x64>)
 8005356:	f7fe fa3f 	bl	80037d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800535a:	480d      	ldr	r0, [pc, #52]	; (8005390 <prvInitialiseTaskLists+0x68>)
 800535c:	f7fe fa3c 	bl	80037d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005360:	480c      	ldr	r0, [pc, #48]	; (8005394 <prvInitialiseTaskLists+0x6c>)
 8005362:	f7fe fa39 	bl	80037d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005366:	480c      	ldr	r0, [pc, #48]	; (8005398 <prvInitialiseTaskLists+0x70>)
 8005368:	f7fe fa36 	bl	80037d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <prvInitialiseTaskLists+0x74>)
 800536e:	f7fe fa33 	bl	80037d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <prvInitialiseTaskLists+0x78>)
 8005374:	4a05      	ldr	r2, [pc, #20]	; (800538c <prvInitialiseTaskLists+0x64>)
 8005376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <prvInitialiseTaskLists+0x7c>)
 800537a:	4a05      	ldr	r2, [pc, #20]	; (8005390 <prvInitialiseTaskLists+0x68>)
 800537c:	601a      	str	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	2000090c 	.word	0x2000090c
 800538c:	20000d6c 	.word	0x20000d6c
 8005390:	20000d80 	.word	0x20000d80
 8005394:	20000d9c 	.word	0x20000d9c
 8005398:	20000db0 	.word	0x20000db0
 800539c:	20000dc8 	.word	0x20000dc8
 80053a0:	20000d94 	.word	0x20000d94
 80053a4:	20000d98 	.word	0x20000d98

080053a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053ae:	e019      	b.n	80053e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053b0:	f000 febc 	bl	800612c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <prvCheckTasksWaitingTermination+0x4c>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fe fa93 	bl	80038ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <prvCheckTasksWaitingTermination+0x50>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <prvCheckTasksWaitingTermination+0x50>)
 80053ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <prvCheckTasksWaitingTermination+0x54>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	4a09      	ldr	r2, [pc, #36]	; (80053fc <prvCheckTasksWaitingTermination+0x54>)
 80053d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053da:	f000 fed5 	bl	8006188 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f80e 	bl	8005400 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <prvCheckTasksWaitingTermination+0x54>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e1      	bne.n	80053b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000db0 	.word	0x20000db0
 80053f8:	20000ddc 	.word	0x20000ddc
 80053fc:	20000dc4 	.word	0x20000dc4

08005400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f86a 	bl	80064f0 <vPortFree>
				vPortFree( pxTCB );
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f001 f867 	bl	80064f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005422:	e017      	b.n	8005454 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800542a:	2b01      	cmp	r3, #1
 800542c:	d103      	bne.n	8005436 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 f85e 	bl	80064f0 <vPortFree>
	}
 8005434:	e00e      	b.n	8005454 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800543c:	2b02      	cmp	r3, #2
 800543e:	d009      	beq.n	8005454 <prvDeleteTCB+0x54>
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e7fe      	b.n	8005452 <prvDeleteTCB+0x52>
	}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <prvResetNextTaskUnblockTime+0x38>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <prvResetNextTaskUnblockTime+0x3c>)
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005474:	e008      	b.n	8005488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005476:	4b07      	ldr	r3, [pc, #28]	; (8005494 <prvResetNextTaskUnblockTime+0x38>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4a04      	ldr	r2, [pc, #16]	; (8005498 <prvResetNextTaskUnblockTime+0x3c>)
 8005486:	6013      	str	r3, [r2, #0]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	20000d94 	.word	0x20000d94
 8005498:	20000dfc 	.word	0x20000dfc

0800549c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <xTaskGetSchedulerState+0x34>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d102      	bne.n	80054b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054aa:	2301      	movs	r3, #1
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	e008      	b.n	80054c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <xTaskGetSchedulerState+0x38>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054b8:	2302      	movs	r3, #2
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	e001      	b.n	80054c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054c2:	687b      	ldr	r3, [r7, #4]
	}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000de8 	.word	0x20000de8
 80054d4:	20000e04 	.word	0x20000e04

080054d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d051      	beq.n	8005592 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f2:	4b2a      	ldr	r3, [pc, #168]	; (800559c <xTaskPriorityInherit+0xc4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d241      	bcs.n	8005580 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	db06      	blt.n	8005512 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005504:	4b25      	ldr	r3, [pc, #148]	; (800559c <xTaskPriorityInherit+0xc4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6959      	ldr	r1, [r3, #20]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <xTaskPriorityInherit+0xc8>)
 8005524:	4413      	add	r3, r2
 8005526:	4299      	cmp	r1, r3
 8005528:	d122      	bne.n	8005570 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe f9dc 	bl	80038ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <xTaskPriorityInherit+0xc4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <xTaskPriorityInherit+0xcc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d903      	bls.n	8005552 <xTaskPriorityInherit+0x7a>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <xTaskPriorityInherit+0xcc>)
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4a10      	ldr	r2, [pc, #64]	; (80055a0 <xTaskPriorityInherit+0xc8>)
 8005560:	441a      	add	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	3304      	adds	r3, #4
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f7fe f962 	bl	8003832 <vListInsertEnd>
 800556e:	e004      	b.n	800557a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <xTaskPriorityInherit+0xc4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800557a:	2301      	movs	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e008      	b.n	8005592 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <xTaskPriorityInherit+0xc4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	429a      	cmp	r2, r3
 800558c:	d201      	bcs.n	8005592 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800558e:	2301      	movs	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005592:	68fb      	ldr	r3, [r7, #12]
	}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000908 	.word	0x20000908
 80055a0:	2000090c 	.word	0x2000090c
 80055a4:	20000de4 	.word	0x20000de4

080055a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d054      	beq.n	8005668 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055be:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <xTaskPriorityDisinherit+0xcc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d009      	beq.n	80055dc <xTaskPriorityDisinherit+0x34>
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e7fe      	b.n	80055da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <xTaskPriorityDisinherit+0x50>
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	e7fe      	b.n	80055f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fc:	1e5a      	subs	r2, r3, #1
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	429a      	cmp	r2, r3
 800560c:	d02c      	beq.n	8005668 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005612:	2b00      	cmp	r3, #0
 8005614:	d128      	bne.n	8005668 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3304      	adds	r3, #4
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe f966 	bl	80038ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <xTaskPriorityDisinherit+0xd0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d903      	bls.n	8005648 <xTaskPriorityDisinherit+0xa0>
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4a0c      	ldr	r2, [pc, #48]	; (8005678 <xTaskPriorityDisinherit+0xd0>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4a09      	ldr	r2, [pc, #36]	; (800567c <xTaskPriorityDisinherit+0xd4>)
 8005656:	441a      	add	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7fe f8e7 	bl	8003832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005668:	697b      	ldr	r3, [r7, #20]
	}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000908 	.word	0x20000908
 8005678:	20000de4 	.word	0x20000de4
 800567c:	2000090c 	.word	0x2000090c

08005680 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800568e:	2301      	movs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d068      	beq.n	800576a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e7fe      	b.n	80056b2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d902      	bls.n	80056c4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	e002      	b.n	80056ca <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d04a      	beq.n	800576a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d145      	bne.n	800576a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80056de:	4b25      	ldr	r3, [pc, #148]	; (8005774 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d109      	bne.n	80056fc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	e7fe      	b.n	80056fa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	db04      	blt.n	800571a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	6959      	ldr	r1, [r3, #20]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800572a:	4413      	add	r3, r2
 800572c:	4299      	cmp	r1, r3
 800572e:	d11c      	bne.n	800576a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	3304      	adds	r3, #4
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe f8d9 	bl	80038ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d903      	bls.n	800574e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a0c      	ldr	r2, [pc, #48]	; (800577c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4a07      	ldr	r2, [pc, #28]	; (8005778 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800575c:	441a      	add	r2, r3
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fe f864 	bl	8003832 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800576a:	bf00      	nop
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000908 	.word	0x20000908
 8005778:	2000090c 	.word	0x2000090c
 800577c:	20000de4 	.word	0x20000de4

08005780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005792:	3201      	adds	r2, #1
 8005794:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8005796:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005798:	681b      	ldr	r3, [r3, #0]
	}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	20000908 	.word	0x20000908

080057a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057b2:	4b21      	ldr	r3, [pc, #132]	; (8005838 <prvAddCurrentTaskToDelayedList+0x90>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057b8:	4b20      	ldr	r3, [pc, #128]	; (800583c <prvAddCurrentTaskToDelayedList+0x94>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe f894 	bl	80038ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d10a      	bne.n	80057e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d2:	4b1a      	ldr	r3, [pc, #104]	; (800583c <prvAddCurrentTaskToDelayedList+0x94>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4819      	ldr	r0, [pc, #100]	; (8005840 <prvAddCurrentTaskToDelayedList+0x98>)
 80057dc:	f7fe f829 	bl	8003832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057e0:	e026      	b.n	8005830 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <prvAddCurrentTaskToDelayedList+0x94>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d209      	bcs.n	800580e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b0f      	ldr	r3, [pc, #60]	; (800583c <prvAddCurrentTaskToDelayedList+0x94>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fe f837 	bl	800387a <vListInsert>
}
 800580c:	e010      	b.n	8005830 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800580e:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <prvAddCurrentTaskToDelayedList+0x94>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3304      	adds	r3, #4
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fe f82d 	bl	800387a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	d202      	bcs.n	8005830 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800582a:	4a08      	ldr	r2, [pc, #32]	; (800584c <prvAddCurrentTaskToDelayedList+0xa4>)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6013      	str	r3, [r2, #0]
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20000de0 	.word	0x20000de0
 800583c:	20000908 	.word	0x20000908
 8005840:	20000dc8 	.word	0x20000dc8
 8005844:	20000d98 	.word	0x20000d98
 8005848:	20000d94 	.word	0x20000d94
 800584c:	20000dfc 	.word	0x20000dfc

08005850 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	; 0x28
 8005854:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800585a:	f000 faff 	bl	8005e5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800585e:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <xTimerCreateTimerTask+0x80>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d021      	beq.n	80058aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800586e:	1d3a      	adds	r2, r7, #4
 8005870:	f107 0108 	add.w	r1, r7, #8
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4618      	mov	r0, r3
 800587a:	f7fd ff93 	bl	80037a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	9202      	str	r2, [sp, #8]
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	2302      	movs	r3, #2
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2300      	movs	r3, #0
 800588e:	460a      	mov	r2, r1
 8005890:	4910      	ldr	r1, [pc, #64]	; (80058d4 <xTimerCreateTimerTask+0x84>)
 8005892:	4811      	ldr	r0, [pc, #68]	; (80058d8 <xTimerCreateTimerTask+0x88>)
 8005894:	f7fe fffa 	bl	800488c <xTaskCreateStatic>
 8005898:	4602      	mov	r2, r0
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <xTimerCreateTimerTask+0x8c>)
 800589c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <xTimerCreateTimerTask+0x8c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058a6:	2301      	movs	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <xTimerCreateTimerTask+0x74>
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	e7fe      	b.n	80058c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80058c4:	697b      	ldr	r3, [r7, #20]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000e38 	.word	0x20000e38
 80058d4:	08006b30 	.word	0x08006b30
 80058d8:	08005a11 	.word	0x08005a11
 80058dc:	20000e3c 	.word	0x20000e3c

080058e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <xTimerGenericCommand+0x2c>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	e7fe      	b.n	800590a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <xTimerGenericCommand+0x94>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02a      	beq.n	800596a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b05      	cmp	r3, #5
 8005924:	dc18      	bgt.n	8005958 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005926:	f7ff fdb9 	bl	800549c <xTaskGetSchedulerState>
 800592a:	4603      	mov	r3, r0
 800592c:	2b02      	cmp	r3, #2
 800592e:	d109      	bne.n	8005944 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005930:	4b10      	ldr	r3, [pc, #64]	; (8005974 <xTimerGenericCommand+0x94>)
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	f107 0110 	add.w	r1, r7, #16
 8005938:	2300      	movs	r3, #0
 800593a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593c:	f7fe f96c 	bl	8003c18 <xQueueGenericSend>
 8005940:	6278      	str	r0, [r7, #36]	; 0x24
 8005942:	e012      	b.n	800596a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <xTimerGenericCommand+0x94>)
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	f107 0110 	add.w	r1, r7, #16
 800594c:	2300      	movs	r3, #0
 800594e:	2200      	movs	r2, #0
 8005950:	f7fe f962 	bl	8003c18 <xQueueGenericSend>
 8005954:	6278      	str	r0, [r7, #36]	; 0x24
 8005956:	e008      	b.n	800596a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <xTimerGenericCommand+0x94>)
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	f107 0110 	add.w	r1, r7, #16
 8005960:	2300      	movs	r3, #0
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	f7fe fa52 	bl	8003e0c <xQueueGenericSendFromISR>
 8005968:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800596c:	4618      	mov	r0, r3
 800596e:	3728      	adds	r7, #40	; 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000e38 	.word	0x20000e38

08005978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005982:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <prvProcessExpiredTimer+0x94>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7fd ffab 	bl	80038ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d021      	beq.n	80059e8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	18d1      	adds	r1, r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	6978      	ldr	r0, [r7, #20]
 80059b2:	f000 f8d1 	bl	8005b58 <prvInsertTimerInActiveList>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01e      	beq.n	80059fa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059bc:	2300      	movs	r3, #0
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2300      	movs	r3, #0
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	2100      	movs	r1, #0
 80059c6:	6978      	ldr	r0, [r7, #20]
 80059c8:	f7ff ff8a 	bl	80058e0 <xTimerGenericCommand>
 80059cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d112      	bne.n	80059fa <prvProcessExpiredTimer+0x82>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e7fe      	b.n	80059e6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	6978      	ldr	r0, [r7, #20]
 8005a00:	4798      	blx	r3
}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000e30 	.word	0x20000e30

08005a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a18:	f107 0308 	add.w	r3, r7, #8
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f857 	bl	8005ad0 <prvGetNextExpireTime>
 8005a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4619      	mov	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f803 	bl	8005a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a2e:	f000 f8d5 	bl	8005bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a32:	e7f1      	b.n	8005a18 <prvTimerTask+0x8>

08005a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a3e:	f7ff f95b 	bl	8004cf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f866 	bl	8005b18 <prvSampleTimeNow>
 8005a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d130      	bne.n	8005ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <prvProcessTimerOrBlockTask+0x3c>
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d806      	bhi.n	8005a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a62:	f7ff f957 	bl	8004d14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ff85 	bl	8005978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a6e:	e024      	b.n	8005aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <prvProcessTimerOrBlockTask+0x90>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <prvProcessTimerOrBlockTask+0x50>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <prvProcessTimerOrBlockTask+0x52>
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <prvProcessTimerOrBlockTask+0x94>)
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7fe fec5 	bl	8004824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f7ff f93b 	bl	8004d14 <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <prvProcessTimerOrBlockTask+0x98>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
}
 8005ab4:	e001      	b.n	8005aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ab6:	f7ff f92d 	bl	8004d14 <xTaskResumeAll>
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000e34 	.word	0x20000e34
 8005ac8:	20000e38 	.word	0x20000e38
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <prvGetNextExpireTime+0x44>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <prvGetNextExpireTime+0x16>
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	e000      	b.n	8005ae8 <prvGetNextExpireTime+0x18>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005af4:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <prvGetNextExpireTime+0x44>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	e001      	b.n	8005b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b04:	68fb      	ldr	r3, [r7, #12]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000e30 	.word	0x20000e30

08005b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b20:	f7ff f994 	bl	8004e4c <xTaskGetTickCount>
 8005b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <prvSampleTimeNow+0x3c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d205      	bcs.n	8005b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b30:	f000 f930 	bl	8005d94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b42:	4a04      	ldr	r2, [pc, #16]	; (8005b54 <prvSampleTimeNow+0x3c>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b48:	68fb      	ldr	r3, [r7, #12]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000e40 	.word	0x20000e40

08005b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d812      	bhi.n	8005ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d302      	bcc.n	8005b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e01b      	b.n	8005bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <prvInsertTimerInActiveList+0x7c>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f7fd fe6c 	bl	800387a <vListInsert>
 8005ba2:	e012      	b.n	8005bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d206      	bcs.n	8005bba <prvInsertTimerInActiveList+0x62>
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d302      	bcc.n	8005bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e007      	b.n	8005bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <prvInsertTimerInActiveList+0x80>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f7fd fe58 	bl	800387a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bca:	697b      	ldr	r3, [r7, #20]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000e34 	.word	0x20000e34
 8005bd8:	20000e30 	.word	0x20000e30

08005bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005be2:	e0c6      	b.n	8005d72 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da17      	bge.n	8005c1a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	3304      	adds	r3, #4
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <prvProcessReceivedCommands+0x2e>
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e7fe      	b.n	8005c08 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c10:	6850      	ldr	r0, [r2, #4]
 8005c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c14:	6892      	ldr	r2, [r2, #8]
 8005c16:	4611      	mov	r1, r2
 8005c18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f2c0 80a7 	blt.w	8005d70 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	3304      	adds	r3, #4
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fd fe5a 	bl	80038ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c38:	463b      	mov	r3, r7
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff ff6c 	bl	8005b18 <prvSampleTimeNow>
 8005c40:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	f200 8094 	bhi.w	8005d72 <prvProcessReceivedCommands+0x196>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <prvProcessReceivedCommands+0x74>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c79 	.word	0x08005c79
 8005c5c:	08005ceb 	.word	0x08005ceb
 8005c60:	08005cff 	.word	0x08005cff
 8005c64:	08005d47 	.word	0x08005d47
 8005c68:	08005c79 	.word	0x08005c79
 8005c6c:	08005c79 	.word	0x08005c79
 8005c70:	08005ceb 	.word	0x08005ceb
 8005c74:	08005cff 	.word	0x08005cff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	18d1      	adds	r1, r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c98:	f7ff ff5e 	bl	8005b58 <prvInsertTimerInActiveList>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d067      	beq.n	8005d72 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	441a      	add	r2, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cca:	f7ff fe09 	bl	80058e0 <xTimerGenericCommand>
 8005cce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d14d      	bne.n	8005d72 <prvProcessReceivedCommands+0x196>
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e7fe      	b.n	8005ce8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cfc:	e039      	b.n	8005d72 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <prvProcessReceivedCommands+0x156>
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	e7fe      	b.n	8005d30 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	18d1      	adds	r1, r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d40:	f7ff ff0a 	bl	8005b58 <prvInsertTimerInActiveList>
					break;
 8005d44:	e015      	b.n	8005d72 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d56:	f000 fbcb 	bl	80064f0 <vPortFree>
 8005d5a:	e00a      	b.n	8005d72 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d6e:	e000      	b.n	8005d72 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <prvProcessReceivedCommands+0x1b4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	1d39      	adds	r1, r7, #4
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe f966 	bl	800404c <xQueueReceive>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f47f af2e 	bne.w	8005be4 <prvProcessReceivedCommands+0x8>
	}
}
 8005d88:	bf00      	nop
 8005d8a:	3730      	adds	r7, #48	; 0x30
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000e38 	.word	0x20000e38

08005d94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d9a:	e047      	b.n	8005e2c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da6:	4b2b      	ldr	r3, [pc, #172]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fd fd99 	bl	80038ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d02d      	beq.n	8005e2c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d90e      	bls.n	8005e00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dee:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7fd fd3e 	bl	800387a <vListInsert>
 8005dfe:	e015      	b.n	8005e2c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e00:	2300      	movs	r3, #0
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fd68 	bl	80058e0 <xTimerGenericCommand>
 8005e10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <prvSwitchTimerLists+0x98>
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	e7fe      	b.n	8005e2a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1b2      	bne.n	8005d9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e36:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <prvSwitchTimerLists+0xc4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <prvSwitchTimerLists+0xc0>)
 8005e42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e44:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <prvSwitchTimerLists+0xc4>)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	6013      	str	r3, [r2, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000e30 	.word	0x20000e30
 8005e58:	20000e34 	.word	0x20000e34

08005e5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e62:	f000 f963 	bl	800612c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d120      	bne.n	8005eb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e6e:	4814      	ldr	r0, [pc, #80]	; (8005ec0 <prvCheckForValidListAndQueue+0x64>)
 8005e70:	f7fd fcb2 	bl	80037d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e74:	4813      	ldr	r0, [pc, #76]	; (8005ec4 <prvCheckForValidListAndQueue+0x68>)
 8005e76:	f7fd fcaf 	bl	80037d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <prvCheckForValidListAndQueue+0x6c>)
 8005e7c:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <prvCheckForValidListAndQueue+0x64>)
 8005e7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <prvCheckForValidListAndQueue+0x70>)
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <prvCheckForValidListAndQueue+0x68>)
 8005e84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <prvCheckForValidListAndQueue+0x74>)
 8005e8c:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <prvCheckForValidListAndQueue+0x78>)
 8005e8e:	2110      	movs	r1, #16
 8005e90:	200a      	movs	r0, #10
 8005e92:	f7fd fdbd 	bl	8003a10 <xQueueGenericCreateStatic>
 8005e96:	4602      	mov	r2, r0
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005e9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <prvCheckForValidListAndQueue+0x60>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	490b      	ldr	r1, [pc, #44]	; (8005ed8 <prvCheckForValidListAndQueue+0x7c>)
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe fc92 	bl	80047d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eb0:	f000 f96a 	bl	8006188 <vPortExitCritical>
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000e38 	.word	0x20000e38
 8005ec0:	20000e08 	.word	0x20000e08
 8005ec4:	20000e1c 	.word	0x20000e1c
 8005ec8:	20000e30 	.word	0x20000e30
 8005ecc:	20000e34 	.word	0x20000e34
 8005ed0:	20000ee4 	.word	0x20000ee4
 8005ed4:	20000e44 	.word	0x20000e44
 8005ed8:	08006b38 	.word	0x08006b38

08005edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3b04      	subs	r3, #4
 8005eec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <pxPortInitialiseStack+0x64>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3b14      	subs	r3, #20
 8005f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b04      	subs	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f06f 0202 	mvn.w	r2, #2
 8005f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b20      	subs	r3, #32
 8005f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	08005f45 	.word	0x08005f45

08005f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <prvTaskExitError+0x50>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d009      	beq.n	8005f6c <prvTaskExitError+0x28>
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e7fe      	b.n	8005f6a <prvTaskExitError+0x26>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f7e:	bf00      	nop
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0fc      	beq.n	8005f80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2000003c 	.word	0x2000003c
	...

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <pxCurrentTCBConst2>)
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6808      	ldr	r0, [r1, #0]
 8005fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	f380 8809 	msr	PSP, r0
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	4770      	bx	lr
 8005fbc:	f3af 8000 	nop.w

08005fc0 <pxCurrentTCBConst2>:
 8005fc0:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fc8:	4808      	ldr	r0, [pc, #32]	; (8005fec <prvPortStartFirstTask+0x24>)
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f380 8808 	msr	MSP, r0
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f380 8814 	msr	CONTROL, r0
 8005fda:	b662      	cpsie	i
 8005fdc:	b661      	cpsie	f
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	df00      	svc	0
 8005fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fea:	bf00      	nop
 8005fec:	e000ed08 	.word	0xe000ed08

08005ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ff6:	4b44      	ldr	r3, [pc, #272]	; (8006108 <xPortStartScheduler+0x118>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a44      	ldr	r2, [pc, #272]	; (800610c <xPortStartScheduler+0x11c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d109      	bne.n	8006014 <xPortStartScheduler+0x24>
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e7fe      	b.n	8006012 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006014:	4b3c      	ldr	r3, [pc, #240]	; (8006108 <xPortStartScheduler+0x118>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a3d      	ldr	r2, [pc, #244]	; (8006110 <xPortStartScheduler+0x120>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d109      	bne.n	8006032 <xPortStartScheduler+0x42>
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e7fe      	b.n	8006030 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006032:	4b38      	ldr	r3, [pc, #224]	; (8006114 <xPortStartScheduler+0x124>)
 8006034:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006054:	b2da      	uxtb	r2, r3
 8006056:	4b30      	ldr	r3, [pc, #192]	; (8006118 <xPortStartScheduler+0x128>)
 8006058:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800605a:	4b30      	ldr	r3, [pc, #192]	; (800611c <xPortStartScheduler+0x12c>)
 800605c:	2207      	movs	r2, #7
 800605e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006060:	e009      	b.n	8006076 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006062:	4b2e      	ldr	r3, [pc, #184]	; (800611c <xPortStartScheduler+0x12c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3b01      	subs	r3, #1
 8006068:	4a2c      	ldr	r2, [pc, #176]	; (800611c <xPortStartScheduler+0x12c>)
 800606a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d0ef      	beq.n	8006062 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006082:	4b26      	ldr	r3, [pc, #152]	; (800611c <xPortStartScheduler+0x12c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1c3 0307 	rsb	r3, r3, #7
 800608a:	2b04      	cmp	r3, #4
 800608c:	d009      	beq.n	80060a2 <xPortStartScheduler+0xb2>
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60bb      	str	r3, [r7, #8]
 80060a0:	e7fe      	b.n	80060a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060a2:	4b1e      	ldr	r3, [pc, #120]	; (800611c <xPortStartScheduler+0x12c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <xPortStartScheduler+0x12c>)
 80060aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <xPortStartScheduler+0x12c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <xPortStartScheduler+0x12c>)
 80060b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <xPortStartScheduler+0x130>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <xPortStartScheduler+0x130>)
 80060c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060cc:	4b14      	ldr	r3, [pc, #80]	; (8006120 <xPortStartScheduler+0x130>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <xPortStartScheduler+0x130>)
 80060d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060d8:	f000 f8d6 	bl	8006288 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060dc:	4b11      	ldr	r3, [pc, #68]	; (8006124 <xPortStartScheduler+0x134>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060e2:	f000 f8f5 	bl	80062d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <xPortStartScheduler+0x138>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <xPortStartScheduler+0x138>)
 80060ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060f2:	f7ff ff69 	bl	8005fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060f6:	f7fe ff71 	bl	8004fdc <vTaskSwitchContext>
	prvTaskExitError();
 80060fa:	f7ff ff23 	bl	8005f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed00 	.word	0xe000ed00
 800610c:	410fc271 	.word	0x410fc271
 8006110:	410fc270 	.word	0x410fc270
 8006114:	e000e400 	.word	0xe000e400
 8006118:	20000f34 	.word	0x20000f34
 800611c:	20000f38 	.word	0x20000f38
 8006120:	e000ed20 	.word	0xe000ed20
 8006124:	2000003c 	.word	0x2000003c
 8006128:	e000ef34 	.word	0xe000ef34

0800612c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <vPortEnterCritical+0x54>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	4a0d      	ldr	r2, [pc, #52]	; (8006180 <vPortEnterCritical+0x54>)
 800614c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800614e:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <vPortEnterCritical+0x54>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10e      	bne.n	8006174 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <vPortEnterCritical+0x58>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d009      	beq.n	8006174 <vPortEnterCritical+0x48>
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	e7fe      	b.n	8006172 <vPortEnterCritical+0x46>
	}
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	2000003c 	.word	0x2000003c
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <vPortExitCritical+0x4c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <vPortExitCritical+0x22>
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	e7fe      	b.n	80061a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <vPortExitCritical+0x4c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <vPortExitCritical+0x4c>)
 80061b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <vPortExitCritical+0x4c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <vPortExitCritical+0x3e>
 80061bc:	2300      	movs	r3, #0
 80061be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	2000003c 	.word	0x2000003c
	...

080061e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061e0:	f3ef 8009 	mrs	r0, PSP
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <pxCurrentTCBConst>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	f01e 0f10 	tst.w	lr, #16
 80061f0:	bf08      	it	eq
 80061f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	6010      	str	r0, [r2, #0]
 80061fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006204:	f380 8811 	msr	BASEPRI, r0
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f7fe fee4 	bl	8004fdc <vTaskSwitchContext>
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f380 8811 	msr	BASEPRI, r0
 800621c:	bc09      	pop	{r0, r3}
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	6808      	ldr	r0, [r1, #0]
 8006222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006226:	f01e 0f10 	tst.w	lr, #16
 800622a:	bf08      	it	eq
 800622c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006230:	f380 8809 	msr	PSP, r0
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	f3af 8000 	nop.w

08006240 <pxCurrentTCBConst>:
 8006240:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006260:	f7fe fe04 	bl	8004e6c <xTaskIncrementTick>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <xPortSysTickHandler+0x3c>)
 800626c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <vPortSetupTimerInterrupt+0x34>)
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <vPortSetupTimerInterrupt+0x38>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <vPortSetupTimerInterrupt+0x3c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <vPortSetupTimerInterrupt+0x40>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	099b      	lsrs	r3, r3, #6
 80062a4:	4a09      	ldr	r2, [pc, #36]	; (80062cc <vPortSetupTimerInterrupt+0x44>)
 80062a6:	3b01      	subs	r3, #1
 80062a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <vPortSetupTimerInterrupt+0x34>)
 80062ac:	2207      	movs	r2, #7
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	e000e010 	.word	0xe000e010
 80062c0:	e000e018 	.word	0xe000e018
 80062c4:	20000030 	.word	0x20000030
 80062c8:	10624dd3 	.word	0x10624dd3
 80062cc:	e000e014 	.word	0xe000e014

080062d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062e0 <vPortEnableVFP+0x10>
 80062d4:	6801      	ldr	r1, [r0, #0]
 80062d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062da:	6001      	str	r1, [r0, #0]
 80062dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062de:	bf00      	nop
 80062e0:	e000ed88 	.word	0xe000ed88

080062e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062ea:	f3ef 8305 	mrs	r3, IPSR
 80062ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d913      	bls.n	800631e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062f6:	4a16      	ldr	r2, [pc, #88]	; (8006350 <vPortValidateInterruptPriority+0x6c>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <vPortValidateInterruptPriority+0x70>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	7afa      	ldrb	r2, [r7, #11]
 8006306:	429a      	cmp	r2, r3
 8006308:	d209      	bcs.n	800631e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	607b      	str	r3, [r7, #4]
 800631c:	e7fe      	b.n	800631c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <vPortValidateInterruptPriority+0x74>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006326:	4b0d      	ldr	r3, [pc, #52]	; (800635c <vPortValidateInterruptPriority+0x78>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d909      	bls.n	8006342 <vPortValidateInterruptPriority+0x5e>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	e7fe      	b.n	8006340 <vPortValidateInterruptPriority+0x5c>
	}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	e000e3f0 	.word	0xe000e3f0
 8006354:	20000f34 	.word	0x20000f34
 8006358:	e000ed0c 	.word	0xe000ed0c
 800635c:	20000f38 	.word	0x20000f38

08006360 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006368:	2300      	movs	r3, #0
 800636a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800636c:	f7fe fcc4 	bl	8004cf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006370:	4b59      	ldr	r3, [pc, #356]	; (80064d8 <pvPortMalloc+0x178>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006378:	f000 f91a 	bl	80065b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800637c:	4b57      	ldr	r3, [pc, #348]	; (80064dc <pvPortMalloc+0x17c>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 8091 	bne.w	80064ac <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01c      	beq.n	80063ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006390:	2208      	movs	r2, #8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d013      	beq.n	80063ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f023 0307 	bic.w	r3, r3, #7
 80063a8:	3308      	adds	r3, #8
 80063aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <pvPortMalloc+0x6a>
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e7fe      	b.n	80063c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d06d      	beq.n	80064ac <pvPortMalloc+0x14c>
 80063d0:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <pvPortMalloc+0x180>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d868      	bhi.n	80064ac <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063da:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <pvPortMalloc+0x184>)
 80063dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063de:	4b41      	ldr	r3, [pc, #260]	; (80064e4 <pvPortMalloc+0x184>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063e4:	e004      	b.n	80063f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d903      	bls.n	8006402 <pvPortMalloc+0xa2>
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f1      	bne.n	80063e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006402:	4b35      	ldr	r3, [pc, #212]	; (80064d8 <pvPortMalloc+0x178>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006408:	429a      	cmp	r2, r3
 800640a:	d04f      	beq.n	80064ac <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2208      	movs	r2, #8
 8006412:	4413      	add	r3, r2
 8006414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	1ad2      	subs	r2, r2, r3
 8006426:	2308      	movs	r3, #8
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	429a      	cmp	r2, r3
 800642c:	d91e      	bls.n	800646c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800642e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <pvPortMalloc+0xf4>
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	e7fe      	b.n	8006452 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	1ad2      	subs	r2, r2, r3
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006466:	69b8      	ldr	r0, [r7, #24]
 8006468:	f000 f904 	bl	8006674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800646c:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <pvPortMalloc+0x180>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <pvPortMalloc+0x180>)
 8006478:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800647a:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <pvPortMalloc+0x180>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <pvPortMalloc+0x188>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d203      	bcs.n	800648e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006486:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <pvPortMalloc+0x180>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <pvPortMalloc+0x188>)
 800648c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <pvPortMalloc+0x17c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	431a      	orrs	r2, r3
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064a2:	4b12      	ldr	r3, [pc, #72]	; (80064ec <pvPortMalloc+0x18c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a10      	ldr	r2, [pc, #64]	; (80064ec <pvPortMalloc+0x18c>)
 80064aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064ac:	f7fe fc32 	bl	8004d14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <pvPortMalloc+0x16e>
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e7fe      	b.n	80064cc <pvPortMalloc+0x16c>
	return pvReturn;
 80064ce:	69fb      	ldr	r3, [r7, #28]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3728      	adds	r7, #40	; 0x28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20004b44 	.word	0x20004b44
 80064dc:	20004b58 	.word	0x20004b58
 80064e0:	20004b48 	.word	0x20004b48
 80064e4:	20004b3c 	.word	0x20004b3c
 80064e8:	20004b4c 	.word	0x20004b4c
 80064ec:	20004b50 	.word	0x20004b50

080064f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d04b      	beq.n	800659a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006502:	2308      	movs	r3, #8
 8006504:	425b      	negs	r3, r3
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <vPortFree+0xb4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <vPortFree+0x42>
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e7fe      	b.n	8006530 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <vPortFree+0x5e>
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	e7fe      	b.n	800654c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <vPortFree+0xb4>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01e      	beq.n	800659a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11a      	bne.n	800659a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <vPortFree+0xb4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006574:	f7fe fbc0 	bl	8004cf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <vPortFree+0xb8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4413      	add	r3, r2
 8006582:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <vPortFree+0xb8>)
 8006584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006586:	6938      	ldr	r0, [r7, #16]
 8006588:	f000 f874 	bl	8006674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <vPortFree+0xbc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a06      	ldr	r2, [pc, #24]	; (80065ac <vPortFree+0xbc>)
 8006594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006596:	f7fe fbbd 	bl	8004d14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800659a:	bf00      	nop
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20004b58 	.word	0x20004b58
 80065a8:	20004b48 	.word	0x20004b48
 80065ac:	20004b54 	.word	0x20004b54

080065b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065b6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065bc:	4b27      	ldr	r3, [pc, #156]	; (800665c <prvHeapInit+0xac>)
 80065be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3307      	adds	r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0307 	bic.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	4a1f      	ldr	r2, [pc, #124]	; (800665c <prvHeapInit+0xac>)
 80065e0:	4413      	add	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065e8:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <prvHeapInit+0xb0>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065ee:	4b1c      	ldr	r3, [pc, #112]	; (8006660 <prvHeapInit+0xb0>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4413      	add	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065fc:	2208      	movs	r2, #8
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0307 	bic.w	r3, r3, #7
 800660a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a15      	ldr	r2, [pc, #84]	; (8006664 <prvHeapInit+0xb4>)
 8006610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <prvHeapInit+0xb4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <prvHeapInit+0xb4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <prvHeapInit+0xb4>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <prvHeapInit+0xb8>)
 800663e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4a09      	ldr	r2, [pc, #36]	; (800666c <prvHeapInit+0xbc>)
 8006646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <prvHeapInit+0xc0>)
 800664a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800664e:	601a      	str	r2, [r3, #0]
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	20000f3c 	.word	0x20000f3c
 8006660:	20004b3c 	.word	0x20004b3c
 8006664:	20004b44 	.word	0x20004b44
 8006668:	20004b4c 	.word	0x20004b4c
 800666c:	20004b48 	.word	0x20004b48
 8006670:	20004b58 	.word	0x20004b58

08006674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800667c:	4b28      	ldr	r3, [pc, #160]	; (8006720 <prvInsertBlockIntoFreeList+0xac>)
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e002      	b.n	8006688 <prvInsertBlockIntoFreeList+0x14>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	d8f7      	bhi.n	8006682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4413      	add	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d108      	bne.n	80066b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	441a      	add	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d118      	bne.n	80066fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b15      	ldr	r3, [pc, #84]	; (8006724 <prvInsertBlockIntoFreeList+0xb0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d00d      	beq.n	80066f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	441a      	add	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e008      	b.n	8006704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <prvInsertBlockIntoFreeList+0xb0>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e003      	b.n	8006704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d002      	beq.n	8006712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20004b3c 	.word	0x20004b3c
 8006724:	20004b44 	.word	0x20004b44

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4e0d      	ldr	r6, [pc, #52]	; (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	; (8006764 <__libc_init_array+0x3c>)
 800672e:	1ba4      	subs	r4, r4, r6
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2500      	movs	r5, #0
 8006734:	42a5      	cmp	r5, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4e0b      	ldr	r6, [pc, #44]	; (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	; (800676c <__libc_init_array+0x44>)
 800673c:	f000 f936 	bl	80069ac <_init>
 8006740:	1ba4      	subs	r4, r4, r6
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2500      	movs	r5, #0
 8006746:	42a5      	cmp	r5, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006750:	4798      	blx	r3
 8006752:	3501      	adds	r5, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800675a:	4798      	blx	r3
 800675c:	3501      	adds	r5, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	08006d08 	.word	0x08006d08
 8006764:	08006d08 	.word	0x08006d08
 8006768:	08006d08 	.word	0x08006d08
 800676c:	08006d0c 	.word	0x08006d0c

08006770 <__itoa>:
 8006770:	1e93      	subs	r3, r2, #2
 8006772:	2b22      	cmp	r3, #34	; 0x22
 8006774:	b510      	push	{r4, lr}
 8006776:	460c      	mov	r4, r1
 8006778:	d904      	bls.n	8006784 <__itoa+0x14>
 800677a:	2300      	movs	r3, #0
 800677c:	700b      	strb	r3, [r1, #0]
 800677e:	461c      	mov	r4, r3
 8006780:	4620      	mov	r0, r4
 8006782:	bd10      	pop	{r4, pc}
 8006784:	2a0a      	cmp	r2, #10
 8006786:	d109      	bne.n	800679c <__itoa+0x2c>
 8006788:	2800      	cmp	r0, #0
 800678a:	da07      	bge.n	800679c <__itoa+0x2c>
 800678c:	232d      	movs	r3, #45	; 0x2d
 800678e:	700b      	strb	r3, [r1, #0]
 8006790:	4240      	negs	r0, r0
 8006792:	2101      	movs	r1, #1
 8006794:	4421      	add	r1, r4
 8006796:	f000 f8a9 	bl	80068ec <__utoa>
 800679a:	e7f1      	b.n	8006780 <__itoa+0x10>
 800679c:	2100      	movs	r1, #0
 800679e:	e7f9      	b.n	8006794 <__itoa+0x24>

080067a0 <itoa>:
 80067a0:	f7ff bfe6 	b.w	8006770 <__itoa>

080067a4 <memcpy>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	1e43      	subs	r3, r0, #1
 80067a8:	440a      	add	r2, r1
 80067aa:	4291      	cmp	r1, r2
 80067ac:	d100      	bne.n	80067b0 <memcpy+0xc>
 80067ae:	bd10      	pop	{r4, pc}
 80067b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067b8:	e7f7      	b.n	80067aa <memcpy+0x6>

080067ba <memset>:
 80067ba:	4402      	add	r2, r0
 80067bc:	4603      	mov	r3, r0
 80067be:	4293      	cmp	r3, r2
 80067c0:	d100      	bne.n	80067c4 <memset+0xa>
 80067c2:	4770      	bx	lr
 80067c4:	f803 1b01 	strb.w	r1, [r3], #1
 80067c8:	e7f9      	b.n	80067be <memset+0x4>

080067ca <_strtol_l.isra.0>:
 80067ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ce:	4680      	mov	r8, r0
 80067d0:	4689      	mov	r9, r1
 80067d2:	4692      	mov	sl, r2
 80067d4:	461e      	mov	r6, r3
 80067d6:	460f      	mov	r7, r1
 80067d8:	463d      	mov	r5, r7
 80067da:	9808      	ldr	r0, [sp, #32]
 80067dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067e0:	f000 f8c2 	bl	8006968 <__locale_ctype_ptr_l>
 80067e4:	4420      	add	r0, r4
 80067e6:	7843      	ldrb	r3, [r0, #1]
 80067e8:	f013 0308 	ands.w	r3, r3, #8
 80067ec:	d132      	bne.n	8006854 <_strtol_l.isra.0+0x8a>
 80067ee:	2c2d      	cmp	r4, #45	; 0x2d
 80067f0:	d132      	bne.n	8006858 <_strtol_l.isra.0+0x8e>
 80067f2:	787c      	ldrb	r4, [r7, #1]
 80067f4:	1cbd      	adds	r5, r7, #2
 80067f6:	2201      	movs	r2, #1
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	d05d      	beq.n	80068b8 <_strtol_l.isra.0+0xee>
 80067fc:	2e10      	cmp	r6, #16
 80067fe:	d109      	bne.n	8006814 <_strtol_l.isra.0+0x4a>
 8006800:	2c30      	cmp	r4, #48	; 0x30
 8006802:	d107      	bne.n	8006814 <_strtol_l.isra.0+0x4a>
 8006804:	782b      	ldrb	r3, [r5, #0]
 8006806:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800680a:	2b58      	cmp	r3, #88	; 0x58
 800680c:	d14f      	bne.n	80068ae <_strtol_l.isra.0+0xe4>
 800680e:	786c      	ldrb	r4, [r5, #1]
 8006810:	2610      	movs	r6, #16
 8006812:	3502      	adds	r5, #2
 8006814:	2a00      	cmp	r2, #0
 8006816:	bf14      	ite	ne
 8006818:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800681c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006820:	2700      	movs	r7, #0
 8006822:	fbb1 fcf6 	udiv	ip, r1, r6
 8006826:	4638      	mov	r0, r7
 8006828:	fb06 1e1c 	mls	lr, r6, ip, r1
 800682c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006830:	2b09      	cmp	r3, #9
 8006832:	d817      	bhi.n	8006864 <_strtol_l.isra.0+0x9a>
 8006834:	461c      	mov	r4, r3
 8006836:	42a6      	cmp	r6, r4
 8006838:	dd23      	ble.n	8006882 <_strtol_l.isra.0+0xb8>
 800683a:	1c7b      	adds	r3, r7, #1
 800683c:	d007      	beq.n	800684e <_strtol_l.isra.0+0x84>
 800683e:	4584      	cmp	ip, r0
 8006840:	d31c      	bcc.n	800687c <_strtol_l.isra.0+0xb2>
 8006842:	d101      	bne.n	8006848 <_strtol_l.isra.0+0x7e>
 8006844:	45a6      	cmp	lr, r4
 8006846:	db19      	blt.n	800687c <_strtol_l.isra.0+0xb2>
 8006848:	fb00 4006 	mla	r0, r0, r6, r4
 800684c:	2701      	movs	r7, #1
 800684e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006852:	e7eb      	b.n	800682c <_strtol_l.isra.0+0x62>
 8006854:	462f      	mov	r7, r5
 8006856:	e7bf      	b.n	80067d8 <_strtol_l.isra.0+0xe>
 8006858:	2c2b      	cmp	r4, #43	; 0x2b
 800685a:	bf04      	itt	eq
 800685c:	1cbd      	addeq	r5, r7, #2
 800685e:	787c      	ldrbeq	r4, [r7, #1]
 8006860:	461a      	mov	r2, r3
 8006862:	e7c9      	b.n	80067f8 <_strtol_l.isra.0+0x2e>
 8006864:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006868:	2b19      	cmp	r3, #25
 800686a:	d801      	bhi.n	8006870 <_strtol_l.isra.0+0xa6>
 800686c:	3c37      	subs	r4, #55	; 0x37
 800686e:	e7e2      	b.n	8006836 <_strtol_l.isra.0+0x6c>
 8006870:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006874:	2b19      	cmp	r3, #25
 8006876:	d804      	bhi.n	8006882 <_strtol_l.isra.0+0xb8>
 8006878:	3c57      	subs	r4, #87	; 0x57
 800687a:	e7dc      	b.n	8006836 <_strtol_l.isra.0+0x6c>
 800687c:	f04f 37ff 	mov.w	r7, #4294967295
 8006880:	e7e5      	b.n	800684e <_strtol_l.isra.0+0x84>
 8006882:	1c7b      	adds	r3, r7, #1
 8006884:	d108      	bne.n	8006898 <_strtol_l.isra.0+0xce>
 8006886:	2322      	movs	r3, #34	; 0x22
 8006888:	f8c8 3000 	str.w	r3, [r8]
 800688c:	4608      	mov	r0, r1
 800688e:	f1ba 0f00 	cmp.w	sl, #0
 8006892:	d107      	bne.n	80068a4 <_strtol_l.isra.0+0xda>
 8006894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006898:	b102      	cbz	r2, 800689c <_strtol_l.isra.0+0xd2>
 800689a:	4240      	negs	r0, r0
 800689c:	f1ba 0f00 	cmp.w	sl, #0
 80068a0:	d0f8      	beq.n	8006894 <_strtol_l.isra.0+0xca>
 80068a2:	b10f      	cbz	r7, 80068a8 <_strtol_l.isra.0+0xde>
 80068a4:	f105 39ff 	add.w	r9, r5, #4294967295
 80068a8:	f8ca 9000 	str.w	r9, [sl]
 80068ac:	e7f2      	b.n	8006894 <_strtol_l.isra.0+0xca>
 80068ae:	2430      	movs	r4, #48	; 0x30
 80068b0:	2e00      	cmp	r6, #0
 80068b2:	d1af      	bne.n	8006814 <_strtol_l.isra.0+0x4a>
 80068b4:	2608      	movs	r6, #8
 80068b6:	e7ad      	b.n	8006814 <_strtol_l.isra.0+0x4a>
 80068b8:	2c30      	cmp	r4, #48	; 0x30
 80068ba:	d0a3      	beq.n	8006804 <_strtol_l.isra.0+0x3a>
 80068bc:	260a      	movs	r6, #10
 80068be:	e7a9      	b.n	8006814 <_strtol_l.isra.0+0x4a>

080068c0 <strtol>:
 80068c0:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <strtol+0x24>)
 80068c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068c4:	681c      	ldr	r4, [r3, #0]
 80068c6:	4d08      	ldr	r5, [pc, #32]	; (80068e8 <strtol+0x28>)
 80068c8:	6a23      	ldr	r3, [r4, #32]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bf08      	it	eq
 80068ce:	462b      	moveq	r3, r5
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	4613      	mov	r3, r2
 80068d4:	460a      	mov	r2, r1
 80068d6:	4601      	mov	r1, r0
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff ff76 	bl	80067ca <_strtol_l.isra.0>
 80068de:	b003      	add	sp, #12
 80068e0:	bd30      	pop	{r4, r5, pc}
 80068e2:	bf00      	nop
 80068e4:	20000040 	.word	0x20000040
 80068e8:	200000a4 	.word	0x200000a4

080068ec <__utoa>:
 80068ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <__utoa+0x78>)
 80068f0:	b08b      	sub	sp, #44	; 0x2c
 80068f2:	4605      	mov	r5, r0
 80068f4:	460c      	mov	r4, r1
 80068f6:	466e      	mov	r6, sp
 80068f8:	f103 0c20 	add.w	ip, r3, #32
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	6859      	ldr	r1, [r3, #4]
 8006900:	4637      	mov	r7, r6
 8006902:	c703      	stmia	r7!, {r0, r1}
 8006904:	3308      	adds	r3, #8
 8006906:	4563      	cmp	r3, ip
 8006908:	463e      	mov	r6, r7
 800690a:	d1f7      	bne.n	80068fc <__utoa+0x10>
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	791b      	ldrb	r3, [r3, #4]
 8006910:	713b      	strb	r3, [r7, #4]
 8006912:	1e93      	subs	r3, r2, #2
 8006914:	2b22      	cmp	r3, #34	; 0x22
 8006916:	6038      	str	r0, [r7, #0]
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	d904      	bls.n	8006928 <__utoa+0x3c>
 800691e:	7023      	strb	r3, [r4, #0]
 8006920:	461c      	mov	r4, r3
 8006922:	4620      	mov	r0, r4
 8006924:	b00b      	add	sp, #44	; 0x2c
 8006926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006928:	1e66      	subs	r6, r4, #1
 800692a:	fbb5 f0f2 	udiv	r0, r5, r2
 800692e:	af0a      	add	r7, sp, #40	; 0x28
 8006930:	fb02 5510 	mls	r5, r2, r0, r5
 8006934:	443d      	add	r5, r7
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800693c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006940:	4605      	mov	r5, r0
 8006942:	b968      	cbnz	r0, 8006960 <__utoa+0x74>
 8006944:	5460      	strb	r0, [r4, r1]
 8006946:	4423      	add	r3, r4
 8006948:	4622      	mov	r2, r4
 800694a:	1b19      	subs	r1, r3, r4
 800694c:	1b10      	subs	r0, r2, r4
 800694e:	4281      	cmp	r1, r0
 8006950:	dde7      	ble.n	8006922 <__utoa+0x36>
 8006952:	7811      	ldrb	r1, [r2, #0]
 8006954:	7818      	ldrb	r0, [r3, #0]
 8006956:	f802 0b01 	strb.w	r0, [r2], #1
 800695a:	f803 1901 	strb.w	r1, [r3], #-1
 800695e:	e7f4      	b.n	800694a <__utoa+0x5e>
 8006960:	460b      	mov	r3, r1
 8006962:	e7e2      	b.n	800692a <__utoa+0x3e>
 8006964:	08006bd0 	.word	0x08006bd0

08006968 <__locale_ctype_ptr_l>:
 8006968:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800696c:	4770      	bx	lr

0800696e <__ascii_mbtowc>:
 800696e:	b082      	sub	sp, #8
 8006970:	b901      	cbnz	r1, 8006974 <__ascii_mbtowc+0x6>
 8006972:	a901      	add	r1, sp, #4
 8006974:	b142      	cbz	r2, 8006988 <__ascii_mbtowc+0x1a>
 8006976:	b14b      	cbz	r3, 800698c <__ascii_mbtowc+0x1e>
 8006978:	7813      	ldrb	r3, [r2, #0]
 800697a:	600b      	str	r3, [r1, #0]
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	1c10      	adds	r0, r2, #0
 8006980:	bf18      	it	ne
 8006982:	2001      	movne	r0, #1
 8006984:	b002      	add	sp, #8
 8006986:	4770      	bx	lr
 8006988:	4610      	mov	r0, r2
 800698a:	e7fb      	b.n	8006984 <__ascii_mbtowc+0x16>
 800698c:	f06f 0001 	mvn.w	r0, #1
 8006990:	e7f8      	b.n	8006984 <__ascii_mbtowc+0x16>

08006992 <__ascii_wctomb>:
 8006992:	b149      	cbz	r1, 80069a8 <__ascii_wctomb+0x16>
 8006994:	2aff      	cmp	r2, #255	; 0xff
 8006996:	bf85      	ittet	hi
 8006998:	238a      	movhi	r3, #138	; 0x8a
 800699a:	6003      	strhi	r3, [r0, #0]
 800699c:	700a      	strbls	r2, [r1, #0]
 800699e:	f04f 30ff 	movhi.w	r0, #4294967295
 80069a2:	bf98      	it	ls
 80069a4:	2001      	movls	r0, #1
 80069a6:	4770      	bx	lr
 80069a8:	4608      	mov	r0, r1
 80069aa:	4770      	bx	lr

080069ac <_init>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	bf00      	nop
 80069b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b2:	bc08      	pop	{r3}
 80069b4:	469e      	mov	lr, r3
 80069b6:	4770      	bx	lr

080069b8 <_fini>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr
