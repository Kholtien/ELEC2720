
Ass-04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080057e8  080057e8  000157e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08005be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          0000017c  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000358  20000358  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015dfa  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000031f9  00000000  00000000  00036006  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000045ba  00000000  00000000  000391ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0003d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  0003dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022f94  00000000  00000000  0003ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c81e  00000000  00000000  00061b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c357a  00000000  00000000  0006e3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013191c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002630  00000000  00000000  00131998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057d0 	.word	0x080057d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080057d0 	.word	0x080057d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_InitTick+0x3c>)
 8000eac:	4d0e      	ldr	r5, [pc, #56]	; (8000ee8 <HAL_InitTick+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	782a      	ldrb	r2, [r5, #0]
{
 8000eb2:	4606      	mov	r6, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb8:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ebc:	fbb3 f0f0 	udiv	r0, r3, r0
 8000ec0:	f000 fb5c 	bl	800157c <HAL_SYSTICK_Config>
 8000ec4:	b908      	cbnz	r0, 8000eca <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	2e0f      	cmp	r6, #15
 8000ec8:	d901      	bls.n	8000ece <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ecc:	bd70      	pop	{r4, r5, r6, pc}
 8000ece:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 fb0e 	bl	80014f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	606e      	str	r6, [r5, #4]
 8000ede:	4620      	mov	r0, r4
}
 8000ee0:	bd70      	pop	{r4, r5, r6, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000000 	.word	0x20000000

08000eec <HAL_Init>:
{
 8000eec:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x30>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f06:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 fae3 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ffca 	bl	8000ea8 <HAL_InitTick>
  HAL_MspInit();
 8000f14:	f001 fe50 	bl	8002bb8 <HAL_MspInit>
}
 8000f18:	2000      	movs	r0, #0
 8000f1a:	bd08      	pop	{r3, pc}
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_IncTick+0x10>)
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_IncTick+0x14>)
 8000f24:	6811      	ldr	r1, [r2, #0]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	440b      	add	r3, r1
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000208 	.word	0x20000208
 8000f34:	20000000 	.word	0x20000000

08000f38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <HAL_GetTick+0x8>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000208 	.word	0x20000208

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff fff6 	bl	8000f38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f4e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000f50:	d002      	beq.n	8000f58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_Delay+0x20>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	1b40      	subs	r0, r0, r5
 8000f5e:	42a0      	cmp	r0, r4
 8000f60:	d3fa      	bcc.n	8000f58 <HAL_Delay+0x14>
  {
  }
}
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
 8000f64:	20000000 	.word	0x20000000

08000f68 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	f000 808e 	beq.w	800108a <HAL_ADC_Init+0x122>
{
 8000f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f72:	4604      	mov	r4, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d07e      	beq.n	8001076 <HAL_ADC_Init+0x10e>
    HAL_ADC_MspInit(hadc);
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f7a:	06db      	lsls	r3, r3, #27
 8000f7c:	d504      	bpl.n	8000f88 <HAL_ADC_Init+0x20>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f7e:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000f82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8000f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8000f88:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f8a:	494c      	ldr	r1, [pc, #304]	; (80010bc <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f8c:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f8e:	4d4c      	ldr	r5, [pc, #304]	; (80010c0 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8000f90:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000f94:	f022 0202 	bic.w	r2, r2, #2
 8000f98:	f042 0202 	orr.w	r2, r2, #2
 8000f9c:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f9e:	684a      	ldr	r2, [r1, #4]
 8000fa0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fa4:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fa6:	684a      	ldr	r2, [r1, #4]
 8000fa8:	6860      	ldr	r0, [r4, #4]
 8000faa:	4302      	orrs	r2, r0
 8000fac:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fae:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fb0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fb2:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fb4:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fb6:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8000fba:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fc2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fc4:	6858      	ldr	r0, [r3, #4]
 8000fc6:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8000fca:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fcc:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fd0:	4339      	orrs	r1, r7
 8000fd2:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fd4:	6899      	ldr	r1, [r3, #8]
 8000fd6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8000fda:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fdc:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fde:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fe0:	ea42 0206 	orr.w	r2, r2, r6
 8000fe4:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fe6:	d052      	beq.n	800108e <HAL_ADC_Init+0x126>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fe8:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fea:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fec:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000ff0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	4310      	orrs	r0, r2
 8000ff6:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ff8:	6899      	ldr	r1, [r3, #8]
 8000ffa:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8000ffe:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	432a      	orrs	r2, r5
 8001004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001006:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001008:	69a5      	ldr	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800100a:	6a20      	ldr	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800100c:	f021 0102 	bic.w	r1, r1, #2
 8001010:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001018:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800101a:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800101c:	2800      	cmp	r0, #0
 800101e:	d13f      	bne.n	80010a0 <HAL_ADC_Init+0x138>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001024:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001028:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800102a:	6b27      	ldr	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800102c:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800102e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001034:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001036:	3d01      	subs	r5, #1
 8001038:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800103c:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800103e:	6898      	ldr	r0, [r3, #8]
 8001040:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8001044:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001046:	6899      	ldr	r1, [r3, #8]
 8001048:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800104c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800104e:	6899      	ldr	r1, [r3, #8]
 8001050:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001054:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001056:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800105a:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800105e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001060:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001064:	f023 0303 	bic.w	r3, r3, #3
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800106e:	2300      	movs	r3, #0
 8001070:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001076:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001078:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800107c:	f001 fb60 	bl	8002740 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001080:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001082:	06db      	lsls	r3, r3, #27
 8001084:	f53f af7b 	bmi.w	8000f7e <HAL_ADC_Init+0x16>
 8001088:	e77e      	b.n	8000f88 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
}
 800108c:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e7b2      	b.n	8001006 <HAL_ADC_Init+0x9e>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80010ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	3901      	subs	r1, #1
 80010b4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	e7b4      	b.n	8001026 <HAL_ADC_Init+0xbe>
 80010bc:	40012300 	.word	0x40012300
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <HAL_ADC_Start>:
{
 80010c4:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 80010c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80010ca:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80010cc:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80010ce:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80010d0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80010d2:	d055      	beq.n	8001180 <HAL_ADC_Start+0xbc>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010d4:	6802      	ldr	r2, [r0, #0]
 80010d6:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80010d8:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010da:	07db      	lsls	r3, r3, #31
  __HAL_LOCK(hadc);
 80010dc:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010e0:	d414      	bmi.n	800110c <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_ADC_Start+0xc8>)
 80010e4:	4c2a      	ldr	r4, [pc, #168]	; (8001190 <HAL_ADC_Start+0xcc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80010e8:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ea:	fba4 4303 	umull	r4, r3, r4, r3
 80010ee:	0c9b      	lsrs	r3, r3, #18
 80010f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 80010f4:	f041 0101 	orr.w	r1, r1, #1
 80010f8:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010fa:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80010fc:	9b01      	ldr	r3, [sp, #4]
 80010fe:	b12b      	cbz	r3, 800110c <HAL_ADC_Start+0x48>
      counter--;
 8001100:	9b01      	ldr	r3, [sp, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001106:	9b01      	ldr	r3, [sp, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f9      	bne.n	8001100 <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800110c:	6893      	ldr	r3, [r2, #8]
 800110e:	07dc      	lsls	r4, r3, #31
 8001110:	d525      	bpl.n	800115e <HAL_ADC_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001114:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001122:	6853      	ldr	r3, [r2, #4]
 8001124:	0559      	lsls	r1, r3, #21
 8001126:	d505      	bpl.n	8001134 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001128:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800112a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800112e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001132:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001134:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001136:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800113a:	bf1c      	itt	ne
 800113c:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800113e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001142:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001144:	2400      	movs	r4, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001146:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_ADC_Start+0xd0>)
    __HAL_UNLOCK(hadc);
 800114c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001150:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	06db      	lsls	r3, r3, #27
 8001156:	d007      	beq.n	8001168 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_ADC_Start+0xd4>)
 800115a:	429a      	cmp	r2, r3
 800115c:	d004      	beq.n	8001168 <HAL_ADC_Start+0xa4>
  return HAL_OK;
 800115e:	2000      	movs	r0, #0
}
 8001160:	b003      	add	sp, #12
 8001162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001166:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001168:	6890      	ldr	r0, [r2, #8]
 800116a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800116e:	d1f6      	bne.n	800115e <HAL_ADC_Start+0x9a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001170:	6893      	ldr	r3, [r2, #8]
 8001172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001176:	6093      	str	r3, [r2, #8]
}
 8001178:	b003      	add	sp, #12
 800117a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800117e:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001180:	2002      	movs	r0, #2
}
 8001182:	b003      	add	sp, #12
 8001184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	431bde83 	.word	0x431bde83
 8001194:	40012300 	.word	0x40012300
 8001198:	40012000 	.word	0x40012000

0800119c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800119c:	6803      	ldr	r3, [r0, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	0552      	lsls	r2, r2, #21
 80011a2:	d502      	bpl.n	80011aa <HAL_ADC_PollForConversion+0xe>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011a4:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011a6:	05da      	lsls	r2, r3, #23
 80011a8:	d440      	bmi.n	800122c <HAL_ADC_PollForConversion+0x90>
{
 80011aa:	b570      	push	{r4, r5, r6, lr}
 80011ac:	460d      	mov	r5, r1
 80011ae:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80011b0:	f7ff fec2 	bl	8000f38 <HAL_GetTick>
 80011b4:	4606      	mov	r6, r0
 80011b6:	1c6b      	adds	r3, r5, #1
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	d125      	bne.n	8001208 <HAL_ADC_PollForConversion+0x6c>
 80011bc:	6813      	ldr	r3, [r2, #0]
 80011be:	0798      	lsls	r0, r3, #30
 80011c0:	d5fc      	bpl.n	80011bc <HAL_ADC_PollForConversion+0x20>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011c2:	f06f 0312 	mvn.w	r3, #18
 80011c6:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011d0:	6893      	ldr	r3, [r2, #8]
 80011d2:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80011d6:	d115      	bne.n	8001204 <HAL_ADC_PollForConversion+0x68>
 80011d8:	69a3      	ldr	r3, [r4, #24]
 80011da:	b99b      	cbnz	r3, 8001204 <HAL_ADC_PollForConversion+0x68>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011de:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80011e2:	d002      	beq.n	80011ea <HAL_ADC_PollForConversion+0x4e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011e4:	6893      	ldr	r3, [r2, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011e6:	055b      	lsls	r3, r3, #21
 80011e8:	d40c      	bmi.n	8001204 <HAL_ADC_PollForConversion+0x68>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80011f4:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80011f8:	d104      	bne.n	8001204 <HAL_ADC_PollForConversion+0x68>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001202:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001204:	2000      	movs	r0, #0
}
 8001206:	bd70      	pop	{r4, r5, r6, pc}
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	0799      	lsls	r1, r3, #30
 800120c:	d4d9      	bmi.n	80011c2 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800120e:	b125      	cbz	r5, 800121a <HAL_ADC_PollForConversion+0x7e>
 8001210:	f7ff fe92 	bl	8000f38 <HAL_GetTick>
 8001214:	1b80      	subs	r0, r0, r6
 8001216:	42a8      	cmp	r0, r5
 8001218:	d9cd      	bls.n	80011b6 <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800121a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800121c:	2200      	movs	r2, #0
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001224:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001228:	2003      	movs	r0, #3
 800122a:	e7ea      	b.n	8001202 <HAL_ADC_PollForConversion+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800122e:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8001236:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800123a:	2001      	movs	r0, #1
}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <HAL_ADC_ConvCpltCallback>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <HAL_ADC_LevelOutOfWindowCallback>:
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <HAL_ADC_ErrorCallback>:
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop

08001254 <HAL_ADC_IRQHandler>:
{
 8001254:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001256:	6803      	ldr	r3, [r0, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800125a:	6859      	ldr	r1, [r3, #4]
{
 800125c:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 800125e:	0790      	lsls	r0, r2, #30
 8001260:	d501      	bpl.n	8001266 <HAL_ADC_IRQHandler+0x12>
 8001262:	068a      	lsls	r2, r1, #26
 8001264:	d453      	bmi.n	800130e <HAL_ADC_IRQHandler+0xba>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001266:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001268:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 800126a:	0752      	lsls	r2, r2, #29
 800126c:	d501      	bpl.n	8001272 <HAL_ADC_IRQHandler+0x1e>
 800126e:	060d      	lsls	r5, r1, #24
 8001270:	d41b      	bmi.n	80012aa <HAL_ADC_IRQHandler+0x56>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001272:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001274:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8001276:	07d0      	lsls	r0, r2, #31
 8001278:	d501      	bpl.n	800127e <HAL_ADC_IRQHandler+0x2a>
 800127a:	064a      	lsls	r2, r1, #25
 800127c:	d406      	bmi.n	800128c <HAL_ADC_IRQHandler+0x38>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800127e:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001280:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8001282:	0690      	lsls	r0, r2, #26
 8001284:	d501      	bpl.n	800128a <HAL_ADC_IRQHandler+0x36>
 8001286:	014a      	lsls	r2, r1, #5
 8001288:	d469      	bmi.n	800135e <HAL_ADC_IRQHandler+0x10a>
}
 800128a:	bd38      	pop	{r3, r4, r5, pc}
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	07d5      	lsls	r5, r2, #31
 8001290:	d5f5      	bpl.n	800127e <HAL_ADC_IRQHandler+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff ffd6 	bl	800124c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f06f 0201 	mvn.w	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e7e9      	b.n	800127e <HAL_ADC_IRQHandler+0x2a>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012ac:	06d0      	lsls	r0, r2, #27
 80012ae:	d403      	bmi.n	80012b8 <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b6:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80012be:	d11e      	bne.n	80012fe <HAL_ADC_IRQHandler+0xaa>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012c2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80012c6:	d002      	beq.n	80012ce <HAL_ADC_IRQHandler+0x7a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012c8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012ca:	0551      	lsls	r1, r2, #21
 80012cc:	d417      	bmi.n	80012fe <HAL_ADC_IRQHandler+0xaa>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012ce:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012d0:	0552      	lsls	r2, r2, #21
 80012d2:	d414      	bmi.n	80012fe <HAL_ADC_IRQHandler+0xaa>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012d4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012d6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012da:	d110      	bne.n	80012fe <HAL_ADC_IRQHandler+0xaa>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012dc:	69a2      	ldr	r2, [r4, #24]
 80012de:	b972      	cbnz	r2, 80012fe <HAL_ADC_IRQHandler+0xaa>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ee:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f2:	05dd      	lsls	r5, r3, #23
 80012f4:	d403      	bmi.n	80012fe <HAL_ADC_IRQHandler+0xaa>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 f8e6 	bl	80014d0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	f06f 020c 	mvn.w	r2, #12
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e7b1      	b.n	8001272 <HAL_ADC_IRQHandler+0x1e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800130e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001310:	06d5      	lsls	r5, r2, #27
 8001312:	d403      	bmi.n	800131c <HAL_ADC_IRQHandler+0xc8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001314:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800131a:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001322:	d114      	bne.n	800134e <HAL_ADC_IRQHandler+0xfa>
 8001324:	69a2      	ldr	r2, [r4, #24]
 8001326:	b992      	cbnz	r2, 800134e <HAL_ADC_IRQHandler+0xfa>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800132e:	d123      	bne.n	8001378 <HAL_ADC_IRQHandler+0x124>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	f022 0220 	bic.w	r2, r2, #32
 8001336:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800133a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800133e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001342:	04d9      	lsls	r1, r3, #19
 8001344:	d403      	bmi.n	800134e <HAL_ADC_IRQHandler+0xfa>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff ff7a 	bl	8001248 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	f06f 0212 	mvn.w	r2, #18
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e783      	b.n	8001266 <HAL_ADC_IRQHandler+0x12>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800135e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001360:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001364:	f042 0202 	orr.w	r2, r2, #2
 8001368:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 800136a:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800136c:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 800136e:	f7ff ff6f 	bl	8001250 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	601d      	str	r5, [r3, #0]
}
 8001376:	bd38      	pop	{r3, r4, r5, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001378:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800137a:	0550      	lsls	r0, r2, #21
 800137c:	d4e7      	bmi.n	800134e <HAL_ADC_IRQHandler+0xfa>
 800137e:	e7d7      	b.n	8001330 <HAL_ADC_IRQHandler+0xdc>

08001380 <HAL_ADC_ConfigChannel>:
{
 8001380:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8001382:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001386:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001388:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800138a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800138c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800138e:	f000 8095 	beq.w	80014bc <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001392:	680d      	ldr	r5, [r1, #0]
 8001394:	688a      	ldr	r2, [r1, #8]
 8001396:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8001398:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800139a:	2d09      	cmp	r5, #9
 800139c:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800139e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013a2:	d829      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013a4:	691c      	ldr	r4, [r3, #16]
 80013a6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80013aa:	f04f 0c07 	mov.w	ip, #7
 80013ae:	fa0c fc06 	lsl.w	ip, ip, r6
 80013b2:	ea24 040c 	bic.w	r4, r4, ip
 80013b6:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b8:	691c      	ldr	r4, [r3, #16]
 80013ba:	fa02 f606 	lsl.w	r6, r2, r6
 80013be:	4326      	orrs	r6, r4
 80013c0:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 80013c2:	684e      	ldr	r6, [r1, #4]
 80013c4:	2e06      	cmp	r6, #6
 80013c6:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80013ca:	d82a      	bhi.n	8001422 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ce:	3a05      	subs	r2, #5
 80013d0:	241f      	movs	r4, #31
 80013d2:	4094      	lsls	r4, r2
 80013d4:	ea21 0104 	bic.w	r1, r1, r4
 80013d8:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013dc:	fa07 f202 	lsl.w	r2, r7, r2
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013e4:	4a37      	ldr	r2, [pc, #220]	; (80014c4 <HAL_ADC_ConfigChannel+0x144>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d02d      	beq.n	8001446 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 80013ea:	2300      	movs	r3, #0
 80013ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013f0:	4618      	mov	r0, r3
}
 80013f2:	b002      	add	sp, #8
 80013f4:	bcf0      	pop	{r4, r5, r6, r7}
 80013f6:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013f8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80013fc:	68dc      	ldr	r4, [r3, #12]
 80013fe:	3e1e      	subs	r6, #30
 8001400:	f04f 0c07 	mov.w	ip, #7
 8001404:	fa0c fc06 	lsl.w	ip, ip, r6
 8001408:	ea24 040c 	bic.w	r4, r4, ip
 800140c:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800140e:	68dc      	ldr	r4, [r3, #12]
 8001410:	fa02 f606 	lsl.w	r6, r2, r6
 8001414:	4326      	orrs	r6, r4
 8001416:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 8001418:	684e      	ldr	r6, [r1, #4]
 800141a:	2e06      	cmp	r6, #6
 800141c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8001420:	d9d4      	bls.n	80013cc <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001422:	2e0c      	cmp	r6, #12
 8001424:	d835      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001426:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800142a:	211f      	movs	r1, #31
 800142c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142e:	40a1      	lsls	r1, r4
 8001430:	ea22 0201 	bic.w	r2, r2, r1
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001438:	fa07 f204 	lsl.w	r2, r7, r4
 800143c:	430a      	orrs	r2, r1
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <HAL_ADC_ConfigChannel+0x144>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d1d1      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
 8001446:	2d12      	cmp	r5, #18
 8001448:	d031      	beq.n	80014ae <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800144a:	f1a5 0310 	sub.w	r3, r5, #16
 800144e:	2b01      	cmp	r3, #1
 8001450:	d8cb      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_ADC_ConfigChannel+0x148>)
 8001454:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001456:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800145c:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800145e:	d1c4      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_ADC_ConfigChannel+0x14c>)
 8001462:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001466:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800147e:	9b01      	ldr	r3, [sp, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0b2      	beq.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8001484:	9b01      	ldr	r3, [sp, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f9      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x104>
 8001490:	e7ab      	b.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001492:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8001496:	241f      	movs	r4, #31
 8001498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149a:	408c      	lsls	r4, r1
 800149c:	ea22 0204 	bic.w	r2, r2, r4
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80014a4:	fa07 f201 	lsl.w	r2, r7, r1
 80014a8:	4322      	orrs	r2, r4
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ac:	e79a      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014ae:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80014b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80014ba:	e796      	b.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80014bc:	2002      	movs	r0, #2
}
 80014be:	b002      	add	sp, #8
 80014c0:	bcf0      	pop	{r4, r5, r6, r7}
 80014c2:	4770      	bx	lr
 80014c4:	40012000 	.word	0x40012000
 80014c8:	40012300 	.word	0x40012300
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80014dc:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014de:	0200      	lsls	r0, r0, #8
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80014ec:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80014ee:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_NVIC_SetPriority+0x64>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001500:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001502:	f1c3 0507 	rsb	r5, r3, #7
 8001506:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001508:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	bf28      	it	cs
 800150e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001510:	2c06      	cmp	r4, #6
 8001512:	d919      	bls.n	8001548 <HAL_NVIC_SetPriority+0x50>
 8001514:	3b03      	subs	r3, #3
 8001516:	f04f 34ff 	mov.w	r4, #4294967295
 800151a:	409c      	lsls	r4, r3
 800151c:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	40aa      	lsls	r2, r5
 8001526:	ea21 0102 	bic.w	r1, r1, r2
 800152a:	fa01 f203 	lsl.w	r2, r1, r3
 800152e:	4322      	orrs	r2, r4
 8001530:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) < 0)
 8001532:	2800      	cmp	r0, #0
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	db0a      	blt.n	800154e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800153c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001540:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001544:	bc30      	pop	{r4, r5}
 8001546:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001548:	2400      	movs	r4, #0
 800154a:	4623      	mov	r3, r4
 800154c:	e7e8      	b.n	8001520 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_NVIC_SetPriority+0x68>)
 8001550:	f000 000f 	and.w	r0, r0, #15
 8001554:	4403      	add	r3, r0
 8001556:	761a      	strb	r2, [r3, #24]
 8001558:	bc30      	pop	{r4, r5}
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	e000ecfc 	.word	0xe000ecfc

08001564 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001564:	f000 011f 	and.w	r1, r0, #31
 8001568:	2301      	movs	r3, #1
 800156a:	0940      	lsrs	r0, r0, #5
 800156c:	4a02      	ldr	r2, [pc, #8]	; (8001578 <HAL_NVIC_EnableIRQ+0x14>)
 800156e:	408b      	lsls	r3, r1
 8001570:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	3801      	subs	r0, #1
 800157e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001582:	d20e      	bcs.n	80015a2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	4c08      	ldr	r4, [pc, #32]	; (80015ac <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	20f0      	movs	r0, #240	; 0xf0
 800158e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001592:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001594:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001596:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800159c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2001      	movs	r0, #1
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff fcc0 	bl	8000f38 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015b8:	2c00      	cmp	r4, #0
 80015ba:	d054      	beq.n	8001666 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015bc:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015be:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80015c4:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80015c6:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 80015c8:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 80015cc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80015d0:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 80015d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d4:	e005      	b.n	80015e2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d6:	f7ff fcaf 	bl	8000f38 <HAL_GetTick>
 80015da:	1b40      	subs	r0, r0, r5
 80015dc:	2805      	cmp	r0, #5
 80015de:	d83b      	bhi.n	8001658 <HAL_DMA_Init+0xa8>
 80015e0:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	07d1      	lsls	r1, r2, #31
 80015e6:	d4f6      	bmi.n	80015d6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e8:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ec:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f0:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 80015f4:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f6:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	430a      	orrs	r2, r1
 80015fe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001600:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001602:	4835      	ldr	r0, [pc, #212]	; (80016d8 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001604:	4332      	orrs	r2, r6
 8001606:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001608:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800160c:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160e:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001610:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001614:	d029      	beq.n	800166a <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001618:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800161a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800161e:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001620:	b2da      	uxtb	r2, r3
 8001622:	482e      	ldr	r0, [pc, #184]	; (80016dc <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8001624:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001626:	3a10      	subs	r2, #16
 8001628:	fba0 1202 	umull	r1, r2, r0, r2
 800162c:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800162e:	492c      	ldr	r1, [pc, #176]	; (80016e0 <HAL_DMA_Init+0x130>)
 8001630:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001634:	5c89      	ldrb	r1, [r1, r2]
 8001636:	65e1      	str	r1, [r4, #92]	; 0x5c
 8001638:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800163c:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800163e:	bf88      	it	hi
 8001640:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001642:	223f      	movs	r2, #63	; 0x3f
 8001644:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8001646:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001648:	2100      	movs	r1, #0
 800164a:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800164c:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164e:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001650:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001652:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001658:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800165a:	2220      	movs	r2, #32
 800165c:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800165e:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001660:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
}
 8001668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800166a:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800166e:	4301      	orrs	r1, r0
 8001670:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001672:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8001674:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001676:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001678:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800167c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001680:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001682:	2800      	cmp	r0, #0
 8001684:	d0cc      	beq.n	8001620 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001686:	b17e      	cbz	r6, 80016a8 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001688:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800168c:	d016      	beq.n	80016bc <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800168e:	2d02      	cmp	r5, #2
 8001690:	d903      	bls.n	800169a <HAL_DMA_Init+0xea>
 8001692:	2d03      	cmp	r5, #3
 8001694:	d1c4      	bne.n	8001620 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001696:	01c2      	lsls	r2, r0, #7
 8001698:	d5c2      	bpl.n	8001620 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800169a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 80016a0:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 80016a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80016a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80016a8:	2d01      	cmp	r5, #1
 80016aa:	d003      	beq.n	80016b4 <HAL_DMA_Init+0x104>
 80016ac:	d3f3      	bcc.n	8001696 <HAL_DMA_Init+0xe6>
 80016ae:	2d02      	cmp	r5, #2
 80016b0:	d1b6      	bne.n	8001620 <HAL_DMA_Init+0x70>
 80016b2:	e7f0      	b.n	8001696 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80016b8:	d1b2      	bne.n	8001620 <HAL_DMA_Init+0x70>
 80016ba:	e7ee      	b.n	800169a <HAL_DMA_Init+0xea>
    switch (tmp)
 80016bc:	2d03      	cmp	r5, #3
 80016be:	d8af      	bhi.n	8001620 <HAL_DMA_Init+0x70>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_DMA_Init+0x118>)
 80016c2:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	0800169b 	.word	0x0800169b
 80016cc:	08001697 	.word	0x08001697
 80016d0:	0800169b 	.word	0x0800169b
 80016d4:	080016b5 	.word	0x080016b5
 80016d8:	f010803f 	.word	0xf010803f
 80016dc:	aaaaaaab 	.word	0xaaaaaaab
 80016e0:	080057e8 	.word	0x080057e8

080016e4 <HAL_DMA_IRQHandler>:
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80016e8:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ea:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80016ec:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80016f0:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016f2:	4965      	ldr	r1, [pc, #404]	; (8001888 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f4:	2208      	movs	r2, #8
 80016f6:	409a      	lsls	r2, r3
 80016f8:	422a      	tst	r2, r5
{
 80016fa:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80016fc:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fe:	d003      	beq.n	8001708 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001700:	6801      	ldr	r1, [r0, #0]
 8001702:	6808      	ldr	r0, [r1, #0]
 8001704:	0740      	lsls	r0, r0, #29
 8001706:	d459      	bmi.n	80017bc <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001708:	2201      	movs	r2, #1
 800170a:	409a      	lsls	r2, r3
 800170c:	422a      	tst	r2, r5
 800170e:	d003      	beq.n	8001718 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001710:	6821      	ldr	r1, [r4, #0]
 8001712:	6949      	ldr	r1, [r1, #20]
 8001714:	0608      	lsls	r0, r1, #24
 8001716:	d474      	bmi.n	8001802 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001718:	2204      	movs	r2, #4
 800171a:	409a      	lsls	r2, r3
 800171c:	422a      	tst	r2, r5
 800171e:	d003      	beq.n	8001728 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001720:	6821      	ldr	r1, [r4, #0]
 8001722:	6809      	ldr	r1, [r1, #0]
 8001724:	0789      	lsls	r1, r1, #30
 8001726:	d466      	bmi.n	80017f6 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	2210      	movs	r2, #16
 800172a:	409a      	lsls	r2, r3
 800172c:	422a      	tst	r2, r5
 800172e:	d003      	beq.n	8001738 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001730:	6821      	ldr	r1, [r4, #0]
 8001732:	6808      	ldr	r0, [r1, #0]
 8001734:	0700      	lsls	r0, r0, #28
 8001736:	d44b      	bmi.n	80017d0 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001738:	2220      	movs	r2, #32
 800173a:	409a      	lsls	r2, r3
 800173c:	422a      	tst	r2, r5
 800173e:	d014      	beq.n	800176a <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001740:	6821      	ldr	r1, [r4, #0]
 8001742:	6808      	ldr	r0, [r1, #0]
 8001744:	06c0      	lsls	r0, r0, #27
 8001746:	d510      	bpl.n	800176a <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001748:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800174e:	2a05      	cmp	r2, #5
 8001750:	d063      	beq.n	800181a <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001752:	680b      	ldr	r3, [r1, #0]
 8001754:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001758:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800175a:	d07e      	beq.n	800185a <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175c:	0319      	lsls	r1, r3, #12
 800175e:	f140 8089 	bpl.w	8001874 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001764:	b10b      	cbz	r3, 800176a <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8001766:	4620      	mov	r0, r4
 8001768:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800176a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800176c:	b323      	cbz	r3, 80017b8 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800176e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001770:	07da      	lsls	r2, r3, #31
 8001772:	d51a      	bpl.n	80017aa <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001774:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001776:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001778:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800177c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800177e:	4943      	ldr	r1, [pc, #268]	; (800188c <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8001780:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001784:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8001788:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800178a:	0ab6      	lsrs	r6, r6, #10
 800178c:	e002      	b.n	8001794 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	07db      	lsls	r3, r3, #31
 8001792:	d504      	bpl.n	800179e <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001794:	9b01      	ldr	r3, [sp, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	42b3      	cmp	r3, r6
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	d9f7      	bls.n	800178e <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800179e:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80017a0:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80017a2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80017a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80017aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017ac:	b123      	cbz	r3, 80017b8 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80017ae:	4620      	mov	r0, r4
}
 80017b0:	b003      	add	sp, #12
 80017b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80017b6:	4718      	bx	r3
}
 80017b8:	b003      	add	sp, #12
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017bc:	6808      	ldr	r0, [r1, #0]
 80017be:	f020 0004 	bic.w	r0, r0, #4
 80017c2:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c4:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	6562      	str	r2, [r4, #84]	; 0x54
 80017ce:	e79b      	b.n	8001708 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017d0:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d2:	680a      	ldr	r2, [r1, #0]
 80017d4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017da:	d118      	bne.n	800180e <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017dc:	05d2      	lsls	r2, r2, #23
 80017de:	d403      	bmi.n	80017e8 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e0:	680a      	ldr	r2, [r1, #0]
 80017e2:	f022 0208 	bic.w	r2, r2, #8
 80017e6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d0a4      	beq.n	8001738 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80017ee:	4620      	mov	r0, r4
 80017f0:	4790      	blx	r2
 80017f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017f4:	e7a0      	b.n	8001738 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017f6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017fa:	f042 0204 	orr.w	r2, r2, #4
 80017fe:	6562      	str	r2, [r4, #84]	; 0x54
 8001800:	e792      	b.n	8001728 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001802:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001804:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001806:	f042 0202 	orr.w	r2, r2, #2
 800180a:	6562      	str	r2, [r4, #84]	; 0x54
 800180c:	e784      	b.n	8001718 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180e:	0311      	lsls	r1, r2, #12
 8001810:	d5ea      	bpl.n	80017e8 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001812:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001814:	2a00      	cmp	r2, #0
 8001816:	d1ea      	bne.n	80017ee <HAL_DMA_IRQHandler+0x10a>
 8001818:	e78e      	b.n	8001738 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800181a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800181c:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800181e:	f022 0216 	bic.w	r2, r2, #22
 8001822:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001824:	694a      	ldr	r2, [r1, #20]
 8001826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182a:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800182c:	b338      	cbz	r0, 800187e <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182e:	680a      	ldr	r2, [r1, #0]
 8001830:	f022 0208 	bic.w	r2, r2, #8
 8001834:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001836:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8001838:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800183e:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001840:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001842:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001844:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001848:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800184c:	2900      	cmp	r1, #0
 800184e:	d0b3      	beq.n	80017b8 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001850:	4620      	mov	r0, r4
}
 8001852:	b003      	add	sp, #12
 8001854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8001858:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800185a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800185e:	d180      	bne.n	8001762 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001860:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001862:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001864:	f022 0210 	bic.w	r2, r2, #16
 8001868:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800186a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800186e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001872:	e776      	b.n	8001762 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001874:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f af75 	bne.w	8001766 <HAL_DMA_IRQHandler+0x82>
 800187c:	e775      	b.n	800176a <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800187e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001880:	2a00      	cmp	r2, #0
 8001882:	d1d4      	bne.n	800182e <HAL_DMA_IRQHandler+0x14a>
 8001884:	e7d7      	b.n	8001836 <HAL_DMA_IRQHandler+0x152>
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	1b4e81b5 	.word	0x1b4e81b5

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001894:	f8df c230 	ldr.w	ip, [pc, #560]	; 8001ac8 <HAL_GPIO_Init+0x238>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8001acc <HAL_GPIO_Init+0x23c>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189c:	f8d1 e000 	ldr.w	lr, [r1]
{
 80018a0:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2500      	movs	r5, #0
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_Init+0x1e>
 80018a6:	3501      	adds	r5, #1
 80018a8:	2d10      	cmp	r5, #16
 80018aa:	f000 809a 	beq.w	80019e2 <HAL_GPIO_Init+0x152>
    ioposition = 0x01U << position;
 80018ae:	2301      	movs	r3, #1
 80018b0:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	ea0e 0403 	and.w	r4, lr, r3
    if(iocurrent == ioposition)
 80018b6:	42a3      	cmp	r3, r4
 80018b8:	d1f5      	bne.n	80018a6 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ba:	684e      	ldr	r6, [r1, #4]
 80018bc:	f026 0a10 	bic.w	sl, r6, #16
 80018c0:	f1ba 0f02 	cmp.w	sl, #2
 80018c4:	f000 8090 	beq.w	80019e8 <HAL_GPIO_Init+0x158>
 80018c8:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018cc:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 80018ce:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d2:	fa02 f209 	lsl.w	r2, r2, r9
 80018d6:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d8:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018dc:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e8:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ec:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80018f0:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f2:	f240 809f 	bls.w	8001a34 <HAL_GPIO_Init+0x1a4>
      temp = GPIOx->PUPDR;
 80018f6:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f8:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fa:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	fa03 f309 	lsl.w	r3, r3, r9
 8001900:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8001902:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001904:	00f3      	lsls	r3, r6, #3
 8001906:	d5ce      	bpl.n	80018a6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8001918:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800191c:	f025 0203 	bic.w	r2, r5, #3
 8001920:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001928:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800192c:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800192e:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001934:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001938:	00bf      	lsls	r7, r7, #2
 800193a:	230f      	movs	r3, #15
 800193c:	40bb      	lsls	r3, r7
 800193e:	ea29 0a03 	bic.w	sl, r9, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001942:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_GPIO_Init+0x220>)
 8001944:	4298      	cmp	r0, r3
 8001946:	d024      	beq.n	8001992 <HAL_GPIO_Init+0x102>
 8001948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800194c:	4298      	cmp	r0, r3
 800194e:	f000 8084 	beq.w	8001a5a <HAL_GPIO_Init+0x1ca>
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_GPIO_Init+0x224>)
 8001954:	4298      	cmp	r0, r3
 8001956:	f000 8087 	beq.w	8001a68 <HAL_GPIO_Init+0x1d8>
 800195a:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <HAL_GPIO_Init+0x228>)
 800195c:	4298      	cmp	r0, r3
 800195e:	f000 808a 	beq.w	8001a76 <HAL_GPIO_Init+0x1e6>
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x22c>)
 8001964:	4298      	cmp	r0, r3
 8001966:	f000 808d 	beq.w	8001a84 <HAL_GPIO_Init+0x1f4>
 800196a:	4b55      	ldr	r3, [pc, #340]	; (8001ac0 <HAL_GPIO_Init+0x230>)
 800196c:	4298      	cmp	r0, r3
 800196e:	f000 8090 	beq.w	8001a92 <HAL_GPIO_Init+0x202>
 8001972:	4b54      	ldr	r3, [pc, #336]	; (8001ac4 <HAL_GPIO_Init+0x234>)
 8001974:	4298      	cmp	r0, r3
 8001976:	f000 8093 	beq.w	8001aa0 <HAL_GPIO_Init+0x210>
 800197a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8001ad0 <HAL_GPIO_Init+0x240>
 800197e:	4548      	cmp	r0, r9
 8001980:	bf0c      	ite	eq
 8001982:	f04f 0907 	moveq.w	r9, #7
 8001986:	f04f 0908 	movne.w	r9, #8
 800198a:	fa09 f707 	lsl.w	r7, r9, r7
 800198e:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001992:	f8c2 a008 	str.w	sl, [r2, #8]
        temp = EXTI->IMR;
 8001996:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 800199a:	43e2      	mvns	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199c:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800199e:	bf54      	ite	pl
 80019a0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80019a2:	4323      	orrmi	r3, r4
        }
        EXTI->IMR = temp;
 80019a4:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 80019a8:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ac:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80019ae:	bf54      	ite	pl
 80019b0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80019b2:	4323      	orrmi	r3, r4
        }
        EXTI->EMR = temp;
 80019b4:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b8:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019bc:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 80019be:	bf54      	ite	pl
 80019c0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80019c2:	4323      	orrmi	r3, r4
        }
        EXTI->RTSR = temp;
 80019c4:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 80019c8:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019cc:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 80019d2:	bf54      	ite	pl
 80019d4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80019d6:	4323      	orrmi	r3, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d8:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 80019da:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	f47f af66 	bne.w	80018ae <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80019e2:	b003      	add	sp, #12
 80019e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80019ec:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f0:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 80019f4:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f8:	00bf      	lsls	r7, r7, #2
 80019fa:	f04f 0b0f 	mov.w	fp, #15
 80019fe:	fa0b fb07 	lsl.w	fp, fp, r7
 8001a02:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a06:	690a      	ldr	r2, [r1, #16]
 8001a08:	40ba      	lsls	r2, r7
 8001a0a:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001a0e:	f8c9 2020 	str.w	r2, [r9, #32]
 8001a12:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a16:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8001a18:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1c:	fa02 f209 	lsl.w	r2, r2, r9
 8001a20:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a22:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2a:	fa07 f709 	lsl.w	r7, r7, r9
 8001a2e:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 8001a32:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001a34:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a36:	ea07 0a02 	and.w	sl, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3a:	68cf      	ldr	r7, [r1, #12]
 8001a3c:	fa07 f709 	lsl.w	r7, r7, r9
 8001a40:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001a44:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a46:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a4a:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a4e:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a52:	40af      	lsls	r7, r5
 8001a54:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8001a56:	6047      	str	r7, [r0, #4]
 8001a58:	e74d      	b.n	80018f6 <HAL_GPIO_Init+0x66>
 8001a5a:	f04f 0901 	mov.w	r9, #1
 8001a5e:	fa09 f707 	lsl.w	r7, r9, r7
 8001a62:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a66:	e794      	b.n	8001992 <HAL_GPIO_Init+0x102>
 8001a68:	f04f 0902 	mov.w	r9, #2
 8001a6c:	fa09 f707 	lsl.w	r7, r9, r7
 8001a70:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a74:	e78d      	b.n	8001992 <HAL_GPIO_Init+0x102>
 8001a76:	f04f 0903 	mov.w	r9, #3
 8001a7a:	fa09 f707 	lsl.w	r7, r9, r7
 8001a7e:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a82:	e786      	b.n	8001992 <HAL_GPIO_Init+0x102>
 8001a84:	f04f 0904 	mov.w	r9, #4
 8001a88:	fa09 f707 	lsl.w	r7, r9, r7
 8001a8c:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a90:	e77f      	b.n	8001992 <HAL_GPIO_Init+0x102>
 8001a92:	f04f 0905 	mov.w	r9, #5
 8001a96:	fa09 f707 	lsl.w	r7, r9, r7
 8001a9a:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a9e:	e778      	b.n	8001992 <HAL_GPIO_Init+0x102>
 8001aa0:	f04f 0906 	mov.w	r9, #6
 8001aa4:	fa09 f707 	lsl.w	r7, r9, r7
 8001aa8:	ea4a 0a07 	orr.w	sl, sl, r7
 8001aac:	e771      	b.n	8001992 <HAL_GPIO_Init+0x102>
 8001aae:	bf00      	nop
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40020c00 	.word	0x40020c00
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40021400 	.word	0x40021400
 8001ac4:	40021800 	.word	0x40021800
 8001ac8:	40013c00 	.word	0x40013c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40021c00 	.word	0x40021c00

08001ad4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad4:	b902      	cbnz	r2, 8001ad8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	0409      	lsls	r1, r1, #16
 8001ad8:	6181      	str	r1, [r0, #24]
  }
}
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001ae2:	6951      	ldr	r1, [r2, #20]
 8001ae4:	4201      	tst	r1, r0
 8001ae6:	d100      	bne.n	8001aea <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001ae8:	4770      	bx	lr
{
 8001aea:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aec:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aee:	f7ff fff5 	bl	8001adc <HAL_GPIO_EXTI_Callback>
}
 8001af2:	bd08      	pop	{r3, pc}
 8001af4:	40013c00 	.word	0x40013c00

08001af8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af8:	2800      	cmp	r0, #0
 8001afa:	f000 8132 	beq.w	8001d62 <HAL_RCC_OscConfig+0x26a>
{
 8001afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	6803      	ldr	r3, [r0, #0]
 8001b04:	07dd      	lsls	r5, r3, #31
{
 8001b06:	b082      	sub	sp, #8
 8001b08:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	d52f      	bpl.n	8001b6c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0c:	49ac      	ldr	r1, [pc, #688]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001b0e:	688a      	ldr	r2, [r1, #8]
 8001b10:	f002 020c 	and.w	r2, r2, #12
 8001b14:	2a04      	cmp	r2, #4
 8001b16:	f000 80ea 	beq.w	8001cee <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	688a      	ldr	r2, [r1, #8]
 8001b1c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b20:	2a08      	cmp	r2, #8
 8001b22:	f000 80e0 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	6863      	ldr	r3, [r4, #4]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	f000 80e9 	beq.w	8001d02 <HAL_RCC_OscConfig+0x20a>
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	f000 8154 	beq.w	8001de0 <HAL_RCC_OscConfig+0x2e8>
 8001b38:	4da1      	ldr	r5, [pc, #644]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001b3a:	682a      	ldr	r2, [r5, #0]
 8001b3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b40:	602a      	str	r2, [r5, #0]
 8001b42:	682a      	ldr	r2, [r5, #0]
 8001b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b48:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 80de 	bne.w	8001d0c <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f9f2 	bl	8000f38 <HAL_GetTick>
 8001b54:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	e005      	b.n	8001b64 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff f9ee 	bl	8000f38 <HAL_GetTick>
 8001b5c:	1b80      	subs	r0, r0, r6
 8001b5e:	2864      	cmp	r0, #100	; 0x64
 8001b60:	f200 80f2 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	039b      	lsls	r3, r3, #14
 8001b68:	d4f6      	bmi.n	8001b58 <HAL_RCC_OscConfig+0x60>
 8001b6a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6c:	079f      	lsls	r7, r3, #30
 8001b6e:	d475      	bmi.n	8001c5c <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b70:	071a      	lsls	r2, r3, #28
 8001b72:	d515      	bpl.n	8001ba0 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b74:	6963      	ldr	r3, [r4, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80a5 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4d90      	ldr	r5, [pc, #576]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b84:	f7ff f9d8 	bl	8000f38 <HAL_GetTick>
 8001b88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e005      	b.n	8001b98 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f9d4 	bl	8000f38 <HAL_GetTick>
 8001b90:	1b80      	subs	r0, r0, r6
 8001b92:	2802      	cmp	r0, #2
 8001b94:	f200 80d8 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b9a:	079b      	lsls	r3, r3, #30
 8001b9c:	d5f6      	bpl.n	8001b8c <HAL_RCC_OscConfig+0x94>
 8001b9e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba0:	0758      	lsls	r0, r3, #29
 8001ba2:	d53b      	bpl.n	8001c1c <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba4:	4a86      	ldr	r2, [pc, #536]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001ba6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ba8:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001bac:	f040 80db 	bne.w	8001d66 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bc4:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	4d80      	ldr	r5, [pc, #512]	; (8001dc8 <HAL_RCC_OscConfig+0x2d0>)
 8001bc8:	682a      	ldr	r2, [r5, #0]
 8001bca:	05d1      	lsls	r1, r2, #23
 8001bcc:	f140 80ac 	bpl.w	8001d28 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	68a3      	ldr	r3, [r4, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	f000 80c9 	beq.w	8001d6a <HAL_RCC_OscConfig+0x272>
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	f000 810b 	beq.w	8001df4 <HAL_RCC_OscConfig+0x2fc>
 8001bde:	4d78      	ldr	r5, [pc, #480]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001be0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	672a      	str	r2, [r5, #112]	; 0x70
 8001be8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 80bf 	bne.w	8001d74 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f99f 	bl	8000f38 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bfe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e006      	b.n	8001c10 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f999 	bl	8000f38 <HAL_GetTick>
 8001c06:	eba0 0008 	sub.w	r0, r0, r8
 8001c0a:	42b8      	cmp	r0, r7
 8001c0c:	f200 809c 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c12:	0798      	lsls	r0, r3, #30
 8001c14:	d4f5      	bmi.n	8001c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c16:	2e00      	cmp	r6, #0
 8001c18:	f040 80dc 	bne.w	8001dd4 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1c:	69a2      	ldr	r2, [r4, #24]
 8001c1e:	b1ca      	cbz	r2, 8001c54 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c20:	4d67      	ldr	r5, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001c22:	68a9      	ldr	r1, [r5, #8]
 8001c24:	f001 010c 	and.w	r1, r1, #12
 8001c28:	2908      	cmp	r1, #8
 8001c2a:	d048      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2c:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4a67      	ldr	r2, [pc, #412]	; (8001dcc <HAL_RCC_OscConfig+0x2d4>)
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c36:	f000 80e7 	beq.w	8001e08 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f97d 	bl	8000f38 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001c40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	e004      	b.n	8001c4e <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f978 	bl	8000f38 <HAL_GetTick>
 8001c48:	1b40      	subs	r0, r0, r5
 8001c4a:	2802      	cmp	r0, #2
 8001c4c:	d87c      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	d4f7      	bmi.n	8001c44 <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001c54:	2000      	movs	r0, #0
}
 8001c56:	b002      	add	sp, #8
 8001c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001c5e:	6891      	ldr	r1, [r2, #8]
 8001c60:	f011 0f0c 	tst.w	r1, #12
 8001c64:	d024      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	6891      	ldr	r1, [r2, #8]
 8001c68:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6c:	2908      	cmp	r1, #8
 8001c6e:	d01c      	beq.n	8001caa <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c70:	68e3      	ldr	r3, [r4, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8092 	beq.w	8001d9c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4d51      	ldr	r5, [pc, #324]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c80:	f7ff f95a 	bl	8000f38 <HAL_GetTick>
 8001c84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff f956 	bl	8000f38 <HAL_GetTick>
 8001c8c:	1b80      	subs	r0, r0, r6
 8001c8e:	2802      	cmp	r0, #2
 8001c90:	d85a      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	0798      	lsls	r0, r3, #30
 8001c96:	d5f7      	bpl.n	8001c88 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	6922      	ldr	r2, [r4, #16]
 8001c9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ca0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ca4:	602b      	str	r3, [r5, #0]
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	e762      	b.n	8001b70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	6852      	ldr	r2, [r2, #4]
 8001cac:	0256      	lsls	r6, r2, #9
 8001cae:	d4df      	bmi.n	8001c70 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb0:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	0795      	lsls	r5, r2, #30
 8001cb6:	d54b      	bpl.n	8001d50 <HAL_RCC_OscConfig+0x258>
 8001cb8:	68e2      	ldr	r2, [r4, #12]
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d048      	beq.n	8001d50 <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
}
 8001cc0:	b002      	add	sp, #8
 8001cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	; (8001dc4 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	4d3d      	ldr	r5, [pc, #244]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8001cca:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f934 	bl	8000f38 <HAL_GetTick>
 8001cd0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd2:	e004      	b.n	8001cde <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f930 	bl	8000f38 <HAL_GetTick>
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d834      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ce0:	079f      	lsls	r7, r3, #30
 8001ce2:	d4f7      	bmi.n	8001cd4 <HAL_RCC_OscConfig+0x1dc>
 8001ce4:	e75b      	b.n	8001b9e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce6:	684a      	ldr	r2, [r1, #4]
 8001ce8:	0250      	lsls	r0, r2, #9
 8001cea:	f57f af1c 	bpl.w	8001b26 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	4a34      	ldr	r2, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	0391      	lsls	r1, r2, #14
 8001cf4:	f57f af3a 	bpl.w	8001b6c <HAL_RCC_OscConfig+0x74>
 8001cf8:	6862      	ldr	r2, [r4, #4]
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	f47f af36 	bne.w	8001b6c <HAL_RCC_OscConfig+0x74>
 8001d00:	e7dd      	b.n	8001cbe <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001d04:	6813      	ldr	r3, [r2, #0]
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f914 	bl	8000f38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d10:	4d2b      	ldr	r5, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001d12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	e004      	b.n	8001d20 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d16:	f7ff f90f 	bl	8000f38 <HAL_GetTick>
 8001d1a:	1b80      	subs	r0, r0, r6
 8001d1c:	2864      	cmp	r0, #100	; 0x64
 8001d1e:	d813      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	039a      	lsls	r2, r3, #14
 8001d24:	d5f7      	bpl.n	8001d16 <HAL_RCC_OscConfig+0x21e>
 8001d26:	e720      	b.n	8001b6a <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d28:	682a      	ldr	r2, [r5, #0]
 8001d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d2e:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001d30:	f7ff f902 	bl	8000f38 <HAL_GetTick>
 8001d34:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	05da      	lsls	r2, r3, #23
 8001d3a:	f53f af49 	bmi.w	8001bd0 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff f8fb 	bl	8000f38 <HAL_GetTick>
 8001d42:	1bc0      	subs	r0, r0, r7
 8001d44:	2802      	cmp	r0, #2
 8001d46:	d9f6      	bls.n	8001d36 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8001d48:	2003      	movs	r0, #3
}
 8001d4a:	b002      	add	sp, #8
 8001d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	491b      	ldr	r1, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001d52:	6920      	ldr	r0, [r4, #16]
 8001d54:	680a      	ldr	r2, [r1, #0]
 8001d56:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001d5a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001d5e:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d60:	e706      	b.n	8001b70 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8001d62:	2001      	movs	r0, #1
}
 8001d64:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2600      	movs	r6, #0
 8001d68:	e72d      	b.n	8001bc6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
 8001d6c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d74:	f7ff f8e0 	bl	8000f38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4d11      	ldr	r5, [pc, #68]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001d7a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	e005      	b.n	8001d8e <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff f8d9 	bl	8000f38 <HAL_GetTick>
 8001d86:	eba0 0008 	sub.w	r0, r0, r8
 8001d8a:	42b8      	cmp	r0, r7
 8001d8c:	d8dc      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d90:	079b      	lsls	r3, r3, #30
 8001d92:	d5f6      	bpl.n	8001d82 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8001d94:	2e00      	cmp	r6, #0
 8001d96:	f43f af41 	beq.w	8001c1c <HAL_RCC_OscConfig+0x124>
 8001d9a:	e01b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4d08      	ldr	r5, [pc, #32]	; (8001dc0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001da0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001da2:	f7ff f8c9 	bl	8000f38 <HAL_GetTick>
 8001da6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da8:	e004      	b.n	8001db4 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff f8c5 	bl	8000f38 <HAL_GetTick>
 8001dae:	1b80      	subs	r0, r0, r6
 8001db0:	2802      	cmp	r0, #2
 8001db2:	d8c9      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	0799      	lsls	r1, r3, #30
 8001db8:	d4f7      	bmi.n	8001daa <HAL_RCC_OscConfig+0x2b2>
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	e6d8      	b.n	8001b70 <HAL_RCC_OscConfig+0x78>
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	42470e80 	.word	0x42470e80
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	42470060 	.word	0x42470060
 8001dd0:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_RCC_OscConfig+0x36c>)
 8001dd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	e71d      	b.n	8001c1c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_OscConfig+0x36c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e78b      	b.n	8001d0c <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x36c>)
 8001df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001df8:	f042 0204 	orr.w	r2, r2, #4
 8001dfc:	671a      	str	r2, [r3, #112]	; 0x70
 8001dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	671a      	str	r2, [r3, #112]	; 0x70
 8001e06:	e7b5      	b.n	8001d74 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8001e08:	f7ff f896 	bl	8000f38 <HAL_GetTick>
 8001e0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	e004      	b.n	8001e1a <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f892 	bl	8000f38 <HAL_GetTick>
 8001e14:	1b80      	subs	r0, r0, r6
 8001e16:	2802      	cmp	r0, #2
 8001e18:	d896      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	682b      	ldr	r3, [r5, #0]
 8001e1c:	0199      	lsls	r1, r3, #6
 8001e1e:	d4f7      	bmi.n	8001e10 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e20:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001e24:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001e28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4c0e      	ldr	r4, [pc, #56]	; (8001e64 <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e2c:	4333      	orrs	r3, r6
 8001e2e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001e38:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001e3a:	490b      	ldr	r1, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001e40:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e42:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e44:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001e46:	f7ff f877 	bl	8000f38 <HAL_GetTick>
 8001e4a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	e005      	b.n	8001e5a <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff f873 	bl	8000f38 <HAL_GetTick>
 8001e52:	1b40      	subs	r0, r0, r5
 8001e54:	2802      	cmp	r0, #2
 8001e56:	f63f af77 	bhi.w	8001d48 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	019a      	lsls	r2, r3, #6
 8001e5e:	d5f6      	bpl.n	8001e4e <HAL_RCC_OscConfig+0x356>
 8001e60:	e6f8      	b.n	8001c54 <HAL_RCC_OscConfig+0x15c>
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	42470060 	.word	0x42470060

08001e6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001e6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e70:	688b      	ldr	r3, [r1, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d01b      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x46>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d117      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e7e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e80:	684b      	ldr	r3, [r1, #4]
 8001e82:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8a:	d114      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8c:	6849      	ldr	r1, [r1, #4]
 8001e8e:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e90:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e94:	fba1 0100 	umull	r0, r1, r1, r0
 8001e98:	f7fe fe86 	bl	8000ba8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x60>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001ea8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001eac:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001eae:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001eb0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001eb2:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001eb4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb6:	684b      	ldr	r3, [r1, #4]
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x68>)
 8001eba:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ebe:	fba3 0100 	umull	r0, r1, r3, r0
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f7fe fe70 	bl	8000ba8 <__aeabi_uldivmod>
 8001ec8:	e7e8      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	007a1200 	.word	0x007a1200

08001ed8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001ed8:	b160      	cbz	r0, 8001ef4 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eda:	4a48      	ldr	r2, [pc, #288]	; (8001ffc <HAL_RCC_ClockConfig+0x124>)
 8001edc:	6813      	ldr	r3, [r2, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	d208      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	b2cb      	uxtb	r3, r1
 8001ee8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001ef4:	2001      	movs	r0, #1
}
 8001ef6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	6803      	ldr	r3, [r0, #0]
{
 8001efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efe:	079d      	lsls	r5, r3, #30
 8001f00:	d514      	bpl.n	8001f2c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f02:	075c      	lsls	r4, r3, #29
 8001f04:	d504      	bpl.n	8001f10 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f06:	4c3e      	ldr	r4, [pc, #248]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001f08:	68a2      	ldr	r2, [r4, #8]
 8001f0a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001f0e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	071a      	lsls	r2, r3, #28
 8001f12:	d504      	bpl.n	8001f1e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f14:	4c3a      	ldr	r4, [pc, #232]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001f16:	68a2      	ldr	r2, [r4, #8]
 8001f18:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001f1c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1e:	4c38      	ldr	r4, [pc, #224]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001f20:	6885      	ldr	r5, [r0, #8]
 8001f22:	68a2      	ldr	r2, [r4, #8]
 8001f24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f28:	432a      	orrs	r2, r5
 8001f2a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2c:	07df      	lsls	r7, r3, #31
 8001f2e:	4604      	mov	r4, r0
 8001f30:	460d      	mov	r5, r1
 8001f32:	d522      	bpl.n	8001f7a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f34:	6842      	ldr	r2, [r0, #4]
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d056      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3a:	1e93      	subs	r3, r2, #2
 8001f3c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001f40:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f42:	d958      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	0799      	lsls	r1, r3, #30
 8001f46:	d525      	bpl.n	8001f94 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f48:	4e2d      	ldr	r6, [pc, #180]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001f4a:	68b3      	ldr	r3, [r6, #8]
 8001f4c:	f023 0303 	bic.w	r3, r3, #3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f54:	f7fe fff0 	bl	8000f38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f5c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e005      	b.n	8001f6c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7fe ffea 	bl	8000f38 <HAL_GetTick>
 8001f64:	eba0 0008 	sub.w	r0, r0, r8
 8001f68:	42b8      	cmp	r0, r7
 8001f6a:	d842      	bhi.n	8001ff2 <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6c:	68b3      	ldr	r3, [r6, #8]
 8001f6e:	6862      	ldr	r2, [r4, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f78:	d1f2      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7a:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_RCC_ClockConfig+0x124>)
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	42ab      	cmp	r3, r5
 8001f84:	d909      	bls.n	8001f9a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	b2eb      	uxtb	r3, r5
 8001f88:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	42ab      	cmp	r3, r5
 8001f92:	d002      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001f94:	2001      	movs	r0, #1
}
 8001f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	075a      	lsls	r2, r3, #29
 8001f9e:	d506      	bpl.n	8001fae <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4917      	ldr	r1, [pc, #92]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001fa2:	68e0      	ldr	r0, [r4, #12]
 8001fa4:	688a      	ldr	r2, [r1, #8]
 8001fa6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001faa:	4302      	orrs	r2, r0
 8001fac:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	071b      	lsls	r3, r3, #28
 8001fb0:	d411      	bmi.n	8001fd6 <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb2:	f7ff ff5b 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001fb8:	4912      	ldr	r1, [pc, #72]	; (8002004 <HAL_RCC_ClockConfig+0x12c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x130>)
 8001fbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fc8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fca:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fcc:	f7fe ff6c 	bl	8000ea8 <HAL_InitTick>
  return HAL_OK;
 8001fd0:	2000      	movs	r0, #0
}
 8001fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001fd8:	6921      	ldr	r1, [r4, #16]
 8001fda:	6893      	ldr	r3, [r2, #8]
 8001fdc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fe0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fe4:	6093      	str	r3, [r2, #8]
 8001fe6:	e7e4      	b.n	8001fb2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_RCC_ClockConfig+0x128>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	039e      	lsls	r6, r3, #14
 8001fee:	d4ab      	bmi.n	8001f48 <HAL_RCC_ClockConfig+0x70>
 8001ff0:	e7d0      	b.n	8001f94 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	e7ed      	b.n	8001fd2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	0198      	lsls	r0, r3, #6
 8001ff8:	d4a6      	bmi.n	8001f48 <HAL_RCC_ClockConfig+0x70>
 8001ffa:	e7cb      	b.n	8001f94 <HAL_RCC_ClockConfig+0xbc>
 8001ffc:	40023c00 	.word	0x40023c00
 8002000:	40023800 	.word	0x40023800
 8002004:	080057f0 	.word	0x080057f0
 8002008:	20000008 	.word	0x20000008

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_RCC_GetPCLK1Freq+0x14>)
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002010:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002012:	4905      	ldr	r1, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002014:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002018:	6808      	ldr	r0, [r1, #0]
 800201a:	5cd3      	ldrb	r3, [r2, r3]
}
 800201c:	40d8      	lsrs	r0, r3
 800201e:	4770      	bx	lr
 8002020:	40023800 	.word	0x40023800
 8002024:	08005800 	.word	0x08005800
 8002028:	20000008 	.word	0x20000008

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x14>)
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002030:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002032:	4905      	ldr	r1, [pc, #20]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002034:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002038:	6808      	ldr	r0, [r1, #0]
 800203a:	5cd3      	ldrb	r3, [r2, r3]
}
 800203c:	40d8      	lsrs	r0, r3
 800203e:	4770      	bx	lr
 8002040:	40023800 	.word	0x40023800
 8002044:	08005800 	.word	0x08005800
 8002048:	20000008 	.word	0x20000008

0800204c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 800204c:	2800      	cmp	r0, #0
 800204e:	f000 8104 	beq.w	800225a <HAL_UART_Init+0x20e>
{
 8002052:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002056:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800205a:	4604      	mov	r4, r0
 800205c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80f5 	beq.w	8002250 <HAL_UART_Init+0x204>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002066:	6823      	ldr	r3, [r4, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002068:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002070:	68d8      	ldr	r0, [r3, #12]
 8002072:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002076:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800207a:	60d8      	str	r0, [r3, #12]
  tmpreg = huart->Instance->CR2;
 800207c:	6919      	ldr	r1, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800207e:	69e0      	ldr	r0, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002080:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002084:	4329      	orrs	r1, r5
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002086:	6119      	str	r1, [r3, #16]
  tmpreg = huart->Instance->CR1;
 8002088:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800208a:	6965      	ldr	r5, [r4, #20]
 800208c:	4332      	orrs	r2, r6
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800208e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002092:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002094:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002098:	4302      	orrs	r2, r0
 800209a:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800209c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800209e:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80020a0:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80020a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80020a6:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80020ac:	615a      	str	r2, [r3, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80020ae:	4aaa      	ldr	r2, [pc, #680]	; (8002358 <HAL_UART_Init+0x30c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b0:	d071      	beq.n	8002196 <HAL_UART_Init+0x14a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80020b2:	4293      	cmp	r3, r2
 80020b4:	f000 80d3 	beq.w	800225e <HAL_UART_Init+0x212>
 80020b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020bc:	4293      	cmp	r3, r2
 80020be:	f000 80ce 	beq.w	800225e <HAL_UART_Init+0x212>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020c2:	f7ff ffa3 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80020c6:	4fa5      	ldr	r7, [pc, #660]	; (800235c <HAL_UART_Init+0x310>)
 80020c8:	6863      	ldr	r3, [r4, #4]
 80020ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d8:	fba7 2303 	umull	r2, r3, r7, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	011d      	lsls	r5, r3, #4
 80020e0:	f7ff ff94 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80020e4:	6866      	ldr	r6, [r4, #4]
 80020e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020ee:	00b6      	lsls	r6, r6, #2
 80020f0:	fbb0 f6f6 	udiv	r6, r0, r6
 80020f4:	f7ff ff8a 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80020f8:	6863      	ldr	r3, [r4, #4]
 80020fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fbb0 f3f3 	udiv	r3, r0, r3
 8002108:	fba7 2303 	umull	r2, r3, r7, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002112:	fb09 6313 	mls	r3, r9, r3, r6
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	3332      	adds	r3, #50	; 0x32
 800211a:	fba7 2303 	umull	r2, r3, r7, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002124:	f7ff ff72 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8002128:	6862      	ldr	r2, [r4, #4]
 800212a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800212e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002132:	0093      	lsls	r3, r2, #2
 8002134:	fbb0 f8f3 	udiv	r8, r0, r3
 8002138:	f7ff ff68 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 800213c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002140:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002144:	008b      	lsls	r3, r1, #2
 8002146:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	fba7 1303 	umull	r1, r3, r7, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	fb09 8313 	mls	r3, r9, r3, r8
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	3332      	adds	r3, #50	; 0x32
 800215c:	fba7 1303 	umull	r1, r3, r7, r3
 8002160:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002164:	4333      	orrs	r3, r6
 8002166:	442b      	add	r3, r5
 8002168:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216a:	6913      	ldr	r3, [r2, #16]
 800216c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002170:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	6953      	ldr	r3, [r2, #20]
 8002174:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002178:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800217a:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217c:	2500      	movs	r5, #0
  huart->gState= HAL_UART_STATE_READY;
 800217e:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002180:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002184:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002186:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800218a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800218e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002196:	4293      	cmp	r3, r2
 8002198:	f000 809f 	beq.w	80022da <HAL_UART_Init+0x28e>
 800219c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a0:	4293      	cmp	r3, r2
 80021a2:	f000 809a 	beq.w	80022da <HAL_UART_Init+0x28e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021a6:	f7ff ff31 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80021aa:	4f6c      	ldr	r7, [pc, #432]	; (800235c <HAL_UART_Init+0x310>)
 80021ac:	6863      	ldr	r3, [r4, #4]
 80021ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021bc:	fba7 2303 	umull	r2, r3, r7, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	011e      	lsls	r6, r3, #4
 80021c4:	f7ff ff22 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80021c8:	6865      	ldr	r5, [r4, #4]
 80021ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021d2:	006d      	lsls	r5, r5, #1
 80021d4:	fbb0 f5f5 	udiv	r5, r0, r5
 80021d8:	f7ff ff18 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80021dc:	6863      	ldr	r3, [r4, #4]
 80021de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ec:	fba7 2303 	umull	r2, r3, r7, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80021f6:	fb09 5313 	mls	r3, r9, r3, r5
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	3332      	adds	r3, #50	; 0x32
 80021fe:	fba7 2303 	umull	r2, r3, r7, r3
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002208:	f7ff ff00 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 800220c:	6862      	ldr	r2, [r4, #4]
 800220e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002212:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002216:	0053      	lsls	r3, r2, #1
 8002218:	fbb0 f8f3 	udiv	r8, r0, r3
 800221c:	f7ff fef6 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8002220:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002224:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002228:	004b      	lsls	r3, r1, #1
 800222a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800222e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002232:	fba7 1303 	umull	r1, r3, r7, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	fb09 8313 	mls	r3, r9, r3, r8
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	3332      	adds	r3, #50	; 0x32
 8002240:	fba7 1303 	umull	r1, r3, r7, r3
 8002244:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002248:	4433      	add	r3, r6
 800224a:	442b      	add	r3, r5
 800224c:	6093      	str	r3, [r2, #8]
 800224e:	e78c      	b.n	800216a <HAL_UART_Init+0x11e>
    huart->Lock = HAL_UNLOCKED;
 8002250:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002254:	f000 fd82 	bl	8002d5c <HAL_UART_MspInit>
 8002258:	e705      	b.n	8002066 <HAL_UART_Init+0x1a>
    return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
}
 800225c:	4770      	bx	lr
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800225e:	f7ff fee5 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002262:	4f3e      	ldr	r7, [pc, #248]	; (800235c <HAL_UART_Init+0x310>)
 8002264:	6863      	ldr	r3, [r4, #4]
 8002266:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800226a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fbb0 f3f3 	udiv	r3, r0, r3
 8002274:	fba7 2303 	umull	r2, r3, r7, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	011d      	lsls	r5, r3, #4
 800227c:	f7ff fed6 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002280:	6866      	ldr	r6, [r4, #4]
 8002282:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002286:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800228a:	00b6      	lsls	r6, r6, #2
 800228c:	fbb0 f6f6 	udiv	r6, r0, r6
 8002290:	f7ff fecc 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002294:	6863      	ldr	r3, [r4, #4]
 8002296:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800229a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a4:	fba7 2303 	umull	r2, r3, r7, r3
 80022a8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	fb09 6313 	mls	r3, r9, r3, r6
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	3332      	adds	r3, #50	; 0x32
 80022b6:	fba7 2303 	umull	r2, r3, r7, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80022c0:	f7ff feb4 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 80022c4:	6862      	ldr	r2, [r4, #4]
 80022c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022ca:	0093      	lsls	r3, r2, #2
 80022cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022d0:	fbb0 f8f3 	udiv	r8, r0, r3
 80022d4:	f7ff feaa 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 80022d8:	e730      	b.n	800213c <HAL_UART_Init+0xf0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022da:	f7ff fea7 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 80022de:	4f1f      	ldr	r7, [pc, #124]	; (800235c <HAL_UART_Init+0x310>)
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f0:	fba7 2303 	umull	r2, r3, r7, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	011e      	lsls	r6, r3, #4
 80022f8:	f7ff fe98 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 80022fc:	6865      	ldr	r5, [r4, #4]
 80022fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002302:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002306:	006d      	lsls	r5, r5, #1
 8002308:	fbb0 f5f5 	udiv	r5, r0, r5
 800230c:	f7ff fe8e 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002310:	6863      	ldr	r3, [r4, #4]
 8002312:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002316:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002320:	fba7 2303 	umull	r2, r3, r7, r3
 8002324:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	fb09 5313 	mls	r3, r9, r3, r5
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	3332      	adds	r3, #50	; 0x32
 8002332:	fba7 2303 	umull	r2, r3, r7, r3
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 800233c:	f7ff fe76 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002340:	6862      	ldr	r2, [r4, #4]
 8002342:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002346:	0053      	lsls	r3, r2, #1
 8002348:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800234c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002350:	f7ff fe6c 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002354:	e764      	b.n	8002220 <HAL_UART_Init+0x1d4>
 8002356:	bf00      	nop
 8002358:	40011000 	.word	0x40011000
 800235c:	51eb851f 	.word	0x51eb851f

08002360 <HAL_UART_Transmit>:
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	460e      	mov	r6, r1
  if(huart->gState == HAL_UART_STATE_READY) 
 8002364:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8002368:	2920      	cmp	r1, #32
{
 800236a:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY) 
 800236c:	d12d      	bne.n	80023ca <HAL_UART_Transmit+0x6a>
    if((pData == NULL ) || (Size == 0)) 
 800236e:	2e00      	cmp	r6, #0
 8002370:	d02e      	beq.n	80023d0 <HAL_UART_Transmit+0x70>
 8002372:	9201      	str	r2, [sp, #4]
 8002374:	b362      	cbz	r2, 80023d0 <HAL_UART_Transmit+0x70>
 8002376:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002378:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800237c:	2b01      	cmp	r3, #1
 800237e:	4604      	mov	r4, r0
 8002380:	d023      	beq.n	80023ca <HAL_UART_Transmit+0x6a>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002382:	2300      	movs	r3, #0
 8002384:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002386:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002388:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800238a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800238e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002392:	f7fe fdd1 	bl	8000f38 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002396:	9a01      	ldr	r2, [sp, #4]
 8002398:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800239a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800239c:	6822      	ldr	r2, [r4, #0]
    tickstart = HAL_GetTick();
 800239e:	4605      	mov	r5, r0
    while(huart->TxXferCount > 0U)
 80023a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d039      	beq.n	800241c <HAL_UART_Transmit+0xbc>
      huart->TxXferCount--;
 80023a8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023aa:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 80023ac:	3801      	subs	r0, #1
 80023ae:	b280      	uxth	r0, r0
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023b0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 80023b4:	84e0      	strh	r0, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023b6:	d019      	beq.n	80023ec <HAL_UART_Transmit+0x8c>
 80023b8:	1c78      	adds	r0, r7, #1
 80023ba:	d13b      	bne.n	8002434 <HAL_UART_Transmit+0xd4>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80023bc:	6810      	ldr	r0, [r2, #0]
 80023be:	0601      	lsls	r1, r0, #24
 80023c0:	d5fc      	bpl.n	80023bc <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023c2:	7833      	ldrb	r3, [r6, #0]
 80023c4:	6053      	str	r3, [r2, #4]
 80023c6:	3601      	adds	r6, #1
 80023c8:	e7ea      	b.n	80023a0 <HAL_UART_Transmit+0x40>
    return HAL_BUSY;
 80023ca:	2002      	movs	r0, #2
}
 80023cc:	b003      	add	sp, #12
 80023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
}
 80023d2:	b003      	add	sp, #12
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	d40c      	bmi.n	80023f6 <HAL_UART_Transmit+0x96>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023dc:	2f00      	cmp	r7, #0
 80023de:	d033      	beq.n	8002448 <HAL_UART_Transmit+0xe8>
 80023e0:	f7fe fdaa 	bl	8000f38 <HAL_GetTick>
 80023e4:	1b40      	subs	r0, r0, r5
 80023e6:	4287      	cmp	r7, r0
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	d32d      	bcc.n	8002448 <HAL_UART_Transmit+0xe8>
 80023ec:	1c78      	adds	r0, r7, #1
 80023ee:	d1f2      	bne.n	80023d6 <HAL_UART_Transmit+0x76>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80023f0:	6810      	ldr	r0, [r2, #0]
 80023f2:	0601      	lsls	r1, r0, #24
 80023f4:	d5fc      	bpl.n	80023f0 <HAL_UART_Transmit+0x90>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023f6:	8833      	ldrh	r3, [r6, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80023f8:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fe:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002400:	2900      	cmp	r1, #0
 8002402:	d1e0      	bne.n	80023c6 <HAL_UART_Transmit+0x66>
          pData +=2U;
 8002404:	3602      	adds	r6, #2
 8002406:	e7cb      	b.n	80023a0 <HAL_UART_Transmit+0x40>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002408:	6813      	ldr	r3, [r2, #0]
 800240a:	065b      	lsls	r3, r3, #25
 800240c:	d40b      	bmi.n	8002426 <HAL_UART_Transmit+0xc6>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800240e:	b1df      	cbz	r7, 8002448 <HAL_UART_Transmit+0xe8>
 8002410:	f7fe fd92 	bl	8000f38 <HAL_GetTick>
 8002414:	1b40      	subs	r0, r0, r5
 8002416:	4287      	cmp	r7, r0
 8002418:	6822      	ldr	r2, [r4, #0]
 800241a:	d315      	bcc.n	8002448 <HAL_UART_Transmit+0xe8>
 800241c:	1c78      	adds	r0, r7, #1
 800241e:	d1f3      	bne.n	8002408 <HAL_UART_Transmit+0xa8>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	0659      	lsls	r1, r3, #25
 8002424:	d5fc      	bpl.n	8002420 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8002426:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002428:	2000      	movs	r0, #0
      huart->gState = HAL_UART_STATE_READY;
 800242a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800242e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002432:	e7cb      	b.n	80023cc <HAL_UART_Transmit+0x6c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002434:	6813      	ldr	r3, [r2, #0]
 8002436:	061b      	lsls	r3, r3, #24
 8002438:	d4c3      	bmi.n	80023c2 <HAL_UART_Transmit+0x62>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800243a:	b12f      	cbz	r7, 8002448 <HAL_UART_Transmit+0xe8>
 800243c:	f7fe fd7c 	bl	8000f38 <HAL_GetTick>
 8002440:	1b40      	subs	r0, r0, r5
 8002442:	4287      	cmp	r7, r0
 8002444:	6822      	ldr	r2, [r4, #0]
 8002446:	d2b7      	bcs.n	80023b8 <HAL_UART_Transmit+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002448:	68d3      	ldr	r3, [r2, #12]
 800244a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800244e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002450:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002452:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002454:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002458:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800245e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8002462:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002466:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800246a:	b003      	add	sp, #12
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246e:	bf00      	nop

08002470 <HAL_UART_Receive>:
{ 
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	460e      	mov	r6, r1
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002474:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8002478:	2920      	cmp	r1, #32
{ 
 800247a:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 800247c:	d132      	bne.n	80024e4 <HAL_UART_Receive+0x74>
    if((pData == NULL ) || (Size == 0)) 
 800247e:	2e00      	cmp	r6, #0
 8002480:	d033      	beq.n	80024ea <HAL_UART_Receive+0x7a>
 8002482:	9201      	str	r2, [sp, #4]
 8002484:	2a00      	cmp	r2, #0
 8002486:	d030      	beq.n	80024ea <HAL_UART_Receive+0x7a>
 8002488:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 800248a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800248e:	2b01      	cmp	r3, #1
 8002490:	4604      	mov	r4, r0
 8002492:	d027      	beq.n	80024e4 <HAL_UART_Receive+0x74>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	2300      	movs	r3, #0
 8002496:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002498:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800249a:	2322      	movs	r3, #34	; 0x22
    __HAL_LOCK(huart);
 800249c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80024a4:	f7fe fd48 	bl	8000f38 <HAL_GetTick>
    huart->RxXferSize = Size; 
 80024a8:	9a01      	ldr	r2, [sp, #4]
 80024aa:	85a2      	strh	r2, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 80024ac:	4605      	mov	r5, r0
    huart->RxXferCount = Size;
 80024ae:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80024b0:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80024b2:	b280      	uxth	r0, r0
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d059      	beq.n	800256c <HAL_UART_Receive+0xfc>
      huart->RxXferCount--;
 80024b8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024ba:	68a3      	ldr	r3, [r4, #8]
      huart->RxXferCount--;
 80024bc:	3a01      	subs	r2, #1
 80024be:	b292      	uxth	r2, r2
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->RxXferCount--;
 80024c4:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024c6:	d01d      	beq.n	8002504 <HAL_UART_Receive+0x94>
 80024c8:	1c79      	adds	r1, r7, #1
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80024ca:	6820      	ldr	r0, [r4, #0]
 80024cc:	d128      	bne.n	8002520 <HAL_UART_Receive+0xb0>
 80024ce:	6802      	ldr	r2, [r0, #0]
 80024d0:	0692      	lsls	r2, r2, #26
 80024d2:	d5fc      	bpl.n	80024ce <HAL_UART_Receive+0x5e>
        if(huart->Init.Parity == UART_PARITY_NONE)
 80024d4:	6923      	ldr	r3, [r4, #16]
 80024d6:	1c72      	adds	r2, r6, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d13d      	bne.n	8002558 <HAL_UART_Receive+0xe8>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024dc:	6843      	ldr	r3, [r0, #4]
 80024de:	7033      	strb	r3, [r6, #0]
 80024e0:	4616      	mov	r6, r2
 80024e2:	e7e5      	b.n	80024b0 <HAL_UART_Receive+0x40>
    return HAL_BUSY;   
 80024e4:	2002      	movs	r0, #2
}
 80024e6:	b003      	add	sp, #12
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
}
 80024ec:	b003      	add	sp, #12
 80024ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	0690      	lsls	r0, r2, #26
 80024f4:	d40c      	bmi.n	8002510 <HAL_UART_Receive+0xa0>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024f6:	2f00      	cmp	r7, #0
 80024f8:	d03f      	beq.n	800257a <HAL_UART_Receive+0x10a>
 80024fa:	f7fe fd1d 	bl	8000f38 <HAL_GetTick>
 80024fe:	1b40      	subs	r0, r0, r5
 8002500:	4287      	cmp	r7, r0
 8002502:	d339      	bcc.n	8002578 <HAL_UART_Receive+0x108>
 8002504:	1c79      	adds	r1, r7, #1
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	d1f2      	bne.n	80024f0 <HAL_UART_Receive+0x80>
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	0692      	lsls	r2, r2, #26
 800250e:	d5fc      	bpl.n	800250a <HAL_UART_Receive+0x9a>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002510:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002512:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002514:	bb32      	cbnz	r2, 8002564 <HAL_UART_Receive+0xf4>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251a:	f826 3b02 	strh.w	r3, [r6], #2
 800251e:	e7c7      	b.n	80024b0 <HAL_UART_Receive+0x40>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002520:	6803      	ldr	r3, [r0, #0]
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	d4d6      	bmi.n	80024d4 <HAL_UART_Receive+0x64>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002526:	b12f      	cbz	r7, 8002534 <HAL_UART_Receive+0xc4>
 8002528:	f7fe fd06 	bl	8000f38 <HAL_GetTick>
 800252c:	1b40      	subs	r0, r0, r5
 800252e:	4287      	cmp	r7, r0
 8002530:	d2ca      	bcs.n	80024c8 <HAL_UART_Receive+0x58>
 8002532:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002534:	68c3      	ldr	r3, [r0, #12]
 8002536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800253a:	60c3      	str	r3, [r0, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	6943      	ldr	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800253e:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002540:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002544:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002546:	6143      	str	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002548:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800254e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002552:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8002556:	e7c6      	b.n	80024e6 <HAL_UART_Receive+0x76>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002558:	6843      	ldr	r3, [r0, #4]
 800255a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255e:	7033      	strb	r3, [r6, #0]
 8002560:	4616      	mov	r6, r2
 8002562:	e7a5      	b.n	80024b0 <HAL_UART_Receive+0x40>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f826 3b01 	strh.w	r3, [r6], #1
 800256a:	e7a1      	b.n	80024b0 <HAL_UART_Receive+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 800256c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800256e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8002572:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8002576:	e7b6      	b.n	80024e6 <HAL_UART_Receive+0x76>
 8002578:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002580:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002582:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002584:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002586:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 800258a:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258c:	615a      	str	r2, [r3, #20]
          return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002590:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8002594:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002598:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800259c:	e7a3      	b.n	80024e6 <HAL_UART_Receive+0x76>
 800259e:	bf00      	nop

080025a0 <ADC_Poll>:
 * an end of conversion after each analog input is converted.
 */

void
ADC_Poll (void)
{
 80025a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  printf ("ADC_Poll():\n");

  while (1)
  {
    // printf("-> Start conversion...\n");
    if ((status = HAL_ADC_Start (&hadc1)) != HAL_OK)
 80025a4:	4f2e      	ldr	r7, [pc, #184]	; (8002660 <ADC_Poll+0xc0>)
  printf ("ADC_Poll():\n");
 80025a6:	482f      	ldr	r0, [pc, #188]	; (8002664 <ADC_Poll+0xc4>)

    // Loop through both channels to print result
    for (j = 0; j < 2; j++)
    {
      // Print the result as decimal and bar graph
      printf ("Got %4d: |", ai[j]);
 80025a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002670 <ADC_Poll+0xd0>
        else
        {
          printf (" ");
        }
      }
      printf ("| ");
 80025ac:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002674 <ADC_Poll+0xd4>
{
 80025b0:	b082      	sub	sp, #8
  printf ("ADC_Poll():\n");
 80025b2:	f001 f96f 	bl	8003894 <puts>
    if ((status = HAL_ADC_Start (&hadc1)) != HAL_OK)
 80025b6:	4638      	mov	r0, r7
 80025b8:	f7fe fd84 	bl	80010c4 <HAL_ADC_Start>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d13e      	bne.n	800263e <ADC_Poll+0x9e>
      if ((status = HAL_ADC_PollForConversion (&hadc1, 10)) != HAL_OK)
 80025c0:	210a      	movs	r1, #10
 80025c2:	4638      	mov	r0, r7
 80025c4:	f7fe fdea 	bl	800119c <HAL_ADC_PollForConversion>
 80025c8:	4606      	mov	r6, r0
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d140      	bne.n	8002650 <ADC_Poll+0xb0>
      ai[j] = (uint16_t)HAL_ADC_GetValue (&hadc1);
 80025ce:	4638      	mov	r0, r7
 80025d0:	f7fe fe36 	bl	8001240 <HAL_ADC_GetValue>
      if ((status = HAL_ADC_PollForConversion (&hadc1, 10)) != HAL_OK)
 80025d4:	210a      	movs	r1, #10
      ai[j] = (uint16_t)HAL_ADC_GetValue (&hadc1);
 80025d6:	f8ad 0004 	strh.w	r0, [sp, #4]
      if ((status = HAL_ADC_PollForConversion (&hadc1, 10)) != HAL_OK)
 80025da:	4638      	mov	r0, r7
 80025dc:	f7fe fdde 	bl	800119c <HAL_ADC_PollForConversion>
 80025e0:	4606      	mov	r6, r0
 80025e2:	bba8      	cbnz	r0, 8002650 <ADC_Poll+0xb0>
      ai[j] = (uint16_t)HAL_ADC_GetValue (&hadc1);
 80025e4:	4638      	mov	r0, r7
 80025e6:	f7fe fe2b 	bl	8001240 <HAL_ADC_GetValue>
 80025ea:	f10d 0804 	add.w	r8, sp, #4
 80025ee:	f8ad 0006 	strh.w	r0, [sp, #6]
      printf ("Got %4d: |", ai[j]);
 80025f2:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 80025f6:	4650      	mov	r0, sl
 80025f8:	4629      	mov	r1, r5
 80025fa:	f001 f8c3 	bl	8003784 <iprintf>
        if (i <= ai[j] * 25 / 4096)
 80025fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002602:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002606:	132d      	asrs	r5, r5, #12
      for (i = 0; i < 25; i++)
 8002608:	2400      	movs	r4, #0
        if (i <= ai[j] * 25 / 4096)
 800260a:	42ac      	cmp	r4, r5
          printf ("*");
 800260c:	f04f 002a 	mov.w	r0, #42	; 0x2a
      for (i = 0; i < 25; i++)
 8002610:	f104 0401 	add.w	r4, r4, #1
          printf (" ");
 8002614:	bf88      	it	hi
 8002616:	2020      	movhi	r0, #32
 8002618:	f001 f8cc 	bl	80037b4 <putchar>
      for (i = 0; i < 25; i++)
 800261c:	2c19      	cmp	r4, #25
 800261e:	d1f4      	bne.n	800260a <ADC_Poll+0x6a>
      printf ("| ");
 8002620:	4648      	mov	r0, r9
 8002622:	f001 f8af 	bl	8003784 <iprintf>
    for (j = 0; j < 2; j++)
 8002626:	b18e      	cbz	r6, 800264c <ADC_Poll+0xac>
    }
    printf ("\r");
 8002628:	200d      	movs	r0, #13
 800262a:	f001 f8c3 	bl	80037b4 <putchar>

    // Loop delay
    HAL_Delay (100);
 800262e:	2064      	movs	r0, #100	; 0x64
 8002630:	f7fe fc88 	bl	8000f44 <HAL_Delay>
    if ((status = HAL_ADC_Start (&hadc1)) != HAL_OK)
 8002634:	4638      	mov	r0, r7
 8002636:	f7fe fd45 	bl	80010c4 <HAL_ADC_Start>
 800263a:	2800      	cmp	r0, #0
 800263c:	d0c0      	beq.n	80025c0 <ADC_Poll+0x20>
      printf ("-> ERROR: HAL_ADC_Start() call failed (status = %d)\n", status);
 800263e:	4601      	mov	r1, r0
 8002640:	4809      	ldr	r0, [pc, #36]	; (8002668 <ADC_Poll+0xc8>)
  }
}
 8002642:	b002      	add	sp, #8
 8002644:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        printf (
 8002648:	f001 b89c 	b.w	8003784 <iprintf>
 800264c:	2601      	movs	r6, #1
 800264e:	e7d0      	b.n	80025f2 <ADC_Poll+0x52>
 8002650:	4806      	ldr	r0, [pc, #24]	; (800266c <ADC_Poll+0xcc>)
 8002652:	4631      	mov	r1, r6
}
 8002654:	b002      	add	sp, #8
 8002656:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        printf (
 800265a:	f001 b893 	b.w	8003784 <iprintf>
 800265e:	bf00      	nop
 8002660:	2000020c 	.word	0x2000020c
 8002664:	08005808 	.word	0x08005808
 8002668:	08005814 	.word	0x08005814
 800266c:	0800584c 	.word	0x0800584c
 8002670:	08005890 	.word	0x08005890
 8002674:	0800589c 	.word	0x0800589c

08002678 <ADC_main>:

#include "Ass-04.h"

int
ADC_main (void)
{
 8002678:	b508      	push	{r3, lr}

  // Welcome
  // printf("\014");
  printf ("\n");
 800267a:	200a      	movs	r0, #10
 800267c:	f001 f89a 	bl	80037b4 <putchar>
  printf ("%s\n", ASS_STRING);
 8002680:	4809      	ldr	r0, [pc, #36]	; (80026a8 <ADC_main+0x30>)
 8002682:	f001 f907 	bl	8003894 <puts>
  printf ("%s\n", VER_STRING);
 8002686:	4809      	ldr	r0, [pc, #36]	; (80026ac <ADC_main+0x34>)
 8002688:	f001 f904 	bl	8003894 <puts>
#ifdef STM32F407xx
  printf ("Running on STM32 platform\n");
 800268c:	4808      	ldr	r0, [pc, #32]	; (80026b0 <ADC_main+0x38>)
 800268e:	f001 f901 	bl	8003894 <puts>
  printf ("Running on WINNT platform\n");
#endif

#ifdef DO_QUESTION_1
  // Call ADC with polling function
  printf("-> Question 1\n");
 8002692:	4808      	ldr	r0, [pc, #32]	; (80026b4 <ADC_main+0x3c>)
 8002694:	f001 f8fe 	bl	8003894 <puts>
#ifdef STM32F407xx
ADC_Poll();
 8002698:	f7ff ff82 	bl	80025a0 <ADC_Poll>
  printf ("-> No code implemented for WINNT at the moment.\n");
#endif
#endif

  // Sign off message
  printf ("Done.\n");
 800269c:	4806      	ldr	r0, [pc, #24]	; (80026b8 <ADC_main+0x40>)
 800269e:	f001 f8f9 	bl	8003894 <puts>
  return 0;

}
 80026a2:	2000      	movs	r0, #0
 80026a4:	bd08      	pop	{r3, pc}
 80026a6:	bf00      	nop
 80026a8:	080058a0 	.word	0x080058a0
 80026ac:	080058c0 	.word	0x080058c0
 80026b0:	080058d8 	.word	0x080058d8
 80026b4:	080058f4 	.word	0x080058f4
 80026b8:	08005904 	.word	0x08005904

080026bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80026bc:	b510      	push	{r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_ADC1_Init+0x78>)
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <MX_ADC1_Init+0x7c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026c2:	491e      	ldr	r1, [pc, #120]	; (800273c <MX_ADC1_Init+0x80>)
  hadc1.Instance = ADC1;
 80026c4:	601a      	str	r2, [r3, #0]
{
 80026c6:	b084      	sub	sp, #16
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 80026cc:	2402      	movs	r4, #2
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026d0:	6299      	str	r1, [r3, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80026d2:	2200      	movs	r2, #0
  hadc1.Init.ScanConvMode = ENABLE;
 80026d4:	2101      	movs	r1, #1
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026d6:	4618      	mov	r0, r3
  hadc1.Init.NbrOfConversion = 2;
 80026d8:	61dc      	str	r4, [r3, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026da:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026dc:	9200      	str	r2, [sp, #0]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026e4:	60da      	str	r2, [r3, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026e6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80026ea:	9203      	str	r2, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 80026ec:	6119      	str	r1, [r3, #16]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80026ee:	6319      	str	r1, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026f0:	6159      	str	r1, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026f2:	f7fe fc39 	bl	8000f68 <HAL_ADC_Init>
 80026f6:	b9d0      	cbnz	r0, 800272e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80026f8:	2407      	movs	r4, #7
  sConfig.Rank = 1;
 80026fa:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026fc:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026fe:	4669      	mov	r1, sp
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002702:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 8002704:	e9cd 4200 	strd	r4, r2, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002708:	f7fe fe3a 	bl	8001380 <HAL_ADC_ConfigChannel>
 800270c:	b960      	cbnz	r0, 8002728 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800270e:	2206      	movs	r2, #6
  sConfig.Rank = 2;
 8002710:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002712:	4669      	mov	r1, sp
 8002714:	4807      	ldr	r0, [pc, #28]	; (8002734 <MX_ADC1_Init+0x78>)
  sConfig.Rank = 2;
 8002716:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800271a:	f7fe fe31 	bl	8001380 <HAL_ADC_ConfigChannel>
 800271e:	b108      	cbz	r0, 8002724 <MX_ADC1_Init+0x68>
  {
    Error_Handler();
 8002720:	f000 fa48 	bl	8002bb4 <Error_Handler>
  }

}
 8002724:	b004      	add	sp, #16
 8002726:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002728:	f000 fa44 	bl	8002bb4 <Error_Handler>
 800272c:	e7ef      	b.n	800270e <MX_ADC1_Init+0x52>
    Error_Handler();
 800272e:	f000 fa41 	bl	8002bb4 <Error_Handler>
 8002732:	e7e1      	b.n	80026f8 <MX_ADC1_Init+0x3c>
 8002734:	2000020c 	.word	0x2000020c
 8002738:	40012000 	.word	0x40012000
 800273c:	0f000001 	.word	0x0f000001

08002740 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002740:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8002742:	6802      	ldr	r2, [r0, #0]
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_ADC_MspInit+0xa4>)
{
 8002746:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 800274a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002750:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002754:	9407      	str	r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8002756:	d001      	beq.n	800275c <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002758:	b008      	add	sp, #32
 800275a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002760:	9401      	str	r4, [sp, #4]
 8002762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream4;
 8002764:	4d20      	ldr	r5, [pc, #128]	; (80027e8 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
 800276c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800276e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002772:	9201      	str	r2, [sp, #4]
 8002774:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	9402      	str	r4, [sp, #8]
 8002778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin;
 8002788:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin;
 800278c:	9303      	str	r3, [sp, #12]
 800278e:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002790:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	4816      	ldr	r0, [pc, #88]	; (80027ec <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002796:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f7ff f87a 	bl	8001890 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800279c:	4814      	ldr	r0, [pc, #80]	; (80027f0 <HAL_ADC_MspInit+0xb0>)
 800279e:	6028      	str	r0, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027ac:	4628      	mov	r0, r5
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027ae:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b0:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027b4:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b8:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027ba:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027be:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027c0:	f7fe fef6 	bl	80015b0 <HAL_DMA_Init>
 80027c4:	b958      	cbnz	r0, 80027de <HAL_ADC_MspInit+0x9e>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80027c8:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80027ca:	4611      	mov	r1, r2
 80027cc:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80027ce:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80027d0:	f7fe fe92 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80027d4:	2012      	movs	r0, #18
 80027d6:	f7fe fec5 	bl	8001564 <HAL_NVIC_EnableIRQ>
}
 80027da:	b008      	add	sp, #32
 80027dc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80027de:	f000 f9e9 	bl	8002bb4 <Error_Handler>
 80027e2:	e7f0      	b.n	80027c6 <HAL_ADC_MspInit+0x86>
 80027e4:	40012000 	.word	0x40012000
 80027e8:	20000254 	.word	0x20000254
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40026470 	.word	0x40026470

080027f4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027f8:	2200      	movs	r2, #0
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <MX_DMA_Init+0x84>)
 80027fc:	9201      	str	r2, [sp, #4]
 80027fe:	6b08      	ldr	r0, [r1, #48]	; 0x30

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <MX_DMA_Init+0x88>)
 8002802:	4c1f      	ldr	r4, [pc, #124]	; (8002880 <MX_DMA_Init+0x8c>)
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002804:	605a      	str	r2, [r3, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002806:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800280a:	6308      	str	r0, [r1, #48]	; 0x30
 800280c:	6b09      	ldr	r1, [r1, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800280e:	61da      	str	r2, [r3, #28]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002810:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002814:	9101      	str	r1, [sp, #4]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002816:	f44f 6080 	mov.w	r0, #1024	; 0x400
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800281a:	2180      	movs	r1, #128	; 0x80
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800281c:	f44f 7600 	mov.w	r6, #512	; 0x200
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002820:	9d01      	ldr	r5, [sp, #4]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8002822:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002824:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002828:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800282c:	601c      	str	r4, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800282e:	6099      	str	r1, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002830:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002834:	2104      	movs	r1, #4
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002836:	2203      	movs	r2, #3
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002838:	6118      	str	r0, [r3, #16]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800283a:	4618      	mov	r0, r3
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800283c:	60de      	str	r6, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800283e:	e9c3 5405 	strd	r5, r4, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002842:	e9c3 1209 	strd	r1, r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002846:	f7fe feb3 	bl	80015b0 <HAL_DMA_Init>
 800284a:	b108      	cbz	r0, 8002850 <MX_DMA_Init+0x5c>
  {
    Error_Handler();
 800284c:	f000 f9b2 	bl	8002bb4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	4611      	mov	r1, r2
 8002854:	2038      	movs	r0, #56	; 0x38
 8002856:	f7fe fe4f 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800285a:	2038      	movs	r0, #56	; 0x38
 800285c:	f7fe fe82 	bl	8001564 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	4611      	mov	r1, r2
 8002864:	203c      	movs	r0, #60	; 0x3c
 8002866:	f7fe fe47 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800286a:	203c      	movs	r0, #60	; 0x3c

}
 800286c:	b002      	add	sp, #8
 800286e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002872:	f7fe be77 	b.w	8001564 <HAL_NVIC_EnableIRQ>
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	200002b4 	.word	0x200002b4
 8002880:	40026410 	.word	0x40026410

08002884 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	2400      	movs	r4, #0
{
 800288a:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002890:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002894:	4a85      	ldr	r2, [pc, #532]	; (8002aac <MX_GPIO_Init+0x228>)
 8002896:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800289a:	6b11      	ldr	r1, [r2, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800289c:	4f84      	ldr	r7, [pc, #528]	; (8002ab0 <MX_GPIO_Init+0x22c>)
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800289e:	4885      	ldr	r0, [pc, #532]	; (8002ab4 <MX_GPIO_Init+0x230>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80028a0:	f8df a21c 	ldr.w	sl, [pc, #540]	; 8002ac0 <MX_GPIO_Init+0x23c>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028a4:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8002ac4 <MX_GPIO_Init+0x240>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8002ac8 <MX_GPIO_Init+0x244>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ac:	f041 0110 	orr.w	r1, r1, #16
 80028b0:	6311      	str	r1, [r2, #48]	; 0x30
 80028b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028b4:	f001 0110 	and.w	r1, r1, #16
 80028b8:	9103      	str	r1, [sp, #12]
 80028ba:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028bc:	9404      	str	r4, [sp, #16]
 80028be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028c0:	f041 0104 	orr.w	r1, r1, #4
 80028c4:	6311      	str	r1, [r2, #48]	; 0x30
 80028c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028c8:	f001 0104 	and.w	r1, r1, #4
 80028cc:	9104      	str	r1, [sp, #16]
 80028ce:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d0:	9405      	str	r4, [sp, #20]
 80028d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80028d8:	6311      	str	r1, [r2, #48]	; 0x30
 80028da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028dc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80028e0:	9105      	str	r1, [sp, #20]
 80028e2:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	9406      	str	r4, [sp, #24]
 80028e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028e8:	f041 0101 	orr.w	r1, r1, #1
 80028ec:	6311      	str	r1, [r2, #48]	; 0x30
 80028ee:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028f0:	f001 0101 	and.w	r1, r1, #1
 80028f4:	9106      	str	r1, [sp, #24]
 80028f6:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f8:	9407      	str	r4, [sp, #28]
 80028fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028fc:	f041 0102 	orr.w	r1, r1, #2
 8002900:	6311      	str	r1, [r2, #48]	; 0x30
 8002902:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002904:	f001 0102 	and.w	r1, r1, #2
 8002908:	9107      	str	r1, [sp, #28]
 800290a:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290c:	9408      	str	r4, [sp, #32]
 800290e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002910:	f041 0108 	orr.w	r1, r1, #8
 8002914:	6311      	str	r1, [r2, #48]	; 0x30
 8002916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002918:	f002 0208 	and.w	r2, r2, #8
 800291c:	9208      	str	r2, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800291e:	2108      	movs	r1, #8
 8002920:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002922:	9d08      	ldr	r5, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002924:	f7ff f8d6 	bl	8001ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002928:	2201      	movs	r2, #1
 800292a:	4638      	mov	r0, r7
 800292c:	4611      	mov	r1, r2
 800292e:	f7ff f8d1 	bl	8001ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002932:	4622      	mov	r2, r4
 8002934:	4650      	mov	r0, sl
 8002936:	f24f 0110 	movw	r1, #61456	; 0xf010
 800293a:	f7ff f8cb 	bl	8001ad4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002940:	f04f 0b08 	mov.w	fp, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002944:	a909      	add	r1, sp, #36	; 0x24
 8002946:	485b      	ldr	r0, [pc, #364]	; (8002ab4 <MX_GPIO_Init+0x230>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002948:	e9cd b509 	strd	fp, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002950:	f7fe ff9e 	bl	8001890 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002954:	a909      	add	r1, sp, #36	; 0x24
 8002956:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002962:	f7fe ff95 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002966:	2205      	movs	r2, #5
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002968:	a909      	add	r1, sp, #36	; 0x24
 800296a:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800296c:	920d      	str	r2, [sp, #52]	; 0x34
 800296e:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002970:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800297a:	f7fe ff89 	bl	8001890 <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800297e:	a909      	add	r1, sp, #36	; 0x24
 8002980:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002982:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <MX_GPIO_Init+0x234>)
 8002984:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = B1_Pin;
 8002986:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800298a:	f7fe ff81 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = JOY_A_Pin;
 800298e:	2310      	movs	r3, #16
  HAL_GPIO_Init(JOY_A_GPIO_Port, &GPIO_InitStruct);
 8002990:	a909      	add	r1, sp, #36	; 0x24
 8002992:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = JOY_A_Pin;
 8002994:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002996:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(JOY_A_GPIO_Port, &GPIO_InitStruct);
 800299a:	f7fe ff79 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800299e:	9a01      	ldr	r2, [sp, #4]
 80029a0:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80029a2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80029a4:	2220      	movs	r2, #32
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80029a6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80029a8:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80029aa:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f7fe ff6c 	bl	8001890 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80029b8:	a909      	add	r1, sp, #36	; 0x24
 80029ba:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80029c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f7fe ff64 	bl	8001890 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c8:	9a01      	ldr	r2, [sp, #4]
 80029ca:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80029cc:	a909      	add	r1, sp, #36	; 0x24
 80029ce:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f7fe ff58 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029e0:	4a36      	ldr	r2, [pc, #216]	; (8002abc <MX_GPIO_Init+0x238>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e2:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = JOY_C_Pin;
 80029e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(JOY_C_GPIO_Port, &GPIO_InitStruct);
 80029e8:	a909      	add	r1, sp, #36	; 0x24
 80029ea:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029ec:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  HAL_GPIO_Init(JOY_C_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f7fe ff4e 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f4:	a909      	add	r1, sp, #36	; 0x24
 80029f6:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80029f8:	f24f 0210 	movw	r2, #61456	; 0xf010
 80029fc:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a04:	f7fe ff44 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_D_Pin|JOY_CTR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a08:	a909      	add	r1, sp, #36	; 0x24
 8002a0a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = JOY_D_Pin|JOY_CTR_Pin;
 8002a0c:	22c0      	movs	r2, #192	; 0xc0
 8002a0e:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a10:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a14:	f7fe ff3c 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002a18:	a909      	add	r1, sp, #36	; 0x24
 8002a1a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a20:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002a26:	f7fe ff33 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002a2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2e:	4640      	mov	r0, r8
 8002a30:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a32:	220a      	movs	r2, #10
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002a34:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a36:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f7fe ff27 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a42:	4638      	mov	r0, r7
 8002a44:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a46:	2206      	movs	r2, #6
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a48:	f44f 57a0 	mov.w	r7, #5120	; 0x1400
 8002a4c:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a4e:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a56:	f7fe ff1b 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	4650      	mov	r0, sl
 8002a5c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002a5e:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a60:	e9cd 2409 	strd	r2, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	940b      	str	r4, [sp, #44]	; 0x2c

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002a66:	f44f 7710 	mov.w	r7, #576	; 0x240
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f7fe ff11 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a6e:	2212      	movs	r2, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	4648      	mov	r0, r9
 8002a72:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a74:	e9cd 7209 	strd	r7, r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a7c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f7fe ff06 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_GPIO_Init+0x234>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002a86:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <MX_GPIO_Init+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002a8c:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002a90:	f7fe fefe 	bl	8001890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a94:	4622      	mov	r2, r4
 8002a96:	4621      	mov	r1, r4
 8002a98:	2028      	movs	r0, #40	; 0x28
 8002a9a:	f7fe fd2d 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a9e:	2028      	movs	r0, #40	; 0x28
 8002aa0:	f7fe fd60 	bl	8001564 <HAL_NVIC_EnableIRQ>

}
 8002aa4:	b00f      	add	sp, #60	; 0x3c
 8002aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	10120000 	.word	0x10120000
 8002abc:	10210000 	.word	0x10210000
 8002ac0:	40020c00 	.word	0x40020c00
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400

08002acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002acc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ace:	2400      	movs	r4, #0
{
 8002ad0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8002ad6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ada:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002ade:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <SystemClock_Config+0x90>)
 8002ae4:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae6:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002af0:	6411      	str	r1, [r2, #64]	; 0x40
 8002af2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002af4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002af8:	9201      	str	r2, [sp, #4]
 8002afa:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afc:	9402      	str	r4, [sp, #8]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0c:	9302      	str	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b0e:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b18:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b1c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b1e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b20:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b22:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b26:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b28:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b2a:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b2c:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b2e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b30:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b32:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b34:	9512      	str	r5, [sp, #72]	; 0x48
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b36:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b38:	f7fe ffde 	bl	8001af8 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b3c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b44:	a803      	add	r0, sp, #12
 8002b46:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b48:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b4a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b4c:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b52:	f7ff f9c1 	bl	8001ed8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002b56:	b014      	add	sp, #80	; 0x50
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40007000 	.word	0x40007000

08002b64 <main>:
  setvbuf(stdin, NULL, _IONBF, 0);
 8002b64:	4c12      	ldr	r4, [pc, #72]	; (8002bb0 <main+0x4c>)
{
 8002b66:	b508      	push	{r3, lr}
  HAL_Init();
 8002b68:	f7fe f9c0 	bl	8000eec <HAL_Init>
  SystemClock_Config();
 8002b6c:	f7ff ffae 	bl	8002acc <SystemClock_Config>
  MX_GPIO_Init();
 8002b70:	f7ff fe88 	bl	8002884 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b74:	f7ff fe3e 	bl	80027f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b78:	f000 f8d4 	bl	8002d24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002b7c:	f7ff fd9e 	bl	80026bc <MX_ADC1_Init>
  setvbuf(stdin, NULL, _IONBF, 0);
 8002b80:	6822      	ldr	r2, [r4, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	4619      	mov	r1, r3
 8002b86:	6850      	ldr	r0, [r2, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f000 fe8b 	bl	80038a4 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8002b8e:	6822      	ldr	r2, [r4, #0]
 8002b90:	2300      	movs	r3, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	6890      	ldr	r0, [r2, #8]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f000 fe84 	bl	80038a4 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8002b9c:	6822      	ldr	r2, [r4, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	68d0      	ldr	r0, [r2, #12]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f000 fe7d 	bl	80038a4 <setvbuf>
  ADC_main();
 8002baa:	f7ff fd65 	bl	8002678 <ADC_main>
 8002bae:	e7fe      	b.n	8002bae <main+0x4a>
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop

08002bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_MspInit+0x38>)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	9100      	str	r1, [sp, #0]
 8002bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	9101      	str	r1, [sp, #4]
 8002bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002be6:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be8:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bea:	f7fe bc73 	b.w	80014d4 <HAL_NVIC_SetPriorityGrouping>
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop

08002bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf8:	e7fe      	b.n	8002bf8 <HardFault_Handler>
 8002bfa:	bf00      	nop

08002bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler>
 8002bfe:	bf00      	nop

08002c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c00:	e7fe      	b.n	8002c00 <BusFault_Handler>
 8002c02:	bf00      	nop

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	e7fe      	b.n	8002c04 <UsageFault_Handler>
 8002c06:	bf00      	nop

08002c08 <SVC_Handler>:
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop

08002c0c <DebugMon_Handler>:
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop

08002c10 <PendSV_Handler>:
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c14:	f7fe b984 	b.w	8000f20 <HAL_IncTick>

08002c18 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c18:	4801      	ldr	r0, [pc, #4]	; (8002c20 <ADC_IRQHandler+0x8>)
 8002c1a:	f7fe bb1b 	b.w	8001254 <HAL_ADC_IRQHandler>
 8002c1e:	bf00      	nop
 8002c20:	2000020c 	.word	0x2000020c

08002c24 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002c24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c28:	f7fe bf5a 	b.w	8001ae0 <HAL_GPIO_EXTI_IRQHandler>

08002c2c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8002c2c:	4801      	ldr	r0, [pc, #4]	; (8002c34 <DMA2_Stream0_IRQHandler+0x8>)
 8002c2e:	f7fe bd59 	b.w	80016e4 <HAL_DMA_IRQHandler>
 8002c32:	bf00      	nop
 8002c34:	200002b4 	.word	0x200002b4

08002c38 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c38:	4801      	ldr	r0, [pc, #4]	; (8002c40 <DMA2_Stream4_IRQHandler+0x8>)
 8002c3a:	f7fe bd53 	b.w	80016e4 <HAL_DMA_IRQHandler>
 8002c3e:	bf00      	nop
 8002c40:	20000254 	.word	0x20000254

08002c44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002c44:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c46:	1e16      	subs	r6, r2, #0
 8002c48:	dd07      	ble.n	8002c5a <_read+0x16>
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002c4e:	f000 f8cf 	bl	8002df0 <__io_getchar>
 8002c52:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	42a5      	cmp	r5, r4
 8002c58:	d1f9      	bne.n	8002c4e <_read+0xa>
	}

return len;
}
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
 8002c5e:	bf00      	nop

08002c60 <_write>:

int _write(int file, char *ptr, int len)
{
 8002c60:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	1e16      	subs	r6, r2, #0
 8002c64:	dd07      	ble.n	8002c76 <_write+0x16>
 8002c66:	460c      	mov	r4, r1
 8002c68:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002c6a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002c6e:	f000 f8ad 	bl	8002dcc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c72:	42ac      	cmp	r4, r5
 8002c74:	d1f9      	bne.n	8002c6a <_write+0xa>
	}
	return len;
}
 8002c76:	4630      	mov	r0, r6
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	bf00      	nop

08002c7c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c7c:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <_sbrk+0x34>)
{
 8002c7e:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	b133      	cbz	r3, 8002c92 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002c84:	4418      	add	r0, r3
 8002c86:	4669      	mov	r1, sp
 8002c88:	4288      	cmp	r0, r1
 8002c8a:	d808      	bhi.n	8002c9e <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002c8c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <_sbrk+0x38>)
 8002c94:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002c96:	4418      	add	r0, r3
 8002c98:	4669      	mov	r1, sp
 8002c9a:	4288      	cmp	r0, r1
 8002c9c:	d9f6      	bls.n	8002c8c <_sbrk+0x10>
		errno = ENOMEM;
 8002c9e:	f000 f8e3 	bl	8002e68 <__errno>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	bd08      	pop	{r3, pc}
 8002cae:	bf00      	nop
 8002cb0:	200001f8 	.word	0x200001f8
 8002cb4:	20000358 	.word	0x20000358

08002cb8 <_close>:

int _close(int file)
{
	return -1;
}
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc4:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002ccc:	2001      	movs	r0, #1
 8002cce:	4770      	bx	lr

08002cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	4770      	bx	lr

08002cd4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd4:	4910      	ldr	r1, [pc, #64]	; (8002d18 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cdc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8002ce0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002ce6:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ce8:	4c0d      	ldr	r4, [pc, #52]	; (8002d20 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8002cea:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002cf2:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cfe:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8002d00:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d02:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d04:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d0c:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8002d0e:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d10:	608c      	str	r4, [r1, #8]
#endif
}
 8002d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	24003010 	.word	0x24003010

08002d24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <MX_USART2_UART_Init+0x30>)
 8002d26:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <MX_USART2_UART_Init+0x34>)
{
 8002d28:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d2a:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8002d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d2e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d34:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8002d36:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d38:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d3a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d40:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d44:	f7ff f982 	bl	800204c <HAL_UART_Init>
 8002d48:	b900      	cbnz	r0, 8002d4c <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8002d4a:	bd10      	pop	{r4, pc}
 8002d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002d50:	f7ff bf30 	b.w	8002bb4 <Error_Handler>
 8002d54:	20000314 	.word	0x20000314
 8002d58:	40004400 	.word	0x40004400

08002d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8002d5e:	6801      	ldr	r1, [r0, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_UART_MspInit+0x68>)
{
 8002d62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8002d66:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002d6c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002d70:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8002d72:	d001      	beq.n	8002d78 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d74:	b008      	add	sp, #32
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d78:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	4811      	ldr	r0, [pc, #68]	; (8002dc8 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d82:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002d86:	6411      	str	r1, [r2, #64]	; 0x40
 8002d88:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002d8a:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8002d8e:	9101      	str	r1, [sp, #4]
 8002d90:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002da4:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002da8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002daa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dac:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db0:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db4:	e9cd 5404 	strd	r5, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002db8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f7fe fd68 	bl	8001890 <HAL_GPIO_Init>
}
 8002dc0:	b008      	add	sp, #32
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	40020000 	.word	0x40020000

08002dcc <__io_putchar>:

// STEPIEN: Redirect output to serial port
//          Uses blocking write to USART
//
int __io_putchar(int ch)
{
 8002dcc:	b500      	push	{lr}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&huart2, (uint8_t *)(&ch), 1, HAL_MAX_DELAY);
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
{
 8002dd6:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart2, (uint8_t *)(&ch), 1, HAL_MAX_DELAY);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4803      	ldr	r0, [pc, #12]	; (8002dec <__io_putchar+0x20>)
 8002dde:	f7ff fabf 	bl	8002360 <HAL_UART_Transmit>
  return 1;
}
 8002de2:	2001      	movs	r0, #1
 8002de4:	b003      	add	sp, #12
 8002de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dea:	bf00      	nop
 8002dec:	20000314 	.word	0x20000314

08002df0 <__io_getchar>:

// STEPIEN: Redirect input from serial port
//          Uses blocking read from USART
//
int __io_getchar(void)
{
 8002df0:	b500      	push	{lr}
 8002df2:	b083      	sub	sp, #12
  uint8_t ch;
  HAL_UART_Receive(&huart2, (uint8_t *)(&ch), 1, HAL_MAX_DELAY);
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f10d 0107 	add.w	r1, sp, #7
 8002dfe:	4804      	ldr	r0, [pc, #16]	; (8002e10 <__io_getchar+0x20>)
 8002e00:	f7ff fb36 	bl	8002470 <HAL_UART_Receive>
  return (int)ch;
}
 8002e04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002e08:	b003      	add	sp, #12
 8002e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e0e:	bf00      	nop
 8002e10:	20000314 	.word	0x20000314

08002e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e1a:	e003      	b.n	8002e24 <LoopCopyDataInit>

08002e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e22:	3104      	adds	r1, #4

08002e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e24:	480b      	ldr	r0, [pc, #44]	; (8002e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e2c:	d3f6      	bcc.n	8002e1c <CopyDataInit>
  ldr  r2, =_sbss
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e30:	e002      	b.n	8002e38 <LoopFillZerobss>

08002e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e34:	f842 3b04 	str.w	r3, [r2], #4

08002e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e3c:	d3f9      	bcc.n	8002e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e3e:	f7ff ff49 	bl	8002cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e42:	f000 f817 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e46:	f7ff fe8d 	bl	8002b64 <main>
  bx  lr    
 8002e4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e50:	08005be0 	.word	0x08005be0
  ldr  r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e58:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002e5c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002e60:	20000358 	.word	0x20000358

08002e64 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e64:	e7fe      	b.n	8002e64 <CAN1_RX0_IRQHandler>
	...

08002e68 <__errno>:
 8002e68:	4b01      	ldr	r3, [pc, #4]	; (8002e70 <__errno+0x8>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	2000000c 	.word	0x2000000c

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	4e0d      	ldr	r6, [pc, #52]	; (8002eac <__libc_init_array+0x38>)
 8002e78:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7a:	1ba4      	subs	r4, r4, r6
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	2500      	movs	r5, #0
 8002e80:	42a5      	cmp	r5, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	4e0b      	ldr	r6, [pc, #44]	; (8002eb4 <__libc_init_array+0x40>)
 8002e86:	4c0c      	ldr	r4, [pc, #48]	; (8002eb8 <__libc_init_array+0x44>)
 8002e88:	f002 fca2 	bl	80057d0 <_init>
 8002e8c:	1ba4      	subs	r4, r4, r6
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	2500      	movs	r5, #0
 8002e92:	42a5      	cmp	r5, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e9c:	4798      	blx	r3
 8002e9e:	3501      	adds	r5, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea6:	4798      	blx	r3
 8002ea8:	3501      	adds	r5, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08005bd8 	.word	0x08005bd8
 8002eb0:	08005bd8 	.word	0x08005bd8
 8002eb4:	08005bd8 	.word	0x08005bd8
 8002eb8:	08005bdc 	.word	0x08005bdc

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <__cvt>:
 8002ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed0:	ec55 4b10 	vmov	r4, r5, d0
 8002ed4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002ed6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	460e      	mov	r6, r1
 8002ede:	4691      	mov	r9, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	bfb8      	it	lt
 8002ee4:	4622      	movlt	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	f027 0720 	bic.w	r7, r7, #32
 8002eec:	bfbb      	ittet	lt
 8002eee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002ef2:	461d      	movlt	r5, r3
 8002ef4:	2300      	movge	r3, #0
 8002ef6:	232d      	movlt	r3, #45	; 0x2d
 8002ef8:	bfb8      	it	lt
 8002efa:	4614      	movlt	r4, r2
 8002efc:	2f46      	cmp	r7, #70	; 0x46
 8002efe:	700b      	strb	r3, [r1, #0]
 8002f00:	d004      	beq.n	8002f0c <__cvt+0x40>
 8002f02:	2f45      	cmp	r7, #69	; 0x45
 8002f04:	d100      	bne.n	8002f08 <__cvt+0x3c>
 8002f06:	3601      	adds	r6, #1
 8002f08:	2102      	movs	r1, #2
 8002f0a:	e000      	b.n	8002f0e <__cvt+0x42>
 8002f0c:	2103      	movs	r1, #3
 8002f0e:	ab03      	add	r3, sp, #12
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	ab02      	add	r3, sp, #8
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4632      	mov	r2, r6
 8002f18:	4653      	mov	r3, sl
 8002f1a:	ec45 4b10 	vmov	d0, r4, r5
 8002f1e:	f000 febb 	bl	8003c98 <_dtoa_r>
 8002f22:	2f47      	cmp	r7, #71	; 0x47
 8002f24:	4680      	mov	r8, r0
 8002f26:	d102      	bne.n	8002f2e <__cvt+0x62>
 8002f28:	f019 0f01 	tst.w	r9, #1
 8002f2c:	d026      	beq.n	8002f7c <__cvt+0xb0>
 8002f2e:	2f46      	cmp	r7, #70	; 0x46
 8002f30:	eb08 0906 	add.w	r9, r8, r6
 8002f34:	d111      	bne.n	8002f5a <__cvt+0x8e>
 8002f36:	f898 3000 	ldrb.w	r3, [r8]
 8002f3a:	2b30      	cmp	r3, #48	; 0x30
 8002f3c:	d10a      	bne.n	8002f54 <__cvt+0x88>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2300      	movs	r3, #0
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f7fd fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f4a:	b918      	cbnz	r0, 8002f54 <__cvt+0x88>
 8002f4c:	f1c6 0601 	rsb	r6, r6, #1
 8002f50:	f8ca 6000 	str.w	r6, [sl]
 8002f54:	f8da 3000 	ldr.w	r3, [sl]
 8002f58:	4499      	add	r9, r3
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	4620      	mov	r0, r4
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7fd fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f66:	b938      	cbnz	r0, 8002f78 <__cvt+0xac>
 8002f68:	2230      	movs	r2, #48	; 0x30
 8002f6a:	9b03      	ldr	r3, [sp, #12]
 8002f6c:	454b      	cmp	r3, r9
 8002f6e:	d205      	bcs.n	8002f7c <__cvt+0xb0>
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	9103      	str	r1, [sp, #12]
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e7f8      	b.n	8002f6a <__cvt+0x9e>
 8002f78:	f8cd 900c 	str.w	r9, [sp, #12]
 8002f7c:	9b03      	ldr	r3, [sp, #12]
 8002f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f80:	eba3 0308 	sub.w	r3, r3, r8
 8002f84:	4640      	mov	r0, r8
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	b004      	add	sp, #16
 8002f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002f8e <__exponent>:
 8002f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f90:	2900      	cmp	r1, #0
 8002f92:	4604      	mov	r4, r0
 8002f94:	bfba      	itte	lt
 8002f96:	4249      	neglt	r1, r1
 8002f98:	232d      	movlt	r3, #45	; 0x2d
 8002f9a:	232b      	movge	r3, #43	; 0x2b
 8002f9c:	2909      	cmp	r1, #9
 8002f9e:	f804 2b02 	strb.w	r2, [r4], #2
 8002fa2:	7043      	strb	r3, [r0, #1]
 8002fa4:	dd20      	ble.n	8002fe8 <__exponent+0x5a>
 8002fa6:	f10d 0307 	add.w	r3, sp, #7
 8002faa:	461f      	mov	r7, r3
 8002fac:	260a      	movs	r6, #10
 8002fae:	fb91 f5f6 	sdiv	r5, r1, r6
 8002fb2:	fb06 1115 	mls	r1, r6, r5, r1
 8002fb6:	3130      	adds	r1, #48	; 0x30
 8002fb8:	2d09      	cmp	r5, #9
 8002fba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002fbe:	f103 32ff 	add.w	r2, r3, #4294967295
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	dc09      	bgt.n	8002fda <__exponent+0x4c>
 8002fc6:	3130      	adds	r1, #48	; 0x30
 8002fc8:	3b02      	subs	r3, #2
 8002fca:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002fce:	42bb      	cmp	r3, r7
 8002fd0:	4622      	mov	r2, r4
 8002fd2:	d304      	bcc.n	8002fde <__exponent+0x50>
 8002fd4:	1a10      	subs	r0, r2, r0
 8002fd6:	b003      	add	sp, #12
 8002fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fda:	4613      	mov	r3, r2
 8002fdc:	e7e7      	b.n	8002fae <__exponent+0x20>
 8002fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fe2:	f804 2b01 	strb.w	r2, [r4], #1
 8002fe6:	e7f2      	b.n	8002fce <__exponent+0x40>
 8002fe8:	2330      	movs	r3, #48	; 0x30
 8002fea:	4419      	add	r1, r3
 8002fec:	7083      	strb	r3, [r0, #2]
 8002fee:	1d02      	adds	r2, r0, #4
 8002ff0:	70c1      	strb	r1, [r0, #3]
 8002ff2:	e7ef      	b.n	8002fd4 <__exponent+0x46>

08002ff4 <_printf_float>:
 8002ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff8:	b08d      	sub	sp, #52	; 0x34
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003000:	4616      	mov	r6, r2
 8003002:	461f      	mov	r7, r3
 8003004:	4605      	mov	r5, r0
 8003006:	f001 fd79 	bl	8004afc <_localeconv_r>
 800300a:	6803      	ldr	r3, [r0, #0]
 800300c:	9304      	str	r3, [sp, #16]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd f8de 	bl	80001d0 <strlen>
 8003014:	2300      	movs	r3, #0
 8003016:	930a      	str	r3, [sp, #40]	; 0x28
 8003018:	f8d8 3000 	ldr.w	r3, [r8]
 800301c:	9005      	str	r0, [sp, #20]
 800301e:	3307      	adds	r3, #7
 8003020:	f023 0307 	bic.w	r3, r3, #7
 8003024:	f103 0208 	add.w	r2, r3, #8
 8003028:	f894 a018 	ldrb.w	sl, [r4, #24]
 800302c:	f8d4 b000 	ldr.w	fp, [r4]
 8003030:	f8c8 2000 	str.w	r2, [r8]
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800303c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003040:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003044:	9307      	str	r3, [sp, #28]
 8003046:	f8cd 8018 	str.w	r8, [sp, #24]
 800304a:	f04f 32ff 	mov.w	r2, #4294967295
 800304e:	4ba7      	ldr	r3, [pc, #668]	; (80032ec <_printf_float+0x2f8>)
 8003050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003054:	f7fd fd6a 	bl	8000b2c <__aeabi_dcmpun>
 8003058:	bb70      	cbnz	r0, 80030b8 <_printf_float+0xc4>
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	4ba3      	ldr	r3, [pc, #652]	; (80032ec <_printf_float+0x2f8>)
 8003060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003064:	f7fd fd44 	bl	8000af0 <__aeabi_dcmple>
 8003068:	bb30      	cbnz	r0, 80030b8 <_printf_float+0xc4>
 800306a:	2200      	movs	r2, #0
 800306c:	2300      	movs	r3, #0
 800306e:	4640      	mov	r0, r8
 8003070:	4649      	mov	r1, r9
 8003072:	f7fd fd33 	bl	8000adc <__aeabi_dcmplt>
 8003076:	b110      	cbz	r0, 800307e <_printf_float+0x8a>
 8003078:	232d      	movs	r3, #45	; 0x2d
 800307a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800307e:	4a9c      	ldr	r2, [pc, #624]	; (80032f0 <_printf_float+0x2fc>)
 8003080:	4b9c      	ldr	r3, [pc, #624]	; (80032f4 <_printf_float+0x300>)
 8003082:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003086:	bf8c      	ite	hi
 8003088:	4690      	movhi	r8, r2
 800308a:	4698      	movls	r8, r3
 800308c:	2303      	movs	r3, #3
 800308e:	f02b 0204 	bic.w	r2, fp, #4
 8003092:	6123      	str	r3, [r4, #16]
 8003094:	6022      	str	r2, [r4, #0]
 8003096:	f04f 0900 	mov.w	r9, #0
 800309a:	9700      	str	r7, [sp, #0]
 800309c:	4633      	mov	r3, r6
 800309e:	aa0b      	add	r2, sp, #44	; 0x2c
 80030a0:	4621      	mov	r1, r4
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 f9e6 	bl	8003474 <_printf_common>
 80030a8:	3001      	adds	r0, #1
 80030aa:	f040 808d 	bne.w	80031c8 <_printf_float+0x1d4>
 80030ae:	f04f 30ff 	mov.w	r0, #4294967295
 80030b2:	b00d      	add	sp, #52	; 0x34
 80030b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	4640      	mov	r0, r8
 80030be:	4649      	mov	r1, r9
 80030c0:	f7fd fd34 	bl	8000b2c <__aeabi_dcmpun>
 80030c4:	b110      	cbz	r0, 80030cc <_printf_float+0xd8>
 80030c6:	4a8c      	ldr	r2, [pc, #560]	; (80032f8 <_printf_float+0x304>)
 80030c8:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <_printf_float+0x308>)
 80030ca:	e7da      	b.n	8003082 <_printf_float+0x8e>
 80030cc:	6861      	ldr	r1, [r4, #4]
 80030ce:	1c4b      	adds	r3, r1, #1
 80030d0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80030d4:	a80a      	add	r0, sp, #40	; 0x28
 80030d6:	d13e      	bne.n	8003156 <_printf_float+0x162>
 80030d8:	2306      	movs	r3, #6
 80030da:	6063      	str	r3, [r4, #4]
 80030dc:	2300      	movs	r3, #0
 80030de:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80030e2:	ab09      	add	r3, sp, #36	; 0x24
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	ec49 8b10 	vmov	d0, r8, r9
 80030ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80030ee:	6022      	str	r2, [r4, #0]
 80030f0:	f8cd a004 	str.w	sl, [sp, #4]
 80030f4:	6861      	ldr	r1, [r4, #4]
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7ff fee8 	bl	8002ecc <__cvt>
 80030fc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003100:	2b47      	cmp	r3, #71	; 0x47
 8003102:	4680      	mov	r8, r0
 8003104:	d109      	bne.n	800311a <_printf_float+0x126>
 8003106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003108:	1cd8      	adds	r0, r3, #3
 800310a:	db02      	blt.n	8003112 <_printf_float+0x11e>
 800310c:	6862      	ldr	r2, [r4, #4]
 800310e:	4293      	cmp	r3, r2
 8003110:	dd47      	ble.n	80031a2 <_printf_float+0x1ae>
 8003112:	f1aa 0a02 	sub.w	sl, sl, #2
 8003116:	fa5f fa8a 	uxtb.w	sl, sl
 800311a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800311e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003120:	d824      	bhi.n	800316c <_printf_float+0x178>
 8003122:	3901      	subs	r1, #1
 8003124:	4652      	mov	r2, sl
 8003126:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800312a:	9109      	str	r1, [sp, #36]	; 0x24
 800312c:	f7ff ff2f 	bl	8002f8e <__exponent>
 8003130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003132:	1813      	adds	r3, r2, r0
 8003134:	2a01      	cmp	r2, #1
 8003136:	4681      	mov	r9, r0
 8003138:	6123      	str	r3, [r4, #16]
 800313a:	dc02      	bgt.n	8003142 <_printf_float+0x14e>
 800313c:	6822      	ldr	r2, [r4, #0]
 800313e:	07d1      	lsls	r1, r2, #31
 8003140:	d501      	bpl.n	8003146 <_printf_float+0x152>
 8003142:	3301      	adds	r3, #1
 8003144:	6123      	str	r3, [r4, #16]
 8003146:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0a5      	beq.n	800309a <_printf_float+0xa6>
 800314e:	232d      	movs	r3, #45	; 0x2d
 8003150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003154:	e7a1      	b.n	800309a <_printf_float+0xa6>
 8003156:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800315a:	f000 8177 	beq.w	800344c <_printf_float+0x458>
 800315e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003162:	d1bb      	bne.n	80030dc <_printf_float+0xe8>
 8003164:	2900      	cmp	r1, #0
 8003166:	d1b9      	bne.n	80030dc <_printf_float+0xe8>
 8003168:	2301      	movs	r3, #1
 800316a:	e7b6      	b.n	80030da <_printf_float+0xe6>
 800316c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003170:	d119      	bne.n	80031a6 <_printf_float+0x1b2>
 8003172:	2900      	cmp	r1, #0
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	dd0c      	ble.n	8003192 <_printf_float+0x19e>
 8003178:	6121      	str	r1, [r4, #16]
 800317a:	b913      	cbnz	r3, 8003182 <_printf_float+0x18e>
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	07d2      	lsls	r2, r2, #31
 8003180:	d502      	bpl.n	8003188 <_printf_float+0x194>
 8003182:	3301      	adds	r3, #1
 8003184:	440b      	add	r3, r1
 8003186:	6123      	str	r3, [r4, #16]
 8003188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800318a:	65a3      	str	r3, [r4, #88]	; 0x58
 800318c:	f04f 0900 	mov.w	r9, #0
 8003190:	e7d9      	b.n	8003146 <_printf_float+0x152>
 8003192:	b913      	cbnz	r3, 800319a <_printf_float+0x1a6>
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	07d0      	lsls	r0, r2, #31
 8003198:	d501      	bpl.n	800319e <_printf_float+0x1aa>
 800319a:	3302      	adds	r3, #2
 800319c:	e7f3      	b.n	8003186 <_printf_float+0x192>
 800319e:	2301      	movs	r3, #1
 80031a0:	e7f1      	b.n	8003186 <_printf_float+0x192>
 80031a2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80031a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80031aa:	4293      	cmp	r3, r2
 80031ac:	db05      	blt.n	80031ba <_printf_float+0x1c6>
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	6123      	str	r3, [r4, #16]
 80031b2:	07d1      	lsls	r1, r2, #31
 80031b4:	d5e8      	bpl.n	8003188 <_printf_float+0x194>
 80031b6:	3301      	adds	r3, #1
 80031b8:	e7e5      	b.n	8003186 <_printf_float+0x192>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bfd4      	ite	le
 80031be:	f1c3 0302 	rsble	r3, r3, #2
 80031c2:	2301      	movgt	r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	e7de      	b.n	8003186 <_printf_float+0x192>
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	055a      	lsls	r2, r3, #21
 80031cc:	d407      	bmi.n	80031de <_printf_float+0x1ea>
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	4642      	mov	r2, r8
 80031d2:	4631      	mov	r1, r6
 80031d4:	4628      	mov	r0, r5
 80031d6:	47b8      	blx	r7
 80031d8:	3001      	adds	r0, #1
 80031da:	d12b      	bne.n	8003234 <_printf_float+0x240>
 80031dc:	e767      	b.n	80030ae <_printf_float+0xba>
 80031de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80031e2:	f240 80dc 	bls.w	800339e <_printf_float+0x3aa>
 80031e6:	2200      	movs	r2, #0
 80031e8:	2300      	movs	r3, #0
 80031ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031ee:	f7fd fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d033      	beq.n	800325e <_printf_float+0x26a>
 80031f6:	2301      	movs	r3, #1
 80031f8:	4a41      	ldr	r2, [pc, #260]	; (8003300 <_printf_float+0x30c>)
 80031fa:	4631      	mov	r1, r6
 80031fc:	4628      	mov	r0, r5
 80031fe:	47b8      	blx	r7
 8003200:	3001      	adds	r0, #1
 8003202:	f43f af54 	beq.w	80030ae <_printf_float+0xba>
 8003206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800320a:	429a      	cmp	r2, r3
 800320c:	db02      	blt.n	8003214 <_printf_float+0x220>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	07d8      	lsls	r0, r3, #31
 8003212:	d50f      	bpl.n	8003234 <_printf_float+0x240>
 8003214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003218:	4631      	mov	r1, r6
 800321a:	4628      	mov	r0, r5
 800321c:	47b8      	blx	r7
 800321e:	3001      	adds	r0, #1
 8003220:	f43f af45 	beq.w	80030ae <_printf_float+0xba>
 8003224:	f04f 0800 	mov.w	r8, #0
 8003228:	f104 091a 	add.w	r9, r4, #26
 800322c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	4543      	cmp	r3, r8
 8003232:	dc09      	bgt.n	8003248 <_printf_float+0x254>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	079b      	lsls	r3, r3, #30
 8003238:	f100 8103 	bmi.w	8003442 <_printf_float+0x44e>
 800323c:	68e0      	ldr	r0, [r4, #12]
 800323e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003240:	4298      	cmp	r0, r3
 8003242:	bfb8      	it	lt
 8003244:	4618      	movlt	r0, r3
 8003246:	e734      	b.n	80030b2 <_printf_float+0xbe>
 8003248:	2301      	movs	r3, #1
 800324a:	464a      	mov	r2, r9
 800324c:	4631      	mov	r1, r6
 800324e:	4628      	mov	r0, r5
 8003250:	47b8      	blx	r7
 8003252:	3001      	adds	r0, #1
 8003254:	f43f af2b 	beq.w	80030ae <_printf_float+0xba>
 8003258:	f108 0801 	add.w	r8, r8, #1
 800325c:	e7e6      	b.n	800322c <_printf_float+0x238>
 800325e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	dc2b      	bgt.n	80032bc <_printf_float+0x2c8>
 8003264:	2301      	movs	r3, #1
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <_printf_float+0x30c>)
 8003268:	4631      	mov	r1, r6
 800326a:	4628      	mov	r0, r5
 800326c:	47b8      	blx	r7
 800326e:	3001      	adds	r0, #1
 8003270:	f43f af1d 	beq.w	80030ae <_printf_float+0xba>
 8003274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003276:	b923      	cbnz	r3, 8003282 <_printf_float+0x28e>
 8003278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800327a:	b913      	cbnz	r3, 8003282 <_printf_float+0x28e>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	07d9      	lsls	r1, r3, #31
 8003280:	d5d8      	bpl.n	8003234 <_printf_float+0x240>
 8003282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003286:	4631      	mov	r1, r6
 8003288:	4628      	mov	r0, r5
 800328a:	47b8      	blx	r7
 800328c:	3001      	adds	r0, #1
 800328e:	f43f af0e 	beq.w	80030ae <_printf_float+0xba>
 8003292:	f04f 0900 	mov.w	r9, #0
 8003296:	f104 0a1a 	add.w	sl, r4, #26
 800329a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800329c:	425b      	negs	r3, r3
 800329e:	454b      	cmp	r3, r9
 80032a0:	dc01      	bgt.n	80032a6 <_printf_float+0x2b2>
 80032a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032a4:	e794      	b.n	80031d0 <_printf_float+0x1dc>
 80032a6:	2301      	movs	r3, #1
 80032a8:	4652      	mov	r2, sl
 80032aa:	4631      	mov	r1, r6
 80032ac:	4628      	mov	r0, r5
 80032ae:	47b8      	blx	r7
 80032b0:	3001      	adds	r0, #1
 80032b2:	f43f aefc 	beq.w	80030ae <_printf_float+0xba>
 80032b6:	f109 0901 	add.w	r9, r9, #1
 80032ba:	e7ee      	b.n	800329a <_printf_float+0x2a6>
 80032bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032c0:	429a      	cmp	r2, r3
 80032c2:	bfa8      	it	ge
 80032c4:	461a      	movge	r2, r3
 80032c6:	2a00      	cmp	r2, #0
 80032c8:	4691      	mov	r9, r2
 80032ca:	dd07      	ble.n	80032dc <_printf_float+0x2e8>
 80032cc:	4613      	mov	r3, r2
 80032ce:	4631      	mov	r1, r6
 80032d0:	4642      	mov	r2, r8
 80032d2:	4628      	mov	r0, r5
 80032d4:	47b8      	blx	r7
 80032d6:	3001      	adds	r0, #1
 80032d8:	f43f aee9 	beq.w	80030ae <_printf_float+0xba>
 80032dc:	f104 031a 	add.w	r3, r4, #26
 80032e0:	f04f 0b00 	mov.w	fp, #0
 80032e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032e8:	9306      	str	r3, [sp, #24]
 80032ea:	e015      	b.n	8003318 <_printf_float+0x324>
 80032ec:	7fefffff 	.word	0x7fefffff
 80032f0:	08005914 	.word	0x08005914
 80032f4:	08005910 	.word	0x08005910
 80032f8:	0800591c 	.word	0x0800591c
 80032fc:	08005918 	.word	0x08005918
 8003300:	08005920 	.word	0x08005920
 8003304:	2301      	movs	r3, #1
 8003306:	9a06      	ldr	r2, [sp, #24]
 8003308:	4631      	mov	r1, r6
 800330a:	4628      	mov	r0, r5
 800330c:	47b8      	blx	r7
 800330e:	3001      	adds	r0, #1
 8003310:	f43f aecd 	beq.w	80030ae <_printf_float+0xba>
 8003314:	f10b 0b01 	add.w	fp, fp, #1
 8003318:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800331c:	ebaa 0309 	sub.w	r3, sl, r9
 8003320:	455b      	cmp	r3, fp
 8003322:	dcef      	bgt.n	8003304 <_printf_float+0x310>
 8003324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003328:	429a      	cmp	r2, r3
 800332a:	44d0      	add	r8, sl
 800332c:	db15      	blt.n	800335a <_printf_float+0x366>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	07da      	lsls	r2, r3, #31
 8003332:	d412      	bmi.n	800335a <_printf_float+0x366>
 8003334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003336:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003338:	eba3 020a 	sub.w	r2, r3, sl
 800333c:	eba3 0a01 	sub.w	sl, r3, r1
 8003340:	4592      	cmp	sl, r2
 8003342:	bfa8      	it	ge
 8003344:	4692      	movge	sl, r2
 8003346:	f1ba 0f00 	cmp.w	sl, #0
 800334a:	dc0e      	bgt.n	800336a <_printf_float+0x376>
 800334c:	f04f 0800 	mov.w	r8, #0
 8003350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003354:	f104 091a 	add.w	r9, r4, #26
 8003358:	e019      	b.n	800338e <_printf_float+0x39a>
 800335a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800335e:	4631      	mov	r1, r6
 8003360:	4628      	mov	r0, r5
 8003362:	47b8      	blx	r7
 8003364:	3001      	adds	r0, #1
 8003366:	d1e5      	bne.n	8003334 <_printf_float+0x340>
 8003368:	e6a1      	b.n	80030ae <_printf_float+0xba>
 800336a:	4653      	mov	r3, sl
 800336c:	4642      	mov	r2, r8
 800336e:	4631      	mov	r1, r6
 8003370:	4628      	mov	r0, r5
 8003372:	47b8      	blx	r7
 8003374:	3001      	adds	r0, #1
 8003376:	d1e9      	bne.n	800334c <_printf_float+0x358>
 8003378:	e699      	b.n	80030ae <_printf_float+0xba>
 800337a:	2301      	movs	r3, #1
 800337c:	464a      	mov	r2, r9
 800337e:	4631      	mov	r1, r6
 8003380:	4628      	mov	r0, r5
 8003382:	47b8      	blx	r7
 8003384:	3001      	adds	r0, #1
 8003386:	f43f ae92 	beq.w	80030ae <_printf_float+0xba>
 800338a:	f108 0801 	add.w	r8, r8, #1
 800338e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	eba3 030a 	sub.w	r3, r3, sl
 8003398:	4543      	cmp	r3, r8
 800339a:	dcee      	bgt.n	800337a <_printf_float+0x386>
 800339c:	e74a      	b.n	8003234 <_printf_float+0x240>
 800339e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033a0:	2a01      	cmp	r2, #1
 80033a2:	dc01      	bgt.n	80033a8 <_printf_float+0x3b4>
 80033a4:	07db      	lsls	r3, r3, #31
 80033a6:	d53a      	bpl.n	800341e <_printf_float+0x42a>
 80033a8:	2301      	movs	r3, #1
 80033aa:	4642      	mov	r2, r8
 80033ac:	4631      	mov	r1, r6
 80033ae:	4628      	mov	r0, r5
 80033b0:	47b8      	blx	r7
 80033b2:	3001      	adds	r0, #1
 80033b4:	f43f ae7b 	beq.w	80030ae <_printf_float+0xba>
 80033b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033bc:	4631      	mov	r1, r6
 80033be:	4628      	mov	r0, r5
 80033c0:	47b8      	blx	r7
 80033c2:	3001      	adds	r0, #1
 80033c4:	f108 0801 	add.w	r8, r8, #1
 80033c8:	f43f ae71 	beq.w	80030ae <_printf_float+0xba>
 80033cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033ce:	2200      	movs	r2, #0
 80033d0:	f103 3aff 	add.w	sl, r3, #4294967295
 80033d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033d8:	2300      	movs	r3, #0
 80033da:	f7fd fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80033de:	b9c8      	cbnz	r0, 8003414 <_printf_float+0x420>
 80033e0:	4653      	mov	r3, sl
 80033e2:	4642      	mov	r2, r8
 80033e4:	4631      	mov	r1, r6
 80033e6:	4628      	mov	r0, r5
 80033e8:	47b8      	blx	r7
 80033ea:	3001      	adds	r0, #1
 80033ec:	d10e      	bne.n	800340c <_printf_float+0x418>
 80033ee:	e65e      	b.n	80030ae <_printf_float+0xba>
 80033f0:	2301      	movs	r3, #1
 80033f2:	4652      	mov	r2, sl
 80033f4:	4631      	mov	r1, r6
 80033f6:	4628      	mov	r0, r5
 80033f8:	47b8      	blx	r7
 80033fa:	3001      	adds	r0, #1
 80033fc:	f43f ae57 	beq.w	80030ae <_printf_float+0xba>
 8003400:	f108 0801 	add.w	r8, r8, #1
 8003404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003406:	3b01      	subs	r3, #1
 8003408:	4543      	cmp	r3, r8
 800340a:	dcf1      	bgt.n	80033f0 <_printf_float+0x3fc>
 800340c:	464b      	mov	r3, r9
 800340e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003412:	e6de      	b.n	80031d2 <_printf_float+0x1de>
 8003414:	f04f 0800 	mov.w	r8, #0
 8003418:	f104 0a1a 	add.w	sl, r4, #26
 800341c:	e7f2      	b.n	8003404 <_printf_float+0x410>
 800341e:	2301      	movs	r3, #1
 8003420:	e7df      	b.n	80033e2 <_printf_float+0x3ee>
 8003422:	2301      	movs	r3, #1
 8003424:	464a      	mov	r2, r9
 8003426:	4631      	mov	r1, r6
 8003428:	4628      	mov	r0, r5
 800342a:	47b8      	blx	r7
 800342c:	3001      	adds	r0, #1
 800342e:	f43f ae3e 	beq.w	80030ae <_printf_float+0xba>
 8003432:	f108 0801 	add.w	r8, r8, #1
 8003436:	68e3      	ldr	r3, [r4, #12]
 8003438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	4543      	cmp	r3, r8
 800343e:	dcf0      	bgt.n	8003422 <_printf_float+0x42e>
 8003440:	e6fc      	b.n	800323c <_printf_float+0x248>
 8003442:	f04f 0800 	mov.w	r8, #0
 8003446:	f104 0919 	add.w	r9, r4, #25
 800344a:	e7f4      	b.n	8003436 <_printf_float+0x442>
 800344c:	2900      	cmp	r1, #0
 800344e:	f43f ae8b 	beq.w	8003168 <_printf_float+0x174>
 8003452:	2300      	movs	r3, #0
 8003454:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003458:	ab09      	add	r3, sp, #36	; 0x24
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	ec49 8b10 	vmov	d0, r8, r9
 8003460:	6022      	str	r2, [r4, #0]
 8003462:	f8cd a004 	str.w	sl, [sp, #4]
 8003466:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800346a:	4628      	mov	r0, r5
 800346c:	f7ff fd2e 	bl	8002ecc <__cvt>
 8003470:	4680      	mov	r8, r0
 8003472:	e648      	b.n	8003106 <_printf_float+0x112>

08003474 <_printf_common>:
 8003474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	4691      	mov	r9, r2
 800347a:	461f      	mov	r7, r3
 800347c:	688a      	ldr	r2, [r1, #8]
 800347e:	690b      	ldr	r3, [r1, #16]
 8003480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003484:	4293      	cmp	r3, r2
 8003486:	bfb8      	it	lt
 8003488:	4613      	movlt	r3, r2
 800348a:	f8c9 3000 	str.w	r3, [r9]
 800348e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003492:	4606      	mov	r6, r0
 8003494:	460c      	mov	r4, r1
 8003496:	b112      	cbz	r2, 800349e <_printf_common+0x2a>
 8003498:	3301      	adds	r3, #1
 800349a:	f8c9 3000 	str.w	r3, [r9]
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	0699      	lsls	r1, r3, #26
 80034a2:	bf42      	ittt	mi
 80034a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034a8:	3302      	addmi	r3, #2
 80034aa:	f8c9 3000 	strmi.w	r3, [r9]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	f015 0506 	ands.w	r5, r5, #6
 80034b4:	d107      	bne.n	80034c6 <_printf_common+0x52>
 80034b6:	f104 0a19 	add.w	sl, r4, #25
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	f8d9 2000 	ldr.w	r2, [r9]
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	42ab      	cmp	r3, r5
 80034c4:	dc28      	bgt.n	8003518 <_printf_common+0xa4>
 80034c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	3300      	adds	r3, #0
 80034ce:	bf18      	it	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	0692      	lsls	r2, r2, #26
 80034d4:	d42d      	bmi.n	8003532 <_printf_common+0xbe>
 80034d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034da:	4639      	mov	r1, r7
 80034dc:	4630      	mov	r0, r6
 80034de:	47c0      	blx	r8
 80034e0:	3001      	adds	r0, #1
 80034e2:	d020      	beq.n	8003526 <_printf_common+0xb2>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	68e5      	ldr	r5, [r4, #12]
 80034e8:	f8d9 2000 	ldr.w	r2, [r9]
 80034ec:	f003 0306 	and.w	r3, r3, #6
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	bf08      	it	eq
 80034f4:	1aad      	subeq	r5, r5, r2
 80034f6:	68a3      	ldr	r3, [r4, #8]
 80034f8:	6922      	ldr	r2, [r4, #16]
 80034fa:	bf0c      	ite	eq
 80034fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003500:	2500      	movne	r5, #0
 8003502:	4293      	cmp	r3, r2
 8003504:	bfc4      	itt	gt
 8003506:	1a9b      	subgt	r3, r3, r2
 8003508:	18ed      	addgt	r5, r5, r3
 800350a:	f04f 0900 	mov.w	r9, #0
 800350e:	341a      	adds	r4, #26
 8003510:	454d      	cmp	r5, r9
 8003512:	d11a      	bne.n	800354a <_printf_common+0xd6>
 8003514:	2000      	movs	r0, #0
 8003516:	e008      	b.n	800352a <_printf_common+0xb6>
 8003518:	2301      	movs	r3, #1
 800351a:	4652      	mov	r2, sl
 800351c:	4639      	mov	r1, r7
 800351e:	4630      	mov	r0, r6
 8003520:	47c0      	blx	r8
 8003522:	3001      	adds	r0, #1
 8003524:	d103      	bne.n	800352e <_printf_common+0xba>
 8003526:	f04f 30ff 	mov.w	r0, #4294967295
 800352a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352e:	3501      	adds	r5, #1
 8003530:	e7c3      	b.n	80034ba <_printf_common+0x46>
 8003532:	18e1      	adds	r1, r4, r3
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	2030      	movs	r0, #48	; 0x30
 8003538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800353c:	4422      	add	r2, r4
 800353e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003546:	3302      	adds	r3, #2
 8003548:	e7c5      	b.n	80034d6 <_printf_common+0x62>
 800354a:	2301      	movs	r3, #1
 800354c:	4622      	mov	r2, r4
 800354e:	4639      	mov	r1, r7
 8003550:	4630      	mov	r0, r6
 8003552:	47c0      	blx	r8
 8003554:	3001      	adds	r0, #1
 8003556:	d0e6      	beq.n	8003526 <_printf_common+0xb2>
 8003558:	f109 0901 	add.w	r9, r9, #1
 800355c:	e7d8      	b.n	8003510 <_printf_common+0x9c>
	...

08003560 <_printf_i>:
 8003560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003568:	460c      	mov	r4, r1
 800356a:	7e09      	ldrb	r1, [r1, #24]
 800356c:	b085      	sub	sp, #20
 800356e:	296e      	cmp	r1, #110	; 0x6e
 8003570:	4617      	mov	r7, r2
 8003572:	4606      	mov	r6, r0
 8003574:	4698      	mov	r8, r3
 8003576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003578:	f000 80b3 	beq.w	80036e2 <_printf_i+0x182>
 800357c:	d822      	bhi.n	80035c4 <_printf_i+0x64>
 800357e:	2963      	cmp	r1, #99	; 0x63
 8003580:	d036      	beq.n	80035f0 <_printf_i+0x90>
 8003582:	d80a      	bhi.n	800359a <_printf_i+0x3a>
 8003584:	2900      	cmp	r1, #0
 8003586:	f000 80b9 	beq.w	80036fc <_printf_i+0x19c>
 800358a:	2958      	cmp	r1, #88	; 0x58
 800358c:	f000 8083 	beq.w	8003696 <_printf_i+0x136>
 8003590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003598:	e032      	b.n	8003600 <_printf_i+0xa0>
 800359a:	2964      	cmp	r1, #100	; 0x64
 800359c:	d001      	beq.n	80035a2 <_printf_i+0x42>
 800359e:	2969      	cmp	r1, #105	; 0x69
 80035a0:	d1f6      	bne.n	8003590 <_printf_i+0x30>
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	6813      	ldr	r3, [r2, #0]
 80035a6:	0605      	lsls	r5, r0, #24
 80035a8:	f103 0104 	add.w	r1, r3, #4
 80035ac:	d52a      	bpl.n	8003604 <_printf_i+0xa4>
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da03      	bge.n	80035be <_printf_i+0x5e>
 80035b6:	222d      	movs	r2, #45	; 0x2d
 80035b8:	425b      	negs	r3, r3
 80035ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035be:	486f      	ldr	r0, [pc, #444]	; (800377c <_printf_i+0x21c>)
 80035c0:	220a      	movs	r2, #10
 80035c2:	e039      	b.n	8003638 <_printf_i+0xd8>
 80035c4:	2973      	cmp	r1, #115	; 0x73
 80035c6:	f000 809d 	beq.w	8003704 <_printf_i+0x1a4>
 80035ca:	d808      	bhi.n	80035de <_printf_i+0x7e>
 80035cc:	296f      	cmp	r1, #111	; 0x6f
 80035ce:	d020      	beq.n	8003612 <_printf_i+0xb2>
 80035d0:	2970      	cmp	r1, #112	; 0x70
 80035d2:	d1dd      	bne.n	8003590 <_printf_i+0x30>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	f043 0320 	orr.w	r3, r3, #32
 80035da:	6023      	str	r3, [r4, #0]
 80035dc:	e003      	b.n	80035e6 <_printf_i+0x86>
 80035de:	2975      	cmp	r1, #117	; 0x75
 80035e0:	d017      	beq.n	8003612 <_printf_i+0xb2>
 80035e2:	2978      	cmp	r1, #120	; 0x78
 80035e4:	d1d4      	bne.n	8003590 <_printf_i+0x30>
 80035e6:	2378      	movs	r3, #120	; 0x78
 80035e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035ec:	4864      	ldr	r0, [pc, #400]	; (8003780 <_printf_i+0x220>)
 80035ee:	e055      	b.n	800369c <_printf_i+0x13c>
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	1d19      	adds	r1, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6011      	str	r1, [r2, #0]
 80035f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003600:	2301      	movs	r3, #1
 8003602:	e08c      	b.n	800371e <_printf_i+0x1be>
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6011      	str	r1, [r2, #0]
 8003608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800360c:	bf18      	it	ne
 800360e:	b21b      	sxthne	r3, r3
 8003610:	e7cf      	b.n	80035b2 <_printf_i+0x52>
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	6825      	ldr	r5, [r4, #0]
 8003616:	1d18      	adds	r0, r3, #4
 8003618:	6010      	str	r0, [r2, #0]
 800361a:	0628      	lsls	r0, r5, #24
 800361c:	d501      	bpl.n	8003622 <_printf_i+0xc2>
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	e002      	b.n	8003628 <_printf_i+0xc8>
 8003622:	0668      	lsls	r0, r5, #25
 8003624:	d5fb      	bpl.n	800361e <_printf_i+0xbe>
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	4854      	ldr	r0, [pc, #336]	; (800377c <_printf_i+0x21c>)
 800362a:	296f      	cmp	r1, #111	; 0x6f
 800362c:	bf14      	ite	ne
 800362e:	220a      	movne	r2, #10
 8003630:	2208      	moveq	r2, #8
 8003632:	2100      	movs	r1, #0
 8003634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003638:	6865      	ldr	r5, [r4, #4]
 800363a:	60a5      	str	r5, [r4, #8]
 800363c:	2d00      	cmp	r5, #0
 800363e:	f2c0 8095 	blt.w	800376c <_printf_i+0x20c>
 8003642:	6821      	ldr	r1, [r4, #0]
 8003644:	f021 0104 	bic.w	r1, r1, #4
 8003648:	6021      	str	r1, [r4, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d13d      	bne.n	80036ca <_printf_i+0x16a>
 800364e:	2d00      	cmp	r5, #0
 8003650:	f040 808e 	bne.w	8003770 <_printf_i+0x210>
 8003654:	4665      	mov	r5, ip
 8003656:	2a08      	cmp	r2, #8
 8003658:	d10b      	bne.n	8003672 <_printf_i+0x112>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	07db      	lsls	r3, r3, #31
 800365e:	d508      	bpl.n	8003672 <_printf_i+0x112>
 8003660:	6923      	ldr	r3, [r4, #16]
 8003662:	6862      	ldr	r2, [r4, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	bfde      	ittt	le
 8003668:	2330      	movle	r3, #48	; 0x30
 800366a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800366e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003672:	ebac 0305 	sub.w	r3, ip, r5
 8003676:	6123      	str	r3, [r4, #16]
 8003678:	f8cd 8000 	str.w	r8, [sp]
 800367c:	463b      	mov	r3, r7
 800367e:	aa03      	add	r2, sp, #12
 8003680:	4621      	mov	r1, r4
 8003682:	4630      	mov	r0, r6
 8003684:	f7ff fef6 	bl	8003474 <_printf_common>
 8003688:	3001      	adds	r0, #1
 800368a:	d14d      	bne.n	8003728 <_printf_i+0x1c8>
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	b005      	add	sp, #20
 8003692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003696:	4839      	ldr	r0, [pc, #228]	; (800377c <_printf_i+0x21c>)
 8003698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	6821      	ldr	r1, [r4, #0]
 80036a0:	1d1d      	adds	r5, r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6015      	str	r5, [r2, #0]
 80036a6:	060a      	lsls	r2, r1, #24
 80036a8:	d50b      	bpl.n	80036c2 <_printf_i+0x162>
 80036aa:	07ca      	lsls	r2, r1, #31
 80036ac:	bf44      	itt	mi
 80036ae:	f041 0120 	orrmi.w	r1, r1, #32
 80036b2:	6021      	strmi	r1, [r4, #0]
 80036b4:	b91b      	cbnz	r3, 80036be <_printf_i+0x15e>
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	f022 0220 	bic.w	r2, r2, #32
 80036bc:	6022      	str	r2, [r4, #0]
 80036be:	2210      	movs	r2, #16
 80036c0:	e7b7      	b.n	8003632 <_printf_i+0xd2>
 80036c2:	064d      	lsls	r5, r1, #25
 80036c4:	bf48      	it	mi
 80036c6:	b29b      	uxthmi	r3, r3
 80036c8:	e7ef      	b.n	80036aa <_printf_i+0x14a>
 80036ca:	4665      	mov	r5, ip
 80036cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80036d0:	fb02 3311 	mls	r3, r2, r1, r3
 80036d4:	5cc3      	ldrb	r3, [r0, r3]
 80036d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036da:	460b      	mov	r3, r1
 80036dc:	2900      	cmp	r1, #0
 80036de:	d1f5      	bne.n	80036cc <_printf_i+0x16c>
 80036e0:	e7b9      	b.n	8003656 <_printf_i+0xf6>
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	6825      	ldr	r5, [r4, #0]
 80036e6:	6961      	ldr	r1, [r4, #20]
 80036e8:	1d18      	adds	r0, r3, #4
 80036ea:	6010      	str	r0, [r2, #0]
 80036ec:	0628      	lsls	r0, r5, #24
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	d501      	bpl.n	80036f6 <_printf_i+0x196>
 80036f2:	6019      	str	r1, [r3, #0]
 80036f4:	e002      	b.n	80036fc <_printf_i+0x19c>
 80036f6:	066a      	lsls	r2, r5, #25
 80036f8:	d5fb      	bpl.n	80036f2 <_printf_i+0x192>
 80036fa:	8019      	strh	r1, [r3, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	6123      	str	r3, [r4, #16]
 8003700:	4665      	mov	r5, ip
 8003702:	e7b9      	b.n	8003678 <_printf_i+0x118>
 8003704:	6813      	ldr	r3, [r2, #0]
 8003706:	1d19      	adds	r1, r3, #4
 8003708:	6011      	str	r1, [r2, #0]
 800370a:	681d      	ldr	r5, [r3, #0]
 800370c:	6862      	ldr	r2, [r4, #4]
 800370e:	2100      	movs	r1, #0
 8003710:	4628      	mov	r0, r5
 8003712:	f7fc fd65 	bl	80001e0 <memchr>
 8003716:	b108      	cbz	r0, 800371c <_printf_i+0x1bc>
 8003718:	1b40      	subs	r0, r0, r5
 800371a:	6060      	str	r0, [r4, #4]
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	6123      	str	r3, [r4, #16]
 8003720:	2300      	movs	r3, #0
 8003722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003726:	e7a7      	b.n	8003678 <_printf_i+0x118>
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	462a      	mov	r2, r5
 800372c:	4639      	mov	r1, r7
 800372e:	4630      	mov	r0, r6
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d0aa      	beq.n	800368c <_printf_i+0x12c>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	079b      	lsls	r3, r3, #30
 800373a:	d413      	bmi.n	8003764 <_printf_i+0x204>
 800373c:	68e0      	ldr	r0, [r4, #12]
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	4298      	cmp	r0, r3
 8003742:	bfb8      	it	lt
 8003744:	4618      	movlt	r0, r3
 8003746:	e7a3      	b.n	8003690 <_printf_i+0x130>
 8003748:	2301      	movs	r3, #1
 800374a:	464a      	mov	r2, r9
 800374c:	4639      	mov	r1, r7
 800374e:	4630      	mov	r0, r6
 8003750:	47c0      	blx	r8
 8003752:	3001      	adds	r0, #1
 8003754:	d09a      	beq.n	800368c <_printf_i+0x12c>
 8003756:	3501      	adds	r5, #1
 8003758:	68e3      	ldr	r3, [r4, #12]
 800375a:	9a03      	ldr	r2, [sp, #12]
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	42ab      	cmp	r3, r5
 8003760:	dcf2      	bgt.n	8003748 <_printf_i+0x1e8>
 8003762:	e7eb      	b.n	800373c <_printf_i+0x1dc>
 8003764:	2500      	movs	r5, #0
 8003766:	f104 0919 	add.w	r9, r4, #25
 800376a:	e7f5      	b.n	8003758 <_printf_i+0x1f8>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ac      	bne.n	80036ca <_printf_i+0x16a>
 8003770:	7803      	ldrb	r3, [r0, #0]
 8003772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800377a:	e76c      	b.n	8003656 <_printf_i+0xf6>
 800377c:	08005922 	.word	0x08005922
 8003780:	08005933 	.word	0x08005933

08003784 <iprintf>:
 8003784:	b40f      	push	{r0, r1, r2, r3}
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <iprintf+0x2c>)
 8003788:	b513      	push	{r0, r1, r4, lr}
 800378a:	681c      	ldr	r4, [r3, #0]
 800378c:	b124      	cbz	r4, 8003798 <iprintf+0x14>
 800378e:	69a3      	ldr	r3, [r4, #24]
 8003790:	b913      	cbnz	r3, 8003798 <iprintf+0x14>
 8003792:	4620      	mov	r0, r4
 8003794:	f001 f928 	bl	80049e8 <__sinit>
 8003798:	ab05      	add	r3, sp, #20
 800379a:	9a04      	ldr	r2, [sp, #16]
 800379c:	68a1      	ldr	r1, [r4, #8]
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	4620      	mov	r0, r4
 80037a2:	f001 fdeb 	bl	800537c <_vfiprintf_r>
 80037a6:	b002      	add	sp, #8
 80037a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ac:	b004      	add	sp, #16
 80037ae:	4770      	bx	lr
 80037b0:	2000000c 	.word	0x2000000c

080037b4 <putchar>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <putchar+0x24>)
 80037b8:	681c      	ldr	r4, [r3, #0]
 80037ba:	4605      	mov	r5, r0
 80037bc:	b124      	cbz	r4, 80037c8 <putchar+0x14>
 80037be:	69a3      	ldr	r3, [r4, #24]
 80037c0:	b913      	cbnz	r3, 80037c8 <putchar+0x14>
 80037c2:	4620      	mov	r0, r4
 80037c4:	f001 f910 	bl	80049e8 <__sinit>
 80037c8:	68a2      	ldr	r2, [r4, #8]
 80037ca:	4629      	mov	r1, r5
 80037cc:	4620      	mov	r0, r4
 80037ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d2:	f001 bee9 	b.w	80055a8 <_putc_r>
 80037d6:	bf00      	nop
 80037d8:	2000000c 	.word	0x2000000c

080037dc <_puts_r>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	4605      	mov	r5, r0
 80037e2:	b118      	cbz	r0, 80037ec <_puts_r+0x10>
 80037e4:	6983      	ldr	r3, [r0, #24]
 80037e6:	b90b      	cbnz	r3, 80037ec <_puts_r+0x10>
 80037e8:	f001 f8fe 	bl	80049e8 <__sinit>
 80037ec:	69ab      	ldr	r3, [r5, #24]
 80037ee:	68ac      	ldr	r4, [r5, #8]
 80037f0:	b913      	cbnz	r3, 80037f8 <_puts_r+0x1c>
 80037f2:	4628      	mov	r0, r5
 80037f4:	f001 f8f8 	bl	80049e8 <__sinit>
 80037f8:	4b23      	ldr	r3, [pc, #140]	; (8003888 <_puts_r+0xac>)
 80037fa:	429c      	cmp	r4, r3
 80037fc:	d117      	bne.n	800382e <_puts_r+0x52>
 80037fe:	686c      	ldr	r4, [r5, #4]
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	071b      	lsls	r3, r3, #28
 8003804:	d51d      	bpl.n	8003842 <_puts_r+0x66>
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	b1db      	cbz	r3, 8003842 <_puts_r+0x66>
 800380a:	3e01      	subs	r6, #1
 800380c:	68a3      	ldr	r3, [r4, #8]
 800380e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003812:	3b01      	subs	r3, #1
 8003814:	60a3      	str	r3, [r4, #8]
 8003816:	b9e9      	cbnz	r1, 8003854 <_puts_r+0x78>
 8003818:	2b00      	cmp	r3, #0
 800381a:	da2e      	bge.n	800387a <_puts_r+0x9e>
 800381c:	4622      	mov	r2, r4
 800381e:	210a      	movs	r1, #10
 8003820:	4628      	mov	r0, r5
 8003822:	f000 f8ed 	bl	8003a00 <__swbuf_r>
 8003826:	3001      	adds	r0, #1
 8003828:	d011      	beq.n	800384e <_puts_r+0x72>
 800382a:	200a      	movs	r0, #10
 800382c:	e011      	b.n	8003852 <_puts_r+0x76>
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <_puts_r+0xb0>)
 8003830:	429c      	cmp	r4, r3
 8003832:	d101      	bne.n	8003838 <_puts_r+0x5c>
 8003834:	68ac      	ldr	r4, [r5, #8]
 8003836:	e7e3      	b.n	8003800 <_puts_r+0x24>
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <_puts_r+0xb4>)
 800383a:	429c      	cmp	r4, r3
 800383c:	bf08      	it	eq
 800383e:	68ec      	ldreq	r4, [r5, #12]
 8003840:	e7de      	b.n	8003800 <_puts_r+0x24>
 8003842:	4621      	mov	r1, r4
 8003844:	4628      	mov	r0, r5
 8003846:	f000 f92d 	bl	8003aa4 <__swsetup_r>
 800384a:	2800      	cmp	r0, #0
 800384c:	d0dd      	beq.n	800380a <_puts_r+0x2e>
 800384e:	f04f 30ff 	mov.w	r0, #4294967295
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	2b00      	cmp	r3, #0
 8003856:	da04      	bge.n	8003862 <_puts_r+0x86>
 8003858:	69a2      	ldr	r2, [r4, #24]
 800385a:	429a      	cmp	r2, r3
 800385c:	dc06      	bgt.n	800386c <_puts_r+0x90>
 800385e:	290a      	cmp	r1, #10
 8003860:	d004      	beq.n	800386c <_puts_r+0x90>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	6022      	str	r2, [r4, #0]
 8003868:	7019      	strb	r1, [r3, #0]
 800386a:	e7cf      	b.n	800380c <_puts_r+0x30>
 800386c:	4622      	mov	r2, r4
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f8c6 	bl	8003a00 <__swbuf_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1c9      	bne.n	800380c <_puts_r+0x30>
 8003878:	e7e9      	b.n	800384e <_puts_r+0x72>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	200a      	movs	r0, #10
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	6022      	str	r2, [r4, #0]
 8003882:	7018      	strb	r0, [r3, #0]
 8003884:	e7e5      	b.n	8003852 <_puts_r+0x76>
 8003886:	bf00      	nop
 8003888:	08005974 	.word	0x08005974
 800388c:	08005994 	.word	0x08005994
 8003890:	08005954 	.word	0x08005954

08003894 <puts>:
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <puts+0xc>)
 8003896:	4601      	mov	r1, r0
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	f7ff bf9f 	b.w	80037dc <_puts_r>
 800389e:	bf00      	nop
 80038a0:	2000000c 	.word	0x2000000c

080038a4 <setvbuf>:
 80038a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038a8:	461d      	mov	r5, r3
 80038aa:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <setvbuf+0x14c>)
 80038ac:	681e      	ldr	r6, [r3, #0]
 80038ae:	4604      	mov	r4, r0
 80038b0:	460f      	mov	r7, r1
 80038b2:	4690      	mov	r8, r2
 80038b4:	b126      	cbz	r6, 80038c0 <setvbuf+0x1c>
 80038b6:	69b3      	ldr	r3, [r6, #24]
 80038b8:	b913      	cbnz	r3, 80038c0 <setvbuf+0x1c>
 80038ba:	4630      	mov	r0, r6
 80038bc:	f001 f894 	bl	80049e8 <__sinit>
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <setvbuf+0x150>)
 80038c2:	429c      	cmp	r4, r3
 80038c4:	d152      	bne.n	800396c <setvbuf+0xc8>
 80038c6:	6874      	ldr	r4, [r6, #4]
 80038c8:	f1b8 0f02 	cmp.w	r8, #2
 80038cc:	d006      	beq.n	80038dc <setvbuf+0x38>
 80038ce:	f1b8 0f01 	cmp.w	r8, #1
 80038d2:	f200 8089 	bhi.w	80039e8 <setvbuf+0x144>
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	f2c0 8086 	blt.w	80039e8 <setvbuf+0x144>
 80038dc:	4621      	mov	r1, r4
 80038de:	4630      	mov	r0, r6
 80038e0:	f001 f818 	bl	8004914 <_fflush_r>
 80038e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038e6:	b141      	cbz	r1, 80038fa <setvbuf+0x56>
 80038e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038ec:	4299      	cmp	r1, r3
 80038ee:	d002      	beq.n	80038f6 <setvbuf+0x52>
 80038f0:	4630      	mov	r0, r6
 80038f2:	f001 fc71 	bl	80051d8 <_free_r>
 80038f6:	2300      	movs	r3, #0
 80038f8:	6363      	str	r3, [r4, #52]	; 0x34
 80038fa:	2300      	movs	r3, #0
 80038fc:	61a3      	str	r3, [r4, #24]
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	d503      	bpl.n	800390e <setvbuf+0x6a>
 8003906:	6921      	ldr	r1, [r4, #16]
 8003908:	4630      	mov	r0, r6
 800390a:	f001 fc65 	bl	80051d8 <_free_r>
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003914:	f023 0303 	bic.w	r3, r3, #3
 8003918:	f1b8 0f02 	cmp.w	r8, #2
 800391c:	81a3      	strh	r3, [r4, #12]
 800391e:	d05d      	beq.n	80039dc <setvbuf+0x138>
 8003920:	ab01      	add	r3, sp, #4
 8003922:	466a      	mov	r2, sp
 8003924:	4621      	mov	r1, r4
 8003926:	4630      	mov	r0, r6
 8003928:	f001 f8f6 	bl	8004b18 <__swhatbuf_r>
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	4318      	orrs	r0, r3
 8003930:	81a0      	strh	r0, [r4, #12]
 8003932:	bb2d      	cbnz	r5, 8003980 <setvbuf+0xdc>
 8003934:	9d00      	ldr	r5, [sp, #0]
 8003936:	4628      	mov	r0, r5
 8003938:	f001 f952 	bl	8004be0 <malloc>
 800393c:	4607      	mov	r7, r0
 800393e:	2800      	cmp	r0, #0
 8003940:	d14e      	bne.n	80039e0 <setvbuf+0x13c>
 8003942:	f8dd 9000 	ldr.w	r9, [sp]
 8003946:	45a9      	cmp	r9, r5
 8003948:	d13c      	bne.n	80039c4 <setvbuf+0x120>
 800394a:	f04f 30ff 	mov.w	r0, #4294967295
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	2300      	movs	r3, #0
 8003958:	60a3      	str	r3, [r4, #8]
 800395a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800395e:	6023      	str	r3, [r4, #0]
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	2301      	movs	r3, #1
 8003964:	6163      	str	r3, [r4, #20]
 8003966:	b003      	add	sp, #12
 8003968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800396c:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <setvbuf+0x154>)
 800396e:	429c      	cmp	r4, r3
 8003970:	d101      	bne.n	8003976 <setvbuf+0xd2>
 8003972:	68b4      	ldr	r4, [r6, #8]
 8003974:	e7a8      	b.n	80038c8 <setvbuf+0x24>
 8003976:	4b21      	ldr	r3, [pc, #132]	; (80039fc <setvbuf+0x158>)
 8003978:	429c      	cmp	r4, r3
 800397a:	bf08      	it	eq
 800397c:	68f4      	ldreq	r4, [r6, #12]
 800397e:	e7a3      	b.n	80038c8 <setvbuf+0x24>
 8003980:	2f00      	cmp	r7, #0
 8003982:	d0d8      	beq.n	8003936 <setvbuf+0x92>
 8003984:	69b3      	ldr	r3, [r6, #24]
 8003986:	b913      	cbnz	r3, 800398e <setvbuf+0xea>
 8003988:	4630      	mov	r0, r6
 800398a:	f001 f82d 	bl	80049e8 <__sinit>
 800398e:	f1b8 0f01 	cmp.w	r8, #1
 8003992:	bf08      	it	eq
 8003994:	89a3      	ldrheq	r3, [r4, #12]
 8003996:	6027      	str	r7, [r4, #0]
 8003998:	bf04      	itt	eq
 800399a:	f043 0301 	orreq.w	r3, r3, #1
 800399e:	81a3      	strheq	r3, [r4, #12]
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f013 0008 	ands.w	r0, r3, #8
 80039a6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80039aa:	d01b      	beq.n	80039e4 <setvbuf+0x140>
 80039ac:	f013 0001 	ands.w	r0, r3, #1
 80039b0:	bf18      	it	ne
 80039b2:	426d      	negne	r5, r5
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	bf1d      	ittte	ne
 80039ba:	60a3      	strne	r3, [r4, #8]
 80039bc:	61a5      	strne	r5, [r4, #24]
 80039be:	4618      	movne	r0, r3
 80039c0:	60a5      	streq	r5, [r4, #8]
 80039c2:	e7d0      	b.n	8003966 <setvbuf+0xc2>
 80039c4:	4648      	mov	r0, r9
 80039c6:	f001 f90b 	bl	8004be0 <malloc>
 80039ca:	4607      	mov	r7, r0
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d0bc      	beq.n	800394a <setvbuf+0xa6>
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	464d      	mov	r5, r9
 80039da:	e7d3      	b.n	8003984 <setvbuf+0xe0>
 80039dc:	2000      	movs	r0, #0
 80039de:	e7b6      	b.n	800394e <setvbuf+0xaa>
 80039e0:	46a9      	mov	r9, r5
 80039e2:	e7f5      	b.n	80039d0 <setvbuf+0x12c>
 80039e4:	60a0      	str	r0, [r4, #8]
 80039e6:	e7be      	b.n	8003966 <setvbuf+0xc2>
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	e7bb      	b.n	8003966 <setvbuf+0xc2>
 80039ee:	bf00      	nop
 80039f0:	2000000c 	.word	0x2000000c
 80039f4:	08005974 	.word	0x08005974
 80039f8:	08005994 	.word	0x08005994
 80039fc:	08005954 	.word	0x08005954

08003a00 <__swbuf_r>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	460e      	mov	r6, r1
 8003a04:	4614      	mov	r4, r2
 8003a06:	4605      	mov	r5, r0
 8003a08:	b118      	cbz	r0, 8003a12 <__swbuf_r+0x12>
 8003a0a:	6983      	ldr	r3, [r0, #24]
 8003a0c:	b90b      	cbnz	r3, 8003a12 <__swbuf_r+0x12>
 8003a0e:	f000 ffeb 	bl	80049e8 <__sinit>
 8003a12:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <__swbuf_r+0x98>)
 8003a14:	429c      	cmp	r4, r3
 8003a16:	d12a      	bne.n	8003a6e <__swbuf_r+0x6e>
 8003a18:	686c      	ldr	r4, [r5, #4]
 8003a1a:	69a3      	ldr	r3, [r4, #24]
 8003a1c:	60a3      	str	r3, [r4, #8]
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	071a      	lsls	r2, r3, #28
 8003a22:	d52e      	bpl.n	8003a82 <__swbuf_r+0x82>
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	b363      	cbz	r3, 8003a82 <__swbuf_r+0x82>
 8003a28:	6923      	ldr	r3, [r4, #16]
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	1ac0      	subs	r0, r0, r3
 8003a2e:	6963      	ldr	r3, [r4, #20]
 8003a30:	b2f6      	uxtb	r6, r6
 8003a32:	4283      	cmp	r3, r0
 8003a34:	4637      	mov	r7, r6
 8003a36:	dc04      	bgt.n	8003a42 <__swbuf_r+0x42>
 8003a38:	4621      	mov	r1, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 ff6a 	bl	8004914 <_fflush_r>
 8003a40:	bb28      	cbnz	r0, 8003a8e <__swbuf_r+0x8e>
 8003a42:	68a3      	ldr	r3, [r4, #8]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	60a3      	str	r3, [r4, #8]
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	6022      	str	r2, [r4, #0]
 8003a4e:	701e      	strb	r6, [r3, #0]
 8003a50:	6963      	ldr	r3, [r4, #20]
 8003a52:	3001      	adds	r0, #1
 8003a54:	4283      	cmp	r3, r0
 8003a56:	d004      	beq.n	8003a62 <__swbuf_r+0x62>
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	07db      	lsls	r3, r3, #31
 8003a5c:	d519      	bpl.n	8003a92 <__swbuf_r+0x92>
 8003a5e:	2e0a      	cmp	r6, #10
 8003a60:	d117      	bne.n	8003a92 <__swbuf_r+0x92>
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 ff55 	bl	8004914 <_fflush_r>
 8003a6a:	b190      	cbz	r0, 8003a92 <__swbuf_r+0x92>
 8003a6c:	e00f      	b.n	8003a8e <__swbuf_r+0x8e>
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <__swbuf_r+0x9c>)
 8003a70:	429c      	cmp	r4, r3
 8003a72:	d101      	bne.n	8003a78 <__swbuf_r+0x78>
 8003a74:	68ac      	ldr	r4, [r5, #8]
 8003a76:	e7d0      	b.n	8003a1a <__swbuf_r+0x1a>
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <__swbuf_r+0xa0>)
 8003a7a:	429c      	cmp	r4, r3
 8003a7c:	bf08      	it	eq
 8003a7e:	68ec      	ldreq	r4, [r5, #12]
 8003a80:	e7cb      	b.n	8003a1a <__swbuf_r+0x1a>
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 f80d 	bl	8003aa4 <__swsetup_r>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d0cc      	beq.n	8003a28 <__swbuf_r+0x28>
 8003a8e:	f04f 37ff 	mov.w	r7, #4294967295
 8003a92:	4638      	mov	r0, r7
 8003a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a96:	bf00      	nop
 8003a98:	08005974 	.word	0x08005974
 8003a9c:	08005994 	.word	0x08005994
 8003aa0:	08005954 	.word	0x08005954

08003aa4 <__swsetup_r>:
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <__swsetup_r+0xcc>)
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	681d      	ldr	r5, [r3, #0]
 8003aaa:	4606      	mov	r6, r0
 8003aac:	460c      	mov	r4, r1
 8003aae:	b125      	cbz	r5, 8003aba <__swsetup_r+0x16>
 8003ab0:	69ab      	ldr	r3, [r5, #24]
 8003ab2:	b913      	cbnz	r3, 8003aba <__swsetup_r+0x16>
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f000 ff97 	bl	80049e8 <__sinit>
 8003aba:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <__swsetup_r+0xd0>)
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d10f      	bne.n	8003ae0 <__swsetup_r+0x3c>
 8003ac0:	686c      	ldr	r4, [r5, #4]
 8003ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	0715      	lsls	r5, r2, #28
 8003aca:	d42c      	bmi.n	8003b26 <__swsetup_r+0x82>
 8003acc:	06d0      	lsls	r0, r2, #27
 8003ace:	d411      	bmi.n	8003af4 <__swsetup_r+0x50>
 8003ad0:	2209      	movs	r2, #9
 8003ad2:	6032      	str	r2, [r6, #0]
 8003ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	f04f 30ff 	mov.w	r0, #4294967295
 8003ade:	e03e      	b.n	8003b5e <__swsetup_r+0xba>
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <__swsetup_r+0xd4>)
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d101      	bne.n	8003aea <__swsetup_r+0x46>
 8003ae6:	68ac      	ldr	r4, [r5, #8]
 8003ae8:	e7eb      	b.n	8003ac2 <__swsetup_r+0x1e>
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <__swsetup_r+0xd8>)
 8003aec:	429c      	cmp	r4, r3
 8003aee:	bf08      	it	eq
 8003af0:	68ec      	ldreq	r4, [r5, #12]
 8003af2:	e7e6      	b.n	8003ac2 <__swsetup_r+0x1e>
 8003af4:	0751      	lsls	r1, r2, #29
 8003af6:	d512      	bpl.n	8003b1e <__swsetup_r+0x7a>
 8003af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003afa:	b141      	cbz	r1, 8003b0e <__swsetup_r+0x6a>
 8003afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b00:	4299      	cmp	r1, r3
 8003b02:	d002      	beq.n	8003b0a <__swsetup_r+0x66>
 8003b04:	4630      	mov	r0, r6
 8003b06:	f001 fb67 	bl	80051d8 <_free_r>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b14:	81a3      	strh	r3, [r4, #12]
 8003b16:	2300      	movs	r3, #0
 8003b18:	6063      	str	r3, [r4, #4]
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	f043 0308 	orr.w	r3, r3, #8
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	6923      	ldr	r3, [r4, #16]
 8003b28:	b94b      	cbnz	r3, 8003b3e <__swsetup_r+0x9a>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d003      	beq.n	8003b3e <__swsetup_r+0x9a>
 8003b36:	4621      	mov	r1, r4
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f001 f811 	bl	8004b60 <__smakebuf_r>
 8003b3e:	89a2      	ldrh	r2, [r4, #12]
 8003b40:	f012 0301 	ands.w	r3, r2, #1
 8003b44:	d00c      	beq.n	8003b60 <__swsetup_r+0xbc>
 8003b46:	2300      	movs	r3, #0
 8003b48:	60a3      	str	r3, [r4, #8]
 8003b4a:	6963      	ldr	r3, [r4, #20]
 8003b4c:	425b      	negs	r3, r3
 8003b4e:	61a3      	str	r3, [r4, #24]
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	b953      	cbnz	r3, 8003b6a <__swsetup_r+0xc6>
 8003b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003b5c:	d1ba      	bne.n	8003ad4 <__swsetup_r+0x30>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	0792      	lsls	r2, r2, #30
 8003b62:	bf58      	it	pl
 8003b64:	6963      	ldrpl	r3, [r4, #20]
 8003b66:	60a3      	str	r3, [r4, #8]
 8003b68:	e7f2      	b.n	8003b50 <__swsetup_r+0xac>
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e7f7      	b.n	8003b5e <__swsetup_r+0xba>
 8003b6e:	bf00      	nop
 8003b70:	2000000c 	.word	0x2000000c
 8003b74:	08005974 	.word	0x08005974
 8003b78:	08005994 	.word	0x08005994
 8003b7c:	08005954 	.word	0x08005954

08003b80 <quorem>:
 8003b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b84:	6903      	ldr	r3, [r0, #16]
 8003b86:	690c      	ldr	r4, [r1, #16]
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	4680      	mov	r8, r0
 8003b8c:	f2c0 8082 	blt.w	8003c94 <quorem+0x114>
 8003b90:	3c01      	subs	r4, #1
 8003b92:	f101 0714 	add.w	r7, r1, #20
 8003b96:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003b9a:	f100 0614 	add.w	r6, r0, #20
 8003b9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003ba2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003ba6:	eb06 030c 	add.w	r3, r6, ip
 8003baa:	3501      	adds	r5, #1
 8003bac:	eb07 090c 	add.w	r9, r7, ip
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	fbb0 f5f5 	udiv	r5, r0, r5
 8003bb6:	b395      	cbz	r5, 8003c1e <quorem+0x9e>
 8003bb8:	f04f 0a00 	mov.w	sl, #0
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	46b6      	mov	lr, r6
 8003bc0:	46d3      	mov	fp, sl
 8003bc2:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bc6:	b293      	uxth	r3, r2
 8003bc8:	fb05 a303 	mla	r3, r5, r3, sl
 8003bcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	ebab 0303 	sub.w	r3, fp, r3
 8003bd6:	0c12      	lsrs	r2, r2, #16
 8003bd8:	f8de b000 	ldr.w	fp, [lr]
 8003bdc:	fb05 a202 	mla	r2, r5, r2, sl
 8003be0:	fa13 f38b 	uxtah	r3, r3, fp
 8003be4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003be8:	fa1f fb82 	uxth.w	fp, r2
 8003bec:	f8de 2000 	ldr.w	r2, [lr]
 8003bf0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bfe:	4581      	cmp	r9, r0
 8003c00:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003c04:	f84e 3b04 	str.w	r3, [lr], #4
 8003c08:	d2db      	bcs.n	8003bc2 <quorem+0x42>
 8003c0a:	f856 300c 	ldr.w	r3, [r6, ip]
 8003c0e:	b933      	cbnz	r3, 8003c1e <quorem+0x9e>
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	3b04      	subs	r3, #4
 8003c14:	429e      	cmp	r6, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	d330      	bcc.n	8003c7c <quorem+0xfc>
 8003c1a:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c1e:	4640      	mov	r0, r8
 8003c20:	f001 fa06 	bl	8005030 <__mcmp>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	db25      	blt.n	8003c74 <quorem+0xf4>
 8003c28:	3501      	adds	r5, #1
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f04f 0c00 	mov.w	ip, #0
 8003c30:	f857 2b04 	ldr.w	r2, [r7], #4
 8003c34:	f8d0 e000 	ldr.w	lr, [r0]
 8003c38:	b293      	uxth	r3, r2
 8003c3a:	ebac 0303 	sub.w	r3, ip, r3
 8003c3e:	0c12      	lsrs	r2, r2, #16
 8003c40:	fa13 f38e 	uxtah	r3, r3, lr
 8003c44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c52:	45b9      	cmp	r9, r7
 8003c54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c58:	f840 3b04 	str.w	r3, [r0], #4
 8003c5c:	d2e8      	bcs.n	8003c30 <quorem+0xb0>
 8003c5e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003c62:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003c66:	b92a      	cbnz	r2, 8003c74 <quorem+0xf4>
 8003c68:	3b04      	subs	r3, #4
 8003c6a:	429e      	cmp	r6, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	d30b      	bcc.n	8003c88 <quorem+0x108>
 8003c70:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c74:	4628      	mov	r0, r5
 8003c76:	b003      	add	sp, #12
 8003c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	3b04      	subs	r3, #4
 8003c80:	2a00      	cmp	r2, #0
 8003c82:	d1ca      	bne.n	8003c1a <quorem+0x9a>
 8003c84:	3c01      	subs	r4, #1
 8003c86:	e7c5      	b.n	8003c14 <quorem+0x94>
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	3b04      	subs	r3, #4
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	d1ef      	bne.n	8003c70 <quorem+0xf0>
 8003c90:	3c01      	subs	r4, #1
 8003c92:	e7ea      	b.n	8003c6a <quorem+0xea>
 8003c94:	2000      	movs	r0, #0
 8003c96:	e7ee      	b.n	8003c76 <quorem+0xf6>

08003c98 <_dtoa_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	ec57 6b10 	vmov	r6, r7, d0
 8003ca0:	b097      	sub	sp, #92	; 0x5c
 8003ca2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ca4:	9106      	str	r1, [sp, #24]
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003caa:	9312      	str	r3, [sp, #72]	; 0x48
 8003cac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003cb0:	e9cd 6700 	strd	r6, r7, [sp]
 8003cb4:	b93d      	cbnz	r5, 8003cc6 <_dtoa_r+0x2e>
 8003cb6:	2010      	movs	r0, #16
 8003cb8:	f000 ff92 	bl	8004be0 <malloc>
 8003cbc:	6260      	str	r0, [r4, #36]	; 0x24
 8003cbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003cc2:	6005      	str	r5, [r0, #0]
 8003cc4:	60c5      	str	r5, [r0, #12]
 8003cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	b151      	cbz	r1, 8003ce2 <_dtoa_r+0x4a>
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	604a      	str	r2, [r1, #4]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4093      	lsls	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f000 ffc9 	bl	8004c6e <_Bfree>
 8003cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	1e3b      	subs	r3, r7, #0
 8003ce4:	bfbb      	ittet	lt
 8003ce6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cea:	9301      	strlt	r3, [sp, #4]
 8003cec:	2300      	movge	r3, #0
 8003cee:	2201      	movlt	r2, #1
 8003cf0:	bfac      	ite	ge
 8003cf2:	f8c8 3000 	strge.w	r3, [r8]
 8003cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8003cfa:	4baf      	ldr	r3, [pc, #700]	; (8003fb8 <_dtoa_r+0x320>)
 8003cfc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003d00:	ea33 0308 	bics.w	r3, r3, r8
 8003d04:	d114      	bne.n	8003d30 <_dtoa_r+0x98>
 8003d06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d08:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	9b00      	ldr	r3, [sp, #0]
 8003d10:	b923      	cbnz	r3, 8003d1c <_dtoa_r+0x84>
 8003d12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003d16:	2800      	cmp	r0, #0
 8003d18:	f000 8542 	beq.w	80047a0 <_dtoa_r+0xb08>
 8003d1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d1e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8003fcc <_dtoa_r+0x334>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8544 	beq.w	80047b0 <_dtoa_r+0xb18>
 8003d28:	f10b 0303 	add.w	r3, fp, #3
 8003d2c:	f000 bd3e 	b.w	80047ac <_dtoa_r+0xb14>
 8003d30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2300      	movs	r3, #0
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	f7fc fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d40:	4681      	mov	r9, r0
 8003d42:	b168      	cbz	r0, 8003d60 <_dtoa_r+0xc8>
 8003d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d46:	2301      	movs	r3, #1
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8524 	beq.w	800479a <_dtoa_r+0xb02>
 8003d52:	4b9a      	ldr	r3, [pc, #616]	; (8003fbc <_dtoa_r+0x324>)
 8003d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d56:	f103 3bff 	add.w	fp, r3, #4294967295
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	f000 bd28 	b.w	80047b0 <_dtoa_r+0xb18>
 8003d60:	aa14      	add	r2, sp, #80	; 0x50
 8003d62:	a915      	add	r1, sp, #84	; 0x54
 8003d64:	ec47 6b10 	vmov	d0, r6, r7
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f001 f9d8 	bl	800511e <__d2b>
 8003d6e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003d72:	9004      	str	r0, [sp, #16]
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	d07c      	beq.n	8003e72 <_dtoa_r+0x1da>
 8003d78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d7c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003d80:	46b2      	mov	sl, r6
 8003d82:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003d86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d8a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4b8b      	ldr	r3, [pc, #556]	; (8003fc0 <_dtoa_r+0x328>)
 8003d92:	4650      	mov	r0, sl
 8003d94:	4659      	mov	r1, fp
 8003d96:	f7fc fa77 	bl	8000288 <__aeabi_dsub>
 8003d9a:	a381      	add	r3, pc, #516	; (adr r3, 8003fa0 <_dtoa_r+0x308>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f7fc fc2a 	bl	80005f8 <__aeabi_dmul>
 8003da4:	a380      	add	r3, pc, #512	; (adr r3, 8003fa8 <_dtoa_r+0x310>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f7fc fa6f 	bl	800028c <__adddf3>
 8003dae:	4606      	mov	r6, r0
 8003db0:	4628      	mov	r0, r5
 8003db2:	460f      	mov	r7, r1
 8003db4:	f7fc fbb6 	bl	8000524 <__aeabi_i2d>
 8003db8:	a37d      	add	r3, pc, #500	; (adr r3, 8003fb0 <_dtoa_r+0x318>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fc1b 	bl	80005f8 <__aeabi_dmul>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	4639      	mov	r1, r7
 8003dca:	f7fc fa5f 	bl	800028c <__adddf3>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	460f      	mov	r7, r1
 8003dd2:	f7fc fec1 	bl	8000b58 <__aeabi_d2iz>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4682      	mov	sl, r0
 8003dda:	2300      	movs	r3, #0
 8003ddc:	4630      	mov	r0, r6
 8003dde:	4639      	mov	r1, r7
 8003de0:	f7fc fe7c 	bl	8000adc <__aeabi_dcmplt>
 8003de4:	b148      	cbz	r0, 8003dfa <_dtoa_r+0x162>
 8003de6:	4650      	mov	r0, sl
 8003de8:	f7fc fb9c 	bl	8000524 <__aeabi_i2d>
 8003dec:	4632      	mov	r2, r6
 8003dee:	463b      	mov	r3, r7
 8003df0:	f7fc fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003df4:	b908      	cbnz	r0, 8003dfa <_dtoa_r+0x162>
 8003df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dfa:	f1ba 0f16 	cmp.w	sl, #22
 8003dfe:	d859      	bhi.n	8003eb4 <_dtoa_r+0x21c>
 8003e00:	4970      	ldr	r1, [pc, #448]	; (8003fc4 <_dtoa_r+0x32c>)
 8003e02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003e06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e0e:	f7fc fe83 	bl	8000b18 <__aeabi_dcmpgt>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d050      	beq.n	8003eb8 <_dtoa_r+0x220>
 8003e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e20:	1b5d      	subs	r5, r3, r5
 8003e22:	f1b5 0801 	subs.w	r8, r5, #1
 8003e26:	bf49      	itett	mi
 8003e28:	f1c5 0301 	rsbmi	r3, r5, #1
 8003e2c:	2300      	movpl	r3, #0
 8003e2e:	9305      	strmi	r3, [sp, #20]
 8003e30:	f04f 0800 	movmi.w	r8, #0
 8003e34:	bf58      	it	pl
 8003e36:	9305      	strpl	r3, [sp, #20]
 8003e38:	f1ba 0f00 	cmp.w	sl, #0
 8003e3c:	db3e      	blt.n	8003ebc <_dtoa_r+0x224>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	44d0      	add	r8, sl
 8003e42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003e46:	9307      	str	r3, [sp, #28]
 8003e48:	9b06      	ldr	r3, [sp, #24]
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	f200 8090 	bhi.w	8003f70 <_dtoa_r+0x2d8>
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	bfc4      	itt	gt
 8003e54:	3b04      	subgt	r3, #4
 8003e56:	9306      	strgt	r3, [sp, #24]
 8003e58:	9b06      	ldr	r3, [sp, #24]
 8003e5a:	f1a3 0302 	sub.w	r3, r3, #2
 8003e5e:	bfcc      	ite	gt
 8003e60:	2500      	movgt	r5, #0
 8003e62:	2501      	movle	r5, #1
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	f200 808f 	bhi.w	8003f88 <_dtoa_r+0x2f0>
 8003e6a:	e8df f003 	tbb	[pc, r3]
 8003e6e:	7f7d      	.short	0x7f7d
 8003e70:	7131      	.short	0x7131
 8003e72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003e76:	441d      	add	r5, r3
 8003e78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003e7c:	2820      	cmp	r0, #32
 8003e7e:	dd13      	ble.n	8003ea8 <_dtoa_r+0x210>
 8003e80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003e84:	9b00      	ldr	r3, [sp, #0]
 8003e86:	fa08 f800 	lsl.w	r8, r8, r0
 8003e8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003e8e:	fa23 f000 	lsr.w	r0, r3, r0
 8003e92:	ea48 0000 	orr.w	r0, r8, r0
 8003e96:	f7fc fb35 	bl	8000504 <__aeabi_ui2d>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4682      	mov	sl, r0
 8003e9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003ea2:	3d01      	subs	r5, #1
 8003ea4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ea6:	e772      	b.n	8003d8e <_dtoa_r+0xf6>
 8003ea8:	9b00      	ldr	r3, [sp, #0]
 8003eaa:	f1c0 0020 	rsb	r0, r0, #32
 8003eae:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb2:	e7f0      	b.n	8003e96 <_dtoa_r+0x1fe>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e7b1      	b.n	8003e1c <_dtoa_r+0x184>
 8003eb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8003eba:	e7b0      	b.n	8003e1e <_dtoa_r+0x186>
 8003ebc:	9b05      	ldr	r3, [sp, #20]
 8003ebe:	eba3 030a 	sub.w	r3, r3, sl
 8003ec2:	9305      	str	r3, [sp, #20]
 8003ec4:	f1ca 0300 	rsb	r3, sl, #0
 8003ec8:	9307      	str	r3, [sp, #28]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8003ece:	e7bb      	b.n	8003e48 <_dtoa_r+0x1b0>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	dd59      	ble.n	8003f8e <_dtoa_r+0x2f6>
 8003eda:	9302      	str	r3, [sp, #8]
 8003edc:	4699      	mov	r9, r3
 8003ede:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	6072      	str	r2, [r6, #4]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	f102 0014 	add.w	r0, r2, #20
 8003eea:	4298      	cmp	r0, r3
 8003eec:	6871      	ldr	r1, [r6, #4]
 8003eee:	d953      	bls.n	8003f98 <_dtoa_r+0x300>
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fe88 	bl	8004c06 <_Balloc>
 8003ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef8:	6030      	str	r0, [r6, #0]
 8003efa:	f1b9 0f0e 	cmp.w	r9, #14
 8003efe:	f8d3 b000 	ldr.w	fp, [r3]
 8003f02:	f200 80e6 	bhi.w	80040d2 <_dtoa_r+0x43a>
 8003f06:	2d00      	cmp	r5, #0
 8003f08:	f000 80e3 	beq.w	80040d2 <_dtoa_r+0x43a>
 8003f0c:	ed9d 7b00 	vldr	d7, [sp]
 8003f10:	f1ba 0f00 	cmp.w	sl, #0
 8003f14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003f18:	dd74      	ble.n	8004004 <_dtoa_r+0x36c>
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <_dtoa_r+0x32c>)
 8003f1c:	f00a 030f 	and.w	r3, sl, #15
 8003f20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f24:	ed93 7b00 	vldr	d7, [r3]
 8003f28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003f2c:	06f0      	lsls	r0, r6, #27
 8003f2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f32:	d565      	bpl.n	8004000 <_dtoa_r+0x368>
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <_dtoa_r+0x330>)
 8003f36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f3e:	f7fc fc85 	bl	800084c <__aeabi_ddiv>
 8003f42:	e9cd 0100 	strd	r0, r1, [sp]
 8003f46:	f006 060f 	and.w	r6, r6, #15
 8003f4a:	2503      	movs	r5, #3
 8003f4c:	4f1e      	ldr	r7, [pc, #120]	; (8003fc8 <_dtoa_r+0x330>)
 8003f4e:	e04c      	b.n	8003fea <_dtoa_r+0x352>
 8003f50:	2301      	movs	r3, #1
 8003f52:	930a      	str	r3, [sp, #40]	; 0x28
 8003f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f56:	4453      	add	r3, sl
 8003f58:	f103 0901 	add.w	r9, r3, #1
 8003f5c:	9302      	str	r3, [sp, #8]
 8003f5e:	464b      	mov	r3, r9
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	bfb8      	it	lt
 8003f64:	2301      	movlt	r3, #1
 8003f66:	e7ba      	b.n	8003ede <_dtoa_r+0x246>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e7b2      	b.n	8003ed2 <_dtoa_r+0x23a>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e7f0      	b.n	8003f52 <_dtoa_r+0x2ba>
 8003f70:	2501      	movs	r5, #1
 8003f72:	2300      	movs	r3, #0
 8003f74:	9306      	str	r3, [sp, #24]
 8003f76:	950a      	str	r5, [sp, #40]	; 0x28
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	9302      	str	r3, [sp, #8]
 8003f7e:	4699      	mov	r9, r3
 8003f80:	2200      	movs	r2, #0
 8003f82:	2312      	movs	r3, #18
 8003f84:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f86:	e7aa      	b.n	8003ede <_dtoa_r+0x246>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f8c:	e7f4      	b.n	8003f78 <_dtoa_r+0x2e0>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	9302      	str	r3, [sp, #8]
 8003f92:	4699      	mov	r9, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	e7f5      	b.n	8003f84 <_dtoa_r+0x2ec>
 8003f98:	3101      	adds	r1, #1
 8003f9a:	6071      	str	r1, [r6, #4]
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	e7a2      	b.n	8003ee6 <_dtoa_r+0x24e>
 8003fa0:	636f4361 	.word	0x636f4361
 8003fa4:	3fd287a7 	.word	0x3fd287a7
 8003fa8:	8b60c8b3 	.word	0x8b60c8b3
 8003fac:	3fc68a28 	.word	0x3fc68a28
 8003fb0:	509f79fb 	.word	0x509f79fb
 8003fb4:	3fd34413 	.word	0x3fd34413
 8003fb8:	7ff00000 	.word	0x7ff00000
 8003fbc:	08005921 	.word	0x08005921
 8003fc0:	3ff80000 	.word	0x3ff80000
 8003fc4:	080059e0 	.word	0x080059e0
 8003fc8:	080059b8 	.word	0x080059b8
 8003fcc:	0800594d 	.word	0x0800594d
 8003fd0:	07f1      	lsls	r1, r6, #31
 8003fd2:	d508      	bpl.n	8003fe6 <_dtoa_r+0x34e>
 8003fd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fdc:	f7fc fb0c 	bl	80005f8 <__aeabi_dmul>
 8003fe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	1076      	asrs	r6, r6, #1
 8003fe8:	3708      	adds	r7, #8
 8003fea:	2e00      	cmp	r6, #0
 8003fec:	d1f0      	bne.n	8003fd0 <_dtoa_r+0x338>
 8003fee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ff6:	f7fc fc29 	bl	800084c <__aeabi_ddiv>
 8003ffa:	e9cd 0100 	strd	r0, r1, [sp]
 8003ffe:	e01a      	b.n	8004036 <_dtoa_r+0x39e>
 8004000:	2502      	movs	r5, #2
 8004002:	e7a3      	b.n	8003f4c <_dtoa_r+0x2b4>
 8004004:	f000 80a0 	beq.w	8004148 <_dtoa_r+0x4b0>
 8004008:	f1ca 0600 	rsb	r6, sl, #0
 800400c:	4b9f      	ldr	r3, [pc, #636]	; (800428c <_dtoa_r+0x5f4>)
 800400e:	4fa0      	ldr	r7, [pc, #640]	; (8004290 <_dtoa_r+0x5f8>)
 8004010:	f006 020f 	and.w	r2, r6, #15
 8004014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004020:	f7fc faea 	bl	80005f8 <__aeabi_dmul>
 8004024:	e9cd 0100 	strd	r0, r1, [sp]
 8004028:	1136      	asrs	r6, r6, #4
 800402a:	2300      	movs	r3, #0
 800402c:	2502      	movs	r5, #2
 800402e:	2e00      	cmp	r6, #0
 8004030:	d17f      	bne.n	8004132 <_dtoa_r+0x49a>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e1      	bne.n	8003ffa <_dtoa_r+0x362>
 8004036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8087 	beq.w	800414c <_dtoa_r+0x4b4>
 800403e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004042:	2200      	movs	r2, #0
 8004044:	4b93      	ldr	r3, [pc, #588]	; (8004294 <_dtoa_r+0x5fc>)
 8004046:	4630      	mov	r0, r6
 8004048:	4639      	mov	r1, r7
 800404a:	f7fc fd47 	bl	8000adc <__aeabi_dcmplt>
 800404e:	2800      	cmp	r0, #0
 8004050:	d07c      	beq.n	800414c <_dtoa_r+0x4b4>
 8004052:	f1b9 0f00 	cmp.w	r9, #0
 8004056:	d079      	beq.n	800414c <_dtoa_r+0x4b4>
 8004058:	9b02      	ldr	r3, [sp, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	dd35      	ble.n	80040ca <_dtoa_r+0x432>
 800405e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004062:	9308      	str	r3, [sp, #32]
 8004064:	4639      	mov	r1, r7
 8004066:	2200      	movs	r2, #0
 8004068:	4b8b      	ldr	r3, [pc, #556]	; (8004298 <_dtoa_r+0x600>)
 800406a:	4630      	mov	r0, r6
 800406c:	f7fc fac4 	bl	80005f8 <__aeabi_dmul>
 8004070:	e9cd 0100 	strd	r0, r1, [sp]
 8004074:	9f02      	ldr	r7, [sp, #8]
 8004076:	3501      	adds	r5, #1
 8004078:	4628      	mov	r0, r5
 800407a:	f7fc fa53 	bl	8000524 <__aeabi_i2d>
 800407e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004082:	f7fc fab9 	bl	80005f8 <__aeabi_dmul>
 8004086:	2200      	movs	r2, #0
 8004088:	4b84      	ldr	r3, [pc, #528]	; (800429c <_dtoa_r+0x604>)
 800408a:	f7fc f8ff 	bl	800028c <__adddf3>
 800408e:	4605      	mov	r5, r0
 8004090:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004094:	2f00      	cmp	r7, #0
 8004096:	d15d      	bne.n	8004154 <_dtoa_r+0x4bc>
 8004098:	2200      	movs	r2, #0
 800409a:	4b81      	ldr	r3, [pc, #516]	; (80042a0 <_dtoa_r+0x608>)
 800409c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040a0:	f7fc f8f2 	bl	8000288 <__aeabi_dsub>
 80040a4:	462a      	mov	r2, r5
 80040a6:	4633      	mov	r3, r6
 80040a8:	e9cd 0100 	strd	r0, r1, [sp]
 80040ac:	f7fc fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	f040 8288 	bne.w	80045c6 <_dtoa_r+0x92e>
 80040b6:	462a      	mov	r2, r5
 80040b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80040bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040c0:	f7fc fd0c 	bl	8000adc <__aeabi_dcmplt>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f040 827c 	bne.w	80045c2 <_dtoa_r+0x92a>
 80040ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040ce:	e9cd 2300 	strd	r2, r3, [sp]
 80040d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f2c0 8150 	blt.w	800437a <_dtoa_r+0x6e2>
 80040da:	f1ba 0f0e 	cmp.w	sl, #14
 80040de:	f300 814c 	bgt.w	800437a <_dtoa_r+0x6e2>
 80040e2:	4b6a      	ldr	r3, [pc, #424]	; (800428c <_dtoa_r+0x5f4>)
 80040e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80040e8:	ed93 7b00 	vldr	d7, [r3]
 80040ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80040f4:	f280 80d8 	bge.w	80042a8 <_dtoa_r+0x610>
 80040f8:	f1b9 0f00 	cmp.w	r9, #0
 80040fc:	f300 80d4 	bgt.w	80042a8 <_dtoa_r+0x610>
 8004100:	f040 825e 	bne.w	80045c0 <_dtoa_r+0x928>
 8004104:	2200      	movs	r2, #0
 8004106:	4b66      	ldr	r3, [pc, #408]	; (80042a0 <_dtoa_r+0x608>)
 8004108:	ec51 0b17 	vmov	r0, r1, d7
 800410c:	f7fc fa74 	bl	80005f8 <__aeabi_dmul>
 8004110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004114:	f7fc fcf6 	bl	8000b04 <__aeabi_dcmpge>
 8004118:	464f      	mov	r7, r9
 800411a:	464e      	mov	r6, r9
 800411c:	2800      	cmp	r0, #0
 800411e:	f040 8234 	bne.w	800458a <_dtoa_r+0x8f2>
 8004122:	2331      	movs	r3, #49	; 0x31
 8004124:	f10b 0501 	add.w	r5, fp, #1
 8004128:	f88b 3000 	strb.w	r3, [fp]
 800412c:	f10a 0a01 	add.w	sl, sl, #1
 8004130:	e22f      	b.n	8004592 <_dtoa_r+0x8fa>
 8004132:	07f2      	lsls	r2, r6, #31
 8004134:	d505      	bpl.n	8004142 <_dtoa_r+0x4aa>
 8004136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800413a:	f7fc fa5d 	bl	80005f8 <__aeabi_dmul>
 800413e:	3501      	adds	r5, #1
 8004140:	2301      	movs	r3, #1
 8004142:	1076      	asrs	r6, r6, #1
 8004144:	3708      	adds	r7, #8
 8004146:	e772      	b.n	800402e <_dtoa_r+0x396>
 8004148:	2502      	movs	r5, #2
 800414a:	e774      	b.n	8004036 <_dtoa_r+0x39e>
 800414c:	f8cd a020 	str.w	sl, [sp, #32]
 8004150:	464f      	mov	r7, r9
 8004152:	e791      	b.n	8004078 <_dtoa_r+0x3e0>
 8004154:	4b4d      	ldr	r3, [pc, #308]	; (800428c <_dtoa_r+0x5f4>)
 8004156:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800415a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800415e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d047      	beq.n	80041f4 <_dtoa_r+0x55c>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	2000      	movs	r0, #0
 800416a:	494e      	ldr	r1, [pc, #312]	; (80042a4 <_dtoa_r+0x60c>)
 800416c:	f7fc fb6e 	bl	800084c <__aeabi_ddiv>
 8004170:	462a      	mov	r2, r5
 8004172:	4633      	mov	r3, r6
 8004174:	f7fc f888 	bl	8000288 <__aeabi_dsub>
 8004178:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800417c:	465d      	mov	r5, fp
 800417e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004182:	f7fc fce9 	bl	8000b58 <__aeabi_d2iz>
 8004186:	4606      	mov	r6, r0
 8004188:	f7fc f9cc 	bl	8000524 <__aeabi_i2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004194:	f7fc f878 	bl	8000288 <__aeabi_dsub>
 8004198:	3630      	adds	r6, #48	; 0x30
 800419a:	f805 6b01 	strb.w	r6, [r5], #1
 800419e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80041a2:	e9cd 0100 	strd	r0, r1, [sp]
 80041a6:	f7fc fc99 	bl	8000adc <__aeabi_dcmplt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d163      	bne.n	8004276 <_dtoa_r+0x5de>
 80041ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041b2:	2000      	movs	r0, #0
 80041b4:	4937      	ldr	r1, [pc, #220]	; (8004294 <_dtoa_r+0x5fc>)
 80041b6:	f7fc f867 	bl	8000288 <__aeabi_dsub>
 80041ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80041be:	f7fc fc8d 	bl	8000adc <__aeabi_dcmplt>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	f040 80b7 	bne.w	8004336 <_dtoa_r+0x69e>
 80041c8:	eba5 030b 	sub.w	r3, r5, fp
 80041cc:	429f      	cmp	r7, r3
 80041ce:	f77f af7c 	ble.w	80040ca <_dtoa_r+0x432>
 80041d2:	2200      	movs	r2, #0
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <_dtoa_r+0x600>)
 80041d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041da:	f7fc fa0d 	bl	80005f8 <__aeabi_dmul>
 80041de:	2200      	movs	r2, #0
 80041e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80041e4:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <_dtoa_r+0x600>)
 80041e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041ea:	f7fc fa05 	bl	80005f8 <__aeabi_dmul>
 80041ee:	e9cd 0100 	strd	r0, r1, [sp]
 80041f2:	e7c4      	b.n	800417e <_dtoa_r+0x4e6>
 80041f4:	462a      	mov	r2, r5
 80041f6:	4633      	mov	r3, r6
 80041f8:	f7fc f9fe 	bl	80005f8 <__aeabi_dmul>
 80041fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004200:	eb0b 0507 	add.w	r5, fp, r7
 8004204:	465e      	mov	r6, fp
 8004206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800420a:	f7fc fca5 	bl	8000b58 <__aeabi_d2iz>
 800420e:	4607      	mov	r7, r0
 8004210:	f7fc f988 	bl	8000524 <__aeabi_i2d>
 8004214:	3730      	adds	r7, #48	; 0x30
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800421e:	f7fc f833 	bl	8000288 <__aeabi_dsub>
 8004222:	f806 7b01 	strb.w	r7, [r6], #1
 8004226:	42ae      	cmp	r6, r5
 8004228:	e9cd 0100 	strd	r0, r1, [sp]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	d126      	bne.n	8004280 <_dtoa_r+0x5e8>
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <_dtoa_r+0x60c>)
 8004234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004238:	f7fc f828 	bl	800028c <__adddf3>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004244:	f7fc fc68 	bl	8000b18 <__aeabi_dcmpgt>
 8004248:	2800      	cmp	r0, #0
 800424a:	d174      	bne.n	8004336 <_dtoa_r+0x69e>
 800424c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004250:	2000      	movs	r0, #0
 8004252:	4914      	ldr	r1, [pc, #80]	; (80042a4 <_dtoa_r+0x60c>)
 8004254:	f7fc f818 	bl	8000288 <__aeabi_dsub>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004260:	f7fc fc3c 	bl	8000adc <__aeabi_dcmplt>
 8004264:	2800      	cmp	r0, #0
 8004266:	f43f af30 	beq.w	80040ca <_dtoa_r+0x432>
 800426a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800426e:	2b30      	cmp	r3, #48	; 0x30
 8004270:	f105 32ff 	add.w	r2, r5, #4294967295
 8004274:	d002      	beq.n	800427c <_dtoa_r+0x5e4>
 8004276:	f8dd a020 	ldr.w	sl, [sp, #32]
 800427a:	e04a      	b.n	8004312 <_dtoa_r+0x67a>
 800427c:	4615      	mov	r5, r2
 800427e:	e7f4      	b.n	800426a <_dtoa_r+0x5d2>
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <_dtoa_r+0x600>)
 8004282:	f7fc f9b9 	bl	80005f8 <__aeabi_dmul>
 8004286:	e9cd 0100 	strd	r0, r1, [sp]
 800428a:	e7bc      	b.n	8004206 <_dtoa_r+0x56e>
 800428c:	080059e0 	.word	0x080059e0
 8004290:	080059b8 	.word	0x080059b8
 8004294:	3ff00000 	.word	0x3ff00000
 8004298:	40240000 	.word	0x40240000
 800429c:	401c0000 	.word	0x401c0000
 80042a0:	40140000 	.word	0x40140000
 80042a4:	3fe00000 	.word	0x3fe00000
 80042a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80042ac:	465d      	mov	r5, fp
 80042ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042b2:	4630      	mov	r0, r6
 80042b4:	4639      	mov	r1, r7
 80042b6:	f7fc fac9 	bl	800084c <__aeabi_ddiv>
 80042ba:	f7fc fc4d 	bl	8000b58 <__aeabi_d2iz>
 80042be:	4680      	mov	r8, r0
 80042c0:	f7fc f930 	bl	8000524 <__aeabi_i2d>
 80042c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042c8:	f7fc f996 	bl	80005f8 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80042d8:	f7fb ffd6 	bl	8000288 <__aeabi_dsub>
 80042dc:	f805 6b01 	strb.w	r6, [r5], #1
 80042e0:	eba5 060b 	sub.w	r6, r5, fp
 80042e4:	45b1      	cmp	r9, r6
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	d139      	bne.n	8004360 <_dtoa_r+0x6c8>
 80042ec:	f7fb ffce 	bl	800028c <__adddf3>
 80042f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042f4:	4606      	mov	r6, r0
 80042f6:	460f      	mov	r7, r1
 80042f8:	f7fc fc0e 	bl	8000b18 <__aeabi_dcmpgt>
 80042fc:	b9c8      	cbnz	r0, 8004332 <_dtoa_r+0x69a>
 80042fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004302:	4630      	mov	r0, r6
 8004304:	4639      	mov	r1, r7
 8004306:	f7fc fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800430a:	b110      	cbz	r0, 8004312 <_dtoa_r+0x67a>
 800430c:	f018 0f01 	tst.w	r8, #1
 8004310:	d10f      	bne.n	8004332 <_dtoa_r+0x69a>
 8004312:	9904      	ldr	r1, [sp, #16]
 8004314:	4620      	mov	r0, r4
 8004316:	f000 fcaa 	bl	8004c6e <_Bfree>
 800431a:	2300      	movs	r3, #0
 800431c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800431e:	702b      	strb	r3, [r5, #0]
 8004320:	f10a 0301 	add.w	r3, sl, #1
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8241 	beq.w	80047b0 <_dtoa_r+0xb18>
 800432e:	601d      	str	r5, [r3, #0]
 8004330:	e23e      	b.n	80047b0 <_dtoa_r+0xb18>
 8004332:	f8cd a020 	str.w	sl, [sp, #32]
 8004336:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800433a:	2a39      	cmp	r2, #57	; 0x39
 800433c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004340:	d108      	bne.n	8004354 <_dtoa_r+0x6bc>
 8004342:	459b      	cmp	fp, r3
 8004344:	d10a      	bne.n	800435c <_dtoa_r+0x6c4>
 8004346:	9b08      	ldr	r3, [sp, #32]
 8004348:	3301      	adds	r3, #1
 800434a:	9308      	str	r3, [sp, #32]
 800434c:	2330      	movs	r3, #48	; 0x30
 800434e:	f88b 3000 	strb.w	r3, [fp]
 8004352:	465b      	mov	r3, fp
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	3201      	adds	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e78c      	b.n	8004276 <_dtoa_r+0x5de>
 800435c:	461d      	mov	r5, r3
 800435e:	e7ea      	b.n	8004336 <_dtoa_r+0x69e>
 8004360:	2200      	movs	r2, #0
 8004362:	4b9b      	ldr	r3, [pc, #620]	; (80045d0 <_dtoa_r+0x938>)
 8004364:	f7fc f948 	bl	80005f8 <__aeabi_dmul>
 8004368:	2200      	movs	r2, #0
 800436a:	2300      	movs	r3, #0
 800436c:	4606      	mov	r6, r0
 800436e:	460f      	mov	r7, r1
 8004370:	f7fc fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8004374:	2800      	cmp	r0, #0
 8004376:	d09a      	beq.n	80042ae <_dtoa_r+0x616>
 8004378:	e7cb      	b.n	8004312 <_dtoa_r+0x67a>
 800437a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800437c:	2a00      	cmp	r2, #0
 800437e:	f000 808b 	beq.w	8004498 <_dtoa_r+0x800>
 8004382:	9a06      	ldr	r2, [sp, #24]
 8004384:	2a01      	cmp	r2, #1
 8004386:	dc6e      	bgt.n	8004466 <_dtoa_r+0x7ce>
 8004388:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800438a:	2a00      	cmp	r2, #0
 800438c:	d067      	beq.n	800445e <_dtoa_r+0x7c6>
 800438e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004392:	9f07      	ldr	r7, [sp, #28]
 8004394:	9d05      	ldr	r5, [sp, #20]
 8004396:	9a05      	ldr	r2, [sp, #20]
 8004398:	2101      	movs	r1, #1
 800439a:	441a      	add	r2, r3
 800439c:	4620      	mov	r0, r4
 800439e:	9205      	str	r2, [sp, #20]
 80043a0:	4498      	add	r8, r3
 80043a2:	f000 fd04 	bl	8004dae <__i2b>
 80043a6:	4606      	mov	r6, r0
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	dd0c      	ble.n	80043c6 <_dtoa_r+0x72e>
 80043ac:	f1b8 0f00 	cmp.w	r8, #0
 80043b0:	dd09      	ble.n	80043c6 <_dtoa_r+0x72e>
 80043b2:	4545      	cmp	r5, r8
 80043b4:	9a05      	ldr	r2, [sp, #20]
 80043b6:	462b      	mov	r3, r5
 80043b8:	bfa8      	it	ge
 80043ba:	4643      	movge	r3, r8
 80043bc:	1ad2      	subs	r2, r2, r3
 80043be:	9205      	str	r2, [sp, #20]
 80043c0:	1aed      	subs	r5, r5, r3
 80043c2:	eba8 0803 	sub.w	r8, r8, r3
 80043c6:	9b07      	ldr	r3, [sp, #28]
 80043c8:	b1eb      	cbz	r3, 8004406 <_dtoa_r+0x76e>
 80043ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d067      	beq.n	80044a0 <_dtoa_r+0x808>
 80043d0:	b18f      	cbz	r7, 80043f6 <_dtoa_r+0x75e>
 80043d2:	4631      	mov	r1, r6
 80043d4:	463a      	mov	r2, r7
 80043d6:	4620      	mov	r0, r4
 80043d8:	f000 fd88 	bl	8004eec <__pow5mult>
 80043dc:	9a04      	ldr	r2, [sp, #16]
 80043de:	4601      	mov	r1, r0
 80043e0:	4606      	mov	r6, r0
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 fcec 	bl	8004dc0 <__multiply>
 80043e8:	9904      	ldr	r1, [sp, #16]
 80043ea:	9008      	str	r0, [sp, #32]
 80043ec:	4620      	mov	r0, r4
 80043ee:	f000 fc3e 	bl	8004c6e <_Bfree>
 80043f2:	9b08      	ldr	r3, [sp, #32]
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	9b07      	ldr	r3, [sp, #28]
 80043f8:	1bda      	subs	r2, r3, r7
 80043fa:	d004      	beq.n	8004406 <_dtoa_r+0x76e>
 80043fc:	9904      	ldr	r1, [sp, #16]
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 fd74 	bl	8004eec <__pow5mult>
 8004404:	9004      	str	r0, [sp, #16]
 8004406:	2101      	movs	r1, #1
 8004408:	4620      	mov	r0, r4
 800440a:	f000 fcd0 	bl	8004dae <__i2b>
 800440e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004410:	4607      	mov	r7, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 81d0 	beq.w	80047b8 <_dtoa_r+0xb20>
 8004418:	461a      	mov	r2, r3
 800441a:	4601      	mov	r1, r0
 800441c:	4620      	mov	r0, r4
 800441e:	f000 fd65 	bl	8004eec <__pow5mult>
 8004422:	9b06      	ldr	r3, [sp, #24]
 8004424:	2b01      	cmp	r3, #1
 8004426:	4607      	mov	r7, r0
 8004428:	dc40      	bgt.n	80044ac <_dtoa_r+0x814>
 800442a:	9b00      	ldr	r3, [sp, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d139      	bne.n	80044a4 <_dtoa_r+0x80c>
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004436:	2b00      	cmp	r3, #0
 8004438:	d136      	bne.n	80044a8 <_dtoa_r+0x810>
 800443a:	9b01      	ldr	r3, [sp, #4]
 800443c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004440:	0d1b      	lsrs	r3, r3, #20
 8004442:	051b      	lsls	r3, r3, #20
 8004444:	b12b      	cbz	r3, 8004452 <_dtoa_r+0x7ba>
 8004446:	9b05      	ldr	r3, [sp, #20]
 8004448:	3301      	adds	r3, #1
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	f108 0801 	add.w	r8, r8, #1
 8004450:	2301      	movs	r3, #1
 8004452:	9307      	str	r3, [sp, #28]
 8004454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004456:	2b00      	cmp	r3, #0
 8004458:	d12a      	bne.n	80044b0 <_dtoa_r+0x818>
 800445a:	2001      	movs	r0, #1
 800445c:	e030      	b.n	80044c0 <_dtoa_r+0x828>
 800445e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004460:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004464:	e795      	b.n	8004392 <_dtoa_r+0x6fa>
 8004466:	9b07      	ldr	r3, [sp, #28]
 8004468:	f109 37ff 	add.w	r7, r9, #4294967295
 800446c:	42bb      	cmp	r3, r7
 800446e:	bfbf      	itttt	lt
 8004470:	9b07      	ldrlt	r3, [sp, #28]
 8004472:	9707      	strlt	r7, [sp, #28]
 8004474:	1afa      	sublt	r2, r7, r3
 8004476:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004478:	bfbb      	ittet	lt
 800447a:	189b      	addlt	r3, r3, r2
 800447c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800447e:	1bdf      	subge	r7, r3, r7
 8004480:	2700      	movlt	r7, #0
 8004482:	f1b9 0f00 	cmp.w	r9, #0
 8004486:	bfb5      	itete	lt
 8004488:	9b05      	ldrlt	r3, [sp, #20]
 800448a:	9d05      	ldrge	r5, [sp, #20]
 800448c:	eba3 0509 	sublt.w	r5, r3, r9
 8004490:	464b      	movge	r3, r9
 8004492:	bfb8      	it	lt
 8004494:	2300      	movlt	r3, #0
 8004496:	e77e      	b.n	8004396 <_dtoa_r+0x6fe>
 8004498:	9f07      	ldr	r7, [sp, #28]
 800449a:	9d05      	ldr	r5, [sp, #20]
 800449c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800449e:	e783      	b.n	80043a8 <_dtoa_r+0x710>
 80044a0:	9a07      	ldr	r2, [sp, #28]
 80044a2:	e7ab      	b.n	80043fc <_dtoa_r+0x764>
 80044a4:	2300      	movs	r3, #0
 80044a6:	e7d4      	b.n	8004452 <_dtoa_r+0x7ba>
 80044a8:	9b00      	ldr	r3, [sp, #0]
 80044aa:	e7d2      	b.n	8004452 <_dtoa_r+0x7ba>
 80044ac:	2300      	movs	r3, #0
 80044ae:	9307      	str	r3, [sp, #28]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80044b6:	6918      	ldr	r0, [r3, #16]
 80044b8:	f000 fc2b 	bl	8004d12 <__hi0bits>
 80044bc:	f1c0 0020 	rsb	r0, r0, #32
 80044c0:	4440      	add	r0, r8
 80044c2:	f010 001f 	ands.w	r0, r0, #31
 80044c6:	d047      	beq.n	8004558 <_dtoa_r+0x8c0>
 80044c8:	f1c0 0320 	rsb	r3, r0, #32
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	dd3b      	ble.n	8004548 <_dtoa_r+0x8b0>
 80044d0:	9b05      	ldr	r3, [sp, #20]
 80044d2:	f1c0 001c 	rsb	r0, r0, #28
 80044d6:	4403      	add	r3, r0
 80044d8:	9305      	str	r3, [sp, #20]
 80044da:	4405      	add	r5, r0
 80044dc:	4480      	add	r8, r0
 80044de:	9b05      	ldr	r3, [sp, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dd05      	ble.n	80044f0 <_dtoa_r+0x858>
 80044e4:	461a      	mov	r2, r3
 80044e6:	9904      	ldr	r1, [sp, #16]
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 fd4d 	bl	8004f88 <__lshift>
 80044ee:	9004      	str	r0, [sp, #16]
 80044f0:	f1b8 0f00 	cmp.w	r8, #0
 80044f4:	dd05      	ble.n	8004502 <_dtoa_r+0x86a>
 80044f6:	4639      	mov	r1, r7
 80044f8:	4642      	mov	r2, r8
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 fd44 	bl	8004f88 <__lshift>
 8004500:	4607      	mov	r7, r0
 8004502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004504:	b353      	cbz	r3, 800455c <_dtoa_r+0x8c4>
 8004506:	4639      	mov	r1, r7
 8004508:	9804      	ldr	r0, [sp, #16]
 800450a:	f000 fd91 	bl	8005030 <__mcmp>
 800450e:	2800      	cmp	r0, #0
 8004510:	da24      	bge.n	800455c <_dtoa_r+0x8c4>
 8004512:	2300      	movs	r3, #0
 8004514:	220a      	movs	r2, #10
 8004516:	9904      	ldr	r1, [sp, #16]
 8004518:	4620      	mov	r0, r4
 800451a:	f000 fbbf 	bl	8004c9c <__multadd>
 800451e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004520:	9004      	str	r0, [sp, #16]
 8004522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 814d 	beq.w	80047c6 <_dtoa_r+0xb2e>
 800452c:	2300      	movs	r3, #0
 800452e:	4631      	mov	r1, r6
 8004530:	220a      	movs	r2, #10
 8004532:	4620      	mov	r0, r4
 8004534:	f000 fbb2 	bl	8004c9c <__multadd>
 8004538:	9b02      	ldr	r3, [sp, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	4606      	mov	r6, r0
 800453e:	dc4f      	bgt.n	80045e0 <_dtoa_r+0x948>
 8004540:	9b06      	ldr	r3, [sp, #24]
 8004542:	2b02      	cmp	r3, #2
 8004544:	dd4c      	ble.n	80045e0 <_dtoa_r+0x948>
 8004546:	e011      	b.n	800456c <_dtoa_r+0x8d4>
 8004548:	d0c9      	beq.n	80044de <_dtoa_r+0x846>
 800454a:	9a05      	ldr	r2, [sp, #20]
 800454c:	331c      	adds	r3, #28
 800454e:	441a      	add	r2, r3
 8004550:	9205      	str	r2, [sp, #20]
 8004552:	441d      	add	r5, r3
 8004554:	4498      	add	r8, r3
 8004556:	e7c2      	b.n	80044de <_dtoa_r+0x846>
 8004558:	4603      	mov	r3, r0
 800455a:	e7f6      	b.n	800454a <_dtoa_r+0x8b2>
 800455c:	f1b9 0f00 	cmp.w	r9, #0
 8004560:	dc38      	bgt.n	80045d4 <_dtoa_r+0x93c>
 8004562:	9b06      	ldr	r3, [sp, #24]
 8004564:	2b02      	cmp	r3, #2
 8004566:	dd35      	ble.n	80045d4 <_dtoa_r+0x93c>
 8004568:	f8cd 9008 	str.w	r9, [sp, #8]
 800456c:	9b02      	ldr	r3, [sp, #8]
 800456e:	b963      	cbnz	r3, 800458a <_dtoa_r+0x8f2>
 8004570:	4639      	mov	r1, r7
 8004572:	2205      	movs	r2, #5
 8004574:	4620      	mov	r0, r4
 8004576:	f000 fb91 	bl	8004c9c <__multadd>
 800457a:	4601      	mov	r1, r0
 800457c:	4607      	mov	r7, r0
 800457e:	9804      	ldr	r0, [sp, #16]
 8004580:	f000 fd56 	bl	8005030 <__mcmp>
 8004584:	2800      	cmp	r0, #0
 8004586:	f73f adcc 	bgt.w	8004122 <_dtoa_r+0x48a>
 800458a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800458c:	465d      	mov	r5, fp
 800458e:	ea6f 0a03 	mvn.w	sl, r3
 8004592:	f04f 0900 	mov.w	r9, #0
 8004596:	4639      	mov	r1, r7
 8004598:	4620      	mov	r0, r4
 800459a:	f000 fb68 	bl	8004c6e <_Bfree>
 800459e:	2e00      	cmp	r6, #0
 80045a0:	f43f aeb7 	beq.w	8004312 <_dtoa_r+0x67a>
 80045a4:	f1b9 0f00 	cmp.w	r9, #0
 80045a8:	d005      	beq.n	80045b6 <_dtoa_r+0x91e>
 80045aa:	45b1      	cmp	r9, r6
 80045ac:	d003      	beq.n	80045b6 <_dtoa_r+0x91e>
 80045ae:	4649      	mov	r1, r9
 80045b0:	4620      	mov	r0, r4
 80045b2:	f000 fb5c 	bl	8004c6e <_Bfree>
 80045b6:	4631      	mov	r1, r6
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 fb58 	bl	8004c6e <_Bfree>
 80045be:	e6a8      	b.n	8004312 <_dtoa_r+0x67a>
 80045c0:	2700      	movs	r7, #0
 80045c2:	463e      	mov	r6, r7
 80045c4:	e7e1      	b.n	800458a <_dtoa_r+0x8f2>
 80045c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80045ca:	463e      	mov	r6, r7
 80045cc:	e5a9      	b.n	8004122 <_dtoa_r+0x48a>
 80045ce:	bf00      	nop
 80045d0:	40240000 	.word	0x40240000
 80045d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80fa 	beq.w	80047d4 <_dtoa_r+0xb3c>
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	dd05      	ble.n	80045f0 <_dtoa_r+0x958>
 80045e4:	4631      	mov	r1, r6
 80045e6:	462a      	mov	r2, r5
 80045e8:	4620      	mov	r0, r4
 80045ea:	f000 fccd 	bl	8004f88 <__lshift>
 80045ee:	4606      	mov	r6, r0
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d04c      	beq.n	8004690 <_dtoa_r+0x9f8>
 80045f6:	6871      	ldr	r1, [r6, #4]
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 fb04 	bl	8004c06 <_Balloc>
 80045fe:	6932      	ldr	r2, [r6, #16]
 8004600:	3202      	adds	r2, #2
 8004602:	4605      	mov	r5, r0
 8004604:	0092      	lsls	r2, r2, #2
 8004606:	f106 010c 	add.w	r1, r6, #12
 800460a:	300c      	adds	r0, #12
 800460c:	f000 faf0 	bl	8004bf0 <memcpy>
 8004610:	2201      	movs	r2, #1
 8004612:	4629      	mov	r1, r5
 8004614:	4620      	mov	r0, r4
 8004616:	f000 fcb7 	bl	8004f88 <__lshift>
 800461a:	9b00      	ldr	r3, [sp, #0]
 800461c:	f8cd b014 	str.w	fp, [sp, #20]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	46b1      	mov	r9, r6
 8004626:	9307      	str	r3, [sp, #28]
 8004628:	4606      	mov	r6, r0
 800462a:	4639      	mov	r1, r7
 800462c:	9804      	ldr	r0, [sp, #16]
 800462e:	f7ff faa7 	bl	8003b80 <quorem>
 8004632:	4649      	mov	r1, r9
 8004634:	4605      	mov	r5, r0
 8004636:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800463a:	9804      	ldr	r0, [sp, #16]
 800463c:	f000 fcf8 	bl	8005030 <__mcmp>
 8004640:	4632      	mov	r2, r6
 8004642:	9000      	str	r0, [sp, #0]
 8004644:	4639      	mov	r1, r7
 8004646:	4620      	mov	r0, r4
 8004648:	f000 fd0c 	bl	8005064 <__mdiff>
 800464c:	68c3      	ldr	r3, [r0, #12]
 800464e:	4602      	mov	r2, r0
 8004650:	bb03      	cbnz	r3, 8004694 <_dtoa_r+0x9fc>
 8004652:	4601      	mov	r1, r0
 8004654:	9008      	str	r0, [sp, #32]
 8004656:	9804      	ldr	r0, [sp, #16]
 8004658:	f000 fcea 	bl	8005030 <__mcmp>
 800465c:	9a08      	ldr	r2, [sp, #32]
 800465e:	4603      	mov	r3, r0
 8004660:	4611      	mov	r1, r2
 8004662:	4620      	mov	r0, r4
 8004664:	9308      	str	r3, [sp, #32]
 8004666:	f000 fb02 	bl	8004c6e <_Bfree>
 800466a:	9b08      	ldr	r3, [sp, #32]
 800466c:	b9a3      	cbnz	r3, 8004698 <_dtoa_r+0xa00>
 800466e:	9a06      	ldr	r2, [sp, #24]
 8004670:	b992      	cbnz	r2, 8004698 <_dtoa_r+0xa00>
 8004672:	9a07      	ldr	r2, [sp, #28]
 8004674:	b982      	cbnz	r2, 8004698 <_dtoa_r+0xa00>
 8004676:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800467a:	d029      	beq.n	80046d0 <_dtoa_r+0xa38>
 800467c:	9b00      	ldr	r3, [sp, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	dd01      	ble.n	8004686 <_dtoa_r+0x9ee>
 8004682:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004686:	9b05      	ldr	r3, [sp, #20]
 8004688:	1c5d      	adds	r5, r3, #1
 800468a:	f883 8000 	strb.w	r8, [r3]
 800468e:	e782      	b.n	8004596 <_dtoa_r+0x8fe>
 8004690:	4630      	mov	r0, r6
 8004692:	e7c2      	b.n	800461a <_dtoa_r+0x982>
 8004694:	2301      	movs	r3, #1
 8004696:	e7e3      	b.n	8004660 <_dtoa_r+0x9c8>
 8004698:	9a00      	ldr	r2, [sp, #0]
 800469a:	2a00      	cmp	r2, #0
 800469c:	db04      	blt.n	80046a8 <_dtoa_r+0xa10>
 800469e:	d125      	bne.n	80046ec <_dtoa_r+0xa54>
 80046a0:	9a06      	ldr	r2, [sp, #24]
 80046a2:	bb1a      	cbnz	r2, 80046ec <_dtoa_r+0xa54>
 80046a4:	9a07      	ldr	r2, [sp, #28]
 80046a6:	bb0a      	cbnz	r2, 80046ec <_dtoa_r+0xa54>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	ddec      	ble.n	8004686 <_dtoa_r+0x9ee>
 80046ac:	2201      	movs	r2, #1
 80046ae:	9904      	ldr	r1, [sp, #16]
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 fc69 	bl	8004f88 <__lshift>
 80046b6:	4639      	mov	r1, r7
 80046b8:	9004      	str	r0, [sp, #16]
 80046ba:	f000 fcb9 	bl	8005030 <__mcmp>
 80046be:	2800      	cmp	r0, #0
 80046c0:	dc03      	bgt.n	80046ca <_dtoa_r+0xa32>
 80046c2:	d1e0      	bne.n	8004686 <_dtoa_r+0x9ee>
 80046c4:	f018 0f01 	tst.w	r8, #1
 80046c8:	d0dd      	beq.n	8004686 <_dtoa_r+0x9ee>
 80046ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80046ce:	d1d8      	bne.n	8004682 <_dtoa_r+0x9ea>
 80046d0:	9b05      	ldr	r3, [sp, #20]
 80046d2:	9a05      	ldr	r2, [sp, #20]
 80046d4:	1c5d      	adds	r5, r3, #1
 80046d6:	2339      	movs	r3, #57	; 0x39
 80046d8:	7013      	strb	r3, [r2, #0]
 80046da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046de:	2b39      	cmp	r3, #57	; 0x39
 80046e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80046e4:	d04f      	beq.n	8004786 <_dtoa_r+0xaee>
 80046e6:	3301      	adds	r3, #1
 80046e8:	7013      	strb	r3, [r2, #0]
 80046ea:	e754      	b.n	8004596 <_dtoa_r+0x8fe>
 80046ec:	9a05      	ldr	r2, [sp, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f102 0501 	add.w	r5, r2, #1
 80046f4:	dd06      	ble.n	8004704 <_dtoa_r+0xa6c>
 80046f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80046fa:	d0e9      	beq.n	80046d0 <_dtoa_r+0xa38>
 80046fc:	f108 0801 	add.w	r8, r8, #1
 8004700:	9b05      	ldr	r3, [sp, #20]
 8004702:	e7c2      	b.n	800468a <_dtoa_r+0x9f2>
 8004704:	9a02      	ldr	r2, [sp, #8]
 8004706:	f805 8c01 	strb.w	r8, [r5, #-1]
 800470a:	eba5 030b 	sub.w	r3, r5, fp
 800470e:	4293      	cmp	r3, r2
 8004710:	d021      	beq.n	8004756 <_dtoa_r+0xabe>
 8004712:	2300      	movs	r3, #0
 8004714:	220a      	movs	r2, #10
 8004716:	9904      	ldr	r1, [sp, #16]
 8004718:	4620      	mov	r0, r4
 800471a:	f000 fabf 	bl	8004c9c <__multadd>
 800471e:	45b1      	cmp	r9, r6
 8004720:	9004      	str	r0, [sp, #16]
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	f04f 020a 	mov.w	r2, #10
 800472a:	4649      	mov	r1, r9
 800472c:	4620      	mov	r0, r4
 800472e:	d105      	bne.n	800473c <_dtoa_r+0xaa4>
 8004730:	f000 fab4 	bl	8004c9c <__multadd>
 8004734:	4681      	mov	r9, r0
 8004736:	4606      	mov	r6, r0
 8004738:	9505      	str	r5, [sp, #20]
 800473a:	e776      	b.n	800462a <_dtoa_r+0x992>
 800473c:	f000 faae 	bl	8004c9c <__multadd>
 8004740:	4631      	mov	r1, r6
 8004742:	4681      	mov	r9, r0
 8004744:	2300      	movs	r3, #0
 8004746:	220a      	movs	r2, #10
 8004748:	4620      	mov	r0, r4
 800474a:	f000 faa7 	bl	8004c9c <__multadd>
 800474e:	4606      	mov	r6, r0
 8004750:	e7f2      	b.n	8004738 <_dtoa_r+0xaa0>
 8004752:	f04f 0900 	mov.w	r9, #0
 8004756:	2201      	movs	r2, #1
 8004758:	9904      	ldr	r1, [sp, #16]
 800475a:	4620      	mov	r0, r4
 800475c:	f000 fc14 	bl	8004f88 <__lshift>
 8004760:	4639      	mov	r1, r7
 8004762:	9004      	str	r0, [sp, #16]
 8004764:	f000 fc64 	bl	8005030 <__mcmp>
 8004768:	2800      	cmp	r0, #0
 800476a:	dcb6      	bgt.n	80046da <_dtoa_r+0xa42>
 800476c:	d102      	bne.n	8004774 <_dtoa_r+0xadc>
 800476e:	f018 0f01 	tst.w	r8, #1
 8004772:	d1b2      	bne.n	80046da <_dtoa_r+0xa42>
 8004774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004778:	2b30      	cmp	r3, #48	; 0x30
 800477a:	f105 32ff 	add.w	r2, r5, #4294967295
 800477e:	f47f af0a 	bne.w	8004596 <_dtoa_r+0x8fe>
 8004782:	4615      	mov	r5, r2
 8004784:	e7f6      	b.n	8004774 <_dtoa_r+0xadc>
 8004786:	4593      	cmp	fp, r2
 8004788:	d105      	bne.n	8004796 <_dtoa_r+0xafe>
 800478a:	2331      	movs	r3, #49	; 0x31
 800478c:	f10a 0a01 	add.w	sl, sl, #1
 8004790:	f88b 3000 	strb.w	r3, [fp]
 8004794:	e6ff      	b.n	8004596 <_dtoa_r+0x8fe>
 8004796:	4615      	mov	r5, r2
 8004798:	e79f      	b.n	80046da <_dtoa_r+0xa42>
 800479a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004800 <_dtoa_r+0xb68>
 800479e:	e007      	b.n	80047b0 <_dtoa_r+0xb18>
 80047a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004804 <_dtoa_r+0xb6c>
 80047a6:	b11b      	cbz	r3, 80047b0 <_dtoa_r+0xb18>
 80047a8:	f10b 0308 	add.w	r3, fp, #8
 80047ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4658      	mov	r0, fp
 80047b2:	b017      	add	sp, #92	; 0x5c
 80047b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b8:	9b06      	ldr	r3, [sp, #24]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f77f ae35 	ble.w	800442a <_dtoa_r+0x792>
 80047c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c2:	9307      	str	r3, [sp, #28]
 80047c4:	e649      	b.n	800445a <_dtoa_r+0x7c2>
 80047c6:	9b02      	ldr	r3, [sp, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dc03      	bgt.n	80047d4 <_dtoa_r+0xb3c>
 80047cc:	9b06      	ldr	r3, [sp, #24]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	f73f aecc 	bgt.w	800456c <_dtoa_r+0x8d4>
 80047d4:	465d      	mov	r5, fp
 80047d6:	4639      	mov	r1, r7
 80047d8:	9804      	ldr	r0, [sp, #16]
 80047da:	f7ff f9d1 	bl	8003b80 <quorem>
 80047de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80047e2:	f805 8b01 	strb.w	r8, [r5], #1
 80047e6:	9a02      	ldr	r2, [sp, #8]
 80047e8:	eba5 030b 	sub.w	r3, r5, fp
 80047ec:	429a      	cmp	r2, r3
 80047ee:	ddb0      	ble.n	8004752 <_dtoa_r+0xaba>
 80047f0:	2300      	movs	r3, #0
 80047f2:	220a      	movs	r2, #10
 80047f4:	9904      	ldr	r1, [sp, #16]
 80047f6:	4620      	mov	r0, r4
 80047f8:	f000 fa50 	bl	8004c9c <__multadd>
 80047fc:	9004      	str	r0, [sp, #16]
 80047fe:	e7ea      	b.n	80047d6 <_dtoa_r+0xb3e>
 8004800:	08005920 	.word	0x08005920
 8004804:	08005944 	.word	0x08005944

08004808 <__sflush_r>:
 8004808:	898a      	ldrh	r2, [r1, #12]
 800480a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480e:	4605      	mov	r5, r0
 8004810:	0710      	lsls	r0, r2, #28
 8004812:	460c      	mov	r4, r1
 8004814:	d458      	bmi.n	80048c8 <__sflush_r+0xc0>
 8004816:	684b      	ldr	r3, [r1, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	dc05      	bgt.n	8004828 <__sflush_r+0x20>
 800481c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	dc02      	bgt.n	8004828 <__sflush_r+0x20>
 8004822:	2000      	movs	r0, #0
 8004824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800482a:	2e00      	cmp	r6, #0
 800482c:	d0f9      	beq.n	8004822 <__sflush_r+0x1a>
 800482e:	2300      	movs	r3, #0
 8004830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004834:	682f      	ldr	r7, [r5, #0]
 8004836:	6a21      	ldr	r1, [r4, #32]
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	d032      	beq.n	80048a2 <__sflush_r+0x9a>
 800483c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	075a      	lsls	r2, r3, #29
 8004842:	d505      	bpl.n	8004850 <__sflush_r+0x48>
 8004844:	6863      	ldr	r3, [r4, #4]
 8004846:	1ac0      	subs	r0, r0, r3
 8004848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800484a:	b10b      	cbz	r3, 8004850 <__sflush_r+0x48>
 800484c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800484e:	1ac0      	subs	r0, r0, r3
 8004850:	2300      	movs	r3, #0
 8004852:	4602      	mov	r2, r0
 8004854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004856:	6a21      	ldr	r1, [r4, #32]
 8004858:	4628      	mov	r0, r5
 800485a:	47b0      	blx	r6
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	d106      	bne.n	8004870 <__sflush_r+0x68>
 8004862:	6829      	ldr	r1, [r5, #0]
 8004864:	291d      	cmp	r1, #29
 8004866:	d848      	bhi.n	80048fa <__sflush_r+0xf2>
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <__sflush_r+0x108>)
 800486a:	40ca      	lsrs	r2, r1
 800486c:	07d6      	lsls	r6, r2, #31
 800486e:	d544      	bpl.n	80048fa <__sflush_r+0xf2>
 8004870:	2200      	movs	r2, #0
 8004872:	6062      	str	r2, [r4, #4]
 8004874:	04d9      	lsls	r1, r3, #19
 8004876:	6922      	ldr	r2, [r4, #16]
 8004878:	6022      	str	r2, [r4, #0]
 800487a:	d504      	bpl.n	8004886 <__sflush_r+0x7e>
 800487c:	1c42      	adds	r2, r0, #1
 800487e:	d101      	bne.n	8004884 <__sflush_r+0x7c>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b903      	cbnz	r3, 8004886 <__sflush_r+0x7e>
 8004884:	6560      	str	r0, [r4, #84]	; 0x54
 8004886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004888:	602f      	str	r7, [r5, #0]
 800488a:	2900      	cmp	r1, #0
 800488c:	d0c9      	beq.n	8004822 <__sflush_r+0x1a>
 800488e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004892:	4299      	cmp	r1, r3
 8004894:	d002      	beq.n	800489c <__sflush_r+0x94>
 8004896:	4628      	mov	r0, r5
 8004898:	f000 fc9e 	bl	80051d8 <_free_r>
 800489c:	2000      	movs	r0, #0
 800489e:	6360      	str	r0, [r4, #52]	; 0x34
 80048a0:	e7c0      	b.n	8004824 <__sflush_r+0x1c>
 80048a2:	2301      	movs	r3, #1
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b0      	blx	r6
 80048a8:	1c41      	adds	r1, r0, #1
 80048aa:	d1c8      	bne.n	800483e <__sflush_r+0x36>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0c5      	beq.n	800483e <__sflush_r+0x36>
 80048b2:	2b1d      	cmp	r3, #29
 80048b4:	d001      	beq.n	80048ba <__sflush_r+0xb2>
 80048b6:	2b16      	cmp	r3, #22
 80048b8:	d101      	bne.n	80048be <__sflush_r+0xb6>
 80048ba:	602f      	str	r7, [r5, #0]
 80048bc:	e7b1      	b.n	8004822 <__sflush_r+0x1a>
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c4:	81a3      	strh	r3, [r4, #12]
 80048c6:	e7ad      	b.n	8004824 <__sflush_r+0x1c>
 80048c8:	690f      	ldr	r7, [r1, #16]
 80048ca:	2f00      	cmp	r7, #0
 80048cc:	d0a9      	beq.n	8004822 <__sflush_r+0x1a>
 80048ce:	0793      	lsls	r3, r2, #30
 80048d0:	680e      	ldr	r6, [r1, #0]
 80048d2:	bf08      	it	eq
 80048d4:	694b      	ldreq	r3, [r1, #20]
 80048d6:	600f      	str	r7, [r1, #0]
 80048d8:	bf18      	it	ne
 80048da:	2300      	movne	r3, #0
 80048dc:	eba6 0807 	sub.w	r8, r6, r7
 80048e0:	608b      	str	r3, [r1, #8]
 80048e2:	f1b8 0f00 	cmp.w	r8, #0
 80048e6:	dd9c      	ble.n	8004822 <__sflush_r+0x1a>
 80048e8:	4643      	mov	r3, r8
 80048ea:	463a      	mov	r2, r7
 80048ec:	6a21      	ldr	r1, [r4, #32]
 80048ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048f0:	4628      	mov	r0, r5
 80048f2:	47b0      	blx	r6
 80048f4:	2800      	cmp	r0, #0
 80048f6:	dc06      	bgt.n	8004906 <__sflush_r+0xfe>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	e78e      	b.n	8004824 <__sflush_r+0x1c>
 8004906:	4407      	add	r7, r0
 8004908:	eba8 0800 	sub.w	r8, r8, r0
 800490c:	e7e9      	b.n	80048e2 <__sflush_r+0xda>
 800490e:	bf00      	nop
 8004910:	20400001 	.word	0x20400001

08004914 <_fflush_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	690b      	ldr	r3, [r1, #16]
 8004918:	4605      	mov	r5, r0
 800491a:	460c      	mov	r4, r1
 800491c:	b1db      	cbz	r3, 8004956 <_fflush_r+0x42>
 800491e:	b118      	cbz	r0, 8004928 <_fflush_r+0x14>
 8004920:	6983      	ldr	r3, [r0, #24]
 8004922:	b90b      	cbnz	r3, 8004928 <_fflush_r+0x14>
 8004924:	f000 f860 	bl	80049e8 <__sinit>
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <_fflush_r+0x48>)
 800492a:	429c      	cmp	r4, r3
 800492c:	d109      	bne.n	8004942 <_fflush_r+0x2e>
 800492e:	686c      	ldr	r4, [r5, #4]
 8004930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004934:	b17b      	cbz	r3, 8004956 <_fflush_r+0x42>
 8004936:	4621      	mov	r1, r4
 8004938:	4628      	mov	r0, r5
 800493a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800493e:	f7ff bf63 	b.w	8004808 <__sflush_r>
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <_fflush_r+0x4c>)
 8004944:	429c      	cmp	r4, r3
 8004946:	d101      	bne.n	800494c <_fflush_r+0x38>
 8004948:	68ac      	ldr	r4, [r5, #8]
 800494a:	e7f1      	b.n	8004930 <_fflush_r+0x1c>
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <_fflush_r+0x50>)
 800494e:	429c      	cmp	r4, r3
 8004950:	bf08      	it	eq
 8004952:	68ec      	ldreq	r4, [r5, #12]
 8004954:	e7ec      	b.n	8004930 <_fflush_r+0x1c>
 8004956:	2000      	movs	r0, #0
 8004958:	bd38      	pop	{r3, r4, r5, pc}
 800495a:	bf00      	nop
 800495c:	08005974 	.word	0x08005974
 8004960:	08005994 	.word	0x08005994
 8004964:	08005954 	.word	0x08005954

08004968 <std>:
 8004968:	2300      	movs	r3, #0
 800496a:	b510      	push	{r4, lr}
 800496c:	4604      	mov	r4, r0
 800496e:	e9c0 3300 	strd	r3, r3, [r0]
 8004972:	6083      	str	r3, [r0, #8]
 8004974:	8181      	strh	r1, [r0, #12]
 8004976:	6643      	str	r3, [r0, #100]	; 0x64
 8004978:	81c2      	strh	r2, [r0, #14]
 800497a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800497e:	6183      	str	r3, [r0, #24]
 8004980:	4619      	mov	r1, r3
 8004982:	2208      	movs	r2, #8
 8004984:	305c      	adds	r0, #92	; 0x5c
 8004986:	f7fe fa99 	bl	8002ebc <memset>
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <std+0x38>)
 800498c:	6263      	str	r3, [r4, #36]	; 0x24
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <std+0x3c>)
 8004990:	62a3      	str	r3, [r4, #40]	; 0x28
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <std+0x40>)
 8004994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <std+0x44>)
 8004998:	6224      	str	r4, [r4, #32]
 800499a:	6323      	str	r3, [r4, #48]	; 0x30
 800499c:	bd10      	pop	{r4, pc}
 800499e:	bf00      	nop
 80049a0:	08005635 	.word	0x08005635
 80049a4:	08005657 	.word	0x08005657
 80049a8:	0800568f 	.word	0x0800568f
 80049ac:	080056b3 	.word	0x080056b3

080049b0 <_cleanup_r>:
 80049b0:	4901      	ldr	r1, [pc, #4]	; (80049b8 <_cleanup_r+0x8>)
 80049b2:	f000 b885 	b.w	8004ac0 <_fwalk_reent>
 80049b6:	bf00      	nop
 80049b8:	08004915 	.word	0x08004915

080049bc <__sfmoreglue>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	1e4a      	subs	r2, r1, #1
 80049c0:	2568      	movs	r5, #104	; 0x68
 80049c2:	4355      	muls	r5, r2
 80049c4:	460e      	mov	r6, r1
 80049c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049ca:	f000 fc53 	bl	8005274 <_malloc_r>
 80049ce:	4604      	mov	r4, r0
 80049d0:	b140      	cbz	r0, 80049e4 <__sfmoreglue+0x28>
 80049d2:	2100      	movs	r1, #0
 80049d4:	e9c0 1600 	strd	r1, r6, [r0]
 80049d8:	300c      	adds	r0, #12
 80049da:	60a0      	str	r0, [r4, #8]
 80049dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049e0:	f7fe fa6c 	bl	8002ebc <memset>
 80049e4:	4620      	mov	r0, r4
 80049e6:	bd70      	pop	{r4, r5, r6, pc}

080049e8 <__sinit>:
 80049e8:	6983      	ldr	r3, [r0, #24]
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4604      	mov	r4, r0
 80049ee:	bb33      	cbnz	r3, 8004a3e <__sinit+0x56>
 80049f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80049f4:	6503      	str	r3, [r0, #80]	; 0x50
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <__sinit+0x58>)
 80049f8:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <__sinit+0x5c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6282      	str	r2, [r0, #40]	; 0x28
 80049fe:	4298      	cmp	r0, r3
 8004a00:	bf04      	itt	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	6183      	streq	r3, [r0, #24]
 8004a06:	f000 f81f 	bl	8004a48 <__sfp>
 8004a0a:	6060      	str	r0, [r4, #4]
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f000 f81b 	bl	8004a48 <__sfp>
 8004a12:	60a0      	str	r0, [r4, #8]
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 f817 	bl	8004a48 <__sfp>
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	60e0      	str	r0, [r4, #12]
 8004a1e:	2104      	movs	r1, #4
 8004a20:	6860      	ldr	r0, [r4, #4]
 8004a22:	f7ff ffa1 	bl	8004968 <std>
 8004a26:	2201      	movs	r2, #1
 8004a28:	2109      	movs	r1, #9
 8004a2a:	68a0      	ldr	r0, [r4, #8]
 8004a2c:	f7ff ff9c 	bl	8004968 <std>
 8004a30:	2202      	movs	r2, #2
 8004a32:	2112      	movs	r1, #18
 8004a34:	68e0      	ldr	r0, [r4, #12]
 8004a36:	f7ff ff97 	bl	8004968 <std>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61a3      	str	r3, [r4, #24]
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	0800590c 	.word	0x0800590c
 8004a44:	080049b1 	.word	0x080049b1

08004a48 <__sfp>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <__sfp+0x70>)
 8004a4c:	681e      	ldr	r6, [r3, #0]
 8004a4e:	69b3      	ldr	r3, [r6, #24]
 8004a50:	4607      	mov	r7, r0
 8004a52:	b913      	cbnz	r3, 8004a5a <__sfp+0x12>
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff ffc7 	bl	80049e8 <__sinit>
 8004a5a:	3648      	adds	r6, #72	; 0x48
 8004a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	d503      	bpl.n	8004a6c <__sfp+0x24>
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	b133      	cbz	r3, 8004a76 <__sfp+0x2e>
 8004a68:	6836      	ldr	r6, [r6, #0]
 8004a6a:	e7f7      	b.n	8004a5c <__sfp+0x14>
 8004a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a70:	b16d      	cbz	r5, 8004a8e <__sfp+0x46>
 8004a72:	3468      	adds	r4, #104	; 0x68
 8004a74:	e7f4      	b.n	8004a60 <__sfp+0x18>
 8004a76:	2104      	movs	r1, #4
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f7ff ff9f 	bl	80049bc <__sfmoreglue>
 8004a7e:	6030      	str	r0, [r6, #0]
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d1f1      	bne.n	8004a68 <__sfp+0x20>
 8004a84:	230c      	movs	r3, #12
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4604      	mov	r4, r0
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <__sfp+0x74>)
 8004a90:	6665      	str	r5, [r4, #100]	; 0x64
 8004a92:	e9c4 5500 	strd	r5, r5, [r4]
 8004a96:	60a5      	str	r5, [r4, #8]
 8004a98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004a9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004aa8:	f7fe fa08 	bl	8002ebc <memset>
 8004aac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ab4:	e7e9      	b.n	8004a8a <__sfp+0x42>
 8004ab6:	bf00      	nop
 8004ab8:	0800590c 	.word	0x0800590c
 8004abc:	ffff0001 	.word	0xffff0001

08004ac0 <_fwalk_reent>:
 8004ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	4689      	mov	r9, r1
 8004ac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004acc:	2600      	movs	r6, #0
 8004ace:	b914      	cbnz	r4, 8004ad6 <_fwalk_reent+0x16>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ada:	3f01      	subs	r7, #1
 8004adc:	d501      	bpl.n	8004ae2 <_fwalk_reent+0x22>
 8004ade:	6824      	ldr	r4, [r4, #0]
 8004ae0:	e7f5      	b.n	8004ace <_fwalk_reent+0xe>
 8004ae2:	89ab      	ldrh	r3, [r5, #12]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d907      	bls.n	8004af8 <_fwalk_reent+0x38>
 8004ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aec:	3301      	adds	r3, #1
 8004aee:	d003      	beq.n	8004af8 <_fwalk_reent+0x38>
 8004af0:	4629      	mov	r1, r5
 8004af2:	4640      	mov	r0, r8
 8004af4:	47c8      	blx	r9
 8004af6:	4306      	orrs	r6, r0
 8004af8:	3568      	adds	r5, #104	; 0x68
 8004afa:	e7ee      	b.n	8004ada <_fwalk_reent+0x1a>

08004afc <_localeconv_r>:
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <_localeconv_r+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a18      	ldr	r0, [r3, #32]
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <_localeconv_r+0x18>)
 8004b04:	2800      	cmp	r0, #0
 8004b06:	bf08      	it	eq
 8004b08:	4618      	moveq	r0, r3
 8004b0a:	30f0      	adds	r0, #240	; 0xf0
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c
 8004b14:	20000070 	.word	0x20000070

08004b18 <__swhatbuf_r>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b20:	2900      	cmp	r1, #0
 8004b22:	b096      	sub	sp, #88	; 0x58
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	da07      	bge.n	8004b3a <__swhatbuf_r+0x22>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	89b3      	ldrh	r3, [r6, #12]
 8004b30:	061a      	lsls	r2, r3, #24
 8004b32:	d410      	bmi.n	8004b56 <__swhatbuf_r+0x3e>
 8004b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b38:	e00e      	b.n	8004b58 <__swhatbuf_r+0x40>
 8004b3a:	466a      	mov	r2, sp
 8004b3c:	f000 fde0 	bl	8005700 <_fstat_r>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	dbf2      	blt.n	8004b2a <__swhatbuf_r+0x12>
 8004b44:	9a01      	ldr	r2, [sp, #4]
 8004b46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b4e:	425a      	negs	r2, r3
 8004b50:	415a      	adcs	r2, r3
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	e7ee      	b.n	8004b34 <__swhatbuf_r+0x1c>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	2000      	movs	r0, #0
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	b016      	add	sp, #88	; 0x58
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}

08004b60 <__smakebuf_r>:
 8004b60:	898b      	ldrh	r3, [r1, #12]
 8004b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b64:	079d      	lsls	r5, r3, #30
 8004b66:	4606      	mov	r6, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	d507      	bpl.n	8004b7c <__smakebuf_r+0x1c>
 8004b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	2301      	movs	r3, #1
 8004b76:	6163      	str	r3, [r4, #20]
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	ab01      	add	r3, sp, #4
 8004b7e:	466a      	mov	r2, sp
 8004b80:	f7ff ffca 	bl	8004b18 <__swhatbuf_r>
 8004b84:	9900      	ldr	r1, [sp, #0]
 8004b86:	4605      	mov	r5, r0
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 fb73 	bl	8005274 <_malloc_r>
 8004b8e:	b948      	cbnz	r0, 8004ba4 <__smakebuf_r+0x44>
 8004b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b94:	059a      	lsls	r2, r3, #22
 8004b96:	d4ef      	bmi.n	8004b78 <__smakebuf_r+0x18>
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	e7e3      	b.n	8004b6c <__smakebuf_r+0xc>
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <__smakebuf_r+0x7c>)
 8004ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	6163      	str	r3, [r4, #20]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	6120      	str	r0, [r4, #16]
 8004bba:	b15b      	cbz	r3, 8004bd4 <__smakebuf_r+0x74>
 8004bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 fdaf 	bl	8005724 <_isatty_r>
 8004bc6:	b128      	cbz	r0, 8004bd4 <__smakebuf_r+0x74>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	431d      	orrs	r5, r3
 8004bd8:	81a5      	strh	r5, [r4, #12]
 8004bda:	e7cd      	b.n	8004b78 <__smakebuf_r+0x18>
 8004bdc:	080049b1 	.word	0x080049b1

08004be0 <malloc>:
 8004be0:	4b02      	ldr	r3, [pc, #8]	; (8004bec <malloc+0xc>)
 8004be2:	4601      	mov	r1, r0
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	f000 bb45 	b.w	8005274 <_malloc_r>
 8004bea:	bf00      	nop
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <memcpy>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	1e43      	subs	r3, r0, #1
 8004bf4:	440a      	add	r2, r1
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	d100      	bne.n	8004bfc <memcpy+0xc>
 8004bfa:	bd10      	pop	{r4, pc}
 8004bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c04:	e7f7      	b.n	8004bf6 <memcpy+0x6>

08004c06 <_Balloc>:
 8004c06:	b570      	push	{r4, r5, r6, lr}
 8004c08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	460e      	mov	r6, r1
 8004c0e:	b93d      	cbnz	r5, 8004c20 <_Balloc+0x1a>
 8004c10:	2010      	movs	r0, #16
 8004c12:	f7ff ffe5 	bl	8004be0 <malloc>
 8004c16:	6260      	str	r0, [r4, #36]	; 0x24
 8004c18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c1c:	6005      	str	r5, [r0, #0]
 8004c1e:	60c5      	str	r5, [r0, #12]
 8004c20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c22:	68eb      	ldr	r3, [r5, #12]
 8004c24:	b183      	cbz	r3, 8004c48 <_Balloc+0x42>
 8004c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c2e:	b9b8      	cbnz	r0, 8004c60 <_Balloc+0x5a>
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f506 	lsl.w	r5, r1, r6
 8004c36:	1d6a      	adds	r2, r5, #5
 8004c38:	0092      	lsls	r2, r2, #2
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 fabe 	bl	80051bc <_calloc_r>
 8004c40:	b160      	cbz	r0, 8004c5c <_Balloc+0x56>
 8004c42:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004c46:	e00e      	b.n	8004c66 <_Balloc+0x60>
 8004c48:	2221      	movs	r2, #33	; 0x21
 8004c4a:	2104      	movs	r1, #4
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 fab5 	bl	80051bc <_calloc_r>
 8004c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c54:	60e8      	str	r0, [r5, #12]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e4      	bne.n	8004c26 <_Balloc+0x20>
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	6802      	ldr	r2, [r0, #0]
 8004c62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004c66:	2300      	movs	r3, #0
 8004c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c6c:	e7f7      	b.n	8004c5e <_Balloc+0x58>

08004c6e <_Bfree>:
 8004c6e:	b570      	push	{r4, r5, r6, lr}
 8004c70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c72:	4606      	mov	r6, r0
 8004c74:	460d      	mov	r5, r1
 8004c76:	b93c      	cbnz	r4, 8004c88 <_Bfree+0x1a>
 8004c78:	2010      	movs	r0, #16
 8004c7a:	f7ff ffb1 	bl	8004be0 <malloc>
 8004c7e:	6270      	str	r0, [r6, #36]	; 0x24
 8004c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c84:	6004      	str	r4, [r0, #0]
 8004c86:	60c4      	str	r4, [r0, #12]
 8004c88:	b13d      	cbz	r5, 8004c9a <_Bfree+0x2c>
 8004c8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c8c:	686a      	ldr	r2, [r5, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c94:	6029      	str	r1, [r5, #0]
 8004c96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}

08004c9c <__multadd>:
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	690d      	ldr	r5, [r1, #16]
 8004ca2:	461f      	mov	r7, r3
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	f101 0c14 	add.w	ip, r1, #20
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8dc 0000 	ldr.w	r0, [ip]
 8004cb2:	b281      	uxth	r1, r0
 8004cb4:	fb02 7101 	mla	r1, r2, r1, r7
 8004cb8:	0c0f      	lsrs	r7, r1, #16
 8004cba:	0c00      	lsrs	r0, r0, #16
 8004cbc:	fb02 7000 	mla	r0, r2, r0, r7
 8004cc0:	b289      	uxth	r1, r1
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004cc8:	429d      	cmp	r5, r3
 8004cca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004cce:	f84c 1b04 	str.w	r1, [ip], #4
 8004cd2:	dcec      	bgt.n	8004cae <__multadd+0x12>
 8004cd4:	b1d7      	cbz	r7, 8004d0c <__multadd+0x70>
 8004cd6:	68a3      	ldr	r3, [r4, #8]
 8004cd8:	42ab      	cmp	r3, r5
 8004cda:	dc12      	bgt.n	8004d02 <__multadd+0x66>
 8004cdc:	6861      	ldr	r1, [r4, #4]
 8004cde:	4630      	mov	r0, r6
 8004ce0:	3101      	adds	r1, #1
 8004ce2:	f7ff ff90 	bl	8004c06 <_Balloc>
 8004ce6:	6922      	ldr	r2, [r4, #16]
 8004ce8:	3202      	adds	r2, #2
 8004cea:	f104 010c 	add.w	r1, r4, #12
 8004cee:	4680      	mov	r8, r0
 8004cf0:	0092      	lsls	r2, r2, #2
 8004cf2:	300c      	adds	r0, #12
 8004cf4:	f7ff ff7c 	bl	8004bf0 <memcpy>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7ff ffb7 	bl	8004c6e <_Bfree>
 8004d00:	4644      	mov	r4, r8
 8004d02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d06:	3501      	adds	r5, #1
 8004d08:	615f      	str	r7, [r3, #20]
 8004d0a:	6125      	str	r5, [r4, #16]
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d12 <__hi0bits>:
 8004d12:	0c02      	lsrs	r2, r0, #16
 8004d14:	0412      	lsls	r2, r2, #16
 8004d16:	4603      	mov	r3, r0
 8004d18:	b9b2      	cbnz	r2, 8004d48 <__hi0bits+0x36>
 8004d1a:	0403      	lsls	r3, r0, #16
 8004d1c:	2010      	movs	r0, #16
 8004d1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d22:	bf04      	itt	eq
 8004d24:	021b      	lsleq	r3, r3, #8
 8004d26:	3008      	addeq	r0, #8
 8004d28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d2c:	bf04      	itt	eq
 8004d2e:	011b      	lsleq	r3, r3, #4
 8004d30:	3004      	addeq	r0, #4
 8004d32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d36:	bf04      	itt	eq
 8004d38:	009b      	lsleq	r3, r3, #2
 8004d3a:	3002      	addeq	r0, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	db06      	blt.n	8004d4e <__hi0bits+0x3c>
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	d503      	bpl.n	8004d4c <__hi0bits+0x3a>
 8004d44:	3001      	adds	r0, #1
 8004d46:	4770      	bx	lr
 8004d48:	2000      	movs	r0, #0
 8004d4a:	e7e8      	b.n	8004d1e <__hi0bits+0xc>
 8004d4c:	2020      	movs	r0, #32
 8004d4e:	4770      	bx	lr

08004d50 <__lo0bits>:
 8004d50:	6803      	ldr	r3, [r0, #0]
 8004d52:	f013 0207 	ands.w	r2, r3, #7
 8004d56:	4601      	mov	r1, r0
 8004d58:	d00b      	beq.n	8004d72 <__lo0bits+0x22>
 8004d5a:	07da      	lsls	r2, r3, #31
 8004d5c:	d423      	bmi.n	8004da6 <__lo0bits+0x56>
 8004d5e:	0798      	lsls	r0, r3, #30
 8004d60:	bf49      	itett	mi
 8004d62:	085b      	lsrmi	r3, r3, #1
 8004d64:	089b      	lsrpl	r3, r3, #2
 8004d66:	2001      	movmi	r0, #1
 8004d68:	600b      	strmi	r3, [r1, #0]
 8004d6a:	bf5c      	itt	pl
 8004d6c:	600b      	strpl	r3, [r1, #0]
 8004d6e:	2002      	movpl	r0, #2
 8004d70:	4770      	bx	lr
 8004d72:	b298      	uxth	r0, r3
 8004d74:	b9a8      	cbnz	r0, 8004da2 <__lo0bits+0x52>
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	2010      	movs	r0, #16
 8004d7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d7e:	bf04      	itt	eq
 8004d80:	0a1b      	lsreq	r3, r3, #8
 8004d82:	3008      	addeq	r0, #8
 8004d84:	071a      	lsls	r2, r3, #28
 8004d86:	bf04      	itt	eq
 8004d88:	091b      	lsreq	r3, r3, #4
 8004d8a:	3004      	addeq	r0, #4
 8004d8c:	079a      	lsls	r2, r3, #30
 8004d8e:	bf04      	itt	eq
 8004d90:	089b      	lsreq	r3, r3, #2
 8004d92:	3002      	addeq	r0, #2
 8004d94:	07da      	lsls	r2, r3, #31
 8004d96:	d402      	bmi.n	8004d9e <__lo0bits+0x4e>
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	d006      	beq.n	8004daa <__lo0bits+0x5a>
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	600b      	str	r3, [r1, #0]
 8004da0:	4770      	bx	lr
 8004da2:	4610      	mov	r0, r2
 8004da4:	e7e9      	b.n	8004d7a <__lo0bits+0x2a>
 8004da6:	2000      	movs	r0, #0
 8004da8:	4770      	bx	lr
 8004daa:	2020      	movs	r0, #32
 8004dac:	4770      	bx	lr

08004dae <__i2b>:
 8004dae:	b510      	push	{r4, lr}
 8004db0:	460c      	mov	r4, r1
 8004db2:	2101      	movs	r1, #1
 8004db4:	f7ff ff27 	bl	8004c06 <_Balloc>
 8004db8:	2201      	movs	r2, #1
 8004dba:	6144      	str	r4, [r0, #20]
 8004dbc:	6102      	str	r2, [r0, #16]
 8004dbe:	bd10      	pop	{r4, pc}

08004dc0 <__multiply>:
 8004dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	690a      	ldr	r2, [r1, #16]
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	bfb8      	it	lt
 8004dce:	460b      	movlt	r3, r1
 8004dd0:	4688      	mov	r8, r1
 8004dd2:	bfbc      	itt	lt
 8004dd4:	46a0      	movlt	r8, r4
 8004dd6:	461c      	movlt	r4, r3
 8004dd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004ddc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004de0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004de4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004de8:	eb07 0609 	add.w	r6, r7, r9
 8004dec:	42b3      	cmp	r3, r6
 8004dee:	bfb8      	it	lt
 8004df0:	3101      	addlt	r1, #1
 8004df2:	f7ff ff08 	bl	8004c06 <_Balloc>
 8004df6:	f100 0514 	add.w	r5, r0, #20
 8004dfa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004dfe:	462b      	mov	r3, r5
 8004e00:	2200      	movs	r2, #0
 8004e02:	4573      	cmp	r3, lr
 8004e04:	d316      	bcc.n	8004e34 <__multiply+0x74>
 8004e06:	f104 0214 	add.w	r2, r4, #20
 8004e0a:	f108 0114 	add.w	r1, r8, #20
 8004e0e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004e12:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	9b00      	ldr	r3, [sp, #0]
 8004e1a:	9201      	str	r2, [sp, #4]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d80c      	bhi.n	8004e3a <__multiply+0x7a>
 8004e20:	2e00      	cmp	r6, #0
 8004e22:	dd03      	ble.n	8004e2c <__multiply+0x6c>
 8004e24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d05d      	beq.n	8004ee8 <__multiply+0x128>
 8004e2c:	6106      	str	r6, [r0, #16]
 8004e2e:	b003      	add	sp, #12
 8004e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e34:	f843 2b04 	str.w	r2, [r3], #4
 8004e38:	e7e3      	b.n	8004e02 <__multiply+0x42>
 8004e3a:	f8b2 b000 	ldrh.w	fp, [r2]
 8004e3e:	f1bb 0f00 	cmp.w	fp, #0
 8004e42:	d023      	beq.n	8004e8c <__multiply+0xcc>
 8004e44:	4689      	mov	r9, r1
 8004e46:	46ac      	mov	ip, r5
 8004e48:	f04f 0800 	mov.w	r8, #0
 8004e4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8004e50:	f8dc a000 	ldr.w	sl, [ip]
 8004e54:	b2a3      	uxth	r3, r4
 8004e56:	fa1f fa8a 	uxth.w	sl, sl
 8004e5a:	fb0b a303 	mla	r3, fp, r3, sl
 8004e5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004e62:	f8dc 4000 	ldr.w	r4, [ip]
 8004e66:	4443      	add	r3, r8
 8004e68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e6c:	fb0b 840a 	mla	r4, fp, sl, r8
 8004e70:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004e74:	46e2      	mov	sl, ip
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e7c:	454f      	cmp	r7, r9
 8004e7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e82:	f84a 3b04 	str.w	r3, [sl], #4
 8004e86:	d82b      	bhi.n	8004ee0 <__multiply+0x120>
 8004e88:	f8cc 8004 	str.w	r8, [ip, #4]
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004e92:	3204      	adds	r2, #4
 8004e94:	f1ba 0f00 	cmp.w	sl, #0
 8004e98:	d020      	beq.n	8004edc <__multiply+0x11c>
 8004e9a:	682b      	ldr	r3, [r5, #0]
 8004e9c:	4689      	mov	r9, r1
 8004e9e:	46a8      	mov	r8, r5
 8004ea0:	f04f 0b00 	mov.w	fp, #0
 8004ea4:	f8b9 c000 	ldrh.w	ip, [r9]
 8004ea8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004eac:	fb0a 440c 	mla	r4, sl, ip, r4
 8004eb0:	445c      	add	r4, fp
 8004eb2:	46c4      	mov	ip, r8
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004eba:	f84c 3b04 	str.w	r3, [ip], #4
 8004ebe:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ec2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	fb0a b303 	mla	r3, sl, r3, fp
 8004ecc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004ed0:	454f      	cmp	r7, r9
 8004ed2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004ed6:	d805      	bhi.n	8004ee4 <__multiply+0x124>
 8004ed8:	f8c8 3004 	str.w	r3, [r8, #4]
 8004edc:	3504      	adds	r5, #4
 8004ede:	e79b      	b.n	8004e18 <__multiply+0x58>
 8004ee0:	46d4      	mov	ip, sl
 8004ee2:	e7b3      	b.n	8004e4c <__multiply+0x8c>
 8004ee4:	46e0      	mov	r8, ip
 8004ee6:	e7dd      	b.n	8004ea4 <__multiply+0xe4>
 8004ee8:	3e01      	subs	r6, #1
 8004eea:	e799      	b.n	8004e20 <__multiply+0x60>

08004eec <__pow5mult>:
 8004eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef0:	4615      	mov	r5, r2
 8004ef2:	f012 0203 	ands.w	r2, r2, #3
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	d007      	beq.n	8004f0c <__pow5mult+0x20>
 8004efc:	3a01      	subs	r2, #1
 8004efe:	4c21      	ldr	r4, [pc, #132]	; (8004f84 <__pow5mult+0x98>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f06:	f7ff fec9 	bl	8004c9c <__multadd>
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	10ad      	asrs	r5, r5, #2
 8004f0e:	d035      	beq.n	8004f7c <__pow5mult+0x90>
 8004f10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f12:	b93c      	cbnz	r4, 8004f24 <__pow5mult+0x38>
 8004f14:	2010      	movs	r0, #16
 8004f16:	f7ff fe63 	bl	8004be0 <malloc>
 8004f1a:	6270      	str	r0, [r6, #36]	; 0x24
 8004f1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f20:	6004      	str	r4, [r0, #0]
 8004f22:	60c4      	str	r4, [r0, #12]
 8004f24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f2c:	b94c      	cbnz	r4, 8004f42 <__pow5mult+0x56>
 8004f2e:	f240 2171 	movw	r1, #625	; 0x271
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ff3b 	bl	8004dae <__i2b>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f3e:	4604      	mov	r4, r0
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	f04f 0800 	mov.w	r8, #0
 8004f46:	07eb      	lsls	r3, r5, #31
 8004f48:	d50a      	bpl.n	8004f60 <__pow5mult+0x74>
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff ff36 	bl	8004dc0 <__multiply>
 8004f54:	4639      	mov	r1, r7
 8004f56:	4681      	mov	r9, r0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f7ff fe88 	bl	8004c6e <_Bfree>
 8004f5e:	464f      	mov	r7, r9
 8004f60:	106d      	asrs	r5, r5, #1
 8004f62:	d00b      	beq.n	8004f7c <__pow5mult+0x90>
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	b938      	cbnz	r0, 8004f78 <__pow5mult+0x8c>
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff ff27 	bl	8004dc0 <__multiply>
 8004f72:	6020      	str	r0, [r4, #0]
 8004f74:	f8c0 8000 	str.w	r8, [r0]
 8004f78:	4604      	mov	r4, r0
 8004f7a:	e7e4      	b.n	8004f46 <__pow5mult+0x5a>
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f82:	bf00      	nop
 8004f84:	08005aa8 	.word	0x08005aa8

08004f88 <__lshift>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	6849      	ldr	r1, [r1, #4]
 8004f96:	eb0a 0903 	add.w	r9, sl, r3
 8004f9a:	68a3      	ldr	r3, [r4, #8]
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	4616      	mov	r6, r2
 8004fa0:	f109 0501 	add.w	r5, r9, #1
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	db32      	blt.n	800500e <__lshift+0x86>
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff fe2c 	bl	8004c06 <_Balloc>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	f100 0114 	add.w	r1, r0, #20
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4553      	cmp	r3, sl
 8004fba:	db2b      	blt.n	8005014 <__lshift+0x8c>
 8004fbc:	6920      	ldr	r0, [r4, #16]
 8004fbe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fc2:	f104 0314 	add.w	r3, r4, #20
 8004fc6:	f016 021f 	ands.w	r2, r6, #31
 8004fca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004fce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004fd2:	d025      	beq.n	8005020 <__lshift+0x98>
 8004fd4:	f1c2 0e20 	rsb	lr, r2, #32
 8004fd8:	2000      	movs	r0, #0
 8004fda:	681e      	ldr	r6, [r3, #0]
 8004fdc:	468a      	mov	sl, r1
 8004fde:	4096      	lsls	r6, r2
 8004fe0:	4330      	orrs	r0, r6
 8004fe2:	f84a 0b04 	str.w	r0, [sl], #4
 8004fe6:	f853 0b04 	ldr.w	r0, [r3], #4
 8004fea:	459c      	cmp	ip, r3
 8004fec:	fa20 f00e 	lsr.w	r0, r0, lr
 8004ff0:	d814      	bhi.n	800501c <__lshift+0x94>
 8004ff2:	6048      	str	r0, [r1, #4]
 8004ff4:	b108      	cbz	r0, 8004ffa <__lshift+0x72>
 8004ff6:	f109 0502 	add.w	r5, r9, #2
 8004ffa:	3d01      	subs	r5, #1
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f8c8 5010 	str.w	r5, [r8, #16]
 8005002:	4621      	mov	r1, r4
 8005004:	f7ff fe33 	bl	8004c6e <_Bfree>
 8005008:	4640      	mov	r0, r8
 800500a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500e:	3101      	adds	r1, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	e7c7      	b.n	8004fa4 <__lshift+0x1c>
 8005014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005018:	3301      	adds	r3, #1
 800501a:	e7cd      	b.n	8004fb8 <__lshift+0x30>
 800501c:	4651      	mov	r1, sl
 800501e:	e7dc      	b.n	8004fda <__lshift+0x52>
 8005020:	3904      	subs	r1, #4
 8005022:	f853 2b04 	ldr.w	r2, [r3], #4
 8005026:	f841 2f04 	str.w	r2, [r1, #4]!
 800502a:	459c      	cmp	ip, r3
 800502c:	d8f9      	bhi.n	8005022 <__lshift+0x9a>
 800502e:	e7e4      	b.n	8004ffa <__lshift+0x72>

08005030 <__mcmp>:
 8005030:	6903      	ldr	r3, [r0, #16]
 8005032:	690a      	ldr	r2, [r1, #16]
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	b530      	push	{r4, r5, lr}
 8005038:	d10c      	bne.n	8005054 <__mcmp+0x24>
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	3014      	adds	r0, #20
 800503e:	3114      	adds	r1, #20
 8005040:	1884      	adds	r4, r0, r2
 8005042:	4411      	add	r1, r2
 8005044:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005048:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800504c:	4295      	cmp	r5, r2
 800504e:	d003      	beq.n	8005058 <__mcmp+0x28>
 8005050:	d305      	bcc.n	800505e <__mcmp+0x2e>
 8005052:	2301      	movs	r3, #1
 8005054:	4618      	mov	r0, r3
 8005056:	bd30      	pop	{r4, r5, pc}
 8005058:	42a0      	cmp	r0, r4
 800505a:	d3f3      	bcc.n	8005044 <__mcmp+0x14>
 800505c:	e7fa      	b.n	8005054 <__mcmp+0x24>
 800505e:	f04f 33ff 	mov.w	r3, #4294967295
 8005062:	e7f7      	b.n	8005054 <__mcmp+0x24>

08005064 <__mdiff>:
 8005064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	460d      	mov	r5, r1
 800506a:	4607      	mov	r7, r0
 800506c:	4611      	mov	r1, r2
 800506e:	4628      	mov	r0, r5
 8005070:	4614      	mov	r4, r2
 8005072:	f7ff ffdd 	bl	8005030 <__mcmp>
 8005076:	1e06      	subs	r6, r0, #0
 8005078:	d108      	bne.n	800508c <__mdiff+0x28>
 800507a:	4631      	mov	r1, r6
 800507c:	4638      	mov	r0, r7
 800507e:	f7ff fdc2 	bl	8004c06 <_Balloc>
 8005082:	2301      	movs	r3, #1
 8005084:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508c:	bfa4      	itt	ge
 800508e:	4623      	movge	r3, r4
 8005090:	462c      	movge	r4, r5
 8005092:	4638      	mov	r0, r7
 8005094:	6861      	ldr	r1, [r4, #4]
 8005096:	bfa6      	itte	ge
 8005098:	461d      	movge	r5, r3
 800509a:	2600      	movge	r6, #0
 800509c:	2601      	movlt	r6, #1
 800509e:	f7ff fdb2 	bl	8004c06 <_Balloc>
 80050a2:	692b      	ldr	r3, [r5, #16]
 80050a4:	60c6      	str	r6, [r0, #12]
 80050a6:	6926      	ldr	r6, [r4, #16]
 80050a8:	f105 0914 	add.w	r9, r5, #20
 80050ac:	f104 0214 	add.w	r2, r4, #20
 80050b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80050b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80050b8:	f100 0514 	add.w	r5, r0, #20
 80050bc:	f04f 0e00 	mov.w	lr, #0
 80050c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80050c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80050c8:	fa1e f18a 	uxtah	r1, lr, sl
 80050cc:	b2a3      	uxth	r3, r4
 80050ce:	1ac9      	subs	r1, r1, r3
 80050d0:	0c23      	lsrs	r3, r4, #16
 80050d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80050d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80050da:	b289      	uxth	r1, r1
 80050dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80050e0:	45c8      	cmp	r8, r9
 80050e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80050e6:	4694      	mov	ip, r2
 80050e8:	f845 3b04 	str.w	r3, [r5], #4
 80050ec:	d8e8      	bhi.n	80050c0 <__mdiff+0x5c>
 80050ee:	45bc      	cmp	ip, r7
 80050f0:	d304      	bcc.n	80050fc <__mdiff+0x98>
 80050f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80050f6:	b183      	cbz	r3, 800511a <__mdiff+0xb6>
 80050f8:	6106      	str	r6, [r0, #16]
 80050fa:	e7c5      	b.n	8005088 <__mdiff+0x24>
 80050fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005100:	fa1e f381 	uxtah	r3, lr, r1
 8005104:	141a      	asrs	r2, r3, #16
 8005106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800510a:	b29b      	uxth	r3, r3
 800510c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005110:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005114:	f845 3b04 	str.w	r3, [r5], #4
 8005118:	e7e9      	b.n	80050ee <__mdiff+0x8a>
 800511a:	3e01      	subs	r6, #1
 800511c:	e7e9      	b.n	80050f2 <__mdiff+0x8e>

0800511e <__d2b>:
 800511e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005122:	460e      	mov	r6, r1
 8005124:	2101      	movs	r1, #1
 8005126:	ec59 8b10 	vmov	r8, r9, d0
 800512a:	4615      	mov	r5, r2
 800512c:	f7ff fd6b 	bl	8004c06 <_Balloc>
 8005130:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005134:	4607      	mov	r7, r0
 8005136:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800513a:	bb34      	cbnz	r4, 800518a <__d2b+0x6c>
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	f1b8 0300 	subs.w	r3, r8, #0
 8005142:	d027      	beq.n	8005194 <__d2b+0x76>
 8005144:	a802      	add	r0, sp, #8
 8005146:	f840 3d08 	str.w	r3, [r0, #-8]!
 800514a:	f7ff fe01 	bl	8004d50 <__lo0bits>
 800514e:	9900      	ldr	r1, [sp, #0]
 8005150:	b1f0      	cbz	r0, 8005190 <__d2b+0x72>
 8005152:	9a01      	ldr	r2, [sp, #4]
 8005154:	f1c0 0320 	rsb	r3, r0, #32
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	430b      	orrs	r3, r1
 800515e:	40c2      	lsrs	r2, r0
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	9201      	str	r2, [sp, #4]
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf14      	ite	ne
 800516c:	2102      	movne	r1, #2
 800516e:	2101      	moveq	r1, #1
 8005170:	6139      	str	r1, [r7, #16]
 8005172:	b1c4      	cbz	r4, 80051a6 <__d2b+0x88>
 8005174:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005178:	4404      	add	r4, r0
 800517a:	6034      	str	r4, [r6, #0]
 800517c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005180:	6028      	str	r0, [r5, #0]
 8005182:	4638      	mov	r0, r7
 8005184:	b003      	add	sp, #12
 8005186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800518a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800518e:	e7d5      	b.n	800513c <__d2b+0x1e>
 8005190:	6179      	str	r1, [r7, #20]
 8005192:	e7e7      	b.n	8005164 <__d2b+0x46>
 8005194:	a801      	add	r0, sp, #4
 8005196:	f7ff fddb 	bl	8004d50 <__lo0bits>
 800519a:	9b01      	ldr	r3, [sp, #4]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	2101      	movs	r1, #1
 80051a0:	6139      	str	r1, [r7, #16]
 80051a2:	3020      	adds	r0, #32
 80051a4:	e7e5      	b.n	8005172 <__d2b+0x54>
 80051a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80051aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80051ae:	6030      	str	r0, [r6, #0]
 80051b0:	6918      	ldr	r0, [r3, #16]
 80051b2:	f7ff fdae 	bl	8004d12 <__hi0bits>
 80051b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80051ba:	e7e1      	b.n	8005180 <__d2b+0x62>

080051bc <_calloc_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	fb02 f401 	mul.w	r4, r2, r1
 80051c2:	4621      	mov	r1, r4
 80051c4:	f000 f856 	bl	8005274 <_malloc_r>
 80051c8:	4605      	mov	r5, r0
 80051ca:	b118      	cbz	r0, 80051d4 <_calloc_r+0x18>
 80051cc:	4622      	mov	r2, r4
 80051ce:	2100      	movs	r1, #0
 80051d0:	f7fd fe74 	bl	8002ebc <memset>
 80051d4:	4628      	mov	r0, r5
 80051d6:	bd38      	pop	{r3, r4, r5, pc}

080051d8 <_free_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4605      	mov	r5, r0
 80051dc:	2900      	cmp	r1, #0
 80051de:	d045      	beq.n	800526c <_free_r+0x94>
 80051e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e4:	1f0c      	subs	r4, r1, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfb8      	it	lt
 80051ea:	18e4      	addlt	r4, r4, r3
 80051ec:	f000 face 	bl	800578c <__malloc_lock>
 80051f0:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <_free_r+0x98>)
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	4610      	mov	r0, r2
 80051f6:	b933      	cbnz	r3, 8005206 <_free_r+0x2e>
 80051f8:	6063      	str	r3, [r4, #4]
 80051fa:	6014      	str	r4, [r2, #0]
 80051fc:	4628      	mov	r0, r5
 80051fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005202:	f000 bac4 	b.w	800578e <__malloc_unlock>
 8005206:	42a3      	cmp	r3, r4
 8005208:	d90c      	bls.n	8005224 <_free_r+0x4c>
 800520a:	6821      	ldr	r1, [r4, #0]
 800520c:	1862      	adds	r2, r4, r1
 800520e:	4293      	cmp	r3, r2
 8005210:	bf04      	itt	eq
 8005212:	681a      	ldreq	r2, [r3, #0]
 8005214:	685b      	ldreq	r3, [r3, #4]
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	bf04      	itt	eq
 800521a:	1852      	addeq	r2, r2, r1
 800521c:	6022      	streq	r2, [r4, #0]
 800521e:	6004      	str	r4, [r0, #0]
 8005220:	e7ec      	b.n	80051fc <_free_r+0x24>
 8005222:	4613      	mov	r3, r2
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	b10a      	cbz	r2, 800522c <_free_r+0x54>
 8005228:	42a2      	cmp	r2, r4
 800522a:	d9fa      	bls.n	8005222 <_free_r+0x4a>
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	1858      	adds	r0, r3, r1
 8005230:	42a0      	cmp	r0, r4
 8005232:	d10b      	bne.n	800524c <_free_r+0x74>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	4401      	add	r1, r0
 8005238:	1858      	adds	r0, r3, r1
 800523a:	4282      	cmp	r2, r0
 800523c:	6019      	str	r1, [r3, #0]
 800523e:	d1dd      	bne.n	80051fc <_free_r+0x24>
 8005240:	6810      	ldr	r0, [r2, #0]
 8005242:	6852      	ldr	r2, [r2, #4]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	4401      	add	r1, r0
 8005248:	6019      	str	r1, [r3, #0]
 800524a:	e7d7      	b.n	80051fc <_free_r+0x24>
 800524c:	d902      	bls.n	8005254 <_free_r+0x7c>
 800524e:	230c      	movs	r3, #12
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	e7d3      	b.n	80051fc <_free_r+0x24>
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	1821      	adds	r1, r4, r0
 8005258:	428a      	cmp	r2, r1
 800525a:	bf04      	itt	eq
 800525c:	6811      	ldreq	r1, [r2, #0]
 800525e:	6852      	ldreq	r2, [r2, #4]
 8005260:	6062      	str	r2, [r4, #4]
 8005262:	bf04      	itt	eq
 8005264:	1809      	addeq	r1, r1, r0
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	605c      	str	r4, [r3, #4]
 800526a:	e7c7      	b.n	80051fc <_free_r+0x24>
 800526c:	bd38      	pop	{r3, r4, r5, pc}
 800526e:	bf00      	nop
 8005270:	20000200 	.word	0x20000200

08005274 <_malloc_r>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	1ccd      	adds	r5, r1, #3
 8005278:	f025 0503 	bic.w	r5, r5, #3
 800527c:	3508      	adds	r5, #8
 800527e:	2d0c      	cmp	r5, #12
 8005280:	bf38      	it	cc
 8005282:	250c      	movcc	r5, #12
 8005284:	2d00      	cmp	r5, #0
 8005286:	4606      	mov	r6, r0
 8005288:	db01      	blt.n	800528e <_malloc_r+0x1a>
 800528a:	42a9      	cmp	r1, r5
 800528c:	d903      	bls.n	8005296 <_malloc_r+0x22>
 800528e:	230c      	movs	r3, #12
 8005290:	6033      	str	r3, [r6, #0]
 8005292:	2000      	movs	r0, #0
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	f000 fa79 	bl	800578c <__malloc_lock>
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <_malloc_r+0xac>)
 800529c:	6814      	ldr	r4, [r2, #0]
 800529e:	4621      	mov	r1, r4
 80052a0:	b991      	cbnz	r1, 80052c8 <_malloc_r+0x54>
 80052a2:	4c20      	ldr	r4, [pc, #128]	; (8005324 <_malloc_r+0xb0>)
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	b91b      	cbnz	r3, 80052b0 <_malloc_r+0x3c>
 80052a8:	4630      	mov	r0, r6
 80052aa:	f000 f9b3 	bl	8005614 <_sbrk_r>
 80052ae:	6020      	str	r0, [r4, #0]
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f000 f9ae 	bl	8005614 <_sbrk_r>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d124      	bne.n	8005306 <_malloc_r+0x92>
 80052bc:	230c      	movs	r3, #12
 80052be:	6033      	str	r3, [r6, #0]
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 fa64 	bl	800578e <__malloc_unlock>
 80052c6:	e7e4      	b.n	8005292 <_malloc_r+0x1e>
 80052c8:	680b      	ldr	r3, [r1, #0]
 80052ca:	1b5b      	subs	r3, r3, r5
 80052cc:	d418      	bmi.n	8005300 <_malloc_r+0x8c>
 80052ce:	2b0b      	cmp	r3, #11
 80052d0:	d90f      	bls.n	80052f2 <_malloc_r+0x7e>
 80052d2:	600b      	str	r3, [r1, #0]
 80052d4:	50cd      	str	r5, [r1, r3]
 80052d6:	18cc      	adds	r4, r1, r3
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 fa58 	bl	800578e <__malloc_unlock>
 80052de:	f104 000b 	add.w	r0, r4, #11
 80052e2:	1d23      	adds	r3, r4, #4
 80052e4:	f020 0007 	bic.w	r0, r0, #7
 80052e8:	1ac3      	subs	r3, r0, r3
 80052ea:	d0d3      	beq.n	8005294 <_malloc_r+0x20>
 80052ec:	425a      	negs	r2, r3
 80052ee:	50e2      	str	r2, [r4, r3]
 80052f0:	e7d0      	b.n	8005294 <_malloc_r+0x20>
 80052f2:	428c      	cmp	r4, r1
 80052f4:	684b      	ldr	r3, [r1, #4]
 80052f6:	bf16      	itet	ne
 80052f8:	6063      	strne	r3, [r4, #4]
 80052fa:	6013      	streq	r3, [r2, #0]
 80052fc:	460c      	movne	r4, r1
 80052fe:	e7eb      	b.n	80052d8 <_malloc_r+0x64>
 8005300:	460c      	mov	r4, r1
 8005302:	6849      	ldr	r1, [r1, #4]
 8005304:	e7cc      	b.n	80052a0 <_malloc_r+0x2c>
 8005306:	1cc4      	adds	r4, r0, #3
 8005308:	f024 0403 	bic.w	r4, r4, #3
 800530c:	42a0      	cmp	r0, r4
 800530e:	d005      	beq.n	800531c <_malloc_r+0xa8>
 8005310:	1a21      	subs	r1, r4, r0
 8005312:	4630      	mov	r0, r6
 8005314:	f000 f97e 	bl	8005614 <_sbrk_r>
 8005318:	3001      	adds	r0, #1
 800531a:	d0cf      	beq.n	80052bc <_malloc_r+0x48>
 800531c:	6025      	str	r5, [r4, #0]
 800531e:	e7db      	b.n	80052d8 <_malloc_r+0x64>
 8005320:	20000200 	.word	0x20000200
 8005324:	20000204 	.word	0x20000204

08005328 <__sfputc_r>:
 8005328:	6893      	ldr	r3, [r2, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	b410      	push	{r4}
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	da08      	bge.n	8005346 <__sfputc_r+0x1e>
 8005334:	6994      	ldr	r4, [r2, #24]
 8005336:	42a3      	cmp	r3, r4
 8005338:	db01      	blt.n	800533e <__sfputc_r+0x16>
 800533a:	290a      	cmp	r1, #10
 800533c:	d103      	bne.n	8005346 <__sfputc_r+0x1e>
 800533e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005342:	f7fe bb5d 	b.w	8003a00 <__swbuf_r>
 8005346:	6813      	ldr	r3, [r2, #0]
 8005348:	1c58      	adds	r0, r3, #1
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	7019      	strb	r1, [r3, #0]
 800534e:	4608      	mov	r0, r1
 8005350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005354:	4770      	bx	lr

08005356 <__sfputs_r>:
 8005356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005358:	4606      	mov	r6, r0
 800535a:	460f      	mov	r7, r1
 800535c:	4614      	mov	r4, r2
 800535e:	18d5      	adds	r5, r2, r3
 8005360:	42ac      	cmp	r4, r5
 8005362:	d101      	bne.n	8005368 <__sfputs_r+0x12>
 8005364:	2000      	movs	r0, #0
 8005366:	e007      	b.n	8005378 <__sfputs_r+0x22>
 8005368:	463a      	mov	r2, r7
 800536a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff ffda 	bl	8005328 <__sfputc_r>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d1f3      	bne.n	8005360 <__sfputs_r+0xa>
 8005378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800537c <_vfiprintf_r>:
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	460c      	mov	r4, r1
 8005382:	b09d      	sub	sp, #116	; 0x74
 8005384:	4617      	mov	r7, r2
 8005386:	461d      	mov	r5, r3
 8005388:	4606      	mov	r6, r0
 800538a:	b118      	cbz	r0, 8005394 <_vfiprintf_r+0x18>
 800538c:	6983      	ldr	r3, [r0, #24]
 800538e:	b90b      	cbnz	r3, 8005394 <_vfiprintf_r+0x18>
 8005390:	f7ff fb2a 	bl	80049e8 <__sinit>
 8005394:	4b7c      	ldr	r3, [pc, #496]	; (8005588 <_vfiprintf_r+0x20c>)
 8005396:	429c      	cmp	r4, r3
 8005398:	d158      	bne.n	800544c <_vfiprintf_r+0xd0>
 800539a:	6874      	ldr	r4, [r6, #4]
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	0718      	lsls	r0, r3, #28
 80053a0:	d55e      	bpl.n	8005460 <_vfiprintf_r+0xe4>
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05b      	beq.n	8005460 <_vfiprintf_r+0xe4>
 80053a8:	2300      	movs	r3, #0
 80053aa:	9309      	str	r3, [sp, #36]	; 0x24
 80053ac:	2320      	movs	r3, #32
 80053ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053b2:	2330      	movs	r3, #48	; 0x30
 80053b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053b8:	9503      	str	r5, [sp, #12]
 80053ba:	f04f 0b01 	mov.w	fp, #1
 80053be:	46b8      	mov	r8, r7
 80053c0:	4645      	mov	r5, r8
 80053c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053c6:	b10b      	cbz	r3, 80053cc <_vfiprintf_r+0x50>
 80053c8:	2b25      	cmp	r3, #37	; 0x25
 80053ca:	d154      	bne.n	8005476 <_vfiprintf_r+0xfa>
 80053cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80053d0:	d00b      	beq.n	80053ea <_vfiprintf_r+0x6e>
 80053d2:	4653      	mov	r3, sl
 80053d4:	463a      	mov	r2, r7
 80053d6:	4621      	mov	r1, r4
 80053d8:	4630      	mov	r0, r6
 80053da:	f7ff ffbc 	bl	8005356 <__sfputs_r>
 80053de:	3001      	adds	r0, #1
 80053e0:	f000 80c2 	beq.w	8005568 <_vfiprintf_r+0x1ec>
 80053e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e6:	4453      	add	r3, sl
 80053e8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ea:	f898 3000 	ldrb.w	r3, [r8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80ba 	beq.w	8005568 <_vfiprintf_r+0x1ec>
 80053f4:	2300      	movs	r3, #0
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053fe:	9304      	str	r3, [sp, #16]
 8005400:	9307      	str	r3, [sp, #28]
 8005402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005406:	931a      	str	r3, [sp, #104]	; 0x68
 8005408:	46a8      	mov	r8, r5
 800540a:	2205      	movs	r2, #5
 800540c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005410:	485e      	ldr	r0, [pc, #376]	; (800558c <_vfiprintf_r+0x210>)
 8005412:	f7fa fee5 	bl	80001e0 <memchr>
 8005416:	9b04      	ldr	r3, [sp, #16]
 8005418:	bb78      	cbnz	r0, 800547a <_vfiprintf_r+0xfe>
 800541a:	06d9      	lsls	r1, r3, #27
 800541c:	bf44      	itt	mi
 800541e:	2220      	movmi	r2, #32
 8005420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005424:	071a      	lsls	r2, r3, #28
 8005426:	bf44      	itt	mi
 8005428:	222b      	movmi	r2, #43	; 0x2b
 800542a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800542e:	782a      	ldrb	r2, [r5, #0]
 8005430:	2a2a      	cmp	r2, #42	; 0x2a
 8005432:	d02a      	beq.n	800548a <_vfiprintf_r+0x10e>
 8005434:	9a07      	ldr	r2, [sp, #28]
 8005436:	46a8      	mov	r8, r5
 8005438:	2000      	movs	r0, #0
 800543a:	250a      	movs	r5, #10
 800543c:	4641      	mov	r1, r8
 800543e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005442:	3b30      	subs	r3, #48	; 0x30
 8005444:	2b09      	cmp	r3, #9
 8005446:	d969      	bls.n	800551c <_vfiprintf_r+0x1a0>
 8005448:	b360      	cbz	r0, 80054a4 <_vfiprintf_r+0x128>
 800544a:	e024      	b.n	8005496 <_vfiprintf_r+0x11a>
 800544c:	4b50      	ldr	r3, [pc, #320]	; (8005590 <_vfiprintf_r+0x214>)
 800544e:	429c      	cmp	r4, r3
 8005450:	d101      	bne.n	8005456 <_vfiprintf_r+0xda>
 8005452:	68b4      	ldr	r4, [r6, #8]
 8005454:	e7a2      	b.n	800539c <_vfiprintf_r+0x20>
 8005456:	4b4f      	ldr	r3, [pc, #316]	; (8005594 <_vfiprintf_r+0x218>)
 8005458:	429c      	cmp	r4, r3
 800545a:	bf08      	it	eq
 800545c:	68f4      	ldreq	r4, [r6, #12]
 800545e:	e79d      	b.n	800539c <_vfiprintf_r+0x20>
 8005460:	4621      	mov	r1, r4
 8005462:	4630      	mov	r0, r6
 8005464:	f7fe fb1e 	bl	8003aa4 <__swsetup_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	d09d      	beq.n	80053a8 <_vfiprintf_r+0x2c>
 800546c:	f04f 30ff 	mov.w	r0, #4294967295
 8005470:	b01d      	add	sp, #116	; 0x74
 8005472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005476:	46a8      	mov	r8, r5
 8005478:	e7a2      	b.n	80053c0 <_vfiprintf_r+0x44>
 800547a:	4a44      	ldr	r2, [pc, #272]	; (800558c <_vfiprintf_r+0x210>)
 800547c:	1a80      	subs	r0, r0, r2
 800547e:	fa0b f000 	lsl.w	r0, fp, r0
 8005482:	4318      	orrs	r0, r3
 8005484:	9004      	str	r0, [sp, #16]
 8005486:	4645      	mov	r5, r8
 8005488:	e7be      	b.n	8005408 <_vfiprintf_r+0x8c>
 800548a:	9a03      	ldr	r2, [sp, #12]
 800548c:	1d11      	adds	r1, r2, #4
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	9103      	str	r1, [sp, #12]
 8005492:	2a00      	cmp	r2, #0
 8005494:	db01      	blt.n	800549a <_vfiprintf_r+0x11e>
 8005496:	9207      	str	r2, [sp, #28]
 8005498:	e004      	b.n	80054a4 <_vfiprintf_r+0x128>
 800549a:	4252      	negs	r2, r2
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	9207      	str	r2, [sp, #28]
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	f898 3000 	ldrb.w	r3, [r8]
 80054a8:	2b2e      	cmp	r3, #46	; 0x2e
 80054aa:	d10e      	bne.n	80054ca <_vfiprintf_r+0x14e>
 80054ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80054b0:	2b2a      	cmp	r3, #42	; 0x2a
 80054b2:	d138      	bne.n	8005526 <_vfiprintf_r+0x1aa>
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	1d1a      	adds	r2, r3, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	9203      	str	r2, [sp, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bfb8      	it	lt
 80054c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80054c4:	f108 0802 	add.w	r8, r8, #2
 80054c8:	9305      	str	r3, [sp, #20]
 80054ca:	4d33      	ldr	r5, [pc, #204]	; (8005598 <_vfiprintf_r+0x21c>)
 80054cc:	f898 1000 	ldrb.w	r1, [r8]
 80054d0:	2203      	movs	r2, #3
 80054d2:	4628      	mov	r0, r5
 80054d4:	f7fa fe84 	bl	80001e0 <memchr>
 80054d8:	b140      	cbz	r0, 80054ec <_vfiprintf_r+0x170>
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	1b40      	subs	r0, r0, r5
 80054de:	fa03 f000 	lsl.w	r0, r3, r0
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	4303      	orrs	r3, r0
 80054e6:	f108 0801 	add.w	r8, r8, #1
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	f898 1000 	ldrb.w	r1, [r8]
 80054f0:	482a      	ldr	r0, [pc, #168]	; (800559c <_vfiprintf_r+0x220>)
 80054f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054f6:	2206      	movs	r2, #6
 80054f8:	f108 0701 	add.w	r7, r8, #1
 80054fc:	f7fa fe70 	bl	80001e0 <memchr>
 8005500:	2800      	cmp	r0, #0
 8005502:	d037      	beq.n	8005574 <_vfiprintf_r+0x1f8>
 8005504:	4b26      	ldr	r3, [pc, #152]	; (80055a0 <_vfiprintf_r+0x224>)
 8005506:	bb1b      	cbnz	r3, 8005550 <_vfiprintf_r+0x1d4>
 8005508:	9b03      	ldr	r3, [sp, #12]
 800550a:	3307      	adds	r3, #7
 800550c:	f023 0307 	bic.w	r3, r3, #7
 8005510:	3308      	adds	r3, #8
 8005512:	9303      	str	r3, [sp, #12]
 8005514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005516:	444b      	add	r3, r9
 8005518:	9309      	str	r3, [sp, #36]	; 0x24
 800551a:	e750      	b.n	80053be <_vfiprintf_r+0x42>
 800551c:	fb05 3202 	mla	r2, r5, r2, r3
 8005520:	2001      	movs	r0, #1
 8005522:	4688      	mov	r8, r1
 8005524:	e78a      	b.n	800543c <_vfiprintf_r+0xc0>
 8005526:	2300      	movs	r3, #0
 8005528:	f108 0801 	add.w	r8, r8, #1
 800552c:	9305      	str	r3, [sp, #20]
 800552e:	4619      	mov	r1, r3
 8005530:	250a      	movs	r5, #10
 8005532:	4640      	mov	r0, r8
 8005534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005538:	3a30      	subs	r2, #48	; 0x30
 800553a:	2a09      	cmp	r2, #9
 800553c:	d903      	bls.n	8005546 <_vfiprintf_r+0x1ca>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0c3      	beq.n	80054ca <_vfiprintf_r+0x14e>
 8005542:	9105      	str	r1, [sp, #20]
 8005544:	e7c1      	b.n	80054ca <_vfiprintf_r+0x14e>
 8005546:	fb05 2101 	mla	r1, r5, r1, r2
 800554a:	2301      	movs	r3, #1
 800554c:	4680      	mov	r8, r0
 800554e:	e7f0      	b.n	8005532 <_vfiprintf_r+0x1b6>
 8005550:	ab03      	add	r3, sp, #12
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4622      	mov	r2, r4
 8005556:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <_vfiprintf_r+0x228>)
 8005558:	a904      	add	r1, sp, #16
 800555a:	4630      	mov	r0, r6
 800555c:	f7fd fd4a 	bl	8002ff4 <_printf_float>
 8005560:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005564:	4681      	mov	r9, r0
 8005566:	d1d5      	bne.n	8005514 <_vfiprintf_r+0x198>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	065b      	lsls	r3, r3, #25
 800556c:	f53f af7e 	bmi.w	800546c <_vfiprintf_r+0xf0>
 8005570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005572:	e77d      	b.n	8005470 <_vfiprintf_r+0xf4>
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4622      	mov	r2, r4
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <_vfiprintf_r+0x228>)
 800557c:	a904      	add	r1, sp, #16
 800557e:	4630      	mov	r0, r6
 8005580:	f7fd ffee 	bl	8003560 <_printf_i>
 8005584:	e7ec      	b.n	8005560 <_vfiprintf_r+0x1e4>
 8005586:	bf00      	nop
 8005588:	08005974 	.word	0x08005974
 800558c:	08005ab4 	.word	0x08005ab4
 8005590:	08005994 	.word	0x08005994
 8005594:	08005954 	.word	0x08005954
 8005598:	08005aba 	.word	0x08005aba
 800559c:	08005abe 	.word	0x08005abe
 80055a0:	08002ff5 	.word	0x08002ff5
 80055a4:	08005357 	.word	0x08005357

080055a8 <_putc_r>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	460d      	mov	r5, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	4606      	mov	r6, r0
 80055b0:	b118      	cbz	r0, 80055ba <_putc_r+0x12>
 80055b2:	6983      	ldr	r3, [r0, #24]
 80055b4:	b90b      	cbnz	r3, 80055ba <_putc_r+0x12>
 80055b6:	f7ff fa17 	bl	80049e8 <__sinit>
 80055ba:	4b13      	ldr	r3, [pc, #76]	; (8005608 <_putc_r+0x60>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	d112      	bne.n	80055e6 <_putc_r+0x3e>
 80055c0:	6874      	ldr	r4, [r6, #4]
 80055c2:	68a3      	ldr	r3, [r4, #8]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	60a3      	str	r3, [r4, #8]
 80055ca:	da16      	bge.n	80055fa <_putc_r+0x52>
 80055cc:	69a2      	ldr	r2, [r4, #24]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	db02      	blt.n	80055d8 <_putc_r+0x30>
 80055d2:	b2eb      	uxtb	r3, r5
 80055d4:	2b0a      	cmp	r3, #10
 80055d6:	d110      	bne.n	80055fa <_putc_r+0x52>
 80055d8:	4622      	mov	r2, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	4630      	mov	r0, r6
 80055de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055e2:	f7fe ba0d 	b.w	8003a00 <__swbuf_r>
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <_putc_r+0x64>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d101      	bne.n	80055f0 <_putc_r+0x48>
 80055ec:	68b4      	ldr	r4, [r6, #8]
 80055ee:	e7e8      	b.n	80055c2 <_putc_r+0x1a>
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <_putc_r+0x68>)
 80055f2:	429c      	cmp	r4, r3
 80055f4:	bf08      	it	eq
 80055f6:	68f4      	ldreq	r4, [r6, #12]
 80055f8:	e7e3      	b.n	80055c2 <_putc_r+0x1a>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	6022      	str	r2, [r4, #0]
 8005600:	701d      	strb	r5, [r3, #0]
 8005602:	b2e8      	uxtb	r0, r5
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	bf00      	nop
 8005608:	08005974 	.word	0x08005974
 800560c:	08005994 	.word	0x08005994
 8005610:	08005954 	.word	0x08005954

08005614 <_sbrk_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4c06      	ldr	r4, [pc, #24]	; (8005630 <_sbrk_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4605      	mov	r5, r0
 800561c:	4608      	mov	r0, r1
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	f7fd fb2c 	bl	8002c7c <_sbrk>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_sbrk_r+0x1a>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	b103      	cbz	r3, 800562e <_sbrk_r+0x1a>
 800562c:	602b      	str	r3, [r5, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20000354 	.word	0x20000354

08005634 <__sread>:
 8005634:	b510      	push	{r4, lr}
 8005636:	460c      	mov	r4, r1
 8005638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563c:	f000 f8a8 	bl	8005790 <_read_r>
 8005640:	2800      	cmp	r0, #0
 8005642:	bfab      	itete	ge
 8005644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005646:	89a3      	ldrhlt	r3, [r4, #12]
 8005648:	181b      	addge	r3, r3, r0
 800564a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800564e:	bfac      	ite	ge
 8005650:	6563      	strge	r3, [r4, #84]	; 0x54
 8005652:	81a3      	strhlt	r3, [r4, #12]
 8005654:	bd10      	pop	{r4, pc}

08005656 <__swrite>:
 8005656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565a:	461f      	mov	r7, r3
 800565c:	898b      	ldrh	r3, [r1, #12]
 800565e:	05db      	lsls	r3, r3, #23
 8005660:	4605      	mov	r5, r0
 8005662:	460c      	mov	r4, r1
 8005664:	4616      	mov	r6, r2
 8005666:	d505      	bpl.n	8005674 <__swrite+0x1e>
 8005668:	2302      	movs	r3, #2
 800566a:	2200      	movs	r2, #0
 800566c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005670:	f000 f868 	bl	8005744 <_lseek_r>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800567a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	4632      	mov	r2, r6
 8005682:	463b      	mov	r3, r7
 8005684:	4628      	mov	r0, r5
 8005686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800568a:	f000 b817 	b.w	80056bc <_write_r>

0800568e <__sseek>:
 800568e:	b510      	push	{r4, lr}
 8005690:	460c      	mov	r4, r1
 8005692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005696:	f000 f855 	bl	8005744 <_lseek_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	bf15      	itete	ne
 80056a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056aa:	81a3      	strheq	r3, [r4, #12]
 80056ac:	bf18      	it	ne
 80056ae:	81a3      	strhne	r3, [r4, #12]
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <__sclose>:
 80056b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b6:	f000 b813 	b.w	80056e0 <_close_r>
	...

080056bc <_write_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4c07      	ldr	r4, [pc, #28]	; (80056dc <_write_r+0x20>)
 80056c0:	4605      	mov	r5, r0
 80056c2:	4608      	mov	r0, r1
 80056c4:	4611      	mov	r1, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	6022      	str	r2, [r4, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f7fd fac8 	bl	8002c60 <_write>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_write_r+0x1e>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	b103      	cbz	r3, 80056da <_write_r+0x1e>
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000354 	.word	0x20000354

080056e0 <_close_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4c06      	ldr	r4, [pc, #24]	; (80056fc <_close_r+0x1c>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4605      	mov	r5, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	f7fd fae4 	bl	8002cb8 <_close>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_close_r+0x1a>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_close_r+0x1a>
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000354 	.word	0x20000354

08005700 <_fstat_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4c07      	ldr	r4, [pc, #28]	; (8005720 <_fstat_r+0x20>)
 8005704:	2300      	movs	r3, #0
 8005706:	4605      	mov	r5, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	f7fd fad7 	bl	8002cc0 <_fstat>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d102      	bne.n	800571c <_fstat_r+0x1c>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	b103      	cbz	r3, 800571c <_fstat_r+0x1c>
 800571a:	602b      	str	r3, [r5, #0]
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	20000354 	.word	0x20000354

08005724 <_isatty_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4c06      	ldr	r4, [pc, #24]	; (8005740 <_isatty_r+0x1c>)
 8005728:	2300      	movs	r3, #0
 800572a:	4605      	mov	r5, r0
 800572c:	4608      	mov	r0, r1
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	f7fd facc 	bl	8002ccc <_isatty>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_isatty_r+0x1a>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	b103      	cbz	r3, 800573e <_isatty_r+0x1a>
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000354 	.word	0x20000354

08005744 <_lseek_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4c07      	ldr	r4, [pc, #28]	; (8005764 <_lseek_r+0x20>)
 8005748:	4605      	mov	r5, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	6022      	str	r2, [r4, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f7fd fabc 	bl	8002cd0 <_lseek>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_lseek_r+0x1e>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	b103      	cbz	r3, 8005762 <_lseek_r+0x1e>
 8005760:	602b      	str	r3, [r5, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20000354 	.word	0x20000354

08005768 <__ascii_mbtowc>:
 8005768:	b082      	sub	sp, #8
 800576a:	b901      	cbnz	r1, 800576e <__ascii_mbtowc+0x6>
 800576c:	a901      	add	r1, sp, #4
 800576e:	b142      	cbz	r2, 8005782 <__ascii_mbtowc+0x1a>
 8005770:	b14b      	cbz	r3, 8005786 <__ascii_mbtowc+0x1e>
 8005772:	7813      	ldrb	r3, [r2, #0]
 8005774:	600b      	str	r3, [r1, #0]
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	1c10      	adds	r0, r2, #0
 800577a:	bf18      	it	ne
 800577c:	2001      	movne	r0, #1
 800577e:	b002      	add	sp, #8
 8005780:	4770      	bx	lr
 8005782:	4610      	mov	r0, r2
 8005784:	e7fb      	b.n	800577e <__ascii_mbtowc+0x16>
 8005786:	f06f 0001 	mvn.w	r0, #1
 800578a:	e7f8      	b.n	800577e <__ascii_mbtowc+0x16>

0800578c <__malloc_lock>:
 800578c:	4770      	bx	lr

0800578e <__malloc_unlock>:
 800578e:	4770      	bx	lr

08005790 <_read_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4c07      	ldr	r4, [pc, #28]	; (80057b0 <_read_r+0x20>)
 8005794:	4605      	mov	r5, r0
 8005796:	4608      	mov	r0, r1
 8005798:	4611      	mov	r1, r2
 800579a:	2200      	movs	r2, #0
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fd fa50 	bl	8002c44 <_read>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_read_r+0x1e>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_read_r+0x1e>
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	20000354 	.word	0x20000354

080057b4 <__ascii_wctomb>:
 80057b4:	b149      	cbz	r1, 80057ca <__ascii_wctomb+0x16>
 80057b6:	2aff      	cmp	r2, #255	; 0xff
 80057b8:	bf85      	ittet	hi
 80057ba:	238a      	movhi	r3, #138	; 0x8a
 80057bc:	6003      	strhi	r3, [r0, #0]
 80057be:	700a      	strbls	r2, [r1, #0]
 80057c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80057c4:	bf98      	it	ls
 80057c6:	2001      	movls	r0, #1
 80057c8:	4770      	bx	lr
 80057ca:	4608      	mov	r0, r1
 80057cc:	4770      	bx	lr
	...

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
