
Assignment_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e01c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800e1ac  0800e1ac  0001e1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e378  0800e378  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e378  0800e378  0001e378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e380  0800e380  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e380  0800e380  0001e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e384  0800e384  0001e384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005324  20000094  0800e41c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053b8  0800e41c  000253b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000336d4  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006372  00000000  00000000  00053798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002288  00000000  00000000  00059b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002038  00000000  00000000  0005bd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282ad  00000000  00000000  0005ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a5e5  00000000  00000000  0008607d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4e3e  00000000  00000000  000b0662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001954a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009474  00000000  00000000  001954f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e194 	.word	0x0800e194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800e194 	.word	0x0800e194

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <fvdSerialChannelISR>:

// Rx interrrupt counter
uint16_t suinRxIntCounter = 0;

void fvdSerialChannelISR(stSERIAL_CHANNELTypeDef *pstSerialCh)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  // Firstly read in some relevant registers
  
  uint32_t srflags = READ_REG(pstSerialCh->pstRxChannel->pstUartHALHandle->Instance->SR); // Status Register
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	613b      	str	r3, [r7, #16]
  uint32_t cr1its = READ_REG(pstSerialCh->pstRxChannel->pstUartHALHandle->Instance->CR1); // Control register 1
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	60fb      	str	r3, [r7, #12]
  // uint32_t cr3its = READ_REG(pstSerialCh->pstRxChannel->pstUartHALHandle->Instance->CR3);    // Control register 3

  uint32_t ulgErrorflags;
  enum BOOL boInterruptOccurred = False;
 80004e8:	2300      	movs	r3, #0
 80004ea:	75fb      	strb	r3, [r7, #23]

  // Firstly check to see if there are any errors. This code is basically the same.
  ulgErrorflags = (srflags &(uint32_t)(USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE ));
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	60bb      	str	r3, [r7, #8]

  if (ulgErrorflags == 0U)
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d11d      	bne.n	8000536 <fvdSerialChannelISR+0x6e>
  {
    // No errors then continue.

    // Check for the source of the interrupt
    // Check to see if Rx interrupts are enabled and if a Rx interrupt has actually occurred.
    if (((srflags & USART_SR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	2b00      	cmp	r3, #0
 8000502:	d009      	beq.n	8000518 <fvdSerialChannelISR+0x50>
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	2b00      	cmp	r3, #0
 800050c:	d004      	beq.n	8000518 <fvdSerialChannelISR+0x50>
    {
      // Call the receive interrupt handling routine.
      fvdRxInterruptHandler(pstSerialCh);
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f000 f828 	bl	8000564 <fvdRxInterruptHandler>
      boInterruptOccurred = True;
 8000514:	2301      	movs	r3, #1
 8000516:	75fb      	strb	r3, [r7, #23]
    }

    // Now check to see if an Tx interrupt has occurred.
    if (((srflags & USART_SR_TXE) != 0U) && ((cr1its & USART_CR1_TXEIE) != 0U))
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	2b00      	cmp	r3, #0
 8000520:	d009      	beq.n	8000536 <fvdSerialChannelISR+0x6e>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000528:	2b00      	cmp	r3, #0
 800052a:	d004      	beq.n	8000536 <fvdSerialChannelISR+0x6e>
    {
      fvdTxInterruptHandler(pstSerialCh);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 f8c3 	bl	80006b8 <fvdTxInterruptHandler>
      boInterruptOccurred = True;
 8000532:	2301      	movs	r3, #1
 8000534:	75fb      	strb	r3, [r7, #23]
    }
  } // ulgErrorflags == 0

  // Save the error flags for perusal under debugging
  pstSerialCh->ulSerialErrorFlags = ulgErrorflags;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	60da      	str	r2, [r3, #12]

  // Now check to make sure that at least one Rx or TX interrupt has been serviced
  if (!boInterruptOccurred)
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10b      	bne.n	800055a <fvdSerialChannelISR+0x92>
  {
    pstSerialCh->ulSerialErrorCodes |= INTERRUPT_GEN_ERROR;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	f043 0201 	orr.w	r2, r3, #1
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	611a      	str	r2, [r3, #16]
    // Clear any interrupts to prevent the routine from getting caught in an
    // interrupt loop.
    HAL_NVIC_ClearPendingIRQ(pstSerialCh->uinIRQn);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7a1b      	ldrb	r3, [r3, #8]
 8000552:	b25b      	sxtb	r3, r3
 8000554:	4618      	mov	r0, r3
 8000556:	f002 f845 	bl	80025e4 <HAL_NVIC_ClearPendingIRQ>
  }
} // end fnvdSerialChannelISR
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <fvdRxInterruptHandler>:
 * transmit buffer.
 *
 */

void fvdRxInterruptHandler(stSERIAL_CHANNELTypeDef *pstSerialCh)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  char chTempCh;
  // The first step is to read in the value in the RxDR
  chTempCh = pstSerialCh->pstRxChannel->pstUartHALHandle->Instance->DR;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	73fb      	strb	r3, [r7, #15]

  // After a certain number of Rx interrupts reset the RED overflow led so
  // that one can see if overflows are continuing.
  if (((suinRxIntCounter++) % RX_BUFFER_SIZE) == 0)
 8000578:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <fvdRxInterruptHandler+0x148>)
 800057a:	881a      	ldrh	r2, [r3, #0]
 800057c:	1c53      	adds	r3, r2, #1
 800057e:	b299      	uxth	r1, r3
 8000580:	4b4a      	ldr	r3, [pc, #296]	; (80006ac <fvdRxInterruptHandler+0x148>)
 8000582:	8019      	strh	r1, [r3, #0]
 8000584:	4b4a      	ldr	r3, [pc, #296]	; (80006b0 <fvdRxInterruptHandler+0x14c>)
 8000586:	fba3 1302 	umull	r1, r3, r3, r2
 800058a:	0959      	lsrs	r1, r3, #5
 800058c:	460b      	mov	r3, r1
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	b29b      	uxth	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d108      	bne.n	80005ae <fvdRxInterruptHandler+0x4a>
  {
    HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	4844      	ldr	r0, [pc, #272]	; (80006b4 <fvdRxInterruptHandler+0x150>)
 80005a4:	f002 fcd4 	bl	8002f50 <HAL_GPIO_WritePin>
    suinRxIntCounter = 0;
 80005a8:	4b40      	ldr	r3, [pc, #256]	; (80006ac <fvdRxInterruptHandler+0x148>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	801a      	strh	r2, [r3, #0]
  }

  switch (chTempCh)
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b11      	cmp	r3, #17
 80005b2:	d012      	beq.n	80005da <fvdRxInterruptHandler+0x76>
 80005b4:	2b13      	cmp	r3, #19
 80005b6:	d121      	bne.n	80005fc <fvdRxInterruptHandler+0x98>
    case CTRLS:
      // The external user has requested that the Tx be stopped.
      // When this is received a location is set in the transmit
      // structure to indicate that the transmission data should stop upon
      // the next TX interrupt.
      DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	68da      	ldr	r2, [r3, #12]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80005ce:	60da      	str	r2, [r3, #12]
      pstSerialCh->pstTxChannel->boTxUserCtrlS = True;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2201      	movs	r2, #1
 80005d6:	739a      	strb	r2, [r3, #14]
      return;
 80005d8:	e064      	b.n	80006a4 <fvdRxInterruptHandler+0x140>

    case CTRLQ:
      // The external user has requested that the Tx transmission be started
      // again
      pstSerialCh->pstTxChannel->boTxUserCtrlS = False;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	739a      	strb	r2, [r3, #14]
      ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005f8:	60da      	str	r2, [r3, #12]
      return;
 80005fa:	e053      	b.n	80006a4 <fvdRxInterruptHandler+0x140>
  // Enter here if no user CtrlS or Ctrl Q, so normal receive character processing
  // should proceed.
  //
  // Prior to putting the character into the buffer check to see if the buffer is
  // full.
  if (pstSerialCh->pstRxChannel->uinFree == 0)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	891b      	ldrh	r3, [r3, #8]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10c      	bne.n	8000620 <fvdRxInterruptHandler+0xbc>
  {
    // Buffer is full.  This condition should not occur and there is an error
    // if it has occurred.
    // Throw away the character
    pstSerialCh->ulSerialErrorCodes |= RX_BUFFER_FULL;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	f043 0202 	orr.w	r2, r3, #2
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4826      	ldr	r0, [pc, #152]	; (80006b4 <fvdRxInterruptHandler+0x150>)
 800061a:	f002 fc99 	bl	8002f50 <HAL_GPIO_WritePin>

    // Clear RXNE interrupt flag
    // __HAL_UART_SEND_REQ(pstSerialCh->pstRxChannel->pstUartHALHandle, UART_RXDATA_FLUSH_REQUEST);
    return;
 800061e:	e041      	b.n	80006a4 <fvdRxInterruptHandler+0x140>
  }

  // Get here if there is space available in the buffer.
  // Put the character into the buffer and update the house keeping
  // values
  pstSerialCh->pstRxChannel->pchSerialBuffer[pstSerialCh->pstRxChannel->uinHead] = chTempCh;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	6812      	ldr	r2, [r2, #0]
 800062a:	8892      	ldrh	r2, [r2, #4]
 800062c:	4413      	add	r3, r2
 800062e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000632:	701a      	strb	r2, [r3, #0]
  pstSerialCh->pstRxChannel->uinHead = (pstSerialCh->pstRxChannel->uinHead + 1) %
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	889b      	ldrh	r3, [r3, #4]
 800063a:	3301      	adds	r3, #1
                                                    (pstSerialCh->pstRxChannel->uinBufSize);
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	8992      	ldrh	r2, [r2, #12]
  pstSerialCh->pstRxChannel->uinHead = (pstSerialCh->pstRxChannel->uinHead + 1) %
 8000642:	fb93 f1f2 	sdiv	r1, r3, r2
 8000646:	fb02 f201 	mul.w	r2, r2, r1
 800064a:	1a9a      	subs	r2, r3, r2
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	b292      	uxth	r2, r2
 8000652:	809a      	strh	r2, [r3, #4]
  pstSerialCh->pstRxChannel->uinUsed++;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	895a      	ldrh	r2, [r3, #10]
 800065a:	3201      	adds	r2, #1
 800065c:	b292      	uxth	r2, r2
 800065e:	815a      	strh	r2, [r3, #10]
  pstSerialCh->pstRxChannel->uinFree--;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	891a      	ldrh	r2, [r3, #8]
 8000666:	3a01      	subs	r2, #1
 8000668:	b292      	uxth	r2, r2
 800066a:	811a      	strh	r2, [r3, #8]

  // Now check to see if the upper threshold has been exceeded
  if (pstSerialCh->pstRxChannel->uinUsed >= pstSerialCh->pstRxChannel->uinCtrlSThreshold)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	895a      	ldrh	r2, [r3, #10]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	8a1b      	ldrh	r3, [r3, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d313      	bcc.n	80006a4 <fvdRxInterruptHandler+0x140>
  {
    // We are at or above the upper threshold for used locations in the buffer.
    // So instruct the TX to send out a CtrlS to stop characters.
    pstSerialCh->pstRxChannel->chCtrlSCtrlQ = CTRLS;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2213      	movs	r2, #19
 8000682:	739a      	strb	r2, [r3, #14]

    // Set the flag to indicate to the Rx routine that it is in hysteresis mode
    // and waiting for the buffer to be depleted before a CtrlQ is sent out of
    // the Tx
    pstSerialCh->pstRxChannel->boHysteresisActive = True;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	73da      	strb	r2, [r3, #15]
    // Make sure the the TX interrupts are enable so that this can be checked by the
    // transmitter and the ctrlS is sent.
    ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006a2:	60da      	str	r2, [r3, #12]
  }
} // end fvdRxInterruptHandler
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000b0 	.word	0x200000b0
 80006b0:	cccccccd 	.word	0xcccccccd
 80006b4:	40020c00 	.word	0x40020c00

080006b8 <fvdTxInterruptHandler>:
 * transmit buffer.
 *
 */

void fvdTxInterruptHandler(stSERIAL_CHANNELTypeDef *pstSerialCh)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  // Upon entry firstly check to see if the receiver has requested that the
  // transmitter transmit a CtrlS or CtrlQ character to control the filling
  // of the RX buffer.
  //
  // We have to check the chCtrlSCtrlQ flag in the RX data structure
  if ((pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLS) || (pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLQ))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80006c8:	2b13      	cmp	r3, #19
 80006ca:	d005      	beq.n	80006d8 <fvdTxInterruptHandler+0x20>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80006d4:	2b11      	cmp	r3, #17
 80006d6:	d126      	bne.n	8000726 <fvdTxInterruptHandler+0x6e>
  {
    // Now send the CTRLS/Q immediately out of the transmit register of the
    // UART, and then reset the chCtrlSCtrlQ location to zero.
    pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR = pstSerialCh->pstRxChannel->chCtrlSCtrlQ;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f993 200e 	ldrsb.w	r2, [r3, #14]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]

    if (pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLS)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80006f2:	2b13      	cmp	r3, #19
 80006f4:	d106      	bne.n	8000704 <fvdTxInterruptHandler+0x4c>
    {
      HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	4834      	ldr	r0, [pc, #208]	; (80007d0 <fvdTxInterruptHandler+0x118>)
 80006fe:	f002 fc27 	bl	8002f50 <HAL_GPIO_WritePin>
 8000702:	e00b      	b.n	800071c <fvdTxInterruptHandler+0x64>
    }
    else if (pstSerialCh->pstRxChannel->chCtrlSCtrlQ == CTRLQ)// CTRLQ
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800070c:	2b11      	cmp	r3, #17
 800070e:	d105      	bne.n	800071c <fvdTxInterruptHandler+0x64>
    {
      HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000716:	482e      	ldr	r0, [pc, #184]	; (80007d0 <fvdTxInterruptHandler+0x118>)
 8000718:	f002 fc1a 	bl	8002f50 <HAL_GPIO_WritePin>
    }

    pstSerialCh->pstRxChannel->chCtrlSCtrlQ = 0;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2200      	movs	r2, #0
 8000722:	739a      	strb	r2, [r3, #14]
    return;
 8000724:	e051      	b.n	80007ca <fvdTxInterruptHandler+0x112>
  }

  if (pstSerialCh->pstTxChannel->uinUsed == 0)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	895b      	ldrh	r3, [r3, #10]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10c      	bne.n	800074a <fvdTxInterruptHandler+0x92>
  {
    DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68da      	ldr	r2, [r3, #12]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000746:	60da      	str	r2, [r3, #12]
    return;
 8000748:	e03f      	b.n	80007ca <fvdTxInterruptHandler+0x112>
  }

  if (pstSerialCh->pstTxChannel->boTxUserCtrlS)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	7b9b      	ldrb	r3, [r3, #14]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00c      	beq.n	800076e <fvdTxInterruptHandler+0xb6>
  {
    // The external user has requested that the serial transmission stop
    DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800076a:	60da      	str	r2, [r3, #12]
    return;
 800076c:	e02d      	b.n	80007ca <fvdTxInterruptHandler+0x112>
  }

  // Now get a character out of the transmit buffer and send it
  pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR =
    (uint8_t)((pstSerialCh->pstTxChannel->pchSerialBuffer[pstSerialCh->pstTxChannel->uinTail]) & 0x7FU);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	6852      	ldr	r2, [r2, #4]
 8000778:	88d2      	ldrh	r2, [r2, #6]
 800077a:	4413      	add	r3, r2
 800077c:	f993 3000 	ldrsb.w	r3, [r3]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
  pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR =
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
    (uint8_t)((pstSerialCh->pstTxChannel->pchSerialBuffer[pstSerialCh->pstTxChannel->uinTail]) & 0x7FU);
 800078c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->DR =
 8000790:	605a      	str	r2, [r3, #4]
  // Update the buffer information
  pstSerialCh->pstTxChannel->uinTail = (pstSerialCh->pstTxChannel->uinTail + 1) %
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	88db      	ldrh	r3, [r3, #6]
 8000798:	3301      	adds	r3, #1
    (pstSerialCh->pstTxChannel->uinBufSize);
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	6852      	ldr	r2, [r2, #4]
 800079e:	8992      	ldrh	r2, [r2, #12]
  pstSerialCh->pstTxChannel->uinTail = (pstSerialCh->pstTxChannel->uinTail + 1) %
 80007a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80007a4:	fb02 f201 	mul.w	r2, r2, r1
 80007a8:	1a9a      	subs	r2, r3, r2
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	b292      	uxth	r2, r2
 80007b0:	80da      	strh	r2, [r3, #6]
  pstSerialCh->pstTxChannel->uinFree++;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	891a      	ldrh	r2, [r3, #8]
 80007b8:	3201      	adds	r2, #1
 80007ba:	b292      	uxth	r2, r2
 80007bc:	811a      	strh	r2, [r3, #8]
  pstSerialCh->pstTxChannel->uinUsed--;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	895a      	ldrh	r2, [r3, #10]
 80007c4:	3a01      	subs	r2, #1
 80007c6:	b292      	uxth	r2, r2
 80007c8:	815a      	strh	r2, [r3, #10]
} // end fvdTxInterruptHandler
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40020c00 	.word	0x40020c00

080007d4 <pstCreateSerialChannel>:
 *
 */

stSERIAL_CHANNELTypeDef* pstCreateSerialChannel(UART_HandleTypeDef *pstHuart,
  uint16_t uinRxBufSize, uint16_t uinTxBufSize)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
 80007e0:	4613      	mov	r3, r2
 80007e2:	803b      	strh	r3, [r7, #0]
  stSERIAL_CHANNELTypeDef * pstSerialChannel;

  // First step is to create the Rx and Tx structures.
  // First allocate the buffers
  // used for the Rx and Tx channels
  if ((pchRxBufTmp = (int8_t*) calloc(uinRxBufSize, sizeof(int8_t))) == NULL)
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	2101      	movs	r1, #1
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00d fba3 	bl	800df34 <calloc>
 80007ee:	4603      	mov	r3, r0
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <pstCreateSerialChannel+0x28>
  {
    // Not enough memory so return
    return (stSERIAL_CHANNELTypeDef*) pchRxBufTmp;
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	e0bc      	b.n	8000976 <pstCreateSerialChannel+0x1a2>
  }

  if ((pchTxBufTmp = (int8_t*) calloc(uinRxBufSize, sizeof(int8_t))) == NULL)
 80007fc:	887b      	ldrh	r3, [r7, #2]
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f00d fb97 	bl	800df34 <calloc>
 8000806:	4603      	mov	r3, r0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <pstCreateSerialChannel+0x40>
  {
    // Not enough memory so return
    return (stSERIAL_CHANNELTypeDef*) pchTxBufTmp;
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	e0b0      	b.n	8000976 <pstCreateSerialChannel+0x1a2>

  // Get here if the buffers have been allocated correctly.
  // Now allocate the storage for the main structures

  // RX data structure
  if ((pstRX_Serial_Channel = (stRX_SERIAL_CHANNELTypeDef*) calloc(1, sizeof(stRX_SERIAL_CHANNELTypeDef))) == NULL)
 8000814:	211c      	movs	r1, #28
 8000816:	2001      	movs	r0, #1
 8000818:	f00d fb8c 	bl	800df34 <calloc>
 800081c:	4603      	mov	r3, r0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <pstCreateSerialChannel+0x56>
  {
    return (stSERIAL_CHANNELTypeDef*) pstRX_Serial_Channel;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	e0a5      	b.n	8000976 <pstCreateSerialChannel+0x1a2>
  }

  // TX data structure
  if ((pstTX_Serial_Channel = (stTX_SERIAL_CHANNELTypeDef*) calloc(1, sizeof(stRX_SERIAL_CHANNELTypeDef))) == NULL)
 800082a:	211c      	movs	r1, #28
 800082c:	2001      	movs	r0, #1
 800082e:	f00d fb81 	bl	800df34 <calloc>
 8000832:	4603      	mov	r3, r0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <pstCreateSerialChannel+0x6c>
  {
    return (stSERIAL_CHANNELTypeDef*) pstTX_Serial_Channel;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	e09a      	b.n	8000976 <pstCreateSerialChannel+0x1a2>
  // Now fill in the data structure.
  // NOTE: The basic asynchronous communication parameters are in the *pstHuart structure and do not have to
  // be set up. They have been set up and programmed into the hardware by the HAL initialisation.

  // Firstly set up the RX data structure
  pstRX_Serial_Channel->pstUartHALHandle = pstHuart;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
  pstRX_Serial_Channel->uinHead = 0;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	2200      	movs	r2, #0
 800084a:	809a      	strh	r2, [r3, #4]
  pstRX_Serial_Channel->uinTail = 0;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	2200      	movs	r2, #0
 8000850:	80da      	strh	r2, [r3, #6]
  pstRX_Serial_Channel->uinFree = uinRxBufSize;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	887a      	ldrh	r2, [r7, #2]
 8000856:	811a      	strh	r2, [r3, #8]
  pstRX_Serial_Channel->uinUsed = 0;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	2200      	movs	r2, #0
 800085c:	815a      	strh	r2, [r3, #10]
  pstRX_Serial_Channel->uinBufSize = uinRxBufSize;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	887a      	ldrh	r2, [r7, #2]
 8000862:	819a      	strh	r2, [r3, #12]
  pstRX_Serial_Channel->chCtrlSCtrlQ = 0;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	2200      	movs	r2, #0
 8000868:	739a      	strb	r2, [r3, #14]
  pstRX_Serial_Channel->boHysteresisActive = False;
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	2200      	movs	r2, #0
 800086e:	73da      	strb	r2, [r3, #15]
  pstRX_Serial_Channel->uinCtrlSThreshold = RX_CTRLS_LEVEL;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	220c      	movs	r2, #12
 8000874:	821a      	strh	r2, [r3, #16]
  pstRX_Serial_Channel->uinCtrlQThreshold = RX_CTRLQ_LEVEL;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	2200      	movs	r2, #0
 800087a:	825a      	strh	r2, [r3, #18]
  pstRX_Serial_Channel->boOverflowErr = False;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	2200      	movs	r2, #0
 8000880:	751a      	strb	r2, [r3, #20]
  pstRX_Serial_Channel->boParityErr = False;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2200      	movs	r2, #0
 8000886:	755a      	strb	r2, [r3, #21]
  pstRX_Serial_Channel->pchSerialBuffer = pchRxBufTmp;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	619a      	str	r2, [r3, #24]

  // Now set up the TX data structure
  pstTX_Serial_Channel->pstUartHALHandle = pstHuart;
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	601a      	str	r2, [r3, #0]
  pstTX_Serial_Channel->uinHead = 0;
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	2200      	movs	r2, #0
 8000898:	809a      	strh	r2, [r3, #4]
  pstTX_Serial_Channel->uinTail = 0;
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	2200      	movs	r2, #0
 800089e:	80da      	strh	r2, [r3, #6]
  pstTX_Serial_Channel->uinFree = uinTxBufSize;
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	883a      	ldrh	r2, [r7, #0]
 80008a4:	811a      	strh	r2, [r3, #8]
  pstTX_Serial_Channel->uinUsed = 0;
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	2200      	movs	r2, #0
 80008aa:	815a      	strh	r2, [r3, #10]
  pstTX_Serial_Channel->uinBufSize = uinTxBufSize;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	883a      	ldrh	r2, [r7, #0]
 80008b0:	819a      	strh	r2, [r3, #12]
  pstTX_Serial_Channel->boTxUserCtrlS = False;
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	2200      	movs	r2, #0
 80008b6:	739a      	strb	r2, [r3, #14]
  pstTX_Serial_Channel->pchSerialBuffer = pchTxBufTmp;
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	611a      	str	r2, [r3, #16]

  // Serial Channel data structure
  if ((pstSerialChannel = (stSERIAL_CHANNELTypeDef*) calloc(1, sizeof(stSERIAL_CHANNELTypeDef))) == NULL)
 80008be:	2114      	movs	r1, #20
 80008c0:	2001      	movs	r0, #1
 80008c2:	f00d fb37 	bl	800df34 <calloc>
 80008c6:	4603      	mov	r3, r0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <pstCreateSerialChannel+0x100>
  {
    return pstSerialChannel;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	e050      	b.n	8000976 <pstCreateSerialChannel+0x1a2>
  }

  // Now assign the pointers to the RX and TX structure in the stSERIAL_CHANNELTypeDef structure
  pstSerialChannel->pstRxChannel = pstRX_Serial_Channel;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	601a      	str	r2, [r3, #0]
  pstSerialChannel->pstTxChannel = pstTX_Serial_Channel;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	605a      	str	r2, [r3, #4]
  // This particular processor has USARTs 1 -> 3 and UARTs 4->6. These USARTs
  // each have a different register base address that is defined in stm32f767xx.h
  // of the form USART1, USART2, USART3 etc. Therefore in order to find out
  // which UART we are dealing with and what the interrupt is for this we
  // can simply check the base address.
  if (pstHuart->Instance == USART1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a26      	ldr	r2, [pc, #152]	; (8000980 <pstCreateSerialChannel+0x1ac>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d103      	bne.n	80008f2 <pstCreateSerialChannel+0x11e>
    pstSerialChannel->uinIRQn = USART1_IRQn;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2225      	movs	r2, #37	; 0x25
 80008ee:	721a      	strb	r2, [r3, #8]
 80008f0:	e02e      	b.n	8000950 <pstCreateSerialChannel+0x17c>
  else if (pstHuart->Instance == USART2)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a23      	ldr	r2, [pc, #140]	; (8000984 <pstCreateSerialChannel+0x1b0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d103      	bne.n	8000904 <pstCreateSerialChannel+0x130>
    pstSerialChannel->uinIRQn = USART2_IRQn;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2226      	movs	r2, #38	; 0x26
 8000900:	721a      	strb	r2, [r3, #8]
 8000902:	e025      	b.n	8000950 <pstCreateSerialChannel+0x17c>
  else if (pstHuart->Instance == USART3)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <pstCreateSerialChannel+0x1b4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d103      	bne.n	8000916 <pstCreateSerialChannel+0x142>
    pstSerialChannel->uinIRQn = USART3_IRQn;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2227      	movs	r2, #39	; 0x27
 8000912:	721a      	strb	r2, [r3, #8]
 8000914:	e01c      	b.n	8000950 <pstCreateSerialChannel+0x17c>
  else if (pstHuart->Instance == UART4)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <pstCreateSerialChannel+0x1b8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d103      	bne.n	8000928 <pstCreateSerialChannel+0x154>
    pstSerialChannel->uinIRQn = UART4_IRQn;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	721a      	strb	r2, [r3, #8]
 8000926:	e013      	b.n	8000950 <pstCreateSerialChannel+0x17c>
  else if (pstHuart->Instance == UART5)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a18      	ldr	r2, [pc, #96]	; (8000990 <pstCreateSerialChannel+0x1bc>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d103      	bne.n	800093a <pstCreateSerialChannel+0x166>
    pstSerialChannel->uinIRQn = UART5_IRQn;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2235      	movs	r2, #53	; 0x35
 8000936:	721a      	strb	r2, [r3, #8]
 8000938:	e00a      	b.n	8000950 <pstCreateSerialChannel+0x17c>
  else if (pstHuart->Instance == USART6)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <pstCreateSerialChannel+0x1c0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d103      	bne.n	800094c <pstCreateSerialChannel+0x178>
    pstSerialChannel->uinIRQn = USART6_IRQn;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2247      	movs	r2, #71	; 0x47
 8000948:	721a      	strb	r2, [r3, #8]
 800094a:	e001      	b.n	8000950 <pstCreateSerialChannel+0x17c>
  else
    // Problem - instance does not make sense - does not exist
    return (stSERIAL_CHANNELTypeDef*) NULL;
 800094c:	2300      	movs	r3, #0
 800094e:	e012      	b.n	8000976 <pstCreateSerialChannel+0x1a2>

  // Initialise to no errors.
  pstSerialChannel->ulSerialErrorFlags = 0U;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]

  // Initialise the error codes equal to zero
  pstSerialChannel->ulSerialErrorCodes = 0U;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]

  // RED LED used to indicate Rx Buffer overflow
  HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <pstCreateSerialChannel+0x1c4>)
 8000964:	f002 faf4 	bl	8002f50 <HAL_GPIO_WritePin>

  // ORANGE LED toggles on with CTRL S, and off with CTRL Q
  HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <pstCreateSerialChannel+0x1c4>)
 8000970:	f002 faee 	bl	8002f50 <HAL_GPIO_WritePin>

  // Now return a pointer to the filled in structure.
  return pstSerialChannel;
 8000974:	68fb      	ldr	r3, [r7, #12]

}
 8000976:	4618      	mov	r0, r3
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40011000 	.word	0x40011000
 8000984:	40004400 	.word	0x40004400
 8000988:	40004800 	.word	0x40004800
 800098c:	40004c00 	.word	0x40004c00
 8000990:	40005000 	.word	0x40005000
 8000994:	40011400 	.word	0x40011400
 8000998:	40020c00 	.word	0x40020c00

0800099c <fvdEnableSerialChInterrupts>:
 * channel -- i.e. it enables RX and TX for the particular
 * interrupt, and globally enables interrupts in the NVIC.
 */

void fvdEnableSerialChInterrupts(stSERIAL_CHANNELTypeDef *pstSerialCh)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  // Enable RX not empty interrupt
  ENABLE_RXNE_INT(pstSerialCh->pstRxChannel);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0220 	orr.w	r2, r2, #32
 80009ba:	60da      	str	r2, [r3, #12]
  // SET_BIT(pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->CR1, USART_CR1_TXEIE);
  // ENABLE_TXE_INT(pstSerialCh->pstTxChannel->pstUartHALHandle->Instance->CR1);

  // Globally enable interrupts for this USART. Not necessary as enabled in HAL_UART_MspInit
  // in the normal initialisation procedures.
  HAL_NVIC_EnableIRQ(pstSerialCh->uinIRQn);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7a1b      	ldrb	r3, [r3, #8]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fdf2 	bl	80025ac <HAL_NVIC_EnableIRQ>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <fchGetChar>:
 * character in the buffer.
 *
 */

char fchGetChar(stSERIAL_CHANNELTypeDef *pstSerialCh, enum BOOL boBlocking)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
  char chTempChar;

  if (!boBlocking)
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d106      	bne.n	80009f0 <fchGetChar+0x20>
  {
    // Enter here is non-blocking. Check to see if data is there. If
    // not then return with a NON-ASCII character.

    if (pstSerialCh->pstRxChannel->uinUsed == 0)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	895b      	ldrh	r3, [r3, #10]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <fchGetChar+0x20>
    {
      return 255;
 80009ec:	23ff      	movs	r3, #255	; 0xff
 80009ee:	e059      	b.n	8000aa4 <fchGetChar+0xd4>
  }

  // Enter here if there is data (non-blocking), or regardless of if there
  // is data or not for non-blocking.
  // Loop until data is available
  while (pstSerialCh->pstRxChannel->uinUsed == 0)
 80009f0:	bf00      	nop
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	895b      	ldrh	r3, [r3, #10]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0fa      	beq.n	80009f2 <fchGetChar+0x22>

  // There is data in the buffer so get a character out and update all
  // of the housekeeping information

  // !!!!!! START OF CRITICAL SECTION !!!!!!
  HAL_NVIC_DisableIRQ(pstSerialCh->uinIRQn);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7a1b      	ldrb	r3, [r3, #8]
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fde0 	bl	80025c8 <HAL_NVIC_DisableIRQ>

  //DISABLE_RXNE_INT(pstSerialCh->pstRxChannel);
  chTempChar = pstSerialCh->pstRxChannel->pchSerialBuffer[pstSerialCh->pstRxChannel->uinTail];
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	88d2      	ldrh	r2, [r2, #6]
 8000a14:	4413      	add	r3, r2
 8000a16:	f993 3000 	ldrsb.w	r3, [r3]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  pstSerialCh->pstRxChannel->uinTail = (pstSerialCh->pstRxChannel->uinTail + 1) %
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	88db      	ldrh	r3, [r3, #6]
 8000a22:	3301      	adds	r3, #1
                                                      (pstSerialCh->pstRxChannel->uinBufSize);
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	8992      	ldrh	r2, [r2, #12]
  pstSerialCh->pstRxChannel->uinTail = (pstSerialCh->pstRxChannel->uinTail + 1) %
 8000a2a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a2e:	fb02 f201 	mul.w	r2, r2, r1
 8000a32:	1a9a      	subs	r2, r3, r2
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b292      	uxth	r2, r2
 8000a3a:	80da      	strh	r2, [r3, #6]
  pstSerialCh->pstRxChannel->uinFree++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	891a      	ldrh	r2, [r3, #8]
 8000a42:	3201      	adds	r2, #1
 8000a44:	b292      	uxth	r2, r2
 8000a46:	811a      	strh	r2, [r3, #8]
  pstSerialCh->pstRxChannel->uinUsed--;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	895a      	ldrh	r2, [r3, #10]
 8000a4e:	3a01      	subs	r2, #1
 8000a50:	b292      	uxth	r2, r2
 8000a52:	815a      	strh	r2, [r3, #10]

  // Now check to see if the upper threshold CtrlS has been issued whether the lower threshold
  // is now been reached.  If so then instruct the transmitted to send out a CtrlQ.
  if (pstSerialCh->pstRxChannel->boHysteresisActive &&
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	7bdb      	ldrb	r3, [r3, #15]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d01b      	beq.n	8000a96 <fchGetChar+0xc6>
          (pstSerialCh->pstRxChannel->uinUsed <= pstSerialCh->pstRxChannel->uinCtrlQThreshold))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	895a      	ldrh	r2, [r3, #10]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	8a5b      	ldrh	r3, [r3, #18]
  if (pstSerialCh->pstRxChannel->boHysteresisActive &&
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d813      	bhi.n	8000a96 <fchGetChar+0xc6>
  {
    // We are below the lower threshold for used locations in the buffer.
    // So instruct the TX to send out a CtrlQ to restart characters.
    pstSerialCh->pstRxChannel->chCtrlSCtrlQ = CTRLQ;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2211      	movs	r2, #17
 8000a74:	739a      	strb	r2, [r3, #14]

    // Reset the flag to indicate we are no longer are the CtrlS mode.
    pstSerialCh->pstRxChannel->boHysteresisActive = False;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	73da      	strb	r2, [r3, #15]

    // Make sure the the TX interrupts are enable so that this can be checked by the
    // transmitter and the ctrlQ is sent.
    ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a94:	60da      	str	r2, [r3, #12]
  }

  HAL_NVIC_EnableIRQ(pstSerialCh->uinIRQn);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7a1b      	ldrb	r3, [r3, #8]
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fd85 	bl	80025ac <HAL_NVIC_EnableIRQ>
  // !!!!!! END OF CRITICAL SECTION !!!!!!

  return chTempChar;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]

} // end fchGetChar
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <fuinPutChar>:
 * Returns: number of free characters in the TX buffer.
 *
 */

uint8_t fuinPutChar(stSERIAL_CHANNELTypeDef *pstSerialCh, char chCharacter, enum BOOL boBlocking)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	70bb      	strb	r3, [r7, #2]
  uint8_t uinFreeLoc;

  // Get the number of free locations in the TX buffer
  // DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
  uinFreeLoc = pstSerialCh->pstTxChannel->uinFree;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	891b      	ldrh	r3, [r3, #8]
 8000ac2:	73fb      	strb	r3, [r7, #15]

  // If non-blocking check to see if there is a free location.
  if (!boBlocking && (uinFreeLoc == 0))
 8000ac4:	78bb      	ldrb	r3, [r7, #2]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d104      	bne.n	8000ad4 <fuinPutChar+0x28>
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <fuinPutChar+0x28>
  {
    // No locations in the transmit buffer so return
    return uinFreeLoc;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	e04d      	b.n	8000b70 <fuinPutChar+0xc4>
  // Loop until space is available or the user has requested transmission to
  // commence.
  //
  // Note that the user CtrlS can result in the code execution being stuck here
  // for indeterminate periods of time.
  while (pstSerialCh->pstTxChannel->uinFree == 0)
 8000ad4:	bf00      	nop
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	891b      	ldrh	r3, [r3, #8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0fa      	beq.n	8000ad6 <fuinPutChar+0x2a>
  }

  // Enter this point if there is at least one free location in the TX buffer

  // !!!!!!!! START OF CRITICAL SECTION !!!!!!!!!
  HAL_NVIC_DisableIRQ(pstSerialCh->uinIRQn);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7a1b      	ldrb	r3, [r3, #8]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fd6e 	bl	80025c8 <HAL_NVIC_DisableIRQ>

  // Now put the character passed in into the TX buffer.
  //DISABLE_TXE_INT(pstSerialCh->pstTxChannel);
  pstSerialCh->pstTxChannel->pchSerialBuffer[pstSerialCh->pstTxChannel->uinHead] = chCharacter;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	6852      	ldr	r2, [r2, #4]
 8000af6:	8892      	ldrh	r2, [r2, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000afe:	701a      	strb	r2, [r3, #0]
  pstSerialCh->pstTxChannel->uinHead = (pstSerialCh->pstTxChannel->uinHead + 1) %
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	889b      	ldrh	r3, [r3, #4]
 8000b06:	3301      	adds	r3, #1
                                                        (pstSerialCh->pstTxChannel->uinBufSize);
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6852      	ldr	r2, [r2, #4]
 8000b0c:	8992      	ldrh	r2, [r2, #12]
  pstSerialCh->pstTxChannel->uinHead = (pstSerialCh->pstTxChannel->uinHead + 1) %
 8000b0e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b12:	fb02 f201 	mul.w	r2, r2, r1
 8000b16:	1a9a      	subs	r2, r3, r2
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	b292      	uxth	r2, r2
 8000b1e:	809a      	strh	r2, [r3, #4]
  pstSerialCh->pstTxChannel->uinUsed++;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	895a      	ldrh	r2, [r3, #10]
 8000b26:	3201      	adds	r2, #1
 8000b28:	b292      	uxth	r2, r2
 8000b2a:	815a      	strh	r2, [r3, #10]
  pstSerialCh->pstTxChannel->uinFree--;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	891a      	ldrh	r2, [r3, #8]
 8000b32:	3a01      	subs	r2, #1
 8000b34:	b292      	uxth	r2, r2
 8000b36:	811a      	strh	r2, [r3, #8]
  uinFreeLoc = pstSerialCh->pstTxChannel->uinFree;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	891b      	ldrh	r3, [r3, #8]
 8000b3e:	73fb      	strb	r3, [r7, #15]

  // Only enable the transmit interrupts if the user has not requested transmission to
  // stop
  if (!(pstSerialCh->pstTxChannel->boTxUserCtrlS))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	7b9b      	ldrb	r3, [r3, #14]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10b      	bne.n	8000b62 <fuinPutChar+0xb6>
  {
    ENABLE_TXE_INT(pstSerialCh->pstTxChannel);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b60:	60da      	str	r2, [r3, #12]
  }
  HAL_NVIC_EnableIRQ(pstSerialCh->uinIRQn);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7a1b      	ldrb	r3, [r3, #8]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fd1f 	bl	80025ac <HAL_NVIC_EnableIRQ>
  // !!!!!!!! END OF CRTICIAL SECTION !!!!!!!!
  return uinFreeLoc;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 ffd0 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f898 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f000 faa8 	bl	80010d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b88:	f000 fa86 	bl	8001098 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b8c:	f000 f966 	bl	8000e5c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b90:	f000 f992 	bl	8000eb8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b94:	f000 f9c0 	bl	8000f18 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000b98:	f000 f9f4 	bl	8000f84 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000b9c:	f000 fa28 	bl	8000ff0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ba0:	f000 fa50 	bl	8001044 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000ba4:	f000 f908 	bl	8000db8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ba8:	f009 fdba 	bl	800a720 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 1, &BinarySem01_attributes);
 8000bac:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <main+0xdc>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f009 fef3 	bl	800a99c <osSemaphoreNew>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a27      	ldr	r2, [pc, #156]	; (8000c58 <main+0xe0>)
 8000bba:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 1, &myBinarySem02_attributes);
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <main+0xe4>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f009 feeb 	bl	800a99c <osSemaphoreNew>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <main+0xe8>)
 8000bca:	6013      	str	r3, [r2, #0]

  /* creation of CountingSemaTx */
  CountingSemaTxHandle = osSemaphoreNew(2, 2, &CountingSemaTx_attributes);
 8000bcc:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <main+0xec>)
 8000bce:	2102      	movs	r1, #2
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f009 fee3 	bl	800a99c <osSemaphoreNew>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <main+0xf0>)
 8000bda:	6013      	str	r3, [r2, #0]

  /* creation of CountingSemaRx */
  CountingSemaRxHandle = osSemaphoreNew(2, 2, &CountingSemaRx_attributes);
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <main+0xf4>)
 8000bde:	2102      	movs	r1, #2
 8000be0:	2002      	movs	r0, #2
 8000be2:	f009 fedb 	bl	800a99c <osSemaphoreNew>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <main+0xf8>)
 8000bea:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <main+0xfc>)
 8000bee:	2102      	movs	r1, #2
 8000bf0:	2010      	movs	r0, #16
 8000bf2:	f009 ff6f 	bl	800aad4 <osMessageQueueNew>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <main+0x100>)
 8000bfa:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <main+0x104>)
 8000bfe:	2102      	movs	r1, #2
 8000c00:	2010      	movs	r0, #16
 8000c02:	f009 ff67 	bl	800aad4 <osMessageQueueNew>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <main+0x108>)
 8000c0a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(fvdMyTask01, NULL, &myTask01_attributes);
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <main+0x10c>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <main+0x110>)
 8000c12:	f009 fdef 	bl	800a7f4 <osThreadNew>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <main+0x114>)
 8000c1a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(fvdMyTask02, NULL, &myTask02_attributes);
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <main+0x118>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	481c      	ldr	r0, [pc, #112]	; (8000c94 <main+0x11c>)
 8000c22:	f009 fde7 	bl	800a7f4 <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <main+0x120>)
 8000c2a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(fvdMyTask03, NULL, &myTask03_attributes);
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <main+0x124>)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <main+0x128>)
 8000c32:	f009 fddf 	bl	800a7f4 <osThreadNew>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <main+0x12c>)
 8000c3a:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(fvdMyTask04, NULL, &myTask04_attributes);
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <main+0x130>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	481a      	ldr	r0, [pc, #104]	; (8000cac <main+0x134>)
 8000c42:	f009 fdd7 	bl	800a7f4 <osThreadNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <main+0x138>)
 8000c4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c4c:	f009 fd9c 	bl	800a788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <main+0xd8>
 8000c52:	bf00      	nop
 8000c54:	0800e318 	.word	0x0800e318
 8000c58:	20004b24 	.word	0x20004b24
 8000c5c:	0800e328 	.word	0x0800e328
 8000c60:	20004abc 	.word	0x20004abc
 8000c64:	0800e338 	.word	0x0800e338
 8000c68:	20004ab8 	.word	0x20004ab8
 8000c6c:	0800e348 	.word	0x0800e348
 8000c70:	20004a64 	.word	0x20004a64
 8000c74:	0800e2e8 	.word	0x0800e2e8
 8000c78:	20004b84 	.word	0x20004b84
 8000c7c:	0800e300 	.word	0x0800e300
 8000c80:	20004bcc 	.word	0x20004bcc
 8000c84:	0800e258 	.word	0x0800e258
 8000c88:	080012d5 	.word	0x080012d5
 8000c8c:	20004b88 	.word	0x20004b88
 8000c90:	0800e27c 	.word	0x0800e27c
 8000c94:	08001329 	.word	0x08001329
 8000c98:	20004ac0 	.word	0x20004ac0
 8000c9c:	0800e2a0 	.word	0x0800e2a0
 8000ca0:	0800135d 	.word	0x0800135d
 8000ca4:	20004b28 	.word	0x20004b28
 8000ca8:	0800e2c4 	.word	0x0800e2c4
 8000cac:	0800136d 	.word	0x0800136d
 8000cb0:	20004a6c 	.word	0x20004a6c

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b098      	sub	sp, #96	; 0x60
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cbe:	2230      	movs	r2, #48	; 0x30
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00d f986 	bl	800dfd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <SystemClock_Config+0xfc>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <SystemClock_Config+0xfc>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <SystemClock_Config+0xfc>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <SystemClock_Config+0x100>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <SystemClock_Config+0x100>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <SystemClock_Config+0x100>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d32:	2308      	movs	r3, #8
 8000d34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d36:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d3a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d40:	2307      	movs	r3, #7
 8000d42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fc0d 	bl	8005568 <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d54:	f000 fb24 	bl	80013a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2105      	movs	r1, #5
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 fe66 	bl	8005a48 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d82:	f000 fb0d 	bl	80013a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d8a:	23c0      	movs	r3, #192	; 0xc0
 8000d8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4618      	mov	r0, r3
 8000d98:	f005 f884 	bl	8005ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000da2:	f000 fafd 	bl	80013a0 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3760      	adds	r7, #96	; 0x60
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000dcc:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <MX_ADC1_Init+0x9c>)
 8000dce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000dd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <MX_ADC1_Init+0xa0>)
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000e1a:	f000 fee7 	bl	8001bec <HAL_ADC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 fabc 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_ADC1_Init+0x98>)
 8000e3a:	f001 f879 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e44:	f000 faac 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20004a70 	.word	0x20004a70
 8000e54:	40012000 	.word	0x40012000
 8000e58:	0f000001 	.word	0x0f000001

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <MX_I2C1_Init+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x58>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e9a:	f003 fd81 	bl	80049a0 <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 fa7c 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20004a10 	.word	0x20004a10
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	000186a0 	.word	0x000186a0

08000eb8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <MX_I2S3_Init+0x58>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <MX_I2S3_Init+0x5c>)
 8000ee2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_I2S3_Init+0x54>)
 8000ef8:	f003 fe96 	bl	8004c28 <HAL_I2S_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f02:	f000 fa4d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20004c10 	.word	0x20004c10
 8000f10:	40003c00 	.word	0x40003c00
 8000f14:	00017700 	.word	0x00017700

08000f18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <MX_SPI1_Init+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f64:	220a      	movs	r2, #10
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_SPI1_Init+0x64>)
 8000f6a:	f005 f8db 	bl	8006124 <HAL_SPI_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f74:	f000 fa14 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20004b2c 	.word	0x20004b2c
 8000f80:	40013000 	.word	0x40013000

08000f84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MX_TIM7_Init+0x68>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000faa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fb4:	f005 fa38 	bl	8006428 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000fbe:	f000 f9ef 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fd0:	f005 fc4a 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000fda:	f000 f9e1 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20004bd0 	.word	0x20004bd0
 8000fec:	40001400 	.word	0x40001400

08000ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART2_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001028:	f005 fcae 	bl	8006988 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f000 f9b5 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20004b8c 	.word	0x20004b8c
 8001040:	40004400 	.word	0x40004400

08001044 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART3_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART3_UART_Init+0x4c>)
 800107c:	f005 fc84 	bl	8006988 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 f98b 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200049d0 	.word	0x200049d0
 8001094:	40004800 	.word	0x40004800

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	203c      	movs	r0, #60	; 0x3c
 80010c0:	f001 fa58 	bl	8002574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80010c4:	203c      	movs	r0, #60	; 0x3c
 80010c6:	f001 fa71 	bl	80025ac <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a70      	ldr	r2, [pc, #448]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a69      	ldr	r2, [pc, #420]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a62      	ldr	r2, [pc, #392]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b60      	ldr	r3, [pc, #384]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a5b      	ldr	r2, [pc, #364]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b59      	ldr	r3, [pc, #356]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b52      	ldr	r3, [pc, #328]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b4e      	ldr	r3, [pc, #312]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <MX_GPIO_Init+0x1e0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2108      	movs	r1, #8
 800119a:	4848      	ldr	r0, [pc, #288]	; (80012bc <MX_GPIO_Init+0x1e4>)
 800119c:	f001 fed8 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2101      	movs	r1, #1
 80011a4:	4846      	ldr	r0, [pc, #280]	; (80012c0 <MX_GPIO_Init+0x1e8>)
 80011a6:	f001 fed3 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011aa:	2200      	movs	r2, #0
 80011ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011b0:	4844      	ldr	r0, [pc, #272]	; (80012c4 <MX_GPIO_Init+0x1ec>)
 80011b2:	f001 fecd 	bl	8002f50 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011b6:	2308      	movs	r3, #8
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	483b      	ldr	r0, [pc, #236]	; (80012bc <MX_GPIO_Init+0x1e4>)
 80011ce:	f001 fd23 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4835      	ldr	r0, [pc, #212]	; (80012c0 <MX_GPIO_Init+0x1e8>)
 80011ea:	f001 fd15 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011ee:	2308      	movs	r3, #8
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011fe:	2305      	movs	r3, #5
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	482d      	ldr	r0, [pc, #180]	; (80012c0 <MX_GPIO_Init+0x1e8>)
 800120a:	f001 fd05 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800120e:	2301      	movs	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <MX_GPIO_Init+0x1f0>)
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	482a      	ldr	r0, [pc, #168]	; (80012cc <MX_GPIO_Init+0x1f4>)
 8001222:	f001 fcf9 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001226:	2304      	movs	r3, #4
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4825      	ldr	r0, [pc, #148]	; (80012d0 <MX_GPIO_Init+0x1f8>)
 800123a:	f001 fced 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001250:	2305      	movs	r3, #5
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <MX_GPIO_Init+0x1f8>)
 800125c:	f001 fcdc 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001260:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001264:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4812      	ldr	r0, [pc, #72]	; (80012c4 <MX_GPIO_Init+0x1ec>)
 800127a:	f001 fccd 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800127e:	2320      	movs	r3, #32
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MX_GPIO_Init+0x1ec>)
 8001292:	f001 fcc1 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_GPIO_Init+0x1f0>)
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_GPIO_Init+0x1e4>)
 80012aa:	f001 fcb5 	bl	8002c18 <HAL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	10120000 	.word	0x10120000
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400

080012d4 <fvdMyTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fvdMyTask01 */
void fvdMyTask01(void *argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80012dc:	f00c fb26 	bl	800d92c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  char chRxChar;
  // Create the external USART (interrupt driven)
  pstSerialChannel2 = pstCreateSerialChannel(&huart2, RX_BUFFER_SIZE, TX_BUFFER_SIZE);
 80012e0:	2228      	movs	r2, #40	; 0x28
 80012e2:	2128      	movs	r1, #40	; 0x28
 80012e4:	480e      	ldr	r0, [pc, #56]	; (8001320 <fvdMyTask01+0x4c>)
 80012e6:	f7ff fa75 	bl	80007d4 <pstCreateSerialChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <fvdMyTask01+0x50>)
 80012ee:	6013      	str	r3, [r2, #0]
  fvdEnableSerialChInterrupts(pstSerialChannel2);
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <fvdMyTask01+0x50>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fb51 	bl	800099c <fvdEnableSerialChInterrupts>
  /* Infinite loop */
  for(;;)
  {

	chRxChar = fchGetChar(pstSerialChannel2, NON_BLOCKING);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <fvdMyTask01+0x50>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fb65 	bl	80009d0 <fchGetChar>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]

	if ((uint8_t)chRxChar != 255)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d0f4      	beq.n	80012fa <fvdMyTask01+0x26>
	{
		fuinPutChar(pstSerialChannel2, chRxChar, BLOCKING);
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <fvdMyTask01+0x50>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	7bf9      	ldrb	r1, [r7, #15]
 8001316:	2201      	movs	r2, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fbc7 	bl	8000aac <fuinPutChar>
	chRxChar = fchGetChar(pstSerialChannel2, NON_BLOCKING);
 800131e:	e7ec      	b.n	80012fa <fvdMyTask01+0x26>
 8001320:	20004b8c 	.word	0x20004b8c
 8001324:	20004a68 	.word	0x20004a68

08001328 <fvdMyTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fvdMyTask02 */
void fvdMyTask02(void *argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fvdMyTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 8001330:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <fvdMyTask02+0x30>)
 8001336:	f001 fe24 	bl	8002f82 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 800133a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <fvdMyTask02+0x30>)
 8001340:	f001 fe1f 	bl	8002f82 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 8001344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <fvdMyTask02+0x30>)
 800134a:	f001 fe1a 	bl	8002f82 <HAL_GPIO_TogglePin>
    osDelay(1000);
 800134e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001352:	f009 faf5 	bl	800a940 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 8001356:	e7eb      	b.n	8001330 <fvdMyTask02+0x8>
 8001358:	40020c00 	.word	0x40020c00

0800135c <fvdMyTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fvdMyTask03 */
void fvdMyTask03(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fvdMyTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f009 faeb 	bl	800a940 <osDelay>
 800136a:	e7fb      	b.n	8001364 <fvdMyTask03+0x8>

0800136c <fvdMyTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fvdMyTask04 */
void fvdMyTask04(void *argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fvdMyTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f009 fae3 	bl	800a940 <osDelay>
 800137a:	e7fb      	b.n	8001374 <fvdMyTask04+0x8>

0800137c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138e:	f000 fbe9 	bl	8001b64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40001000 	.word	0x40001000

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_MspInit+0x54>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_MspInit+0x54>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x54>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_MspInit+0x54>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_MspInit+0x54>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_MspInit+0x54>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210f      	movs	r1, #15
 80013ee:	f06f 0001 	mvn.w	r0, #1
 80013f2:	f001 f8bf 	bl	8002574 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a32      	ldr	r2, [pc, #200]	; (80014ec <HAL_ADC_MspInit+0xe8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d15e      	bne.n	80014e4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_ADC_MspInit+0xec>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <HAL_ADC_MspInit+0xec>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_ADC_MspInit+0xec>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_ADC_MspInit+0xec>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a29      	ldr	r2, [pc, #164]	; (80014f0 <HAL_ADC_MspInit+0xec>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_ADC_MspInit+0xec>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin;
 800145e:	2303      	movs	r3, #3
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001462:	2303      	movs	r3, #3
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4820      	ldr	r0, [pc, #128]	; (80014f4 <HAL_ADC_MspInit+0xf0>)
 8001472:	f001 fbd1 	bl	8002c18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <HAL_ADC_MspInit+0xf8>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 8001490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001494:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 8001498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800149c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 80014a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b8:	480f      	ldr	r0, [pc, #60]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 80014ba:	f001 f8a1 	bl	8002600 <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80014c4:	f7ff ff6c 	bl	80013a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 80014cc:	639a      	str	r2, [r3, #56]	; 0x38
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_ADC_MspInit+0xf4>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2105      	movs	r1, #5
 80014d8:	2012      	movs	r0, #18
 80014da:	f001 f84b 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014de:	2012      	movs	r0, #18
 80014e0:	f001 f864 	bl	80025ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40012000 	.word	0x40012000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400
 80014f8:	20004ac4 	.word	0x20004ac4
 80014fc:	40026470 	.word	0x40026470

08001500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_I2C_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_I2C_MspInit+0x88>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800153e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <HAL_I2C_MspInit+0x8c>)
 800155c:	f001 fb5c 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_I2C_MspInit+0x88>)
 800156a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_I2C_MspInit+0x88>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40005400 	.word	0x40005400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020400 	.word	0x40020400

08001590 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a28      	ldr	r2, [pc, #160]	; (8001650 <HAL_I2S_MspInit+0xc0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d14a      	bne.n	8001648 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_I2S_MspInit+0xc4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001616:	2306      	movs	r3, #6
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <HAL_I2S_MspInit+0xc8>)
 8001622:	f001 faf9 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001626:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001638:	2306      	movs	r3, #6
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <HAL_I2S_MspInit+0xcc>)
 8001644:	f001 fae8 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40003c00 	.word	0x40003c00
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020800 	.word	0x40020800

08001660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_SPI_MspInit+0x94>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d133      	bne.n	80016ea <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_SPI_MspInit+0x98>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <HAL_SPI_MspInit+0x98>)
 800168c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_SPI_MspInit+0x98>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_SPI_MspInit+0x98>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_SPI_MspInit+0x98>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_SPI_MspInit+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016ba:	23e0      	movs	r3, #224	; 0xe0
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ca:	2305      	movs	r3, #5
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <HAL_SPI_MspInit+0x9c>)
 80016d6:	f001 fa9f 	bl	8002c18 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2105      	movs	r1, #5
 80016de:	2023      	movs	r0, #35	; 0x23
 80016e0:	f000 ff48 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016e4:	2023      	movs	r0, #35	; 0x23
 80016e6:	f000 ff61 	bl	80025ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40013000 	.word	0x40013000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_TIM_Base_MspInit+0x48>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d115      	bne.n	800173e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0x4c>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_TIM_Base_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	2037      	movs	r0, #55	; 0x37
 8001734:	f000 ff1e 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001738:	2037      	movs	r0, #55	; 0x37
 800173a:	f000 ff37 	bl	80025ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40001400 	.word	0x40001400
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a4a      	ldr	r2, [pc, #296]	; (8001898 <HAL_UART_MspInit+0x148>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d134      	bne.n	80017dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	4b49      	ldr	r3, [pc, #292]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a48      	ldr	r2, [pc, #288]	; (800189c <HAL_UART_MspInit+0x14c>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a41      	ldr	r2, [pc, #260]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_UART_MspInit+0x14c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017aa:	230c      	movs	r3, #12
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ba:	2307      	movs	r3, #7
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4836      	ldr	r0, [pc, #216]	; (80018a0 <HAL_UART_MspInit+0x150>)
 80017c6:	f001 fa27 	bl	8002c18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2105      	movs	r1, #5
 80017ce:	2026      	movs	r0, #38	; 0x26
 80017d0:	f000 fed0 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d4:	2026      	movs	r0, #38	; 0x26
 80017d6:	f000 fee9 	bl	80025ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017da:	e058      	b.n	800188e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <HAL_UART_MspInit+0x154>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d153      	bne.n	800188e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_UART_MspInit+0x14c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_UART_MspInit+0x14c>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_UART_MspInit+0x14c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a24      	ldr	r2, [pc, #144]	; (800189c <HAL_UART_MspInit+0x14c>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_UART_MspInit+0x14c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800183a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800184c:	2307      	movs	r3, #7
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <HAL_UART_MspInit+0x158>)
 8001858:	f001 f9de 	bl	8002c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800185c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800186e:	2307      	movs	r3, #7
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <HAL_UART_MspInit+0x15c>)
 800187a:	f001 f9cd 	bl	8002c18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	2027      	movs	r0, #39	; 0x27
 8001884:	f000 fe76 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001888:	2027      	movs	r0, #39	; 0x27
 800188a:	f000 fe8f 	bl	80025ac <HAL_NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3730      	adds	r7, #48	; 0x30
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40004400 	.word	0x40004400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40004800 	.word	0x40004800
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020c00 	.word	0x40020c00

080018b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	2036      	movs	r0, #54	; 0x36
 80018c6:	f000 fe55 	bl	8002574 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ca:	2036      	movs	r0, #54	; 0x36
 80018cc:	f000 fe6e 	bl	80025ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_InitTick+0xa4>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_InitTick+0xa4>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_InitTick+0xa4>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ec:	f107 0210 	add.w	r2, r7, #16
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 faa2 	bl	8005e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018fc:	f004 fa78 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 8001900:	4603      	mov	r3, r0
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_InitTick+0xa8>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9b      	lsrs	r3, r3, #18
 8001910:	3b01      	subs	r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_InitTick+0xac>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <HAL_InitTick+0xb0>)
 8001918:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_InitTick+0xac>)
 800191c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001920:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_InitTick+0xac>)
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_InitTick+0xac>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_InitTick+0xac>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <HAL_InitTick+0xac>)
 8001936:	f004 fd77 	bl	8006428 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d104      	bne.n	800194a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001940:	4806      	ldr	r0, [pc, #24]	; (800195c <HAL_InitTick+0xac>)
 8001942:	f004 fd9c 	bl	800647e <HAL_TIM_Base_Start_IT>
 8001946:	4603      	mov	r3, r0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3730      	adds	r7, #48	; 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	431bde83 	.word	0x431bde83
 800195c:	20004c58 	.word	0x20004c58
 8001960:	40001000 	.word	0x40001000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <ADC_IRQHandler+0x10>)
 8001996:	f000 f96c 	bl	8001c72 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20004a70 	.word	0x20004a70

080019a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <SPI1_IRQHandler+0x10>)
 80019aa:	f004 fc1f 	bl	80061ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20004b2c 	.word	0x20004b2c

080019b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	fvdSerialChannelISR(pstSerialChannel2);
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <USART2_IRQHandler+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd81 	bl	80004c8 <fvdSerialChannelISR>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20004a68 	.word	0x20004a68

080019d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <USART3_IRQHandler+0x10>)
 80019d6:	f005 f825 	bl	8006a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200049d0 	.word	0x200049d0

080019e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM6_DAC_IRQHandler+0x10>)
 80019ea:	f004 fd6c 	bl	80064c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20004c58 	.word	0x20004c58

080019f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM7_IRQHandler+0x10>)
 80019fe:	f004 fd62 	bl	80064c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20004bd0 	.word	0x20004bd0

08001a0c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA2_Stream4_IRQHandler+0x10>)
 8001a12:	f000 fec5 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20004ac4 	.word	0x20004ac4

08001a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <OTG_FS_IRQHandler+0x10>)
 8001a26:	f001 fd57 	bl	80034d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200050e4 	.word	0x200050e4

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f00c fa6e 	bl	800df44 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20020000 	.word	0x20020000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	200000b4 	.word	0x200000b4
 8001a9c:	200053b8 	.word	0x200053b8

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <SystemInit+0x28>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <SystemInit+0x28>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SystemInit+0x28>)
 8001ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aba:	609a      	str	r2, [r3, #8]
#endif
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ad2:	e003      	b.n	8001adc <LoopCopyDataInit>

08001ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ada:	3104      	adds	r1, #4

08001adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ae4:	d3f6      	bcc.n	8001ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ae8:	e002      	b.n	8001af0 <LoopFillZerobss>

08001aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aec:	f842 3b04 	str.w	r3, [r2], #4

08001af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001af4:	d3f9      	bcc.n	8001aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001af6:	f7ff ffd3 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f00c fa29 	bl	800df50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff f83b 	bl	8000b78 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b08:	0800e388 	.word	0x0800e388
  ldr  r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b10:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001b14:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001b18:	200053b8 	.word	0x200053b8

08001b1c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <CAN1_RX0_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 fd08 	bl	800255e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff feae 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fc2a 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20004c98 	.word	0x20004c98

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20004c98 	.word	0x20004c98

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e033      	b.n	8001c6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fbfa 	bl	8001404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c32:	f023 0302 	bic.w	r3, r3, #2
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fa98 	bl	8002174 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5a:	e001      	b.n	8001c60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d049      	beq.n	8001d48 <HAL_ADC_IRQHandler+0xd6>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d046      	beq.n	8001d48 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d105      	bne.n	8001cd2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d12b      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d127      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d119      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0220 	bic.w	r2, r2, #32
 8001d12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8db 	bl	8001ef4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0212 	mvn.w	r2, #18
 8001d46:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d68:	2b80      	cmp	r3, #128	; 0x80
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d057      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x1b8>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d054      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d139      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d12b      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d124      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d11d      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 faa6 	bl	800236c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 020c 	mvn.w	r2, #12
 8001e28:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	bf0c      	ite	eq
 8001e4e:	2301      	moveq	r3, #1
 8001e50:	2300      	movne	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d017      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x21a>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d014      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10d      	bne.n	8001e8c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f843 	bl	8001f08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f06f 0201 	mvn.w	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d015      	beq.n	8001eec <HAL_ADC_IRQHandler+0x27a>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f06f 0220 	mvn.w	r2, #32
 8001eda:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f81d 	bl	8001f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0220 	mvn.w	r2, #32
 8001eea:	601a      	str	r2, [r3, #0]
  }
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1c>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e105      	b.n	8002158 <HAL_ADC_ConfigChannel+0x228>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d925      	bls.n	8001fa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b1e      	subs	r3, #30
 8001f72:	2207      	movs	r2, #7
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4403      	add	r3, r0
 8001f9a:	3b1e      	subs	r3, #30
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	e022      	b.n	8001fee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4403      	add	r3, r0
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d824      	bhi.n	8002040 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b05      	subs	r3, #5
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3b05      	subs	r3, #5
 8002032:	fa00 f203 	lsl.w	r2, r0, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
 800203e:	e04c      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d824      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b23      	subs	r3, #35	; 0x23
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43da      	mvns	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b23      	subs	r3, #35	; 0x23
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
 8002090:	e023      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b41      	subs	r3, #65	; 0x41
 80020a4:	221f      	movs	r2, #31
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b41      	subs	r3, #65	; 0x41
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_ADC_ConfigChannel+0x234>)
 80020dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_ADC_ConfigChannel+0x238>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1cc>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_ADC_ConfigChannel+0x238>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d123      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b10      	cmp	r3, #16
 800210c:	d003      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x1e6>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b11      	cmp	r3, #17
 8002114:	d11b      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d111      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_ADC_ConfigChannel+0x23c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_ADC_ConfigChannel+0x240>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0c9a      	lsrs	r2, r3, #18
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002140:	e002      	b.n	8002148 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3b01      	subs	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40012300 	.word	0x40012300
 8002168:	40012000 	.word	0x40012000
 800216c:	20000000 	.word	0x20000000
 8002170:	431bde83 	.word	0x431bde83

08002174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <ADC_Init+0x1f0>)
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	4a58      	ldr	r2, [pc, #352]	; (8002368 <ADC_Init+0x1f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e00f      	b.n	8002272 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002270:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0202 	bic.w	r2, r2, #2
 8002280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	005a      	lsls	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	3b01      	subs	r3, #1
 80022cc:	035a      	lsls	r2, r3, #13
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	e007      	b.n	80022e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	3b01      	subs	r3, #1
 8002304:	051a      	lsls	r2, r3, #20
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800231c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232a:	025a      	lsls	r2, r3, #9
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	029a      	lsls	r2, r3, #10
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40012300 	.word	0x40012300
 8002368:	0f000001 	.word	0x0f000001

0800236c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db12      	blt.n	8002458 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	490a      	ldr	r1, [pc, #40]	; (8002464 <__NVIC_DisableIRQ+0x44>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	3320      	adds	r3, #32
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800244c:	f3bf 8f4f 	dsb	sy
}
 8002450:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002452:	f3bf 8f6f 	isb	sy
}
 8002456:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0c      	blt.n	8002494 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <__NVIC_ClearPendingIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	3360      	adds	r3, #96	; 0x60
 8002490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ff0a 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002586:	f7ff ff1f 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800258a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	6978      	ldr	r0, [r7, #20]
 8002592:	f7ff ffb1 	bl	80024f8 <NVIC_EncodePriority>
 8002596:	4602      	mov	r2, r0
 8002598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff80 	bl	80024a4 <__NVIC_SetPriority>
}
 80025a4:	bf00      	nop
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff12 	bl	80023e4 <__NVIC_EnableIRQ>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff22 	bl	8002420 <__NVIC_DisableIRQ>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff38 	bl	8002468 <__NVIC_ClearPendingIRQ>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff fabe 	bl	8001b8c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e099      	b.n	8002750 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800263c:	e00f      	b.n	800265e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263e:	f7ff faa5 	bl	8001b8c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b05      	cmp	r3, #5
 800264a:	d908      	bls.n	800265e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2203      	movs	r2, #3
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e078      	b.n	8002750 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e8      	bne.n	800263e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_DMA_Init+0x158>)
 8002678:	4013      	ands	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800268a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d107      	bne.n	80026c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4313      	orrs	r3, r2
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 0307 	bic.w	r3, r3, #7
 80026de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d117      	bne.n	8002722 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fa0b 	bl	8002b20 <DMA_CheckFifoParam>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800271e:	2301      	movs	r3, #1
 8002720:	e016      	b.n	8002750 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f9c2 	bl	8002ab4 <DMA_CalcBaseAndBitshift>
 8002730:	4603      	mov	r3, r0
 8002732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	223f      	movs	r2, #63	; 0x3f
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	f010803f 	.word	0xf010803f

0800275c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d004      	beq.n	800277a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00c      	b.n	8002794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2205      	movs	r2, #5
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ac:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_DMA_IRQHandler+0x258>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a92      	ldr	r2, [pc, #584]	; (80029fc <HAL_DMA_IRQHandler+0x25c>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2208      	movs	r2, #8
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01a      	beq.n	800280c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2208      	movs	r2, #8
 80027fa:	409a      	lsls	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2201      	movs	r2, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d012      	beq.n	8002842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2201      	movs	r2, #1
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0202 	orr.w	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2204      	movs	r2, #4
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2204      	movs	r2, #4
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2210      	movs	r2, #16
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d043      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d03c      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2210      	movs	r2, #16
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d024      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
 80028ce:	e01f      	b.n	8002910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01b      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
 80028e0:	e016      	b.n	8002910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0208 	bic.w	r2, r2, #8
 80028fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	2220      	movs	r2, #32
 8002916:	409a      	lsls	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 808e 	beq.w	8002a3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8086 	beq.w	8002a3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2220      	movs	r2, #32
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b05      	cmp	r3, #5
 8002948:	d136      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0216 	bic.w	r2, r2, #22
 8002958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <HAL_DMA_IRQHandler+0x1da>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0208 	bic.w	r2, r2, #8
 8002988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	223f      	movs	r2, #63	; 0x3f
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d07d      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
        }
        return;
 80029b6:	e078      	b.n	8002aaa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01c      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d108      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d030      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	e02b      	b.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d027      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
 80029f6:	e022      	b.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
 80029f8:	20000000 	.word	0x20000000
 80029fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0210 	bic.w	r2, r2, #16
 8002a1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d032      	beq.n	8002aac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d022      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2205      	movs	r2, #5
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d307      	bcc.n	8002a86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f2      	bne.n	8002a6a <HAL_DMA_IRQHandler+0x2ca>
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a86:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e000      	b.n	8002aac <HAL_DMA_IRQHandler+0x30c>
        return;
 8002aaa:	bf00      	nop
    }
  }
}
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3b10      	subs	r3, #16
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <DMA_CalcBaseAndBitshift+0x64>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ace:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <DMA_CalcBaseAndBitshift+0x68>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d909      	bls.n	8002af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	659a      	str	r2, [r3, #88]	; 0x58
 8002af4:	e007      	b.n	8002b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	aaaaaaab 	.word	0xaaaaaaab
 8002b1c:	0800e370 	.word	0x0800e370

08002b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11f      	bne.n	8002b7a <DMA_CheckFifoParam+0x5a>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d856      	bhi.n	8002bee <DMA_CheckFifoParam+0xce>
 8002b40:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <DMA_CheckFifoParam+0x28>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b6b 	.word	0x08002b6b
 8002b50:	08002b59 	.word	0x08002b59
 8002b54:	08002bef 	.word	0x08002bef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d046      	beq.n	8002bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b68:	e043      	b.n	8002bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b72:	d140      	bne.n	8002bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b78:	e03d      	b.n	8002bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b82:	d121      	bne.n	8002bc8 <DMA_CheckFifoParam+0xa8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d837      	bhi.n	8002bfa <DMA_CheckFifoParam+0xda>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <DMA_CheckFifoParam+0x70>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002ba1 	.word	0x08002ba1
 8002b94:	08002ba7 	.word	0x08002ba7
 8002b98:	08002ba1 	.word	0x08002ba1
 8002b9c:	08002bb9 	.word	0x08002bb9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba4:	e030      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d025      	beq.n	8002bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb6:	e022      	b.n	8002bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bc0:	d11f      	bne.n	8002c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bc6:	e01c      	b.n	8002c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d903      	bls.n	8002bd6 <DMA_CheckFifoParam+0xb6>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d003      	beq.n	8002bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bd4:	e018      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bda:	e015      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00e      	beq.n	8002c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	e00b      	b.n	8002c06 <DMA_CheckFifoParam+0xe6>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e00a      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e008      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e006      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e004      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e002      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <DMA_CheckFifoParam+0xe8>
      break;
 8002c06:	bf00      	nop
    }
  } 
  
  return status; 
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e16b      	b.n	8002f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 815a 	bne.w	8002f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d00b      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c66:	2b11      	cmp	r3, #17
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b12      	cmp	r3, #18
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0xfc>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d123      	bne.n	8002d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	08da      	lsrs	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3208      	adds	r2, #8
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80b4 	beq.w	8002f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b60      	ldr	r3, [pc, #384]	; (8002f24 <HAL_GPIO_Init+0x30c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a5f      	ldr	r2, [pc, #380]	; (8002f24 <HAL_GPIO_Init+0x30c>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <HAL_GPIO_Init+0x30c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dba:	4a5b      	ldr	r2, [pc, #364]	; (8002f28 <HAL_GPIO_Init+0x310>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_GPIO_Init+0x314>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x226>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a51      	ldr	r2, [pc, #324]	; (8002f30 <HAL_GPIO_Init+0x318>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x222>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a50      	ldr	r2, [pc, #320]	; (8002f34 <HAL_GPIO_Init+0x31c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x21e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4f      	ldr	r2, [pc, #316]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x21a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4e      	ldr	r2, [pc, #312]	; (8002f3c <HAL_GPIO_Init+0x324>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x216>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4d      	ldr	r2, [pc, #308]	; (8002f40 <HAL_GPIO_Init+0x328>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4c      	ldr	r2, [pc, #304]	; (8002f44 <HAL_GPIO_Init+0x32c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x20e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_GPIO_Init+0x330>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x20a>
 8002e1e:	2307      	movs	r3, #7
 8002e20:	e00e      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e22:	2308      	movs	r3, #8
 8002e24:	e00c      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e26:	2306      	movs	r3, #6
 8002e28:	e00a      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e50:	4935      	ldr	r1, [pc, #212]	; (8002f28 <HAL_GPIO_Init+0x310>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e82:	4a32      	ldr	r2, [pc, #200]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eac:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <HAL_GPIO_Init+0x334>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f ae90 	bls.w	8002c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021800 	.word	0x40021800
 8002f48:	40021c00 	.word	0x40021c00
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	401a      	ands	r2, r3
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d104      	bne.n	8002fa6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	041a      	lsls	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b08f      	sub	sp, #60	; 0x3c
 8002fbc:	af0a      	add	r7, sp, #40	; 0x28
 8002fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e054      	b.n	8003074 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f00a fcf5 	bl	800d9d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2203      	movs	r2, #3
 8002fee:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f004 fb59 	bl	80076c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	687e      	ldr	r6, [r7, #4]
 8003016:	466d      	mov	r5, sp
 8003018:	f106 0410 	add.w	r4, r6, #16
 800301c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003028:	e885 0003 	stmia.w	r5, {r0, r1}
 800302c:	1d33      	adds	r3, r6, #4
 800302e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003030:	6838      	ldr	r0, [r7, #0]
 8003032:	f004 fad3 	bl	80075dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2101      	movs	r1, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f004 fb50 	bl	80076e2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	687e      	ldr	r6, [r7, #4]
 800304a:	466d      	mov	r5, sp
 800304c:	f106 0410 	add.w	r4, r6, #16
 8003050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800305c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003060:	1d33      	adds	r3, r6, #4
 8003062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003064:	6838      	ldr	r0, [r7, #0]
 8003066:	f004 fc63 	bl	8007930 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800307c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af04      	add	r7, sp, #16
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	70fb      	strb	r3, [r7, #3]
 800308e:	460b      	mov	r3, r1
 8003090:	70bb      	strb	r3, [r7, #2]
 8003092:	4613      	mov	r3, r2
 8003094:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_HCD_HC_Init+0x28>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e07f      	b.n	80031a4 <HAL_HCD_HC_Init+0x128>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	333d      	adds	r3, #61	; 0x3d
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	3338      	adds	r3, #56	; 0x38
 80030d0:	787a      	ldrb	r2, [r7, #1]
 80030d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	3340      	adds	r3, #64	; 0x40
 80030e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030e6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	3339      	adds	r3, #57	; 0x39
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	333f      	adds	r3, #63	; 0x3f
 800310c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003110:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	78bb      	ldrb	r3, [r7, #2]
 8003116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800311a:	b2d8      	uxtb	r0, r3
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	333a      	adds	r3, #58	; 0x3a
 800312a:	4602      	mov	r2, r0
 800312c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800312e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003132:	2b00      	cmp	r3, #0
 8003134:	da0a      	bge.n	800314c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	333b      	adds	r3, #59	; 0x3b
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e009      	b.n	8003160 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	333b      	adds	r3, #59	; 0x3b
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	333c      	adds	r3, #60	; 0x3c
 8003170:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003174:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	787c      	ldrb	r4, [r7, #1]
 800317c:	78ba      	ldrb	r2, [r7, #2]
 800317e:	78f9      	ldrb	r1, [r7, #3]
 8003180:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003182:	9302      	str	r3, [sp, #8]
 8003184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4623      	mov	r3, r4
 8003192:	f004 fd4f 	bl	8007c34 <USB_HC_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}

080031ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_HCD_HC_Halt+0x1e>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e00f      	b.n	80031ea <HAL_HCD_HC_Halt+0x3e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 ff89 	bl	80080f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	70fb      	strb	r3, [r7, #3]
 8003206:	460b      	mov	r3, r1
 8003208:	70bb      	strb	r3, [r7, #2]
 800320a:	4613      	mov	r3, r2
 800320c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	333b      	adds	r3, #59	; 0x3b
 800321e:	78ba      	ldrb	r2, [r7, #2]
 8003220:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	333f      	adds	r3, #63	; 0x3f
 8003232:	787a      	ldrb	r2, [r7, #1]
 8003234:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003236:	7c3b      	ldrb	r3, [r7, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d114      	bne.n	8003266 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3342      	adds	r3, #66	; 0x42
 800324c:	2203      	movs	r2, #3
 800324e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	333d      	adds	r3, #61	; 0x3d
 8003260:	7f3a      	ldrb	r2, [r7, #28]
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e009      	b.n	800327a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3342      	adds	r3, #66	; 0x42
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800327a:	787b      	ldrb	r3, [r7, #1]
 800327c:	2b03      	cmp	r3, #3
 800327e:	f200 80d6 	bhi.w	800342e <HAL_HCD_HC_SubmitRequest+0x23a>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003299 	.word	0x08003299
 800328c:	08003419 	.word	0x08003419
 8003290:	08003305 	.word	0x08003305
 8003294:	0800338f 	.word	0x0800338f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003298:	7c3b      	ldrb	r3, [r7, #16]
 800329a:	2b01      	cmp	r3, #1
 800329c:	f040 80c9 	bne.w	8003432 <HAL_HCD_HC_SubmitRequest+0x23e>
 80032a0:	78bb      	ldrb	r3, [r7, #2]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 80c5 	bne.w	8003432 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80032a8:	8b3b      	ldrh	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	3351      	adds	r3, #81	; 0x51
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	3351      	adds	r3, #81	; 0x51
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	3342      	adds	r3, #66	; 0x42
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032ec:	e0a1      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	3342      	adds	r3, #66	; 0x42
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
      break;
 8003302:	e096      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003304:	78bb      	ldrb	r3, [r7, #2]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d120      	bne.n	800334c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3351      	adds	r3, #81	; 0x51
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	3342      	adds	r3, #66	; 0x42
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003334:	e07e      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	3342      	adds	r3, #66	; 0x42
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
      break;
 800334a:	e073      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	3350      	adds	r3, #80	; 0x50
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	3342      	adds	r3, #66	; 0x42
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
      break;
 8003376:	e05d      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	440b      	add	r3, r1
 8003386:	3342      	adds	r3, #66	; 0x42
 8003388:	2202      	movs	r2, #2
 800338a:	701a      	strb	r2, [r3, #0]
      break;
 800338c:	e052      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800338e:	78bb      	ldrb	r3, [r7, #2]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d120      	bne.n	80033d6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3351      	adds	r3, #81	; 0x51
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	3342      	adds	r3, #66	; 0x42
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033be:	e039      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	3342      	adds	r3, #66	; 0x42
 80033d0:	2202      	movs	r2, #2
 80033d2:	701a      	strb	r2, [r3, #0]
      break;
 80033d4:	e02e      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	3350      	adds	r3, #80	; 0x50
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	3342      	adds	r3, #66	; 0x42
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
      break;
 8003400:	e018      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	3342      	adds	r3, #66	; 0x42
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	e00d      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	3342      	adds	r3, #66	; 0x42
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
      break;
 800342c:	e002      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003432:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	3344      	adds	r3, #68	; 0x44
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	8b39      	ldrh	r1, [r7, #24]
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4403      	add	r3, r0
 8003458:	3348      	adds	r3, #72	; 0x48
 800345a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	335c      	adds	r3, #92	; 0x5c
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	440b      	add	r3, r1
 800347e:	334c      	adds	r3, #76	; 0x4c
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	3339      	adds	r3, #57	; 0x39
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	335d      	adds	r3, #93	; 0x5d
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	3338      	adds	r3, #56	; 0x38
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	18d1      	adds	r1, r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	f004 fcbe 	bl	8007e48 <USB_HC_StartXfer>
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop

080034d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f004 f9db 	bl	80078aa <USB_GetMode>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	f040 80ef 	bne.w	80036da <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f004 f9bf 	bl	8007884 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80e5 	beq.w	80036d8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 f9b6 	bl	8007884 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003522:	d104      	bne.n	800352e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800352c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f004 f9a6 	bl	8007884 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003542:	d104      	bne.n	800354e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800354c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f004 f996 	bl	8007884 <USB_ReadInterrupts>
 8003558:	4603      	mov	r3, r0
 800355a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800355e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003562:	d104      	bne.n	800356e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800356c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f004 f986 	bl	8007884 <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	d103      	bne.n	800358a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2202      	movs	r2, #2
 8003588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 f978 	bl	8007884 <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800359a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359e:	d115      	bne.n	80035cc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80035a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d108      	bne.n	80035cc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f00a fa88 	bl	800dad0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fa6e 	bl	8007aa8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f004 f957 	bl	8007884 <USB_ReadInterrupts>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e0:	d102      	bne.n	80035e8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 f968 	bl	80048b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f004 f949 	bl	8007884 <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d106      	bne.n	800360a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f00a fa4b 	bl	800da98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2208      	movs	r2, #8
 8003608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 f938 	bl	8007884 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361e:	d138      	bne.n	8003692 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f004 fd53 	bl	80080d0 <USB_HC_ReadInterrupt>
 800362a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e025      	b.n	800367e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d018      	beq.n	8003678 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365c:	d106      	bne.n	800366c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8cf 	bl	8003808 <HCD_HC_IN_IRQHandler>
 800366a:	e005      	b.n	8003678 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fcfd 	bl	8004072 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	3301      	adds	r3, #1
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	d3d4      	bcc.n	8003632 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f004 f8f4 	bl	8007884 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d101      	bne.n	80036aa <HAL_HCD_IRQHandler+0x1d2>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_HCD_IRQHandler+0x1d4>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d014      	beq.n	80036da <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0210 	bic.w	r2, r2, #16
 80036be:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f001 f84b 	bl	800475c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0210 	orr.w	r2, r2, #16
 80036d4:	619a      	str	r2, [r3, #24]
 80036d6:	e000      	b.n	80036da <HAL_HCD_IRQHandler+0x202>
      return;
 80036d8:	bf00      	nop
    }
  }
}
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_HCD_Start+0x16>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e013      	b.n	800371e <HAL_HCD_Start+0x3e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 ffcb 	bl	800769e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f004 fa2e 	bl	8007b70 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_HCD_Stop+0x16>
 8003738:	2302      	movs	r3, #2
 800373a:	e00d      	b.n	8003758 <HAL_HCD_Stop+0x32>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f004 fe0d 	bl	8008368 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f004 f9d5 	bl	8007b1c <USB_ResetPort>
 8003772:	4603      	mov	r3, r0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	440b      	add	r3, r1
 8003796:	335c      	adds	r3, #92	; 0x5c
 8003798:	781b      	ldrb	r3, [r3, #0]
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	334c      	adds	r3, #76	; 0x4c
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f004 fa17 	bl	8007c10 <USB_GetCurrentFrame>
 80037e2:	4603      	mov	r3, r0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f9f2 	bl	8007be2 <USB_GetHostSpeed>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4413      	add	r3, r2
 800382a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b04      	cmp	r3, #4
 8003836:	d119      	bne.n	800386c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	461a      	mov	r2, r3
 8003846:	2304      	movs	r3, #4
 8003848:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	440a      	add	r2, r1
 8003860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	60d3      	str	r3, [r2, #12]
 800386a:	e0ce      	b.n	8003a0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d12c      	bne.n	80038de <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	440b      	add	r3, r1
 80038a6:	335d      	adds	r3, #93	; 0x5d
 80038a8:	2207      	movs	r2, #7
 80038aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	0151      	lsls	r1, r2, #5
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	440a      	add	r2, r1
 80038c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 fc0b 	bl	80080f2 <USB_HC_Halt>
 80038dc:	e095      	b.n	8003a0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d109      	bne.n	8003908 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	461a      	mov	r2, r3
 8003902:	2320      	movs	r3, #32
 8003904:	6093      	str	r3, [r2, #8]
 8003906:	e080      	b.n	8003a0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b08      	cmp	r3, #8
 800391c:	d134      	bne.n	8003988 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	440a      	add	r2, r1
 8003934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	335d      	adds	r3, #93	; 0x5d
 800394e:	2205      	movs	r2, #5
 8003950:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395e:	461a      	mov	r2, r3
 8003960:	2310      	movs	r3, #16
 8003962:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	461a      	mov	r2, r3
 8003972:	2308      	movs	r3, #8
 8003974:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f004 fbb6 	bl	80080f2 <USB_HC_Halt>
 8003986:	e040      	b.n	8003a0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399e:	d134      	bne.n	8003a0a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ba:	f043 0302 	orr.w	r3, r3, #2
 80039be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fb91 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	461a      	mov	r2, r3
 80039de:	2310      	movs	r3, #16
 80039e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	335d      	adds	r3, #93	; 0x5d
 80039f2:	2208      	movs	r2, #8
 80039f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a08:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a20:	d122      	bne.n	8003a68 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 fb50 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a64:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a66:	e300      	b.n	800406a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f040 80fd 	bne.w	8003c7a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	440b      	add	r3, r1
 8003a96:	3348      	adds	r3, #72	; 0x48
 8003a98:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	0159      	lsls	r1, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003aac:	1ad1      	subs	r1, r2, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4403      	add	r3, r0
 8003abc:	334c      	adds	r3, #76	; 0x4c
 8003abe:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	335d      	adds	r3, #93	; 0x5d
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3358      	adds	r3, #88	; 0x58
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af4:	461a      	mov	r2, r3
 8003af6:	2301      	movs	r3, #1
 8003af8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	440b      	add	r3, r1
 8003b08:	333f      	adds	r3, #63	; 0x3f
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	440b      	add	r3, r1
 8003b1e:	333f      	adds	r3, #63	; 0x3f
 8003b20:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d121      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f004 face 	bl	80080f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	461a      	mov	r2, r3
 8003b64:	2310      	movs	r3, #16
 8003b66:	6093      	str	r3, [r2, #8]
 8003b68:	e070      	b.n	8003c4c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	333f      	adds	r3, #63	; 0x3f
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d12a      	bne.n	8003bd6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b9e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	335c      	adds	r3, #92	; 0x5c
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	b2d8      	uxtb	r0, r3
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	335c      	adds	r3, #92	; 0x5c
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4601      	mov	r1, r0
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f009 ff8c 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bd4:	e03a      	b.n	8003c4c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	333f      	adds	r3, #63	; 0x3f
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d12f      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	335c      	adds	r3, #92	; 0x5c
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3350      	adds	r3, #80	; 0x50
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	f083 0301 	eor.w	r3, r3, #1
 8003c16:	b2d8      	uxtb	r0, r3
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	3350      	adds	r3, #80	; 0x50
 8003c28:	4602      	mov	r2, r0
 8003c2a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	b2d8      	uxtb	r0, r3
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	335c      	adds	r3, #92	; 0x5c
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	4601      	mov	r1, r0
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f009 ff50 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	440b      	add	r3, r1
 8003c5a:	3350      	adds	r3, #80	; 0x50
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	f083 0301 	eor.w	r3, r3, #1
 8003c62:	b2d8      	uxtb	r0, r3
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	3350      	adds	r3, #80	; 0x50
 8003c74:	4602      	mov	r2, r0
 8003c76:	701a      	strb	r2, [r3, #0]
}
 8003c78:	e1f7      	b.n	800406a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	f040 811a 	bne.w	8003ec6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	0151      	lsls	r1, r2, #5
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	440a      	add	r2, r1
 8003ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cac:	f023 0302 	bic.w	r3, r3, #2
 8003cb0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	335d      	adds	r3, #93	; 0x5d
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10a      	bne.n	8003cde <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	335c      	adds	r3, #92	; 0x5c
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e0d9      	b.n	8003e92 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	440b      	add	r3, r1
 8003cec:	335d      	adds	r3, #93	; 0x5d
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d10a      	bne.n	8003d0a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	335c      	adds	r3, #92	; 0x5c
 8003d04:	2205      	movs	r2, #5
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e0c3      	b.n	8003e92 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	335d      	adds	r3, #93	; 0x5d
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d00a      	beq.n	8003d36 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	440b      	add	r3, r1
 8003d2e:	335d      	adds	r3, #93	; 0x5d
 8003d30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d156      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	440b      	add	r3, r1
 8003d44:	3358      	adds	r3, #88	; 0x58
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	1c59      	adds	r1, r3, #1
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4403      	add	r3, r0
 8003d58:	3358      	adds	r3, #88	; 0x58
 8003d5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	440b      	add	r3, r1
 8003d6a:	3358      	adds	r3, #88	; 0x58
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d914      	bls.n	8003d9c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	3358      	adds	r3, #88	; 0x58
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	335c      	adds	r3, #92	; 0x5c
 8003d96:	2204      	movs	r2, #4
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e009      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	440b      	add	r3, r1
 8003daa:	335c      	adds	r3, #92	; 0x5c
 8003dac:	2202      	movs	r2, #2
 8003dae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dc6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e056      	b.n	8003e92 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	335d      	adds	r3, #93	; 0x5d
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d123      	bne.n	8003e42 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	335c      	adds	r3, #92	; 0x5c
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e24:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e2c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e027      	b.n	8003e92 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	440b      	add	r3, r1
 8003e50:	335d      	adds	r3, #93	; 0x5d
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b07      	cmp	r3, #7
 8003e56:	d11c      	bne.n	8003e92 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	440b      	add	r3, r1
 8003e66:	3358      	adds	r3, #88	; 0x58
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	1c59      	adds	r1, r3, #1
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4403      	add	r3, r0
 8003e7a:	3358      	adds	r3, #88	; 0x58
 8003e7c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	335c      	adds	r3, #92	; 0x5c
 8003e8e:	2204      	movs	r2, #4
 8003e90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	b2d8      	uxtb	r0, r3
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	335c      	adds	r3, #92	; 0x5c
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4601      	mov	r1, r0
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f009 fe14 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ec4:	e0d1      	b.n	800406a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d13e      	bne.n	8003f5a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	3358      	adds	r3, #88	; 0x58
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1c59      	adds	r1, r3, #1
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4403      	add	r3, r0
 8003f1e:	3358      	adds	r3, #88	; 0x58
 8003f20:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	440b      	add	r3, r1
 8003f30:	335d      	adds	r3, #93	; 0x5d
 8003f32:	2206      	movs	r2, #6
 8003f34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f004 f8d6 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	6093      	str	r3, [r2, #8]
}
 8003f58:	e087      	b.n	800406a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d17c      	bne.n	800406a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	333f      	adds	r3, #63	; 0x3f
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d122      	bne.n	8003fcc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	3358      	adds	r3, #88	; 0x58
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f004 f894 	bl	80080f2 <USB_HC_Halt>
 8003fca:	e045      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	440b      	add	r3, r1
 8003fda:	333f      	adds	r3, #63	; 0x3f
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	440b      	add	r3, r1
 8003ff0:	333f      	adds	r3, #63	; 0x3f
 8003ff2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d12f      	bne.n	8004058 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	440b      	add	r3, r1
 8004006:	3358      	adds	r3, #88	; 0x58
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d121      	bne.n	8004058 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	335d      	adds	r3, #93	; 0x5d
 8004024:	2203      	movs	r2, #3
 8004026:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004042:	f043 0302 	orr.w	r3, r3, #2
 8004046:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f004 f84d 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004064:	461a      	mov	r2, r3
 8004066:	2310      	movs	r3, #16
 8004068:	6093      	str	r3, [r2, #8]
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d119      	bne.n	80040d6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	461a      	mov	r2, r3
 80040b0:	2304      	movs	r3, #4
 80040b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80040d4:	e33e      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d141      	bne.n	8004170 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2320      	movs	r3, #32
 80040fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	440b      	add	r3, r1
 800410c:	333d      	adds	r3, #61	; 0x3d
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	f040 831f 	bne.w	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	333d      	adds	r3, #61	; 0x3d
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	335c      	adds	r3, #92	; 0x5c
 800413a:	2202      	movs	r2, #2
 800413c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	440a      	add	r2, r1
 8004154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f003 ffc2 	bl	80080f2 <USB_HC_Halt>
}
 800416e:	e2f1      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d13f      	bne.n	8004206 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	335d      	adds	r3, #93	; 0x5d
 8004196:	2204      	movs	r2, #4
 8004198:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	440b      	add	r3, r1
 80041a8:	333d      	adds	r3, #61	; 0x3d
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	3358      	adds	r3, #88	; 0x58
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f003 ff80 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	461a      	mov	r2, r3
 8004200:	2340      	movs	r3, #64	; 0x40
 8004202:	6093      	str	r3, [r2, #8]
}
 8004204:	e2a6      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421c:	d122      	bne.n	8004264 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	440a      	add	r2, r1
 8004234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004238:	f043 0302 	orr.w	r3, r3, #2
 800423c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f003 ff52 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425a:	461a      	mov	r2, r3
 800425c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004260:	6093      	str	r3, [r2, #8]
}
 8004262:	e277      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d135      	bne.n	80042e6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	440b      	add	r3, r1
 8004288:	3358      	adds	r3, #88	; 0x58
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 ff1a 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ca:	461a      	mov	r2, r3
 80042cc:	2301      	movs	r3, #1
 80042ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	335d      	adds	r3, #93	; 0x5d
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
}
 80042e4:	e236      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d12b      	bne.n	8004354 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	2308      	movs	r3, #8
 800430c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	440a      	add	r2, r1
 8004324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f003 feda 	bl	80080f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	440b      	add	r3, r1
 800434c:	335d      	adds	r3, #93	; 0x5d
 800434e:	2205      	movs	r2, #5
 8004350:	701a      	strb	r2, [r3, #0]
}
 8004352:	e1ff      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d155      	bne.n	8004416 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	3358      	adds	r3, #88	; 0x58
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	335d      	adds	r3, #93	; 0x5d
 800438e:	2203      	movs	r2, #3
 8004390:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	440b      	add	r3, r1
 80043a0:	333d      	adds	r3, #61	; 0x3d
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d114      	bne.n	80043d2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	333c      	adds	r3, #60	; 0x3c
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	440b      	add	r3, r1
 80043cc:	333d      	adds	r3, #61	; 0x3d
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f003 fe78 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	461a      	mov	r2, r3
 8004410:	2310      	movs	r3, #16
 8004412:	6093      	str	r3, [r2, #8]
}
 8004414:	e19e      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d12b      	bne.n	8004484 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	0151      	lsls	r1, r2, #5
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	440a      	add	r2, r1
 8004442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004446:	f043 0302 	orr.w	r3, r3, #2
 800444a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f003 fe4b 	bl	80080f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	335d      	adds	r3, #93	; 0x5d
 800446c:	2206      	movs	r2, #6
 800446e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447c:	461a      	mov	r2, r3
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	6093      	str	r3, [r2, #8]
}
 8004482:	e167      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449a:	d135      	bne.n	8004508 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044b6:	f043 0302 	orr.w	r3, r3, #2
 80044ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f003 fe13 	bl	80080f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	461a      	mov	r2, r3
 80044da:	2310      	movs	r3, #16
 80044dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ea:	461a      	mov	r2, r3
 80044ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	335d      	adds	r3, #93	; 0x5d
 8004502:	2208      	movs	r2, #8
 8004504:	701a      	strb	r2, [r3, #0]
}
 8004506:	e125      	b.n	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	f040 811a 	bne.w	8004754 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	440a      	add	r2, r1
 8004536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800453a:	f023 0302 	bic.w	r3, r3, #2
 800453e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	335d      	adds	r3, #93	; 0x5d
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d137      	bne.n	80045c6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	335c      	adds	r3, #92	; 0x5c
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	333f      	adds	r3, #63	; 0x3f
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d00b      	beq.n	8004598 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	440b      	add	r3, r1
 800458e:	333f      	adds	r3, #63	; 0x3f
 8004590:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004592:	2b03      	cmp	r3, #3
 8004594:	f040 80c5 	bne.w	8004722 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	440b      	add	r3, r1
 80045a6:	3351      	adds	r3, #81	; 0x51
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2d8      	uxtb	r0, r3
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	3351      	adds	r3, #81	; 0x51
 80045c0:	4602      	mov	r2, r0
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e0ad      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	440b      	add	r3, r1
 80045d4:	335d      	adds	r3, #93	; 0x5d
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d10a      	bne.n	80045f2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	335c      	adds	r3, #92	; 0x5c
 80045ec:	2202      	movs	r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	e097      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	335d      	adds	r3, #93	; 0x5d
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d10a      	bne.n	800461e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	440b      	add	r3, r1
 8004616:	335c      	adds	r3, #92	; 0x5c
 8004618:	2202      	movs	r2, #2
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	e081      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	440b      	add	r3, r1
 800462c:	335d      	adds	r3, #93	; 0x5d
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b05      	cmp	r3, #5
 8004632:	d10a      	bne.n	800464a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	440b      	add	r3, r1
 8004642:	335c      	adds	r3, #92	; 0x5c
 8004644:	2205      	movs	r2, #5
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e06b      	b.n	8004722 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	440b      	add	r3, r1
 8004658:	335d      	adds	r3, #93	; 0x5d
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b06      	cmp	r3, #6
 800465e:	d00a      	beq.n	8004676 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	335d      	adds	r3, #93	; 0x5d
 8004670:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004672:	2b08      	cmp	r3, #8
 8004674:	d155      	bne.n	8004722 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	3358      	adds	r3, #88	; 0x58
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	1c59      	adds	r1, r3, #1
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4403      	add	r3, r0
 8004698:	3358      	adds	r3, #88	; 0x58
 800469a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	440b      	add	r3, r1
 80046aa:	3358      	adds	r3, #88	; 0x58
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d914      	bls.n	80046dc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	440b      	add	r3, r1
 80046c0:	3358      	adds	r3, #88	; 0x58
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	335c      	adds	r3, #92	; 0x5c
 80046d6:	2204      	movs	r2, #4
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e009      	b.n	80046f0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	440b      	add	r3, r1
 80046ea:	335c      	adds	r3, #92	; 0x5c
 80046ec:	2202      	movs	r2, #2
 80046ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004706:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800470e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	461a      	mov	r2, r3
 8004730:	2302      	movs	r3, #2
 8004732:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	b2d8      	uxtb	r0, r3
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	335c      	adds	r3, #92	; 0x5c
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	4601      	mov	r1, r0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f009 f9cc 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004754:	bf00      	nop
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	0c5b      	lsrs	r3, r3, #17
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004790:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d004      	beq.n	80047a2 <HCD_RXQLVL_IRQHandler+0x46>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b05      	cmp	r3, #5
 800479c:	f000 8082 	beq.w	80048a4 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047a0:	e083      	b.n	80048aa <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d07f      	beq.n	80048a8 <HCD_RXQLVL_IRQHandler+0x14c>
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	440b      	add	r3, r1
 80047b6:	3344      	adds	r3, #68	; 0x44
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d074      	beq.n	80048a8 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	440b      	add	r3, r1
 80047d0:	3344      	adds	r3, #68	; 0x44
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	b292      	uxth	r2, r2
 80047d8:	4619      	mov	r1, r3
 80047da:	f003 f82a 	bl	8007832 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	440b      	add	r3, r1
 80047ec:	3344      	adds	r3, #68	; 0x44
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	18d1      	adds	r1, r2, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4403      	add	r3, r0
 8004802:	3344      	adds	r3, #68	; 0x44
 8004804:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	334c      	adds	r3, #76	; 0x4c
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	18d1      	adds	r1, r2, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4403      	add	r3, r0
 800482a:	334c      	adds	r3, #76	; 0x4c
 800482c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <HCD_RXQLVL_IRQHandler+0x158>)
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d031      	beq.n	80048a8 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800485a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004862:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	440b      	add	r3, r1
 8004884:	3350      	adds	r3, #80	; 0x50
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f083 0301 	eor.w	r3, r3, #1
 800488c:	b2d8      	uxtb	r0, r3
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	440b      	add	r3, r1
 800489c:	3350      	adds	r3, #80	; 0x50
 800489e:	4602      	mov	r2, r0
 80048a0:	701a      	strb	r2, [r3, #0]
      break;
 80048a2:	e001      	b.n	80048a8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80048a8:	bf00      	nop
  }
}
 80048aa:	bf00      	nop
 80048ac:	3728      	adds	r7, #40	; 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	1ff80000 	.word	0x1ff80000

080048b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d10b      	bne.n	8004908 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d102      	bne.n	8004900 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f009 f8da 	bl	800dab4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f043 0302 	orr.w	r3, r3, #2
 8004906:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d132      	bne.n	8004978 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d126      	bne.n	8004972 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d113      	bne.n	8004954 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004936:	d106      	bne.n	8004946 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2102      	movs	r1, #2
 800493e:	4618      	mov	r0, r3
 8004940:	f003 f8b2 	bl	8007aa8 <USB_InitFSLSPClkSel>
 8004944:	e011      	b.n	800496a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f003 f8ab 	bl	8007aa8 <USB_InitFSLSPClkSel>
 8004952:	e00a      	b.n	800496a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d106      	bne.n	800496a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004962:	461a      	mov	r2, r3
 8004964:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004968:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f009 f8d0 	bl	800db10 <HAL_HCD_PortEnabled_Callback>
 8004970:	e002      	b.n	8004978 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f009 f8da 	bl	800db2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b20      	cmp	r3, #32
 8004980:	d103      	bne.n	800498a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f043 0320 	orr.w	r3, r3, #32
 8004988:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004990:	461a      	mov	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6013      	str	r3, [r2, #0]
}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e12b      	b.n	8004c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fd9a 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a04:	f001 f9f4 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 8004a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4a81      	ldr	r2, [pc, #516]	; (8004c14 <HAL_I2C_Init+0x274>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d807      	bhi.n	8004a24 <HAL_I2C_Init+0x84>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a80      	ldr	r2, [pc, #512]	; (8004c18 <HAL_I2C_Init+0x278>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bf94      	ite	ls
 8004a1c:	2301      	movls	r3, #1
 8004a1e:	2300      	movhi	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e006      	b.n	8004a32 <HAL_I2C_Init+0x92>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a7d      	ldr	r2, [pc, #500]	; (8004c1c <HAL_I2C_Init+0x27c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bf94      	ite	ls
 8004a2c:	2301      	movls	r3, #1
 8004a2e:	2300      	movhi	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0e7      	b.n	8004c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a78      	ldr	r2, [pc, #480]	; (8004c20 <HAL_I2C_Init+0x280>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a6a      	ldr	r2, [pc, #424]	; (8004c14 <HAL_I2C_Init+0x274>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d802      	bhi.n	8004a74 <HAL_I2C_Init+0xd4>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3301      	adds	r3, #1
 8004a72:	e009      	b.n	8004a88 <HAL_I2C_Init+0xe8>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	4a69      	ldr	r2, [pc, #420]	; (8004c24 <HAL_I2C_Init+0x284>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	3301      	adds	r3, #1
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	495c      	ldr	r1, [pc, #368]	; (8004c14 <HAL_I2C_Init+0x274>)
 8004aa4:	428b      	cmp	r3, r1
 8004aa6:	d819      	bhi.n	8004adc <HAL_I2C_Init+0x13c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1e59      	subs	r1, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004abc:	400b      	ands	r3, r1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_I2C_Init+0x138>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1e59      	subs	r1, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	e051      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	e04f      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d111      	bne.n	8004b08 <HAL_I2C_Init+0x168>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1e58      	subs	r0, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6859      	ldr	r1, [r3, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e012      	b.n	8004b2e <HAL_I2C_Init+0x18e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	0099      	lsls	r1, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_Init+0x196>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e022      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10e      	bne.n	8004b5c <HAL_I2C_Init+0x1bc>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e58      	subs	r0, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	440b      	add	r3, r1
 8004b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	e00f      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	0099      	lsls	r1, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	6809      	ldr	r1, [r1, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6911      	ldr	r1, [r2, #16]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68d2      	ldr	r2, [r2, #12]
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	000186a0 	.word	0x000186a0
 8004c18:	001e847f 	.word	0x001e847f
 8004c1c:	003d08ff 	.word	0x003d08ff
 8004c20:	431bde83 	.word	0x431bde83
 8004c24:	10624dd3 	.word	0x10624dd3

08004c28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e128      	b.n	8004e8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a90      	ldr	r2, [pc, #576]	; (8004e94 <HAL_I2S_Init+0x26c>)
 8004c52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7fc fc9b 	bl	8001590 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c70:	f023 030f 	bic.w	r3, r3, #15
 8004c74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d060      	beq.n	8004d48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c8e:	2310      	movs	r3, #16
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e001      	b.n	8004c98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c94:	2320      	movs	r3, #32
 8004c96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d802      	bhi.n	8004ca6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f001 f9de 	bl	8006068 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb6:	d125      	bne.n	8004d04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d010      	beq.n	8004ce2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	3305      	adds	r3, #5
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e01f      	b.n	8004d22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	3305      	adds	r3, #5
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e00e      	b.n	8004d22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	3305      	adds	r3, #5
 8004d20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4a5c      	ldr	r2, [pc, #368]	; (8004e98 <HAL_I2S_Init+0x270>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	08db      	lsrs	r3, r3, #3
 8004d2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e003      	b.n	8004d50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d902      	bls.n	8004d5c <HAL_I2S_Init+0x134>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2bff      	cmp	r3, #255	; 0xff
 8004d5a:	d907      	bls.n	8004d6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d60:	f043 0210 	orr.w	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e08f      	b.n	8004e8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	ea42 0103 	orr.w	r1, r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d8a:	f023 030f 	bic.w	r3, r3, #15
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6851      	ldr	r1, [r2, #4]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6892      	ldr	r2, [r2, #8]
 8004d96:	4311      	orrs	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68d2      	ldr	r2, [r2, #12]
 8004d9c:	4311      	orrs	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6992      	ldr	r2, [r2, #24]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d161      	bne.n	8004e7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a38      	ldr	r2, [pc, #224]	; (8004e9c <HAL_I2S_Init+0x274>)
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a37      	ldr	r2, [pc, #220]	; (8004ea0 <HAL_I2S_Init+0x278>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_I2S_Init+0x1a4>
 8004dc8:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <HAL_I2S_Init+0x27c>)
 8004dca:	e001      	b.n	8004dd0 <HAL_I2S_Init+0x1a8>
 8004dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	4932      	ldr	r1, [pc, #200]	; (8004ea0 <HAL_I2S_Init+0x278>)
 8004dd8:	428a      	cmp	r2, r1
 8004dda:	d101      	bne.n	8004de0 <HAL_I2S_Init+0x1b8>
 8004ddc:	4a31      	ldr	r2, [pc, #196]	; (8004ea4 <HAL_I2S_Init+0x27c>)
 8004dde:	e001      	b.n	8004de4 <HAL_I2S_Init+0x1bc>
 8004de0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004de4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004de8:	f023 030f 	bic.w	r3, r3, #15
 8004dec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <HAL_I2S_Init+0x278>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d101      	bne.n	8004dfc <HAL_I2S_Init+0x1d4>
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <HAL_I2S_Init+0x27c>)
 8004dfa:	e001      	b.n	8004e00 <HAL_I2S_Init+0x1d8>
 8004dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e00:	2202      	movs	r2, #2
 8004e02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <HAL_I2S_Init+0x278>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2S_Init+0x1ea>
 8004e0e:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <HAL_I2S_Init+0x27c>)
 8004e10:	e001      	b.n	8004e16 <HAL_I2S_Init+0x1ee>
 8004e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e22:	d003      	beq.n	8004e2c <HAL_I2S_Init+0x204>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d103      	bne.n	8004e34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	e001      	b.n	8004e38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	b299      	uxth	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004e4e:	4303      	orrs	r3, r0
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	430b      	orrs	r3, r1
 8004e54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	897b      	ldrh	r3, [r7, #10]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <HAL_I2S_Init+0x278>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <HAL_I2S_Init+0x24c>
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <HAL_I2S_Init+0x27c>)
 8004e72:	e001      	b.n	8004e78 <HAL_I2S_Init+0x250>
 8004e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e78:	897a      	ldrh	r2, [r7, #10]
 8004e7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	08004f9f 	.word	0x08004f9f
 8004e98:	cccccccd 	.word	0xcccccccd
 8004e9c:	080050b5 	.word	0x080050b5
 8004ea0:	40003800 	.word	0x40003800
 8004ea4:	40003400 	.word	0x40003400

08004ea8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10e      	bne.n	8004f38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ffb8 	bl	8004ea8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	b292      	uxth	r2, r2
 8004f54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10e      	bne.n	8004f96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ff93 	bl	8004ebc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d13a      	bne.n	8005030 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d109      	bne.n	8004fd8 <I2S_IRQHandler+0x3a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d102      	bne.n	8004fd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ffb4 	bl	8004f40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d126      	bne.n	8005030 <I2S_IRQHandler+0x92>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d11f      	bne.n	8005030 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ffe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff50 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b03      	cmp	r3, #3
 800503a:	d136      	bne.n	80050aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d109      	bne.n	800505a <I2S_IRQHandler+0xbc>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d102      	bne.n	800505a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ff45 	bl	8004ee4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d122      	bne.n	80050aa <I2S_IRQHandler+0x10c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b20      	cmp	r3, #32
 8005070:	d11b      	bne.n	80050aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005080:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	f043 0204 	orr.w	r2, r3, #4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ff13 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4aa2      	ldr	r2, [pc, #648]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80050ce:	4ba2      	ldr	r3, [pc, #648]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050d0:	e001      	b.n	80050d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80050d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a9b      	ldr	r2, [pc, #620]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80050ec:	4b9a      	ldr	r3, [pc, #616]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050ee:	e001      	b.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80050f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005100:	d004      	beq.n	800510c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 8099 	bne.w	800523e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d107      	bne.n	8005126 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f925 	bl	8005370 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9c8 	bl	80054d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d13a      	bne.n	80051c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d035      	beq.n	80051c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a7e      	ldr	r2, [pc, #504]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800515e:	4b7e      	ldr	r3, [pc, #504]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005160:	e001      	b.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4979      	ldr	r1, [pc, #484]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800516e:	428b      	cmp	r3, r1
 8005170:	d101      	bne.n	8005176 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005172:	4b79      	ldr	r3, [pc, #484]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005174:	e001      	b.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800517a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800517e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800518e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	f043 0202 	orr.w	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fe88 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	f040 80be 	bne.w	8005348 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80b8 	beq.w	8005348 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a59      	ldr	r2, [pc, #356]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d101      	bne.n	80051f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80051f2:	4b59      	ldr	r3, [pc, #356]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051f4:	e001      	b.n	80051fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80051f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4954      	ldr	r1, [pc, #336]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005202:	428b      	cmp	r3, r1
 8005204:	d101      	bne.n	800520a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005206:	4b54      	ldr	r3, [pc, #336]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005208:	e001      	b.n	800520e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800520a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005212:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005214:	2300      	movs	r3, #0
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	f043 0204 	orr.w	r2, r3, #4
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff fe4a 	bl	8004ed0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800523c:	e084      	b.n	8005348 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d107      	bne.n	8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f8be 	bl	80053d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8fd 	bl	800546c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d12f      	bne.n	80052dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d02a      	beq.n	80052dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005294:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80052a0:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052a2:	e001      	b.n	80052a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80052a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4929      	ldr	r1, [pc, #164]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052b0:	428b      	cmp	r3, r1
 80052b2:	d101      	bne.n	80052b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052b6:	e001      	b.n	80052bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80052b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f043 0202 	orr.w	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fdfa 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d131      	bne.n	800534a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02c      	beq.n	800534a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80052fa:	4b17      	ldr	r3, [pc, #92]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052fc:	e001      	b.n	8005302 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80052fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4912      	ldr	r1, [pc, #72]	; (8005354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800530a:	428b      	cmp	r3, r1
 800530c:	d101      	bne.n	8005312 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005310:	e001      	b.n	8005316 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005316:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800531a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800532a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	f043 0204 	orr.w	r2, r3, #4
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fdc5 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005346:	e000      	b.n	800534a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005348:	bf00      	nop
}
 800534a:	bf00      	nop
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40003800 	.word	0x40003800
 8005358:	40003400 	.word	0x40003400

0800535c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	1c99      	adds	r1, r3, #2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6251      	str	r1, [r2, #36]	; 0x24
 8005382:	881a      	ldrh	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d113      	bne.n	80053ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ffc9 	bl	800535c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	1c99      	adds	r1, r3, #2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6251      	str	r1, [r2, #36]	; 0x24
 80053e6:	8819      	ldrh	r1, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <I2SEx_TxISR_I2SExt+0x90>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d101      	bne.n	80053f6 <I2SEx_TxISR_I2SExt+0x22>
 80053f2:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <I2SEx_TxISR_I2SExt+0x94>)
 80053f4:	e001      	b.n	80053fa <I2SEx_TxISR_I2SExt+0x26>
 80053f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053fa:	460a      	mov	r2, r1
 80053fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d121      	bne.n	800545a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <I2SEx_TxISR_I2SExt+0x90>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <I2SEx_TxISR_I2SExt+0x50>
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <I2SEx_TxISR_I2SExt+0x94>)
 8005422:	e001      	b.n	8005428 <I2SEx_TxISR_I2SExt+0x54>
 8005424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	490d      	ldr	r1, [pc, #52]	; (8005464 <I2SEx_TxISR_I2SExt+0x90>)
 8005430:	428b      	cmp	r3, r1
 8005432:	d101      	bne.n	8005438 <I2SEx_TxISR_I2SExt+0x64>
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <I2SEx_TxISR_I2SExt+0x94>)
 8005436:	e001      	b.n	800543c <I2SEx_TxISR_I2SExt+0x68>
 8005438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005440:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff81 	bl	800535c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40003800 	.word	0x40003800
 8005468:	40003400 	.word	0x40003400

0800546c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68d8      	ldr	r0, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	1c99      	adds	r1, r3, #2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005484:	b282      	uxth	r2, r0
 8005486:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d113      	bne.n	80054c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff4a 	bl	800535c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a20      	ldr	r2, [pc, #128]	; (8005560 <I2SEx_RxISR_I2SExt+0x90>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <I2SEx_RxISR_I2SExt+0x16>
 80054e2:	4b20      	ldr	r3, [pc, #128]	; (8005564 <I2SEx_RxISR_I2SExt+0x94>)
 80054e4:	e001      	b.n	80054ea <I2SEx_RxISR_I2SExt+0x1a>
 80054e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ea:	68d8      	ldr	r0, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	1c99      	adds	r1, r3, #2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80054f6:	b282      	uxth	r2, r0
 80054f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d121      	bne.n	8005556 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a12      	ldr	r2, [pc, #72]	; (8005560 <I2SEx_RxISR_I2SExt+0x90>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d101      	bne.n	8005520 <I2SEx_RxISR_I2SExt+0x50>
 800551c:	4b11      	ldr	r3, [pc, #68]	; (8005564 <I2SEx_RxISR_I2SExt+0x94>)
 800551e:	e001      	b.n	8005524 <I2SEx_RxISR_I2SExt+0x54>
 8005520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	490d      	ldr	r1, [pc, #52]	; (8005560 <I2SEx_RxISR_I2SExt+0x90>)
 800552c:	428b      	cmp	r3, r1
 800552e:	d101      	bne.n	8005534 <I2SEx_RxISR_I2SExt+0x64>
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <I2SEx_RxISR_I2SExt+0x94>)
 8005532:	e001      	b.n	8005538 <I2SEx_RxISR_I2SExt+0x68>
 8005534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005538:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800553c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff03 	bl	800535c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40003800 	.word	0x40003800
 8005564:	40003400 	.word	0x40003400

08005568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e25b      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d075      	beq.n	8005672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005586:	4ba3      	ldr	r3, [pc, #652]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b04      	cmp	r3, #4
 8005590:	d00c      	beq.n	80055ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005592:	4ba0      	ldr	r3, [pc, #640]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800559a:	2b08      	cmp	r3, #8
 800559c:	d112      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800559e:	4b9d      	ldr	r3, [pc, #628]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055aa:	d10b      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ac:	4b99      	ldr	r3, [pc, #612]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d05b      	beq.n	8005670 <HAL_RCC_OscConfig+0x108>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d157      	bne.n	8005670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e236      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055cc:	d106      	bne.n	80055dc <HAL_RCC_OscConfig+0x74>
 80055ce:	4b91      	ldr	r3, [pc, #580]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a90      	ldr	r2, [pc, #576]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e01d      	b.n	8005618 <HAL_RCC_OscConfig+0xb0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCC_OscConfig+0x98>
 80055e6:	4b8b      	ldr	r3, [pc, #556]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a8a      	ldr	r2, [pc, #552]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	4b88      	ldr	r3, [pc, #544]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a87      	ldr	r2, [pc, #540]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e00b      	b.n	8005618 <HAL_RCC_OscConfig+0xb0>
 8005600:	4b84      	ldr	r3, [pc, #528]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a83      	ldr	r2, [pc, #524]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4b81      	ldr	r3, [pc, #516]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a80      	ldr	r2, [pc, #512]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d013      	beq.n	8005648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fc fab4 	bl	8001b8c <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005628:	f7fc fab0 	bl	8001b8c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1fb      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	4b76      	ldr	r3, [pc, #472]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0xc0>
 8005646:	e014      	b.n	8005672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fc faa0 	bl	8001b8c <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005650:	f7fc fa9c 	bl	8001b8c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	; 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e1e7      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005662:	4b6c      	ldr	r3, [pc, #432]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0xe8>
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d063      	beq.n	8005746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800567e:	4b65      	ldr	r3, [pc, #404]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800568a:	4b62      	ldr	r3, [pc, #392]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005692:	2b08      	cmp	r3, #8
 8005694:	d11c      	bne.n	80056d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005696:	4b5f      	ldr	r3, [pc, #380]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d116      	bne.n	80056d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a2:	4b5c      	ldr	r3, [pc, #368]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_RCC_OscConfig+0x152>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d001      	beq.n	80056ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e1bb      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ba:	4b56      	ldr	r3, [pc, #344]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4952      	ldr	r1, [pc, #328]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ce:	e03a      	b.n	8005746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d020      	beq.n	800571a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d8:	4b4f      	ldr	r3, [pc, #316]	; (8005818 <HAL_RCC_OscConfig+0x2b0>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fc fa55 	bl	8001b8c <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e6:	f7fc fa51 	bl	8001b8c <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e19c      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f8:	4b46      	ldr	r3, [pc, #280]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005704:	4b43      	ldr	r3, [pc, #268]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4940      	ldr	r1, [pc, #256]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
 8005718:	e015      	b.n	8005746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571a:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <HAL_RCC_OscConfig+0x2b0>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fc fa34 	bl	8001b8c <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005728:	f7fc fa30 	bl	8001b8c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e17b      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573a:	4b36      	ldr	r3, [pc, #216]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d030      	beq.n	80057b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575a:	4b30      	ldr	r3, [pc, #192]	; (800581c <HAL_RCC_OscConfig+0x2b4>)
 800575c:	2201      	movs	r2, #1
 800575e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005760:	f7fc fa14 	bl	8001b8c <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005768:	f7fc fa10 	bl	8001b8c <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e15b      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577a:	4b26      	ldr	r3, [pc, #152]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0x200>
 8005786:	e015      	b.n	80057b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005788:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_RCC_OscConfig+0x2b4>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578e:	f7fc f9fd 	bl	8001b8c <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005796:	f7fc f9f9 	bl	8001b8c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e144      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80057aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a0 	beq.w	8005902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e0:	6413      	str	r3, [r2, #64]	; 0x40
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCC_OscConfig+0x2b8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d121      	bne.n	8005842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_RCC_OscConfig+0x2b8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a07      	ldr	r2, [pc, #28]	; (8005820 <HAL_RCC_OscConfig+0x2b8>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800580a:	f7fc f9bf 	bl	8001b8c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	e011      	b.n	8005836 <HAL_RCC_OscConfig+0x2ce>
 8005812:	bf00      	nop
 8005814:	40023800 	.word	0x40023800
 8005818:	42470000 	.word	0x42470000
 800581c:	42470e80 	.word	0x42470e80
 8005820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005824:	f7fc f9b2 	bl	8001b8c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e0fd      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005836:	4b81      	ldr	r3, [pc, #516]	; (8005a3c <HAL_RCC_OscConfig+0x4d4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d106      	bne.n	8005858 <HAL_RCC_OscConfig+0x2f0>
 800584a:	4b7d      	ldr	r3, [pc, #500]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a7c      	ldr	r2, [pc, #496]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
 8005856:	e01c      	b.n	8005892 <HAL_RCC_OscConfig+0x32a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b05      	cmp	r3, #5
 800585e:	d10c      	bne.n	800587a <HAL_RCC_OscConfig+0x312>
 8005860:	4b77      	ldr	r3, [pc, #476]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	4a76      	ldr	r2, [pc, #472]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005866:	f043 0304 	orr.w	r3, r3, #4
 800586a:	6713      	str	r3, [r2, #112]	; 0x70
 800586c:	4b74      	ldr	r3, [pc, #464]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005870:	4a73      	ldr	r2, [pc, #460]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	6713      	str	r3, [r2, #112]	; 0x70
 8005878:	e00b      	b.n	8005892 <HAL_RCC_OscConfig+0x32a>
 800587a:	4b71      	ldr	r3, [pc, #452]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	4a70      	ldr	r2, [pc, #448]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6713      	str	r3, [r2, #112]	; 0x70
 8005886:	4b6e      	ldr	r3, [pc, #440]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	4a6d      	ldr	r2, [pc, #436]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d015      	beq.n	80058c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589a:	f7fc f977 	bl	8001b8c <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a0:	e00a      	b.n	80058b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a2:	f7fc f973 	bl	8001b8c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e0bc      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	4b61      	ldr	r3, [pc, #388]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 80058ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ee      	beq.n	80058a2 <HAL_RCC_OscConfig+0x33a>
 80058c4:	e014      	b.n	80058f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c6:	f7fc f961 	bl	8001b8c <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fc f95d 	bl	8001b8c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0a6      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	4b56      	ldr	r3, [pc, #344]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1ee      	bne.n	80058ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d105      	bne.n	8005902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f6:	4b52      	ldr	r3, [pc, #328]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	4a51      	ldr	r2, [pc, #324]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 80058fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8092 	beq.w	8005a30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800590c:	4b4c      	ldr	r3, [pc, #304]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 030c 	and.w	r3, r3, #12
 8005914:	2b08      	cmp	r3, #8
 8005916:	d05c      	beq.n	80059d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d141      	bne.n	80059a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005920:	4b48      	ldr	r3, [pc, #288]	; (8005a44 <HAL_RCC_OscConfig+0x4dc>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005926:	f7fc f931 	bl	8001b8c <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592e:	f7fc f92d 	bl	8001b8c <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e078      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005940:	4b3f      	ldr	r3, [pc, #252]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f0      	bne.n	800592e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	3b01      	subs	r3, #1
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	061b      	lsls	r3, r3, #24
 8005970:	4933      	ldr	r1, [pc, #204]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <HAL_RCC_OscConfig+0x4dc>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fc f906 	bl	8001b8c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005984:	f7fc f902 	bl	8001b8c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e04d      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005996:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x41c>
 80059a2:	e045      	b.n	8005a30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a4:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <HAL_RCC_OscConfig+0x4dc>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059aa:	f7fc f8ef 	bl	8001b8c <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fc f8eb 	bl	8001b8c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e036      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f0      	bne.n	80059b2 <HAL_RCC_OscConfig+0x44a>
 80059d0:	e02e      	b.n	8005a30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e029      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <HAL_RCC_OscConfig+0x4d8>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d11c      	bne.n	8005a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d115      	bne.n	8005a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a06:	4013      	ands	r3, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10d      	bne.n	8005a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d001      	beq.n	8005a30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40007000 	.word	0x40007000
 8005a40:	40023800 	.word	0x40023800
 8005a44:	42470060 	.word	0x42470060

08005a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0cc      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b68      	ldr	r3, [pc, #416]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d90c      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b65      	ldr	r3, [pc, #404]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0b8      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a9c:	4b59      	ldr	r3, [pc, #356]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a58      	ldr	r2, [pc, #352]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab4:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4a52      	ldr	r2, [pc, #328]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac0:	4b50      	ldr	r3, [pc, #320]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	494d      	ldr	r1, [pc, #308]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d044      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d119      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d003      	beq.n	8005b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d107      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b06:	4b3f      	ldr	r3, [pc, #252]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e06f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b16:	4b3b      	ldr	r3, [pc, #236]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e067      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b26:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 0203 	bic.w	r2, r3, #3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4934      	ldr	r1, [pc, #208]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b38:	f7fc f828 	bl	8001b8c <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b40:	f7fc f824 	bl	8001b8c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e04f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 020c 	and.w	r2, r3, #12
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d1eb      	bne.n	8005b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b68:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d20c      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e032      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4916      	ldr	r1, [pc, #88]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	490e      	ldr	r1, [pc, #56]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bce:	f000 f821 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	490a      	ldr	r1, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005be0:	5ccb      	ldrb	r3, [r1, r3]
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fb fe5e 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40023c00 	.word	0x40023c00
 8005c04:	40023800 	.word	0x40023800
 8005c08:	0800e358 	.word	0x0800e358
 8005c0c:	20000000 	.word	0x20000000
 8005c10:	20000004 	.word	0x20000004

08005c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	2300      	movs	r3, #0
 8005c26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c2c:	4b67      	ldr	r3, [pc, #412]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d00d      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0x40>
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	f200 80bd 	bhi.w	8005db8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x34>
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d003      	beq.n	8005c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c46:	e0b7      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c48:	4b61      	ldr	r3, [pc, #388]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c4a:	60bb      	str	r3, [r7, #8]
       break;
 8005c4c:	e0b7      	b.n	8005dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c4e:	4b61      	ldr	r3, [pc, #388]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c50:	60bb      	str	r3, [r7, #8]
      break;
 8005c52:	e0b4      	b.n	8005dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c54:	4b5d      	ldr	r3, [pc, #372]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c5e:	4b5b      	ldr	r3, [pc, #364]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d04d      	beq.n	8005d06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c6a:	4b58      	ldr	r3, [pc, #352]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	099b      	lsrs	r3, r3, #6
 8005c70:	461a      	mov	r2, r3
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	ea02 0800 	and.w	r8, r2, r0
 8005c82:	ea03 0901 	and.w	r9, r3, r1
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	014b      	lsls	r3, r1, #5
 8005c94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c98:	0142      	lsls	r2, r0, #5
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	ebb0 0008 	subs.w	r0, r0, r8
 8005ca2:	eb61 0109 	sbc.w	r1, r1, r9
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	018b      	lsls	r3, r1, #6
 8005cb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cb4:	0182      	lsls	r2, r0, #6
 8005cb6:	1a12      	subs	r2, r2, r0
 8005cb8:	eb63 0301 	sbc.w	r3, r3, r1
 8005cbc:	f04f 0000 	mov.w	r0, #0
 8005cc0:	f04f 0100 	mov.w	r1, #0
 8005cc4:	00d9      	lsls	r1, r3, #3
 8005cc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cca:	00d0      	lsls	r0, r2, #3
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	eb12 0208 	adds.w	r2, r2, r8
 8005cd4:	eb43 0309 	adc.w	r3, r3, r9
 8005cd8:	f04f 0000 	mov.w	r0, #0
 8005cdc:	f04f 0100 	mov.w	r1, #0
 8005ce0:	0259      	lsls	r1, r3, #9
 8005ce2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ce6:	0250      	lsls	r0, r2, #9
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	f7fa fa6a 	bl	80001d0 <__aeabi_uldivmod>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4613      	mov	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e04a      	b.n	8005d9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d06:	4b31      	ldr	r3, [pc, #196]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	099b      	lsrs	r3, r3, #6
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d16:	f04f 0100 	mov.w	r1, #0
 8005d1a:	ea02 0400 	and.w	r4, r2, r0
 8005d1e:	ea03 0501 	and.w	r5, r3, r1
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	014b      	lsls	r3, r1, #5
 8005d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d34:	0142      	lsls	r2, r0, #5
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	1b00      	subs	r0, r0, r4
 8005d3c:	eb61 0105 	sbc.w	r1, r1, r5
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	018b      	lsls	r3, r1, #6
 8005d4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d4e:	0182      	lsls	r2, r0, #6
 8005d50:	1a12      	subs	r2, r2, r0
 8005d52:	eb63 0301 	sbc.w	r3, r3, r1
 8005d56:	f04f 0000 	mov.w	r0, #0
 8005d5a:	f04f 0100 	mov.w	r1, #0
 8005d5e:	00d9      	lsls	r1, r3, #3
 8005d60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d64:	00d0      	lsls	r0, r2, #3
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	1912      	adds	r2, r2, r4
 8005d6c:	eb45 0303 	adc.w	r3, r5, r3
 8005d70:	f04f 0000 	mov.w	r0, #0
 8005d74:	f04f 0100 	mov.w	r1, #0
 8005d78:	0299      	lsls	r1, r3, #10
 8005d7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d7e:	0290      	lsls	r0, r2, #10
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	f7fa fa1e 	bl	80001d0 <__aeabi_uldivmod>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4613      	mov	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	3301      	adds	r3, #1
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	60bb      	str	r3, [r7, #8]
      break;
 8005db6:	e002      	b.n	8005dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005dba:	60bb      	str	r3, [r7, #8]
      break;
 8005dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005dca:	bf00      	nop
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	00f42400 	.word	0x00f42400
 8005dd4:	007a1200 	.word	0x007a1200

08005dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ddc:	4b03      	ldr	r3, [pc, #12]	; (8005dec <HAL_RCC_GetHCLKFreq+0x14>)
 8005dde:	681b      	ldr	r3, [r3, #0]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000000 	.word	0x20000000

08005df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005df4:	f7ff fff0 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	0a9b      	lsrs	r3, r3, #10
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	4903      	ldr	r1, [pc, #12]	; (8005e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e06:	5ccb      	ldrb	r3, [r1, r3]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40023800 	.word	0x40023800
 8005e14:	0800e368 	.word	0x0800e368

08005e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e1c:	f7ff ffdc 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	0b5b      	lsrs	r3, r3, #13
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4903      	ldr	r1, [pc, #12]	; (8005e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	0800e368 	.word	0x0800e368

08005e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	220f      	movs	r2, #15
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0203 	and.w	r2, r3, #3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e74:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <HAL_RCC_GetClockConfig+0x5c>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	08db      	lsrs	r3, r3, #3
 8005e7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <HAL_RCC_GetClockConfig+0x60>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 020f 	and.w	r2, r3, #15
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	40023c00 	.word	0x40023c00

08005ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d105      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d035      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ecc:	4b62      	ldr	r3, [pc, #392]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ed2:	f7fb fe5b 	bl	8001b8c <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ed8:	e008      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eda:	f7fb fe57 	bl	8001b8c <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e0b0      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eec:	4b5b      	ldr	r3, [pc, #364]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f0      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	019a      	lsls	r2, r3, #6
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	071b      	lsls	r3, r3, #28
 8005f04:	4955      	ldr	r1, [pc, #340]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f0c:	4b52      	ldr	r3, [pc, #328]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f12:	f7fb fe3b 	bl	8001b8c <HAL_GetTick>
 8005f16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f18:	e008      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f1a:	f7fb fe37 	bl	8001b8c <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e090      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8083 	beq.w	800604c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	4b44      	ldr	r3, [pc, #272]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	4a43      	ldr	r2, [pc, #268]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f54:	6413      	str	r3, [r2, #64]	; 0x40
 8005f56:	4b41      	ldr	r3, [pc, #260]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f62:	4b3f      	ldr	r3, [pc, #252]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a3e      	ldr	r2, [pc, #248]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f6e:	f7fb fe0d 	bl	8001b8c <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f74:	e008      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f76:	f7fb fe09 	bl	8001b8c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e062      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f88:	4b35      	ldr	r3, [pc, #212]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f94:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d02f      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d028      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fbc:	4b29      	ldr	r3, [pc, #164]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc2:	4b28      	ldr	r3, [pc, #160]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005fc8:	4a24      	ldr	r2, [pc, #144]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fce:	4b23      	ldr	r3, [pc, #140]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d114      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005fda:	f7fb fdd7 	bl	8001b8c <HAL_GetTick>
 8005fde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe2:	f7fb fdd3 	bl	8001b8c <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e02a      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff8:	4b18      	ldr	r3, [pc, #96]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0ee      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006010:	d10d      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006026:	490d      	ldr	r1, [pc, #52]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006028:	4313      	orrs	r3, r2
 800602a:	608b      	str	r3, [r1, #8]
 800602c:	e005      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	4a0a      	ldr	r2, [pc, #40]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006034:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006038:	6093      	str	r3, [r2, #8]
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800603c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006046:	4905      	ldr	r1, [pc, #20]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006048:	4313      	orrs	r3, r2
 800604a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	42470068 	.word	0x42470068
 800605c:	40023800 	.word	0x40023800
 8006060:	40007000 	.word	0x40007000
 8006064:	42470e40 	.word	0x42470e40

08006068 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d13e      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006086:	4b23      	ldr	r3, [pc, #140]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d12f      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800609e:	617b      	str	r3, [r7, #20]
          break;
 80060a0:	e02f      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ae:	d108      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060b0:	4b18      	ldr	r3, [pc, #96]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80060ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e007      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ca:	4a15      	ldr	r2, [pc, #84]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80060d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80060e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ec:	0f1b      	lsrs	r3, r3, #28
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	617b      	str	r3, [r7, #20]
          break;
 80060fa:	e002      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
          break;
 8006100:	bf00      	nop
        }
      }
      break;
 8006102:	bf00      	nop
    }
  }
  return frequency;
 8006104:	697b      	ldr	r3, [r7, #20]
}
 8006106:	4618      	mov	r0, r3
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800
 8006118:	00bb8000 	.word	0x00bb8000
 800611c:	007a1200 	.word	0x007a1200
 8006120:	00f42400 	.word	0x00f42400

08006124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e056      	b.n	80061e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d106      	bne.n	8006156 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7fb fa85 	bl	8001660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	ea42 0103 	orr.w	r1, r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	f003 0104 	and.w	r1, r3, #4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10f      	bne.n	8006230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	099b      	lsrs	r3, r3, #6
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
    return;
 800622e:	e0d7      	b.n	80063e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_SPI_IRQHandler+0x66>
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	09db      	lsrs	r3, r3, #7
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
    return;
 8006250:	e0c6      	b.n	80063e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10c      	bne.n	8006278 <HAL_SPI_IRQHandler+0x8c>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	099b      	lsrs	r3, r3, #6
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80b4 	beq.w	80063e0 <HAL_SPI_IRQHandler+0x1f4>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80ad 	beq.w	80063e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	099b      	lsrs	r3, r3, #6
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d023      	beq.n	80062da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d011      	beq.n	80062c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	e00b      	b.n	80062da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	693b      	ldr	r3, [r7, #16]
        return;
 80062d8:	e082      	b.n	80063e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d014      	beq.n	8006310 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	f043 0201 	orr.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00c      	beq.n	8006336 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006320:	f043 0208 	orr.w	r2, r3, #8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006328:	2300      	movs	r3, #0
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60bb      	str	r3, [r7, #8]
 8006334:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	2b00      	cmp	r3, #0
 800633c:	d04f      	beq.n	80063de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800634c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <HAL_SPI_IRQHandler+0x17e>
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d034      	beq.n	80063d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0203 	bic.w	r2, r2, #3
 8006378:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006386:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <HAL_SPI_IRQHandler+0x1fc>)
 8006388:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638e:	4618      	mov	r0, r3
 8006390:	f7fc f9e4 	bl	800275c <HAL_DMA_Abort_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b2:	4a0d      	ldr	r2, [pc, #52]	; (80063e8 <HAL_SPI_IRQHandler+0x1fc>)
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fc f9ce 	bl	800275c <HAL_DMA_Abort_IT>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80063d2:	e003      	b.n	80063dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f809 	bl	80063ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80063da:	e000      	b.n	80063de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80063dc:	bf00      	nop
    return;
 80063de:	bf00      	nop
  }
}
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	08006401 	.word	0x08006401

080063ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff ffe6 	bl	80063ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e01d      	b.n	8006476 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fb f956 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f000 f95e 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b06      	cmp	r3, #6
 80064a6:	d007      	beq.n	80064b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d122      	bne.n	8006522 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d11b      	bne.n	8006522 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f06f 0202 	mvn.w	r2, #2
 80064f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8ee 	bl	80066ea <HAL_TIM_IC_CaptureCallback>
 800650e:	e005      	b.n	800651c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f8e0 	bl	80066d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f8f1 	bl	80066fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b04      	cmp	r3, #4
 800652e:	d122      	bne.n	8006576 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b04      	cmp	r3, #4
 800653c:	d11b      	bne.n	8006576 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f06f 0204 	mvn.w	r2, #4
 8006546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8c4 	bl	80066ea <HAL_TIM_IC_CaptureCallback>
 8006562:	e005      	b.n	8006570 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8b6 	bl	80066d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8c7 	bl	80066fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b08      	cmp	r3, #8
 8006582:	d122      	bne.n	80065ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b08      	cmp	r3, #8
 8006590:	d11b      	bne.n	80065ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f06f 0208 	mvn.w	r2, #8
 800659a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2204      	movs	r2, #4
 80065a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f89a 	bl	80066ea <HAL_TIM_IC_CaptureCallback>
 80065b6:	e005      	b.n	80065c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f88c 	bl	80066d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f89d 	bl	80066fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d122      	bne.n	800661e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	d11b      	bne.n	800661e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0210 	mvn.w	r2, #16
 80065ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2208      	movs	r2, #8
 80065f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f870 	bl	80066ea <HAL_TIM_IC_CaptureCallback>
 800660a:	e005      	b.n	8006618 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f862 	bl	80066d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f873 	bl	80066fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d10e      	bne.n	800664a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	d107      	bne.n	800664a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f06f 0201 	mvn.w	r2, #1
 8006642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7fa fe99 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006654:	2b80      	cmp	r3, #128	; 0x80
 8006656:	d10e      	bne.n	8006676 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d107      	bne.n	8006676 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800666e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f97f 	bl	8006974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d10e      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d107      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800669a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f838 	bl	8006712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d10e      	bne.n	80066ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d107      	bne.n	80066ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f06f 0220 	mvn.w	r2, #32
 80066c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f949 	bl	8006960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a40      	ldr	r2, [pc, #256]	; (800683c <TIM_Base_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d00f      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a3c      	ldr	r2, [pc, #240]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a3b      	ldr	r2, [pc, #236]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a3a      	ldr	r2, [pc, #232]	; (800684c <TIM_Base_SetConfig+0x124>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2f      	ldr	r2, [pc, #188]	; (800683c <TIM_Base_SetConfig+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006788:	d027      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d023      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a29      	ldr	r2, [pc, #164]	; (800684c <TIM_Base_SetConfig+0x124>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d017      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_Base_SetConfig+0x128>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a27      	ldr	r2, [pc, #156]	; (8006854 <TIM_Base_SetConfig+0x12c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <TIM_Base_SetConfig+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a25      	ldr	r2, [pc, #148]	; (800685c <TIM_Base_SetConfig+0x134>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a24      	ldr	r2, [pc, #144]	; (8006860 <TIM_Base_SetConfig+0x138>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a23      	ldr	r2, [pc, #140]	; (8006864 <TIM_Base_SetConfig+0x13c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a0a      	ldr	r2, [pc, #40]	; (800683c <TIM_Base_SetConfig+0x114>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <TIM_Base_SetConfig+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d103      	bne.n	8006828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	615a      	str	r2, [r3, #20]
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40010000 	.word	0x40010000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40010400 	.word	0x40010400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800
 800685c:	40001800 	.word	0x40001800
 8006860:	40001c00 	.word	0x40001c00
 8006864:	40002000 	.word	0x40002000

08006868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e05a      	b.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a21      	ldr	r2, [pc, #132]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d022      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068cc:	d01d      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d018      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1b      	ldr	r2, [pc, #108]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1a      	ldr	r2, [pc, #104]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00e      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d10c      	bne.n	8006924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4313      	orrs	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40001800 	.word	0x40001800

08006960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e03f      	b.n	8006a1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fa fece 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2224      	movs	r2, #36	; 0x24
 80069b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fa69 	bl	8006ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10d      	bne.n	8006a76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_UART_IRQHandler+0x52>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f996 	bl	8006da0 <UART_Receive_IT>
      return;
 8006a74:	e0d0      	b.n	8006c18 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80b0 	beq.w	8006bde <HAL_UART_IRQHandler+0x1ba>
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d105      	bne.n	8006a94 <HAL_UART_IRQHandler+0x70>
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 80a5 	beq.w	8006bde <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <HAL_UART_IRQHandler+0x90>
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	f043 0201 	orr.w	r2, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xb0>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	f043 0202 	orr.w	r2, r3, #2
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <HAL_UART_IRQHandler+0xd0>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	f043 0204 	orr.w	r2, r3, #4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <HAL_UART_IRQHandler+0xfa>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <HAL_UART_IRQHandler+0xee>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b16:	f043 0208 	orr.w	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d077      	beq.n	8006c16 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <HAL_UART_IRQHandler+0x11c>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f930 	bl	8006da0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	bf0c      	ite	eq
 8006b4e:	2301      	moveq	r3, #1
 8006b50:	2300      	movne	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d102      	bne.n	8006b68 <HAL_UART_IRQHandler+0x144>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d031      	beq.n	8006bcc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f879 	bl	8006c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d123      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695a      	ldr	r2, [r3, #20]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d013      	beq.n	8006bbc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b98:	4a21      	ldr	r2, [pc, #132]	; (8006c20 <HAL_UART_IRQHandler+0x1fc>)
 8006b9a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fb fddb 	bl	800275c <HAL_DMA_Abort_IT>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d016      	beq.n	8006bda <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bba:	e00e      	b.n	8006bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f845 	bl	8006c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc2:	e00a      	b.n	8006bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f841 	bl	8006c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bca:	e006      	b.n	8006bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f83d 	bl	8006c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006bd8:	e01d      	b.n	8006c16 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bda:	bf00      	nop
    return;
 8006bdc:	e01b      	b.n	8006c16 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_UART_IRQHandler+0x1d6>
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f866 	bl	8006cc4 <UART_Transmit_IT>
    return;
 8006bf8:	e00e      	b.n	8006c18 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <HAL_UART_IRQHandler+0x1f4>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8ae 	bl	8006d70 <UART_EndTransmit_IT>
    return;
 8006c14:	e000      	b.n	8006c18 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006c16:	bf00      	nop
  }
}
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08006c9d 	.word	0x08006c9d

08006c24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695a      	ldr	r2, [r3, #20]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff ffc8 	bl	8006c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b21      	cmp	r3, #33	; 0x21
 8006cd6:	d144      	bne.n	8006d62 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce0:	d11a      	bne.n	8006d18 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cf6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	621a      	str	r2, [r3, #32]
 8006d0a:	e00e      	b.n	8006d2a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]
 8006d16:	e008      	b.n	8006d2a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6211      	str	r1, [r2, #32]
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4619      	mov	r1, r3
 8006d38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10f      	bne.n	8006d5e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff ff47 	bl	8006c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b22      	cmp	r3, #34	; 0x22
 8006db2:	d171      	bne.n	8006e98 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d123      	bne.n	8006e06 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10e      	bne.n	8006dea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	1c9a      	adds	r2, r3, #2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	629a      	str	r2, [r3, #40]	; 0x28
 8006de8:	e029      	b.n	8006e3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28
 8006e04:	e01b      	b.n	8006e3e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6858      	ldr	r0, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	1c59      	adds	r1, r3, #1
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6291      	str	r1, [r2, #40]	; 0x28
 8006e1e:	b2c2      	uxtb	r2, r0
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e00c      	b.n	8006e3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	1c58      	adds	r0, r3, #1
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	6288      	str	r0, [r1, #40]	; 0x28
 8006e36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d120      	bne.n	8006e94 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0220 	bic.w	r2, r2, #32
 8006e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff fed4 	bl	8006c38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e002      	b.n	8006e9a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	b0bd      	sub	sp, #244	; 0xf4
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec0:	68d9      	ldr	r1, [r3, #12]
 8006ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	ea40 0301 	orr.w	r3, r0, r1
 8006ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006efc:	f021 010c 	bic.w	r1, r1, #12
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1e:	6999      	ldr	r1, [r3, #24]
 8006f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	ea40 0301 	orr.w	r3, r0, r1
 8006f2a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f36:	f040 81a5 	bne.w	8007284 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4bcd      	ldr	r3, [pc, #820]	; (8007278 <UART_SetConfig+0x3d4>)
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d006      	beq.n	8006f54 <UART_SetConfig+0xb0>
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4bcb      	ldr	r3, [pc, #812]	; (800727c <UART_SetConfig+0x3d8>)
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	f040 80cb 	bne.w	80070ea <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f54:	f7fe ff60 	bl	8005e18 <HAL_RCC_GetPCLK2Freq>
 8006f58:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f60:	461c      	mov	r4, r3
 8006f62:	f04f 0500 	mov.w	r5, #0
 8006f66:	4622      	mov	r2, r4
 8006f68:	462b      	mov	r3, r5
 8006f6a:	1891      	adds	r1, r2, r2
 8006f6c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006f70:	415b      	adcs	r3, r3
 8006f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f76:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006f7a:	1912      	adds	r2, r2, r4
 8006f7c:	eb45 0303 	adc.w	r3, r5, r3
 8006f80:	f04f 0000 	mov.w	r0, #0
 8006f84:	f04f 0100 	mov.w	r1, #0
 8006f88:	00d9      	lsls	r1, r3, #3
 8006f8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f8e:	00d0      	lsls	r0, r2, #3
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	1911      	adds	r1, r2, r4
 8006f96:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006f9a:	416b      	adcs	r3, r5
 8006f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	1891      	adds	r1, r2, r2
 8006fae:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006fb2:	415b      	adcs	r3, r3
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fb8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006fbc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006fc0:	f7f9 f906 	bl	80001d0 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4bad      	ldr	r3, [pc, #692]	; (8007280 <UART_SetConfig+0x3dc>)
 8006fca:	fba3 2302 	umull	r2, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	011e      	lsls	r6, r3, #4
 8006fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd6:	461c      	mov	r4, r3
 8006fd8:	f04f 0500 	mov.w	r5, #0
 8006fdc:	4622      	mov	r2, r4
 8006fde:	462b      	mov	r3, r5
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	67b9      	str	r1, [r7, #120]	; 0x78
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fe8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006fec:	1912      	adds	r2, r2, r4
 8006fee:	eb45 0303 	adc.w	r3, r5, r3
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	00d9      	lsls	r1, r3, #3
 8006ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007000:	00d0      	lsls	r0, r2, #3
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	1911      	adds	r1, r2, r4
 8007008:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800700c:	416b      	adcs	r3, r5
 800700e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	461a      	mov	r2, r3
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	1891      	adds	r1, r2, r2
 8007020:	6739      	str	r1, [r7, #112]	; 0x70
 8007022:	415b      	adcs	r3, r3
 8007024:	677b      	str	r3, [r7, #116]	; 0x74
 8007026:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800702a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800702e:	f7f9 f8cf 	bl	80001d0 <__aeabi_uldivmod>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4b92      	ldr	r3, [pc, #584]	; (8007280 <UART_SetConfig+0x3dc>)
 8007038:	fba3 1302 	umull	r1, r3, r3, r2
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	2164      	movs	r1, #100	; 0x64
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	3332      	adds	r3, #50	; 0x32
 800704a:	4a8d      	ldr	r2, [pc, #564]	; (8007280 <UART_SetConfig+0x3dc>)
 800704c:	fba2 2303 	umull	r2, r3, r2, r3
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007058:	441e      	add	r6, r3
 800705a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800705e:	4618      	mov	r0, r3
 8007060:	f04f 0100 	mov.w	r1, #0
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	1894      	adds	r4, r2, r2
 800706a:	66bc      	str	r4, [r7, #104]	; 0x68
 800706c:	415b      	adcs	r3, r3
 800706e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007070:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007074:	1812      	adds	r2, r2, r0
 8007076:	eb41 0303 	adc.w	r3, r1, r3
 800707a:	f04f 0400 	mov.w	r4, #0
 800707e:	f04f 0500 	mov.w	r5, #0
 8007082:	00dd      	lsls	r5, r3, #3
 8007084:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007088:	00d4      	lsls	r4, r2, #3
 800708a:	4622      	mov	r2, r4
 800708c:	462b      	mov	r3, r5
 800708e:	1814      	adds	r4, r2, r0
 8007090:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007094:	414b      	adcs	r3, r1
 8007096:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800709a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	461a      	mov	r2, r3
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	1891      	adds	r1, r2, r2
 80070a8:	6639      	str	r1, [r7, #96]	; 0x60
 80070aa:	415b      	adcs	r3, r3
 80070ac:	667b      	str	r3, [r7, #100]	; 0x64
 80070ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80070b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070b6:	f7f9 f88b 	bl	80001d0 <__aeabi_uldivmod>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4b70      	ldr	r3, [pc, #448]	; (8007280 <UART_SetConfig+0x3dc>)
 80070c0:	fba3 1302 	umull	r1, r3, r3, r2
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	2164      	movs	r1, #100	; 0x64
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	3332      	adds	r3, #50	; 0x32
 80070d2:	4a6b      	ldr	r2, [pc, #428]	; (8007280 <UART_SetConfig+0x3dc>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f003 0207 	and.w	r2, r3, #7
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4432      	add	r2, r6
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e26d      	b.n	80075c6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070ea:	f7fe fe81 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 80070ee:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070f6:	461c      	mov	r4, r3
 80070f8:	f04f 0500 	mov.w	r5, #0
 80070fc:	4622      	mov	r2, r4
 80070fe:	462b      	mov	r3, r5
 8007100:	1891      	adds	r1, r2, r2
 8007102:	65b9      	str	r1, [r7, #88]	; 0x58
 8007104:	415b      	adcs	r3, r3
 8007106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007108:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800710c:	1912      	adds	r2, r2, r4
 800710e:	eb45 0303 	adc.w	r3, r5, r3
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	f04f 0100 	mov.w	r1, #0
 800711a:	00d9      	lsls	r1, r3, #3
 800711c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007120:	00d0      	lsls	r0, r2, #3
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	1911      	adds	r1, r2, r4
 8007128:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800712c:	416b      	adcs	r3, r5
 800712e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	461a      	mov	r2, r3
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	1891      	adds	r1, r2, r2
 8007140:	6539      	str	r1, [r7, #80]	; 0x50
 8007142:	415b      	adcs	r3, r3
 8007144:	657b      	str	r3, [r7, #84]	; 0x54
 8007146:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800714a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800714e:	f7f9 f83f 	bl	80001d0 <__aeabi_uldivmod>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <UART_SetConfig+0x3dc>)
 8007158:	fba3 2302 	umull	r2, r3, r3, r2
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	011e      	lsls	r6, r3, #4
 8007160:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007164:	461c      	mov	r4, r3
 8007166:	f04f 0500 	mov.w	r5, #0
 800716a:	4622      	mov	r2, r4
 800716c:	462b      	mov	r3, r5
 800716e:	1891      	adds	r1, r2, r2
 8007170:	64b9      	str	r1, [r7, #72]	; 0x48
 8007172:	415b      	adcs	r3, r3
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007176:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800717a:	1912      	adds	r2, r2, r4
 800717c:	eb45 0303 	adc.w	r3, r5, r3
 8007180:	f04f 0000 	mov.w	r0, #0
 8007184:	f04f 0100 	mov.w	r1, #0
 8007188:	00d9      	lsls	r1, r3, #3
 800718a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800718e:	00d0      	lsls	r0, r2, #3
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	1911      	adds	r1, r2, r4
 8007196:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800719a:	416b      	adcs	r3, r5
 800719c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	1891      	adds	r1, r2, r2
 80071ae:	6439      	str	r1, [r7, #64]	; 0x40
 80071b0:	415b      	adcs	r3, r3
 80071b2:	647b      	str	r3, [r7, #68]	; 0x44
 80071b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80071bc:	f7f9 f808 	bl	80001d0 <__aeabi_uldivmod>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <UART_SetConfig+0x3dc>)
 80071c6:	fba3 1302 	umull	r1, r3, r3, r2
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	2164      	movs	r1, #100	; 0x64
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	3332      	adds	r3, #50	; 0x32
 80071d8:	4a29      	ldr	r2, [pc, #164]	; (8007280 <UART_SetConfig+0x3dc>)
 80071da:	fba2 2303 	umull	r2, r3, r2, r3
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071e6:	441e      	add	r6, r3
 80071e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071ec:	4618      	mov	r0, r3
 80071ee:	f04f 0100 	mov.w	r1, #0
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	1894      	adds	r4, r2, r2
 80071f8:	63bc      	str	r4, [r7, #56]	; 0x38
 80071fa:	415b      	adcs	r3, r3
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007202:	1812      	adds	r2, r2, r0
 8007204:	eb41 0303 	adc.w	r3, r1, r3
 8007208:	f04f 0400 	mov.w	r4, #0
 800720c:	f04f 0500 	mov.w	r5, #0
 8007210:	00dd      	lsls	r5, r3, #3
 8007212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007216:	00d4      	lsls	r4, r2, #3
 8007218:	4622      	mov	r2, r4
 800721a:	462b      	mov	r3, r5
 800721c:	1814      	adds	r4, r2, r0
 800721e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007222:	414b      	adcs	r3, r1
 8007224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	461a      	mov	r2, r3
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	1891      	adds	r1, r2, r2
 8007236:	6339      	str	r1, [r7, #48]	; 0x30
 8007238:	415b      	adcs	r3, r3
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
 800723c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007240:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007244:	f7f8 ffc4 	bl	80001d0 <__aeabi_uldivmod>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <UART_SetConfig+0x3dc>)
 800724e:	fba3 1302 	umull	r1, r3, r3, r2
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	2164      	movs	r1, #100	; 0x64
 8007256:	fb01 f303 	mul.w	r3, r1, r3
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	3332      	adds	r3, #50	; 0x32
 8007260:	4a07      	ldr	r2, [pc, #28]	; (8007280 <UART_SetConfig+0x3dc>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	f003 0207 	and.w	r2, r3, #7
 800726c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4432      	add	r2, r6
 8007274:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007276:	e1a6      	b.n	80075c6 <UART_SetConfig+0x722>
 8007278:	40011000 	.word	0x40011000
 800727c:	40011400 	.word	0x40011400
 8007280:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4bd1      	ldr	r3, [pc, #836]	; (80075d0 <UART_SetConfig+0x72c>)
 800728c:	429a      	cmp	r2, r3
 800728e:	d006      	beq.n	800729e <UART_SetConfig+0x3fa>
 8007290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4bcf      	ldr	r3, [pc, #828]	; (80075d4 <UART_SetConfig+0x730>)
 8007298:	429a      	cmp	r2, r3
 800729a:	f040 80ca 	bne.w	8007432 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800729e:	f7fe fdbb 	bl	8005e18 <HAL_RCC_GetPCLK2Freq>
 80072a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072aa:	461c      	mov	r4, r3
 80072ac:	f04f 0500 	mov.w	r5, #0
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80072b8:	415b      	adcs	r3, r3
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072c0:	1912      	adds	r2, r2, r4
 80072c2:	eb45 0303 	adc.w	r3, r5, r3
 80072c6:	f04f 0000 	mov.w	r0, #0
 80072ca:	f04f 0100 	mov.w	r1, #0
 80072ce:	00d9      	lsls	r1, r3, #3
 80072d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072d4:	00d0      	lsls	r0, r2, #3
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	eb12 0a04 	adds.w	sl, r2, r4
 80072de:	eb43 0b05 	adc.w	fp, r3, r5
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f04f 0100 	mov.w	r1, #0
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	008b      	lsls	r3, r1, #2
 80072f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072fc:	0082      	lsls	r2, r0, #2
 80072fe:	4650      	mov	r0, sl
 8007300:	4659      	mov	r1, fp
 8007302:	f7f8 ff65 	bl	80001d0 <__aeabi_uldivmod>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	4bb3      	ldr	r3, [pc, #716]	; (80075d8 <UART_SetConfig+0x734>)
 800730c:	fba3 2302 	umull	r2, r3, r3, r2
 8007310:	095b      	lsrs	r3, r3, #5
 8007312:	011e      	lsls	r6, r3, #4
 8007314:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007318:	4618      	mov	r0, r3
 800731a:	f04f 0100 	mov.w	r1, #0
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	1894      	adds	r4, r2, r2
 8007324:	623c      	str	r4, [r7, #32]
 8007326:	415b      	adcs	r3, r3
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
 800732a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800732e:	1812      	adds	r2, r2, r0
 8007330:	eb41 0303 	adc.w	r3, r1, r3
 8007334:	f04f 0400 	mov.w	r4, #0
 8007338:	f04f 0500 	mov.w	r5, #0
 800733c:	00dd      	lsls	r5, r3, #3
 800733e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007342:	00d4      	lsls	r4, r2, #3
 8007344:	4622      	mov	r2, r4
 8007346:	462b      	mov	r3, r5
 8007348:	1814      	adds	r4, r2, r0
 800734a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800734e:	414b      	adcs	r3, r1
 8007350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	f04f 0100 	mov.w	r1, #0
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	008b      	lsls	r3, r1, #2
 800736a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800736e:	0082      	lsls	r2, r0, #2
 8007370:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007374:	f7f8 ff2c 	bl	80001d0 <__aeabi_uldivmod>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4b96      	ldr	r3, [pc, #600]	; (80075d8 <UART_SetConfig+0x734>)
 800737e:	fba3 1302 	umull	r1, r3, r3, r2
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	2164      	movs	r1, #100	; 0x64
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	3332      	adds	r3, #50	; 0x32
 8007390:	4a91      	ldr	r2, [pc, #580]	; (80075d8 <UART_SetConfig+0x734>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800739c:	441e      	add	r6, r3
 800739e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073a2:	4618      	mov	r0, r3
 80073a4:	f04f 0100 	mov.w	r1, #0
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	1894      	adds	r4, r2, r2
 80073ae:	61bc      	str	r4, [r7, #24]
 80073b0:	415b      	adcs	r3, r3
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b8:	1812      	adds	r2, r2, r0
 80073ba:	eb41 0303 	adc.w	r3, r1, r3
 80073be:	f04f 0400 	mov.w	r4, #0
 80073c2:	f04f 0500 	mov.w	r5, #0
 80073c6:	00dd      	lsls	r5, r3, #3
 80073c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073cc:	00d4      	lsls	r4, r2, #3
 80073ce:	4622      	mov	r2, r4
 80073d0:	462b      	mov	r3, r5
 80073d2:	1814      	adds	r4, r2, r0
 80073d4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80073d8:	414b      	adcs	r3, r1
 80073da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f04f 0100 	mov.w	r1, #0
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	008b      	lsls	r3, r1, #2
 80073f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073f8:	0082      	lsls	r2, r0, #2
 80073fa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80073fe:	f7f8 fee7 	bl	80001d0 <__aeabi_uldivmod>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4b74      	ldr	r3, [pc, #464]	; (80075d8 <UART_SetConfig+0x734>)
 8007408:	fba3 1302 	umull	r1, r3, r3, r2
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	2164      	movs	r1, #100	; 0x64
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	3332      	adds	r3, #50	; 0x32
 800741a:	4a6f      	ldr	r2, [pc, #444]	; (80075d8 <UART_SetConfig+0x734>)
 800741c:	fba2 2303 	umull	r2, r3, r2, r3
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	f003 020f 	and.w	r2, r3, #15
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4432      	add	r2, r6
 800742e:	609a      	str	r2, [r3, #8]
 8007430:	e0c9      	b.n	80075c6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007432:	f7fe fcdd 	bl	8005df0 <HAL_RCC_GetPCLK1Freq>
 8007436:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800743a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800743e:	461c      	mov	r4, r3
 8007440:	f04f 0500 	mov.w	r5, #0
 8007444:	4622      	mov	r2, r4
 8007446:	462b      	mov	r3, r5
 8007448:	1891      	adds	r1, r2, r2
 800744a:	6139      	str	r1, [r7, #16]
 800744c:	415b      	adcs	r3, r3
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007454:	1912      	adds	r2, r2, r4
 8007456:	eb45 0303 	adc.w	r3, r5, r3
 800745a:	f04f 0000 	mov.w	r0, #0
 800745e:	f04f 0100 	mov.w	r1, #0
 8007462:	00d9      	lsls	r1, r3, #3
 8007464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007468:	00d0      	lsls	r0, r2, #3
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	eb12 0804 	adds.w	r8, r2, r4
 8007472:	eb43 0905 	adc.w	r9, r3, r5
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	f04f 0100 	mov.w	r1, #0
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	008b      	lsls	r3, r1, #2
 800748c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007490:	0082      	lsls	r2, r0, #2
 8007492:	4640      	mov	r0, r8
 8007494:	4649      	mov	r1, r9
 8007496:	f7f8 fe9b 	bl	80001d0 <__aeabi_uldivmod>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4b4e      	ldr	r3, [pc, #312]	; (80075d8 <UART_SetConfig+0x734>)
 80074a0:	fba3 2302 	umull	r2, r3, r3, r2
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	011e      	lsls	r6, r3, #4
 80074a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074ac:	4618      	mov	r0, r3
 80074ae:	f04f 0100 	mov.w	r1, #0
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	1894      	adds	r4, r2, r2
 80074b8:	60bc      	str	r4, [r7, #8]
 80074ba:	415b      	adcs	r3, r3
 80074bc:	60fb      	str	r3, [r7, #12]
 80074be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074c2:	1812      	adds	r2, r2, r0
 80074c4:	eb41 0303 	adc.w	r3, r1, r3
 80074c8:	f04f 0400 	mov.w	r4, #0
 80074cc:	f04f 0500 	mov.w	r5, #0
 80074d0:	00dd      	lsls	r5, r3, #3
 80074d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074d6:	00d4      	lsls	r4, r2, #3
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	1814      	adds	r4, r2, r0
 80074de:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80074e2:	414b      	adcs	r3, r1
 80074e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f04f 0100 	mov.w	r1, #0
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	f04f 0300 	mov.w	r3, #0
 80074fc:	008b      	lsls	r3, r1, #2
 80074fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007502:	0082      	lsls	r2, r0, #2
 8007504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007508:	f7f8 fe62 	bl	80001d0 <__aeabi_uldivmod>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4b31      	ldr	r3, [pc, #196]	; (80075d8 <UART_SetConfig+0x734>)
 8007512:	fba3 1302 	umull	r1, r3, r3, r2
 8007516:	095b      	lsrs	r3, r3, #5
 8007518:	2164      	movs	r1, #100	; 0x64
 800751a:	fb01 f303 	mul.w	r3, r1, r3
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	3332      	adds	r3, #50	; 0x32
 8007524:	4a2c      	ldr	r2, [pc, #176]	; (80075d8 <UART_SetConfig+0x734>)
 8007526:	fba2 2303 	umull	r2, r3, r2, r3
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007530:	441e      	add	r6, r3
 8007532:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007536:	4618      	mov	r0, r3
 8007538:	f04f 0100 	mov.w	r1, #0
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	1894      	adds	r4, r2, r2
 8007542:	603c      	str	r4, [r7, #0]
 8007544:	415b      	adcs	r3, r3
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754c:	1812      	adds	r2, r2, r0
 800754e:	eb41 0303 	adc.w	r3, r1, r3
 8007552:	f04f 0400 	mov.w	r4, #0
 8007556:	f04f 0500 	mov.w	r5, #0
 800755a:	00dd      	lsls	r5, r3, #3
 800755c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007560:	00d4      	lsls	r4, r2, #3
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	1814      	adds	r4, r2, r0
 8007568:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800756c:	414b      	adcs	r3, r1
 800756e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4618      	mov	r0, r3
 800757a:	f04f 0100 	mov.w	r1, #0
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	008b      	lsls	r3, r1, #2
 8007588:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800758c:	0082      	lsls	r2, r0, #2
 800758e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007592:	f7f8 fe1d 	bl	80001d0 <__aeabi_uldivmod>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <UART_SetConfig+0x734>)
 800759c:	fba3 1302 	umull	r1, r3, r3, r2
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	2164      	movs	r1, #100	; 0x64
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	3332      	adds	r3, #50	; 0x32
 80075ae:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <UART_SetConfig+0x734>)
 80075b0:	fba2 2303 	umull	r2, r3, r2, r3
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	f003 020f 	and.w	r2, r3, #15
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4432      	add	r2, r6
 80075c2:	609a      	str	r2, [r3, #8]
}
 80075c4:	e7ff      	b.n	80075c6 <UART_SetConfig+0x722>
 80075c6:	bf00      	nop
 80075c8:	37f4      	adds	r7, #244	; 0xf4
 80075ca:	46bd      	mov	sp, r7
 80075cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d0:	40011000 	.word	0x40011000
 80075d4:	40011400 	.word	0x40011400
 80075d8:	51eb851f 	.word	0x51eb851f

080075dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075dc:	b084      	sub	sp, #16
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	f107 001c 	add.w	r0, r7, #28
 80075ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d122      	bne.n	800763a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800761c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761e:	2b01      	cmp	r3, #1
 8007620:	d105      	bne.n	800762e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f94a 	bl	80078c8 <USB_CoreReset>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
 8007638:	e01a      	b.n	8007670 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f93e 	bl	80078c8 <USB_CoreReset>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
 8007662:	e005      	b.n	8007670 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10b      	bne.n	800768e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f043 0206 	orr.w	r2, r3, #6
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f043 0220 	orr.w	r2, r3, #32
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800769a:	b004      	add	sp, #16
 800769c:	4770      	bx	lr

0800769e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f043 0201 	orr.w	r2, r3, #1
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f023 0201 	bic.w	r2, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d106      	bne.n	800770e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]
 800770c:	e00b      	b.n	8007726 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]
 8007720:	e001      	b.n	8007726 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e003      	b.n	800772e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007726:	2032      	movs	r0, #50	; 0x32
 8007728:	f7fa fa3c 	bl	8001ba4 <HAL_Delay>

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	019b      	lsls	r3, r3, #6
 800774a:	f043 0220 	orr.w	r2, r3, #32
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4a09      	ldr	r2, [pc, #36]	; (8007780 <USB_FlushTxFifo+0x48>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d901      	bls.n	8007764 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e006      	b.n	8007772 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b20      	cmp	r3, #32
 800776e:	d0f0      	beq.n	8007752 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	00030d40 	.word	0x00030d40

08007784 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2210      	movs	r2, #16
 8007794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3301      	adds	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <USB_FlushRxFifo+0x40>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d901      	bls.n	80077a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e006      	b.n	80077b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d0f0      	beq.n	8007796 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	00030d40 	.word	0x00030d40

080077c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b089      	sub	sp, #36	; 0x24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4611      	mov	r1, r2
 80077d4:	461a      	mov	r2, r3
 80077d6:	460b      	mov	r3, r1
 80077d8:	71fb      	strb	r3, [r7, #7]
 80077da:	4613      	mov	r3, r2
 80077dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80077e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d11a      	bne.n	8007824 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80077ee:	88bb      	ldrh	r3, [r7, #4]
 80077f0:	3303      	adds	r3, #3
 80077f2:	089b      	lsrs	r3, r3, #2
 80077f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e00f      	b.n	800781c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	031a      	lsls	r2, r3, #12
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	4413      	add	r3, r2
 8007804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007808:	461a      	mov	r2, r3
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3304      	adds	r3, #4
 8007814:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	3301      	adds	r3, #1
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d3eb      	bcc.n	80077fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3724      	adds	r7, #36	; 0x24
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007832:	b480      	push	{r7}
 8007834:	b089      	sub	sp, #36	; 0x24
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	3303      	adds	r3, #3
 800784c:	089b      	lsrs	r3, r3, #2
 800784e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	e00b      	b.n	800786e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	601a      	str	r2, [r3, #0]
    pDest++;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3304      	adds	r3, #4
 8007866:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	3301      	adds	r3, #1
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	429a      	cmp	r2, r3
 8007874:	d3ef      	bcc.n	8007856 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007876:	69fb      	ldr	r3, [r7, #28]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3724      	adds	r7, #36	; 0x24
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4013      	ands	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f003 0301 	and.w	r3, r3, #1
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
	...

080078c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3301      	adds	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a13      	ldr	r2, [pc, #76]	; (800792c <USB_CoreReset+0x64>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e01b      	b.n	800791e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	daf2      	bge.n	80078d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f043 0201 	orr.w	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a09      	ldr	r2, [pc, #36]	; (800792c <USB_CoreReset+0x64>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d901      	bls.n	8007910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e006      	b.n	800791e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b01      	cmp	r3, #1
 800791a:	d0f0      	beq.n	80078fe <USB_CoreReset+0x36>

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	00030d40 	.word	0x00030d40

08007930 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007930:	b084      	sub	sp, #16
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	f107 001c 	add.w	r0, r7, #28
 800793e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800794c:	461a      	mov	r2, r3
 800794e:	2300      	movs	r3, #0
 8007950:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797e:	2b00      	cmp	r3, #0
 8007980:	d018      	beq.n	80079b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	2b01      	cmp	r3, #1
 8007986:	d10a      	bne.n	800799e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007996:	f043 0304 	orr.w	r3, r3, #4
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e014      	b.n	80079c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079ac:	f023 0304 	bic.w	r3, r3, #4
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e009      	b.n	80079c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079c2:	f023 0304 	bic.w	r3, r3, #4
 80079c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80079c8:	2110      	movs	r1, #16
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff feb4 	bl	8007738 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff fed7 	bl	8007784 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	e015      	b.n	8007a08 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e8:	461a      	mov	r2, r3
 80079ea:	f04f 33ff 	mov.w	r3, #4294967295
 80079ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fc:	461a      	mov	r2, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d3e5      	bcc.n	80079dc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007a10:	2101      	movs	r1, #1
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f8ac 	bl	8007b70 <USB_DriveVbus>

  HAL_Delay(200U);
 8007a18:	20c8      	movs	r0, #200	; 0xc8
 8007a1a:	f7fa f8c3 	bl	8001ba4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a3e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a14      	ldr	r2, [pc, #80]	; (8007a94 <USB_HostInit+0x164>)
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <USB_HostInit+0x168>)
 8007a4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007a4e:	e009      	b.n	8007a64 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a10      	ldr	r2, [pc, #64]	; (8007a9c <USB_HostInit+0x16c>)
 8007a5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a10      	ldr	r2, [pc, #64]	; (8007aa0 <USB_HostInit+0x170>)
 8007a60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f043 0210 	orr.w	r2, r3, #16
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <USB_HostInit+0x174>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a8e:	b004      	add	sp, #16
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	01000200 	.word	0x01000200
 8007a98:	00e00300 	.word	0x00e00300
 8007a9c:	00600080 	.word	0x00600080
 8007aa0:	004000e0 	.word	0x004000e0
 8007aa4:	a3200008 	.word	0xa3200008

08007aa8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	68f9      	ldr	r1, [r7, #12]
 8007adc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d107      	bne.n	8007afa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007af0:	461a      	mov	r2, r3
 8007af2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007af6:	6053      	str	r3, [r2, #4]
 8007af8:	e009      	b.n	8007b0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d106      	bne.n	8007b0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b06:	461a      	mov	r2, r3
 8007b08:	f241 7370 	movw	r3, #6000	; 0x1770
 8007b0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007b4c:	2064      	movs	r0, #100	; 0x64
 8007b4e:	f7fa f829 	bl	8001ba4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007b60:	200a      	movs	r0, #10
 8007b62:	f7fa f81f 	bl	8001ba4 <HAL_Delay>

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <USB_DriveVbus+0x44>
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d106      	bne.n	8007bb4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bb2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbe:	d109      	bne.n	8007bd4 <USB_DriveVbus+0x64>
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bd2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	0c5b      	lsrs	r3, r3, #17
 8007c00:	f003 0303 	and.w	r3, r3, #3
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	b29b      	uxth	r3, r3
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	4611      	mov	r1, r2
 8007c40:	461a      	mov	r2, r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	70fb      	strb	r3, [r7, #3]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70bb      	strb	r3, [r7, #2]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c62:	461a      	mov	r2, r3
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295
 8007c68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d87e      	bhi.n	8007d70 <USB_HC_Init+0x13c>
 8007c72:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <USB_HC_Init+0x44>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007c89 	.word	0x08007c89
 8007c7c:	08007d33 	.word	0x08007d33
 8007c80:	08007c89 	.word	0x08007c89
 8007c84:	08007cf5 	.word	0x08007cf5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c94:	461a      	mov	r2, r3
 8007c96:	f240 439d 	movw	r3, #1181	; 0x49d
 8007c9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	da10      	bge.n	8007cc6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	0151      	lsls	r1, r2, #5
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	440a      	add	r2, r1
 8007cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007cc4:	e057      	b.n	8007d76 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d051      	beq.n	8007d76 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	0151      	lsls	r1, r2, #5
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007cf0:	60d3      	str	r3, [r2, #12]
      break;
 8007cf2:	e040      	b.n	8007d76 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d00:	461a      	mov	r2, r3
 8007d02:	f240 639d 	movw	r3, #1693	; 0x69d
 8007d06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007d08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	da34      	bge.n	8007d7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	78fa      	ldrb	r2, [r7, #3]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007d30:	e023      	b.n	8007d7a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f240 2325 	movw	r3, #549	; 0x225
 8007d44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007d46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da17      	bge.n	8007d7e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007d6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007d6e:	e006      	b.n	8007d7e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
      break;
 8007d74:	e004      	b.n	8007d80 <USB_HC_Init+0x14c>
      break;
 8007d76:	bf00      	nop
 8007d78:	e002      	b.n	8007d80 <USB_HC_Init+0x14c>
      break;
 8007d7a:	bf00      	nop
 8007d7c:	e000      	b.n	8007d80 <USB_HC_Init+0x14c>
      break;
 8007d7e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d86:	699a      	ldr	r2, [r3, #24]
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	2101      	movs	r1, #1
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007daa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	da03      	bge.n	8007dba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db6:	613b      	str	r3, [r7, #16]
 8007db8:	e001      	b.n	8007dbe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007dbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d103      	bne.n	8007dce <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	e001      	b.n	8007dd2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007dd2:	787b      	ldrb	r3, [r7, #1]
 8007dd4:	059b      	lsls	r3, r3, #22
 8007dd6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007dda:	78bb      	ldrb	r3, [r7, #2]
 8007ddc:	02db      	lsls	r3, r3, #11
 8007dde:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007de2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007de4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007de8:	049b      	lsls	r3, r3, #18
 8007dea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007dee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007df0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007df6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	0159      	lsls	r1, r3, #5
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	440b      	add	r3, r1
 8007e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e08:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e0e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007e10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d10f      	bne.n	8007e38 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	78fa      	ldrb	r2, [r7, #3]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e36:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop

08007e48 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08c      	sub	sp, #48	; 0x30
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e64:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d028      	beq.n	8007ec4 <USB_HC_StartXfer+0x7c>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	791b      	ldrb	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d124      	bne.n	8007ec4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <USB_HC_StartXfer+0x50>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	795b      	ldrb	r3, [r3, #5]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d107      	bne.n	8007e98 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 fa2e 	bl	80082f0 <USB_DoPing>
      return HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e113      	b.n	80080c0 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d112      	bne.n	8007ec4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	6a3a      	ldr	r2, [r7, #32]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007ebc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d018      	beq.n	8007efe <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	8912      	ldrh	r2, [r2, #8]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	8912      	ldrh	r2, [r2, #8]
 8007edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007ee2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ee4:	8b7b      	ldrh	r3, [r7, #26]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d90b      	bls.n	8007f02 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007eea:	8b7b      	ldrh	r3, [r7, #26]
 8007eec:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007eee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	8912      	ldrh	r2, [r2, #8]
 8007ef4:	fb02 f203 	mul.w	r2, r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	611a      	str	r2, [r3, #16]
 8007efc:	e001      	b.n	8007f02 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007efe:	2301      	movs	r3, #1
 8007f00:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	78db      	ldrb	r3, [r3, #3]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d006      	beq.n	8007f18 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007f0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	8912      	ldrh	r2, [r2, #8]
 8007f10:	fb02 f203 	mul.w	r2, r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f22:	04d9      	lsls	r1, r3, #19
 8007f24:	4b68      	ldr	r3, [pc, #416]	; (80080c8 <USB_HC_StartXfer+0x280>)
 8007f26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	7a9b      	ldrb	r3, [r3, #10]
 8007f2e:	075b      	lsls	r3, r3, #29
 8007f30:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f34:	69f9      	ldr	r1, [r7, #28]
 8007f36:	0148      	lsls	r0, r1, #5
 8007f38:	6a39      	ldr	r1, [r7, #32]
 8007f3a:	4401      	add	r1, r0
 8007f3c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	68d9      	ldr	r1, [r3, #12]
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f5a:	460a      	mov	r2, r1
 8007f5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf0c      	ite	eq
 8007f6e:	2301      	moveq	r3, #1
 8007f70:	2300      	movne	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	6a3a      	ldr	r2, [r7, #32]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	7e7b      	ldrb	r3, [r7, #25]
 8007fa6:	075b      	lsls	r3, r3, #29
 8007fa8:	69f9      	ldr	r1, [r7, #28]
 8007faa:	0148      	lsls	r0, r1, #5
 8007fac:	6a39      	ldr	r1, [r7, #32]
 8007fae:	4401      	add	r1, r0
 8007fb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a41      	ldr	r2, [pc, #260]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007fc8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fca:	4b40      	ldr	r3, [pc, #256]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fd2:	4a3e      	ldr	r2, [pc, #248]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007fd4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	78db      	ldrb	r3, [r3, #3]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d006      	beq.n	8007fec <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007fde:	4b3b      	ldr	r3, [pc, #236]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe6:	4a39      	ldr	r2, [pc, #228]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e005      	b.n	8007ff8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007fec:	4b37      	ldr	r3, [pc, #220]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ff4:	4a35      	ldr	r2, [pc, #212]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007ff6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ff8:	4b34      	ldr	r3, [pc, #208]	; (80080cc <USB_HC_StartXfer+0x284>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008000:	4a32      	ldr	r2, [pc, #200]	; (80080cc <USB_HC_StartXfer+0x284>)
 8008002:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	4413      	add	r3, r2
 800800c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008010:	461a      	mov	r2, r3
 8008012:	4b2e      	ldr	r3, [pc, #184]	; (80080cc <USB_HC_StartXfer+0x284>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	e04e      	b.n	80080c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	78db      	ldrb	r3, [r3, #3]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d149      	bne.n	80080be <USB_HC_StartXfer+0x276>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d045      	beq.n	80080be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	79db      	ldrb	r3, [r3, #7]
 8008036:	2b03      	cmp	r3, #3
 8008038:	d830      	bhi.n	800809c <USB_HC_StartXfer+0x254>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USB_HC_StartXfer+0x1f8>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008051 	.word	0x08008051
 8008044:	08008075 	.word	0x08008075
 8008048:	08008051 	.word	0x08008051
 800804c:	08008075 	.word	0x08008075
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	3303      	adds	r3, #3
 8008056:	089b      	lsrs	r3, r3, #2
 8008058:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800805a:	8afa      	ldrh	r2, [r7, #22]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	b29b      	uxth	r3, r3
 8008062:	429a      	cmp	r2, r3
 8008064:	d91c      	bls.n	80080a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f043 0220 	orr.w	r2, r3, #32
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	619a      	str	r2, [r3, #24]
        }
        break;
 8008072:	e015      	b.n	80080a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	3303      	adds	r3, #3
 800807a:	089b      	lsrs	r3, r3, #2
 800807c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800807e:	8afa      	ldrh	r2, [r7, #22]
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	b29b      	uxth	r3, r3
 800808a:	429a      	cmp	r2, r3
 800808c:	d90a      	bls.n	80080a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	619a      	str	r2, [r3, #24]
        }
        break;
 800809a:	e003      	b.n	80080a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800809c:	bf00      	nop
 800809e:	e002      	b.n	80080a6 <USB_HC_StartXfer+0x25e>
        break;
 80080a0:	bf00      	nop
 80080a2:	e000      	b.n	80080a6 <USB_HC_StartXfer+0x25e>
        break;
 80080a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	68d9      	ldr	r1, [r3, #12]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	785a      	ldrb	r2, [r3, #1]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2000      	movs	r0, #0
 80080b6:	9000      	str	r0, [sp, #0]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fb85 	bl	80077c8 <USB_WritePacket>
  }

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3728      	adds	r7, #40	; 0x28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	1ff80000 	.word	0x1ff80000
 80080cc:	200000b8 	.word	0x200000b8

080080d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	b29b      	uxth	r3, r3
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b087      	sub	sp, #28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4413      	add	r3, r2
 8008112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	0c9b      	lsrs	r3, r3, #18
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <USB_HC_Halt+0x3a>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d16c      	bne.n	8008206 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4413      	add	r3, r2
 8008134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	440a      	add	r2, r1
 8008142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800814a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d143      	bne.n	80081e0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	4413      	add	r3, r2
 8008160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	440a      	add	r2, r1
 800816e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008172:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008176:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	440a      	add	r2, r1
 800818e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008196:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081b6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	3301      	adds	r3, #1
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081c4:	d81d      	bhi.n	8008202 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081dc:	d0ec      	beq.n	80081b8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80081de:	e080      	b.n	80082e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	0151      	lsls	r1, r2, #5
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	440a      	add	r2, r1
 80081f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081fe:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008200:	e06f      	b.n	80082e2 <USB_HC_Halt+0x1f0>
          break;
 8008202:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008204:	e06d      	b.n	80082e2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	440a      	add	r2, r1
 800821c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008224:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d143      	bne.n	80082be <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4413      	add	r3, r2
 800823e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	0151      	lsls	r1, r2, #5
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	440a      	add	r2, r1
 800824c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008254:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	440a      	add	r2, r1
 800826c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008274:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	4413      	add	r3, r2
 800827e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	440a      	add	r2, r1
 800828c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008294:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	3301      	adds	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082a2:	d81d      	bhi.n	80082e0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082ba:	d0ec      	beq.n	8008296 <USB_HC_Halt+0x1a4>
 80082bc:	e011      	b.n	80082e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	e000      	b.n	80082e2 <USB_HC_Halt+0x1f0>
          break;
 80082e0:	bf00      	nop
    }
  }

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008304:	2301      	movs	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	04da      	lsls	r2, r3, #19
 800830c:	4b15      	ldr	r3, [pc, #84]	; (8008364 <USB_DoPing+0x74>)
 800830e:	4013      	ands	r3, r2
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	440a      	add	r2, r1
 8008318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800831c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008320:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	4413      	add	r3, r2
 800832a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008338:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008340:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	4413      	add	r3, r2
 800834a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834e:	461a      	mov	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	1ff80000 	.word	0x1ff80000

08008368 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff f9a1 	bl	80076c0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800837e:	2110      	movs	r1, #16
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff f9d9 	bl	8007738 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff f9fc 	bl	8007784 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	e01f      	b.n	80083d2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c6:	461a      	mov	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	3301      	adds	r3, #1
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b0f      	cmp	r3, #15
 80083d6:	d9dc      	bls.n	8008392 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80083d8:	2300      	movs	r3, #0
 80083da:	613b      	str	r3, [r7, #16]
 80083dc:	e034      	b.n	8008448 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008404:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008412:	461a      	mov	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	3301      	adds	r3, #1
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008424:	d80c      	bhi.n	8008440 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4413      	add	r3, r2
 800842e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800843c:	d0ec      	beq.n	8008418 <USB_StopHost+0xb0>
 800843e:	e000      	b.n	8008442 <USB_StopHost+0xda>
        break;
 8008440:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3301      	adds	r3, #1
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b0f      	cmp	r3, #15
 800844c:	d9c7      	bls.n	80083de <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008454:	461a      	mov	r2, r3
 8008456:	f04f 33ff 	mov.w	r3, #4294967295
 800845a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff f91a 	bl	800769e <USB_EnableGlobalInt>

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008474:	b590      	push	{r4, r7, lr}
 8008476:	b089      	sub	sp, #36	; 0x24
 8008478:	af04      	add	r7, sp, #16
 800847a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800847c:	2301      	movs	r3, #1
 800847e:	2202      	movs	r2, #2
 8008480:	2102      	movs	r1, #2
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fcb2 	bl	8008dec <USBH_FindInterface>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d002      	beq.n	8008498 <USBH_CDC_InterfaceInit+0x24>
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d901      	bls.n	800849c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008498:	2302      	movs	r3, #2
 800849a:	e13d      	b.n	8008718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fc87 	bl	8008db4 <USBH_SelectInterface>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80084b0:	2302      	movs	r3, #2
 80084b2:	e131      	b.n	8008718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80084ba:	2050      	movs	r0, #80	; 0x50
 80084bc:	f005 fd6c 	bl	800df98 <malloc>
 80084c0:	4603      	mov	r3, r0
 80084c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80084d4:	2302      	movs	r3, #2
 80084d6:	e11f      	b.n	8008718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80084d8:	2250      	movs	r2, #80	; 0x50
 80084da:	2100      	movs	r1, #0
 80084dc:	68b8      	ldr	r0, [r7, #8]
 80084de:	f005 fd79 	bl	800dfd4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	211a      	movs	r1, #26
 80084e8:	fb01 f303 	mul.w	r3, r1, r3
 80084ec:	4413      	add	r3, r2
 80084ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da15      	bge.n	8008526 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	211a      	movs	r1, #26
 8008500:	fb01 f303 	mul.w	r3, r1, r3
 8008504:	4413      	add	r3, r2
 8008506:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800850a:	781a      	ldrb	r2, [r3, #0]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	211a      	movs	r1, #26
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	4413      	add	r3, r2
 800851c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008520:	881a      	ldrh	r2, [r3, #0]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f002 f88c 	bl	800a64a <USBH_AllocPipe>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	7819      	ldrb	r1, [r3, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	7858      	ldrb	r0, [r3, #1]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	8952      	ldrh	r2, [r2, #10]
 8008552:	9202      	str	r2, [sp, #8]
 8008554:	2203      	movs	r2, #3
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4623      	mov	r3, r4
 800855c:	4602      	mov	r2, r0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f002 f844 	bl	800a5ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2200      	movs	r2, #0
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f005 fc5b 	bl	800de28 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008572:	2300      	movs	r3, #0
 8008574:	2200      	movs	r2, #0
 8008576:	210a      	movs	r1, #10
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc37 	bl	8008dec <USBH_FindInterface>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2bff      	cmp	r3, #255	; 0xff
 8008586:	d002      	beq.n	800858e <USBH_CDC_InterfaceInit+0x11a>
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d901      	bls.n	8008592 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800858e:	2302      	movs	r3, #2
 8008590:	e0c2      	b.n	8008718 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	211a      	movs	r1, #26
 8008598:	fb01 f303 	mul.w	r3, r1, r3
 800859c:	4413      	add	r3, r2
 800859e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	b25b      	sxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	da16      	bge.n	80085d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	211a      	movs	r1, #26
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	4413      	add	r3, r2
 80085b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	211a      	movs	r1, #26
 80085c6:	fb01 f303 	mul.w	r3, r1, r3
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085d0:	881a      	ldrh	r2, [r3, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	835a      	strh	r2, [r3, #26]
 80085d6:	e015      	b.n	8008604 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	211a      	movs	r1, #26
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	211a      	movs	r1, #26
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085fe:	881a      	ldrh	r2, [r3, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	211a      	movs	r1, #26
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	4413      	add	r3, r2
 8008610:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	b25b      	sxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	da16      	bge.n	800864a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	211a      	movs	r1, #26
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	4413      	add	r3, r2
 8008628:	f203 3356 	addw	r3, r3, #854	; 0x356
 800862c:	781a      	ldrb	r2, [r3, #0]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	211a      	movs	r1, #26
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	4413      	add	r3, r2
 800863e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008642:	881a      	ldrh	r2, [r3, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	835a      	strh	r2, [r3, #26]
 8008648:	e015      	b.n	8008676 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	211a      	movs	r1, #26
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	4413      	add	r3, r2
 8008656:	f203 3356 	addw	r3, r3, #854	; 0x356
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	211a      	movs	r1, #26
 8008666:	fb01 f303 	mul.w	r3, r1, r3
 800866a:	4413      	add	r3, r2
 800866c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008670:	881a      	ldrh	r2, [r3, #0]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	7b9b      	ldrb	r3, [r3, #14]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 ffe4 	bl	800a64a <USBH_AllocPipe>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	7bdb      	ldrb	r3, [r3, #15]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 ffda 	bl	800a64a <USBH_AllocPipe>
 8008696:	4603      	mov	r3, r0
 8008698:	461a      	mov	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	7b59      	ldrb	r1, [r3, #13]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	7b98      	ldrb	r0, [r3, #14]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	8b12      	ldrh	r2, [r2, #24]
 80086b6:	9202      	str	r2, [sp, #8]
 80086b8:	2202      	movs	r2, #2
 80086ba:	9201      	str	r2, [sp, #4]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4623      	mov	r3, r4
 80086c0:	4602      	mov	r2, r0
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 ff92 	bl	800a5ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	7b19      	ldrb	r1, [r3, #12]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	7bd8      	ldrb	r0, [r3, #15]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	8b52      	ldrh	r2, [r2, #26]
 80086e0:	9202      	str	r2, [sp, #8]
 80086e2:	2202      	movs	r2, #2
 80086e4:	9201      	str	r2, [sp, #4]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	4623      	mov	r3, r4
 80086ea:	4602      	mov	r2, r0
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 ff7d 	bl	800a5ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	7b5b      	ldrb	r3, [r3, #13]
 80086fe:	2200      	movs	r2, #0
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f005 fb90 	bl	800de28 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	7b1b      	ldrb	r3, [r3, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f005 fb89 	bl	800de28 <USBH_LL_SetToggle>

  return USBH_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bd90      	pop	{r4, r7, pc}

08008720 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00e      	beq.n	8008758 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 ff72 	bl	800a62a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 ff9d 	bl	800a68c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	7b1b      	ldrb	r3, [r3, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00e      	beq.n	800877e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	7b1b      	ldrb	r3, [r3, #12]
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 ff5f 	bl	800a62a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	7b1b      	ldrb	r3, [r3, #12]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 ff8a 	bl	800a68c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	7b5b      	ldrb	r3, [r3, #13]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	7b5b      	ldrb	r3, [r3, #13]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 ff4c 	bl	800a62a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	7b5b      	ldrb	r3, [r3, #13]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 ff77 	bl	800a68c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f005 fbf5 	bl	800dfa8 <free>
    phost->pActiveClass->pData = 0U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087c4:	2200      	movs	r2, #0
 80087c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3340      	adds	r3, #64	; 0x40
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8b1 	bl	8008952 <GetLineCoding>
 80087f0:	4603      	mov	r3, r0
 80087f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d105      	bne.n	8008806 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008800:	2102      	movs	r1, #2
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008806:	7afb      	ldrb	r3, [r7, #11]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008830:	2b04      	cmp	r3, #4
 8008832:	d877      	bhi.n	8008924 <USBH_CDC_Process+0x114>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <USBH_CDC_Process+0x2c>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008851 	.word	0x08008851
 8008840:	08008857 	.word	0x08008857
 8008844:	08008887 	.word	0x08008887
 8008848:	080088fb 	.word	0x080088fb
 800884c:	08008909 	.word	0x08008909
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
      break;
 8008854:	e06d      	b.n	8008932 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f897 	bl	8008990 <SetLineCoding>
 8008862:	4603      	mov	r3, r0
 8008864:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d104      	bne.n	8008876 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008874:	e058      	b.n	8008928 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d055      	beq.n	8008928 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2204      	movs	r2, #4
 8008880:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008884:	e050      	b.n	8008928 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	3340      	adds	r3, #64	; 0x40
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f860 	bl	8008952 <GetLineCoding>
 8008892:	4603      	mov	r3, r0
 8008894:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d126      	bne.n	80088ea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ae:	791b      	ldrb	r3, [r3, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d13b      	bne.n	800892c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088be:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d133      	bne.n	800892c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d12b      	bne.n	800892c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088dc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088de:	429a      	cmp	r2, r3
 80088e0:	d124      	bne.n	800892c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f982 	bl	8008bec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80088e8:	e020      	b.n	800892c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d01d      	beq.n	800892c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2204      	movs	r2, #4
 80088f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80088f8:	e018      	b.n	800892c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f867 	bl	80089ce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f8f6 	bl	8008af2 <CDC_ProcessReception>
      break;
 8008906:	e014      	b.n	8008932 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 f94d 	bl	8009baa <USBH_ClrFeature>
 8008910:	4603      	mov	r3, r0
 8008912:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008922:	e005      	b.n	8008930 <USBH_CDC_Process+0x120>

    default:
      break;
 8008924:	bf00      	nop
 8008926:	e004      	b.n	8008932 <USBH_CDC_Process+0x122>
      break;
 8008928:	bf00      	nop
 800892a:	e002      	b.n	8008932 <USBH_CDC_Process+0x122>
      break;
 800892c:	bf00      	nop
 800892e:	e000      	b.n	8008932 <USBH_CDC_Process+0x122>
      break;
 8008930:	bf00      	nop

  }

  return status;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	22a1      	movs	r2, #161	; 0xa1
 8008960:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2221      	movs	r2, #33	; 0x21
 8008966:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2207      	movs	r2, #7
 8008978:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2207      	movs	r2, #7
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 faf2 	bl	8009f6a <USBH_CtlReq>
 8008986:	4603      	mov	r3, r0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2221      	movs	r2, #33	; 0x21
 800899e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2220      	movs	r2, #32
 80089a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2207      	movs	r2, #7
 80089b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2207      	movs	r2, #7
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fad3 	bl	8009f6a <USBH_CtlReq>
 80089c4:	4603      	mov	r3, r0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b086      	sub	sp, #24
 80089d2:	af02      	add	r7, sp, #8
 80089d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d002      	beq.n	80089f4 <CDC_ProcessTransmission+0x26>
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d023      	beq.n	8008a3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80089f2:	e07a      	b.n	8008aea <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	8b12      	ldrh	r2, [r2, #24]
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d90b      	bls.n	8008a18 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	69d9      	ldr	r1, [r3, #28]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8b1a      	ldrh	r2, [r3, #24]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	7b5b      	ldrb	r3, [r3, #13]
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	9000      	str	r0, [sp, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 fda8 	bl	800a566 <USBH_BulkSendData>
 8008a16:	e00b      	b.n	8008a30 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	7b5b      	ldrb	r3, [r3, #13]
 8008a26:	2001      	movs	r0, #1
 8008a28:	9000      	str	r0, [sp, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 fd9b 	bl	800a566 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a38:	e057      	b.n	8008aea <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	7b5b      	ldrb	r3, [r3, #13]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f005 f9c7 	bl	800ddd4 <USBH_LL_GetURBState>
 8008a46:	4603      	mov	r3, r0
 8008a48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008a4a:	7afb      	ldrb	r3, [r7, #11]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d136      	bne.n	8008abe <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	8b12      	ldrh	r2, [r2, #24]
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d90e      	bls.n	8008a7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	8b12      	ldrh	r2, [r2, #24]
 8008a64:	1a9a      	subs	r2, r3, r2
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	8b12      	ldrh	r2, [r2, #24]
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	61da      	str	r2, [r3, #28]
 8008a78:	e002      	b.n	8008a80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008a90:	e006      	b.n	8008aa0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f892 	bl	8008bc4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f002 f892 	bl	800abe0 <osMessageQueuePut>
      break;
 8008abc:	e014      	b.n	8008ae8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d111      	bne.n	8008ae8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f002 f87c 	bl	800abe0 <osMessageQueuePut>
      break;
 8008ae8:	bf00      	nop
  }
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d002      	beq.n	8008b18 <CDC_ProcessReception+0x26>
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d00e      	beq.n	8008b34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008b16:	e051      	b.n	8008bbc <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	6a19      	ldr	r1, [r3, #32]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	8b5a      	ldrh	r2, [r3, #26]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	7b1b      	ldrb	r3, [r3, #12]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 fd43 	bl	800a5b0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008b32:	e043      	b.n	8008bbc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	7b1b      	ldrb	r3, [r3, #12]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f005 f94a 	bl	800ddd4 <USBH_LL_GetURBState>
 8008b40:	4603      	mov	r3, r0
 8008b42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008b44:	7cfb      	ldrb	r3, [r7, #19]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d137      	bne.n	8008bba <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	7b1b      	ldrb	r3, [r3, #12]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f005 f8ad 	bl	800dcb0 <USBH_LL_GetLastXferSize>
 8008b56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d016      	beq.n	8008b90 <CDC_ProcessReception+0x9e>
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	8b5b      	ldrh	r3, [r3, #26]
 8008b66:	461a      	mov	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d910      	bls.n	8008b90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad2      	subs	r2, r2, r3
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6a1a      	ldr	r2, [r3, #32]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	441a      	add	r2, r3
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2203      	movs	r2, #3
 8008b8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008b8e:	e006      	b.n	8008b9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f81d 	bl	8008bd8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f002 f813 	bl	800abe0 <osMessageQueuePut>
      break;
 8008bba:	bf00      	nop
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008c14:	2302      	movs	r3, #2
 8008c16:	e044      	b.n	8008ca2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	79fa      	ldrb	r2, [r7, #7]
 8008c1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f841 	bl	8008cb8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8008c64:	2200      	movs	r2, #0
 8008c66:	2104      	movs	r1, #4
 8008c68:	2010      	movs	r0, #16
 8008c6a:	f001 ff33 	bl	800aad4 <osMessageQueueNew>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8008c76:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <USBH_Init+0xac>)
 8008c78:	4a0d      	ldr	r2, [pc, #52]	; (8008cb0 <USBH_Init+0xb0>)
 8008c7a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <USBH_Init+0xac>)
 8008c7e:	2280      	movs	r2, #128	; 0x80
 8008c80:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8008c82:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <USBH_Init+0xac>)
 8008c84:	2218      	movs	r2, #24
 8008c86:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008c88:	4a08      	ldr	r2, [pc, #32]	; (8008cac <USBH_Init+0xac>)
 8008c8a:	68f9      	ldr	r1, [r7, #12]
 8008c8c:	4809      	ldr	r0, [pc, #36]	; (8008cb4 <USBH_Init+0xb4>)
 8008c8e:	f001 fdb1 	bl	800a7f4 <osThreadNew>
 8008c92:	4602      	mov	r2, r0
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f004 ff54 	bl	800db48 <USBH_LL_Init>

  return USBH_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20004c9c 	.word	0x20004c9c
 8008cb0:	0800e234 	.word	0x0800e234
 8008cb4:	08009921 	.word	0x08009921

08008cb8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e009      	b.n	8008cde <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	33e0      	adds	r3, #224	; 0xe0
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b0e      	cmp	r3, #14
 8008ce2:	d9f2      	bls.n	8008cca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e009      	b.n	8008cfe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d04:	d3f1      	bcc.n	8008cea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2240      	movs	r2, #64	; 0x40
 8008d2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d016      	beq.n	8008da2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10e      	bne.n	8008d9c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d84:	1c59      	adds	r1, r3, #1
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	33de      	adds	r3, #222	; 0xde
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
 8008d9a:	e004      	b.n	8008da6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	e001      	b.n	8008da6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008da2:	2302      	movs	r3, #2
 8008da4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d204      	bcs.n	8008dda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008dd8:	e001      	b.n	8008dde <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	70fb      	strb	r3, [r7, #3]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	70bb      	strb	r3, [r7, #2]
 8008e02:	4613      	mov	r3, r2
 8008e04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e16:	e025      	b.n	8008e64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	221a      	movs	r2, #26
 8008e1c:	fb02 f303 	mul.w	r3, r2, r3
 8008e20:	3308      	adds	r3, #8
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	4413      	add	r3, r2
 8008e26:	3302      	adds	r3, #2
 8008e28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	795b      	ldrb	r3, [r3, #5]
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d002      	beq.n	8008e3a <USBH_FindInterface+0x4e>
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	2bff      	cmp	r3, #255	; 0xff
 8008e38:	d111      	bne.n	8008e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e3e:	78ba      	ldrb	r2, [r7, #2]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d002      	beq.n	8008e4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e44:	78bb      	ldrb	r3, [r7, #2]
 8008e46:	2bff      	cmp	r3, #255	; 0xff
 8008e48:	d109      	bne.n	8008e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e4e:	787a      	ldrb	r2, [r7, #1]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d002      	beq.n	8008e5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e54:	787b      	ldrb	r3, [r7, #1]
 8008e56:	2bff      	cmp	r3, #255	; 0xff
 8008e58:	d101      	bne.n	8008e5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	e006      	b.n	8008e6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	3301      	adds	r3, #1
 8008e62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d9d6      	bls.n	8008e18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008e6a:	23ff      	movs	r3, #255	; 0xff
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f004 fe9d 	bl	800dbc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008e86:	2101      	movs	r1, #1
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f004 ffb6 	bl	800ddfa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af04      	add	r7, sp, #16
 8008e9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d102      	bne.n	8008eba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2203      	movs	r2, #3
 8008eb8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b0b      	cmp	r3, #11
 8008ec2:	f200 823c 	bhi.w	800933e <USBH_Process+0x4a6>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <USBH_Process+0x34>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008efd 	.word	0x08008efd
 8008ed0:	08008f4b 	.word	0x08008f4b
 8008ed4:	08008fcf 	.word	0x08008fcf
 8008ed8:	080092bd 	.word	0x080092bd
 8008edc:	0800933f 	.word	0x0800933f
 8008ee0:	0800908f 	.word	0x0800908f
 8008ee4:	08009247 	.word	0x08009247
 8008ee8:	080090e1 	.word	0x080090e1
 8008eec:	0800911d 	.word	0x0800911d
 8008ef0:	08009157 	.word	0x08009157
 8008ef4:	0800919f 	.word	0x0800919f
 8008ef8:	080092a5 	.word	0x080092a5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 821c 	beq.w	8009342 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008f10:	20c8      	movs	r0, #200	; 0xc8
 8008f12:	f004 ffbc 	bl	800de8e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f004 feaf 	bl	800dc7a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f40:	2300      	movs	r3, #0
 8008f42:	2200      	movs	r2, #0
 8008f44:	f001 fe4c 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008f48:	e1fb      	b.n	8009342 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d107      	bne.n	8008f64 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e025      	b.n	8008fb0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f6e:	d914      	bls.n	8008f9a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f76:	3301      	adds	r3, #1
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d903      	bls.n	8008f92 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	220d      	movs	r2, #13
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	e00e      	b.n	8008fb0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e00a      	b.n	8008fb0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008fa0:	f103 020a 	add.w	r2, r3, #10
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008faa:	200a      	movs	r0, #10
 8008fac:	f004 ff6f 	bl	800de8e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f001 fe0a 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      break;
 8008fcc:	e1c0      	b.n	8009350 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fde:	2104      	movs	r1, #4
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008fe4:	2064      	movs	r0, #100	; 0x64
 8008fe6:	f004 ff52 	bl	800de8e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f004 fe1e 	bl	800dc2c <USBH_LL_GetSpeed>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2205      	movs	r2, #5
 8008ffe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 fb21 	bl	800a64a <USBH_AllocPipe>
 8009008:	4603      	mov	r3, r0
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009010:	2180      	movs	r1, #128	; 0x80
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fb19 	bl	800a64a <USBH_AllocPipe>
 8009018:	4603      	mov	r3, r0
 800901a:	461a      	mov	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	7919      	ldrb	r1, [r3, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009034:	b292      	uxth	r2, r2
 8009036:	9202      	str	r2, [sp, #8]
 8009038:	2200      	movs	r2, #0
 800903a:	9201      	str	r2, [sp, #4]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	4603      	mov	r3, r0
 8009040:	2280      	movs	r2, #128	; 0x80
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fad2 	bl	800a5ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7959      	ldrb	r1, [r3, #5]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800905c:	b292      	uxth	r2, r2
 800905e:	9202      	str	r2, [sp, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	9201      	str	r2, [sp, #4]
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	4603      	mov	r3, r0
 8009068:	2200      	movs	r2, #0
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 fabe 	bl	800a5ec <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009084:	2300      	movs	r3, #0
 8009086:	2200      	movs	r2, #0
 8009088:	f001 fdaa 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      break;
 800908c:	e160      	b.n	8009350 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f964 	bl	800935c <USBH_HandleEnum>
 8009094:	4603      	mov	r3, r0
 8009096:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	f040 8152 	bne.w	8009346 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d103      	bne.n	80090bc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2208      	movs	r2, #8
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	e002      	b.n	80090c2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2207      	movs	r2, #7
 80090c0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2205      	movs	r2, #5
 80090c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090d6:	2300      	movs	r3, #0
 80090d8:	2200      	movs	r2, #0
 80090da:	f001 fd81 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80090de:	e132      	b.n	8009346 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 812f 	beq.w	800934a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090f2:	2101      	movs	r1, #1
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2208      	movs	r2, #8
 80090fc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2205      	movs	r2, #5
 8009102:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009112:	2300      	movs	r3, #0
 8009114:	2200      	movs	r2, #0
 8009116:	f001 fd63 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800911a:	e116      	b.n	800934a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009122:	b29b      	uxth	r3, r3
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fcf8 	bl	8009b1c <USBH_SetCfg>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2209      	movs	r2, #9
 8009136:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800914c:	2300      	movs	r3, #0
 800914e:	2200      	movs	r2, #0
 8009150:	f001 fd46 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      break;
 8009154:	e0fc      	b.n	8009350 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009164:	2101      	movs	r1, #1
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fcfb 	bl	8009b62 <USBH_SetFeature>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d106      	bne.n	8009180 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	220a      	movs	r2, #10
 8009176:	701a      	strb	r2, [r3, #0]
 8009178:	e002      	b.n	8009180 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	220a      	movs	r2, #10
 800917e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009194:	2300      	movs	r3, #0
 8009196:	2200      	movs	r2, #0
 8009198:	f001 fd22 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      break;
 800919c:	e0d8      	b.n	8009350 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d03f      	beq.n	8009228 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
 80091b4:	e016      	b.n	80091e4 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80091b6:	7bfa      	ldrb	r2, [r7, #15]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32de      	adds	r2, #222	; 0xde
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	791a      	ldrb	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d108      	bne.n	80091de <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80091cc:	7bfa      	ldrb	r2, [r7, #15]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	32de      	adds	r2, #222	; 0xde
 80091d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80091dc:	e005      	b.n	80091ea <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	3301      	adds	r3, #1
 80091e2:	73fb      	strb	r3, [r7, #15]
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0e5      	beq.n	80091b6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d016      	beq.n	8009222 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d109      	bne.n	800921a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2206      	movs	r2, #6
 800920a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009212:	2103      	movs	r1, #3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
 8009218:	e006      	b.n	8009228 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	220d      	movs	r2, #13
 800921e:	701a      	strb	r2, [r3, #0]
 8009220:	e002      	b.n	8009228 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	220d      	movs	r2, #13
 8009226:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2205      	movs	r2, #5
 800922c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	f001 fcce 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      break;
 8009244:	e084      	b.n	8009350 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d017      	beq.n	8009280 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
 800925c:	4603      	mov	r3, r0
 800925e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d103      	bne.n	8009270 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	220b      	movs	r2, #11
 800926c:	701a      	strb	r2, [r3, #0]
 800926e:	e00a      	b.n	8009286 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b02      	cmp	r3, #2
 8009276:	d106      	bne.n	8009286 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	220d      	movs	r2, #13
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	e002      	b.n	8009286 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	220d      	movs	r2, #13
 8009284:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2205      	movs	r2, #5
 800928a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800929a:	2300      	movs	r3, #0
 800929c:	2200      	movs	r2, #0
 800929e:	f001 fc9f 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      break;
 80092a2:	e055      	b.n	8009350 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d04f      	beq.n	800934e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
      }
      break;
 80092ba:	e048      	b.n	800934e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7ff fcf7 	bl	8008cb8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d009      	beq.n	80092e8 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092f8:	2105      	movs	r1, #5
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d107      	bne.n	800931a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff fdb0 	bl	8008e78 <USBH_Start>
 8009318:	e002      	b.n	8009320 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f004 fc50 	bl	800dbc0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009334:	2300      	movs	r3, #0
 8009336:	2200      	movs	r2, #0
 8009338:	f001 fc52 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      break;
 800933c:	e008      	b.n	8009350 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800933e:	bf00      	nop
 8009340:	e006      	b.n	8009350 <USBH_Process+0x4b8>
      break;
 8009342:	bf00      	nop
 8009344:	e004      	b.n	8009350 <USBH_Process+0x4b8>
      break;
 8009346:	bf00      	nop
 8009348:	e002      	b.n	8009350 <USBH_Process+0x4b8>
    break;
 800934a:	bf00      	nop
 800934c:	e000      	b.n	8009350 <USBH_Process+0x4b8>
      break;
 800934e:	bf00      	nop
  }
  return USBH_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop

0800935c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af04      	add	r7, sp, #16
 8009362:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009364:	2301      	movs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009368:	2301      	movs	r3, #1
 800936a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	785b      	ldrb	r3, [r3, #1]
 8009370:	2b07      	cmp	r3, #7
 8009372:	f200 8208 	bhi.w	8009786 <USBH_HandleEnum+0x42a>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <USBH_HandleEnum+0x20>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	0800939d 	.word	0x0800939d
 8009380:	0800945b 	.word	0x0800945b
 8009384:	080094c5 	.word	0x080094c5
 8009388:	08009553 	.word	0x08009553
 800938c:	080095bd 	.word	0x080095bd
 8009390:	0800962d 	.word	0x0800962d
 8009394:	080096c9 	.word	0x080096c9
 8009398:	08009747 	.word	0x08009747
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800939c:	2108      	movs	r1, #8
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 faec 	bl	800997c <USBH_Get_DevDesc>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d130      	bne.n	8009410 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7919      	ldrb	r1, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093d2:	b292      	uxth	r2, r2
 80093d4:	9202      	str	r2, [sp, #8]
 80093d6:	2200      	movs	r2, #0
 80093d8:	9201      	str	r2, [sp, #4]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	4603      	mov	r3, r0
 80093de:	2280      	movs	r2, #128	; 0x80
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f903 	bl	800a5ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	7959      	ldrb	r1, [r3, #5]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093fa:	b292      	uxth	r2, r2
 80093fc:	9202      	str	r2, [sp, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	9201      	str	r2, [sp, #4]
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	4603      	mov	r3, r0
 8009406:	2200      	movs	r2, #0
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 f8ef 	bl	800a5ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800940e:	e1bc      	b.n	800978a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b03      	cmp	r3, #3
 8009414:	f040 81b9 	bne.w	800978a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800941e:	3301      	adds	r3, #1
 8009420:	b2da      	uxtb	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800942e:	2b03      	cmp	r3, #3
 8009430:	d903      	bls.n	800943a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	220d      	movs	r2, #13
 8009436:	701a      	strb	r2, [r3, #0]
      break;
 8009438:	e1a7      	b.n	800978a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	795b      	ldrb	r3, [r3, #5]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 f923 	bl	800a68c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	791b      	ldrb	r3, [r3, #4]
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 f91d 	bl	800a68c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	701a      	strb	r2, [r3, #0]
      break;
 8009458:	e197      	b.n	800978a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800945a:	2112      	movs	r1, #18
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa8d 	bl	800997c <USBH_Get_DevDesc>
 8009462:	4603      	mov	r3, r0
 8009464:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009472:	e18c      	b.n	800978e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	2b03      	cmp	r3, #3
 8009478:	f040 8189 	bne.w	800978e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009482:	3301      	adds	r3, #1
 8009484:	b2da      	uxtb	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009492:	2b03      	cmp	r3, #3
 8009494:	d903      	bls.n	800949e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	220d      	movs	r2, #13
 800949a:	701a      	strb	r2, [r3, #0]
      break;
 800949c:	e177      	b.n	800978e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	795b      	ldrb	r3, [r3, #5]
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 f8f1 	bl	800a68c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	791b      	ldrb	r3, [r3, #4]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 f8eb 	bl	800a68c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]
      break;
 80094c2:	e164      	b.n	800978e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80094c4:	2101      	movs	r1, #1
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fb04 	bl	8009ad4 <USBH_SetAddress>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d132      	bne.n	800953c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80094d6:	2002      	movs	r0, #2
 80094d8:	f004 fcd9 	bl	800de8e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2203      	movs	r2, #3
 80094e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	7919      	ldrb	r1, [r3, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094fe:	b292      	uxth	r2, r2
 8009500:	9202      	str	r2, [sp, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	9201      	str	r2, [sp, #4]
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	2280      	movs	r2, #128	; 0x80
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 f86d 	bl	800a5ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7959      	ldrb	r1, [r3, #5]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009526:	b292      	uxth	r2, r2
 8009528:	9202      	str	r2, [sp, #8]
 800952a:	2200      	movs	r2, #0
 800952c:	9201      	str	r2, [sp, #4]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4603      	mov	r3, r0
 8009532:	2200      	movs	r2, #0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 f859 	bl	800a5ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800953a:	e12a      	b.n	8009792 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	2b03      	cmp	r3, #3
 8009540:	f040 8127 	bne.w	8009792 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	220d      	movs	r2, #13
 8009548:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	705a      	strb	r2, [r3, #1]
      break;
 8009550:	e11f      	b.n	8009792 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009552:	2109      	movs	r1, #9
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fa39 	bl	80099cc <USBH_Get_CfgDesc>
 800955a:	4603      	mov	r3, r0
 800955c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2204      	movs	r2, #4
 8009568:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800956a:	e114      	b.n	8009796 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b03      	cmp	r3, #3
 8009570:	f040 8111 	bne.w	8009796 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800957a:	3301      	adds	r3, #1
 800957c:	b2da      	uxtb	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800958a:	2b03      	cmp	r3, #3
 800958c:	d903      	bls.n	8009596 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	220d      	movs	r2, #13
 8009592:	701a      	strb	r2, [r3, #0]
      break;
 8009594:	e0ff      	b.n	8009796 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	795b      	ldrb	r3, [r3, #5]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 f875 	bl	800a68c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	791b      	ldrb	r3, [r3, #4]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 f86f 	bl	800a68c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	701a      	strb	r2, [r3, #0]
      break;
 80095ba:	e0ec      	b.n	8009796 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fa01 	bl	80099cc <USBH_Get_CfgDesc>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d103      	bne.n	80095dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2205      	movs	r2, #5
 80095d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095da:	e0de      	b.n	800979a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f040 80db 	bne.w	800979a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095ea:	3301      	adds	r3, #1
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d903      	bls.n	8009606 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	220d      	movs	r2, #13
 8009602:	701a      	strb	r2, [r3, #0]
      break;
 8009604:	e0c9      	b.n	800979a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	795b      	ldrb	r3, [r3, #5]
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 f83d 	bl	800a68c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	791b      	ldrb	r3, [r3, #4]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f837 	bl	800a68c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
      break;
 800962a:	e0b6      	b.n	800979a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009632:	2b00      	cmp	r3, #0
 8009634:	d036      	beq.n	80096a4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009642:	23ff      	movs	r3, #255	; 0xff
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f9e5 	bl	8009a14 <USBH_Get_StringDesc>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d111      	bne.n	8009678 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2206      	movs	r2, #6
 8009658:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2205      	movs	r2, #5
 800965e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800966e:	2300      	movs	r3, #0
 8009670:	2200      	movs	r2, #0
 8009672:	f001 fab5 	bl	800abe0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009676:	e092      	b.n	800979e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b03      	cmp	r3, #3
 800967c:	f040 808f 	bne.w	800979e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2206      	movs	r2, #6
 8009684:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2205      	movs	r2, #5
 800968a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800969a:	2300      	movs	r3, #0
 800969c:	2200      	movs	r2, #0
 800969e:	f001 fa9f 	bl	800abe0 <osMessageQueuePut>
      break;
 80096a2:	e07c      	b.n	800979e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2206      	movs	r2, #6
 80096a8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2205      	movs	r2, #5
 80096ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80096be:	2300      	movs	r3, #0
 80096c0:	2200      	movs	r2, #0
 80096c2:	f001 fa8d 	bl	800abe0 <osMessageQueuePut>
      break;
 80096c6:	e06a      	b.n	800979e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d027      	beq.n	8009722 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096de:	23ff      	movs	r3, #255	; 0xff
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f997 	bl	8009a14 <USBH_Get_StringDesc>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d103      	bne.n	80096f8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2207      	movs	r2, #7
 80096f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80096f6:	e054      	b.n	80097a2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d151      	bne.n	80097a2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2207      	movs	r2, #7
 8009702:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2205      	movs	r2, #5
 8009708:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009718:	2300      	movs	r3, #0
 800971a:	2200      	movs	r2, #0
 800971c:	f001 fa60 	bl	800abe0 <osMessageQueuePut>
      break;
 8009720:	e03f      	b.n	80097a2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2207      	movs	r2, #7
 8009726:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2205      	movs	r2, #5
 800972c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800973c:	2300      	movs	r3, #0
 800973e:	2200      	movs	r2, #0
 8009740:	f001 fa4e 	bl	800abe0 <osMessageQueuePut>
      break;
 8009744:	e02d      	b.n	80097a2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800974c:	2b00      	cmp	r3, #0
 800974e:	d017      	beq.n	8009780 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800975c:	23ff      	movs	r3, #255	; 0xff
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f958 	bl	8009a14 <USBH_Get_StringDesc>
 8009764:	4603      	mov	r3, r0
 8009766:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d102      	bne.n	8009774 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009772:	e018      	b.n	80097a6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b03      	cmp	r3, #3
 8009778:	d115      	bne.n	80097a6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	73fb      	strb	r3, [r7, #15]
      break;
 800977e:	e012      	b.n	80097a6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
      break;
 8009784:	e00f      	b.n	80097a6 <USBH_HandleEnum+0x44a>

    default:
      break;
 8009786:	bf00      	nop
 8009788:	e00e      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 800978a:	bf00      	nop
 800978c:	e00c      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 800978e:	bf00      	nop
 8009790:	e00a      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 8009792:	bf00      	nop
 8009794:	e008      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 8009796:	bf00      	nop
 8009798:	e006      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 800979a:	bf00      	nop
 800979c:	e004      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 800979e:	bf00      	nop
 80097a0:	e002      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <USBH_HandleEnum+0x44c>
      break;
 80097a6:	bf00      	nop
  }
  return Status;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop

080097b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f804 	bl	80097f6 <USBH_HandleSof>
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b0b      	cmp	r3, #11
 8009806:	d10a      	bne.n	800981e <USBH_HandleSof+0x28>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d005      	beq.n	800981e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	4798      	blx	r3
  }
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800984a:	2300      	movs	r3, #0
 800984c:	2200      	movs	r2, #0
 800984e:	f001 f9c7 	bl	800abe0 <osMessageQueuePut>
#endif
#endif

  return;
 8009852:	bf00      	nop
}
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800986a:	bf00      	nop
}
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80098aa:	2300      	movs	r3, #0
 80098ac:	2200      	movs	r2, #0
 80098ae:	f001 f997 	bl	800abe0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f004 f98a 	bl	800dbf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fecf 	bl	800a68c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	795b      	ldrb	r3, [r3, #5]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fec9 	bl	800a68c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800990e:	2300      	movs	r3, #0
 8009910:	2200      	movs	r2, #0
 8009912:	f001 f965 	bl	800abe0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009934:	f04f 33ff 	mov.w	r3, #4294967295
 8009938:	2200      	movs	r2, #0
 800993a:	f001 f9c5 	bl	800acc8 <osMessageQueueGet>
 800993e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f0      	bne.n	8009928 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff faa6 	bl	8008e98 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800994c:	e7ec      	b.n	8009928 <USBH_Process_OS+0x8>

0800994e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800996a:	2300      	movs	r3, #0
 800996c:	2200      	movs	r2, #0
 800996e:	f001 f937 	bl	800abe0 <osMessageQueuePut>
#endif

  return USBH_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af02      	add	r7, sp, #8
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800998e:	78fb      	ldrb	r3, [r7, #3]
 8009990:	b29b      	uxth	r3, r3
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	4613      	mov	r3, r2
 8009996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f864 	bl	8009a6a <USBH_GetDescriptor>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f203 3026 	addw	r0, r3, #806	; 0x326
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80099b8:	78fa      	ldrb	r2, [r7, #3]
 80099ba:	b292      	uxth	r2, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	f000 f918 	bl	8009bf2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af02      	add	r7, sp, #8
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	331c      	adds	r3, #28
 80099dc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80099de:	887b      	ldrh	r3, [r7, #2]
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099e8:	2100      	movs	r1, #0
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f83d 	bl	8009a6a <USBH_GetDescriptor>
 80099f0:	4603      	mov	r3, r0
 80099f2:	72fb      	strb	r3, [r7, #11]
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d107      	bne.n	8009a0a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009a00:	887a      	ldrh	r2, [r7, #2]
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 f964 	bl	8009cd2 <USBH_ParseCfgDesc>
  }

  return status;
 8009a0a:	7afb      	ldrb	r3, [r7, #11]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	607a      	str	r2, [r7, #4]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	460b      	mov	r3, r1
 8009a22:	72fb      	strb	r3, [r7, #11]
 8009a24:	4613      	mov	r3, r2
 8009a26:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009a30:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009a38:	893b      	ldrh	r3, [r7, #8]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	2100      	movs	r1, #0
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f812 	bl	8009a6a <USBH_GetDescriptor>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d107      	bne.n	8009a60 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a56:	893a      	ldrh	r2, [r7, #8]
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fa37 	bl	8009ece <USBH_ParseStringDesc>
  }

  return status;
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	607b      	str	r3, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	72fb      	strb	r3, [r7, #11]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	789b      	ldrb	r3, [r3, #2]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d11c      	bne.n	8009abe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2206      	movs	r2, #6
 8009a94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	893a      	ldrh	r2, [r7, #8]
 8009a9a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a9c:	893b      	ldrh	r3, [r7, #8]
 8009a9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aa6:	d104      	bne.n	8009ab2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f240 4209 	movw	r2, #1033	; 0x409
 8009aae:	829a      	strh	r2, [r3, #20]
 8009ab0:	e002      	b.n	8009ab8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8b3a      	ldrh	r2, [r7, #24]
 8009abc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009abe:	8b3b      	ldrh	r3, [r7, #24]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 fa50 	bl	8009f6a <USBH_CtlReq>
 8009aca:	4603      	mov	r3, r0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	789b      	ldrb	r3, [r3, #2]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d10f      	bne.n	8009b08 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2205      	movs	r2, #5
 8009af2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa2c 	bl	8009f6a <USBH_CtlReq>
 8009b12:	4603      	mov	r3, r0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	789b      	ldrb	r3, [r3, #2]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d10e      	bne.n	8009b4e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2209      	movs	r2, #9
 8009b3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	887a      	ldrh	r2, [r7, #2]
 8009b40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2100      	movs	r1, #0
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa09 	bl	8009f6a <USBH_CtlReq>
 8009b58:	4603      	mov	r3, r0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	789b      	ldrb	r3, [r3, #2]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d10f      	bne.n	8009b96 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2203      	movs	r2, #3
 8009b80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b96:	2200      	movs	r2, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f9e5 	bl	8009f6a <USBH_CtlReq>
 8009ba0:	4603      	mov	r3, r0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	789b      	ldrb	r3, [r3, #2]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d10f      	bne.n	8009bde <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f9c1 	bl	8009f6a <USBH_CtlReq>
 8009be8:	4603      	mov	r3, r0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	781a      	ldrb	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	785a      	ldrb	r2, [r3, #1]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	3302      	adds	r3, #2
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	3303      	adds	r3, #3
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	4313      	orrs	r3, r2
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	791a      	ldrb	r2, [r3, #4]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	795a      	ldrb	r2, [r3, #5]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	799a      	ldrb	r2, [r3, #6]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	79da      	ldrb	r2, [r3, #7]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	2b08      	cmp	r3, #8
 8009c50:	d939      	bls.n	8009cc6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	3308      	adds	r3, #8
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	3309      	adds	r3, #9
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	021b      	lsls	r3, r3, #8
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	4313      	orrs	r3, r2
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	330a      	adds	r3, #10
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	330b      	adds	r3, #11
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	021b      	lsls	r3, r3, #8
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	330d      	adds	r3, #13
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	7b9a      	ldrb	r2, [r3, #14]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	7bda      	ldrb	r2, [r3, #15]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	7c1a      	ldrb	r2, [r3, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	7c5a      	ldrb	r2, [r3, #17]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	745a      	strb	r2, [r3, #17]
  }
}
 8009cc6:	bf00      	nop
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b08a      	sub	sp, #40	; 0x28
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	781a      	ldrb	r2, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	785a      	ldrb	r2, [r3, #1]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	3302      	adds	r3, #2
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	3303      	adds	r3, #3
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	791a      	ldrb	r2, [r3, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	795a      	ldrb	r2, [r3, #5]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	799a      	ldrb	r2, [r3, #6]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	79da      	ldrb	r2, [r3, #7]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	7a1a      	ldrb	r2, [r3, #8]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	2b09      	cmp	r3, #9
 8009d4c:	d95f      	bls.n	8009e0e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d4e:	2309      	movs	r3, #9
 8009d50:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d56:	e051      	b.n	8009dfc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d58:	f107 0316 	add.w	r3, r7, #22
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d60:	f000 f8e8 	bl	8009f34 <USBH_GetNextDesc>
 8009d64:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	785b      	ldrb	r3, [r3, #1]
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d146      	bne.n	8009dfc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d72:	221a      	movs	r2, #26
 8009d74:	fb02 f303 	mul.w	r3, r2, r3
 8009d78:	3308      	adds	r3, #8
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	3302      	adds	r3, #2
 8009d80:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d84:	69f8      	ldr	r0, [r7, #28]
 8009d86:	f000 f846 	bl	8009e16 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d94:	e022      	b.n	8009ddc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d96:	f107 0316 	add.w	r3, r7, #22
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d9e:	f000 f8c9 	bl	8009f34 <USBH_GetNextDesc>
 8009da2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b05      	cmp	r3, #5
 8009daa:	d117      	bne.n	8009ddc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009db0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009db4:	3201      	adds	r2, #1
 8009db6:	00d2      	lsls	r2, r2, #3
 8009db8:	211a      	movs	r1, #26
 8009dba:	fb01 f303 	mul.w	r3, r1, r3
 8009dbe:	4413      	add	r3, r2
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dcc:	69b8      	ldr	r0, [r7, #24]
 8009dce:	f000 f851 	bl	8009e74 <USBH_ParseEPDesc>
            ep_ix++;
 8009dd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	791b      	ldrb	r3, [r3, #4]
 8009de0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d204      	bcs.n	8009df2 <USBH_ParseCfgDesc+0x120>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	885a      	ldrh	r2, [r3, #2]
 8009dec:	8afb      	ldrh	r3, [r7, #22]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d8d1      	bhi.n	8009d96 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009df6:	3301      	adds	r3, #1
 8009df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d804      	bhi.n	8009e0e <USBH_ParseCfgDesc+0x13c>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	885a      	ldrh	r2, [r3, #2]
 8009e08:	8afb      	ldrh	r3, [r7, #22]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d8a4      	bhi.n	8009d58 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009e0e:	bf00      	nop
 8009e10:	3728      	adds	r7, #40	; 0x28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781a      	ldrb	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	785a      	ldrb	r2, [r3, #1]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	789a      	ldrb	r2, [r3, #2]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	78da      	ldrb	r2, [r3, #3]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	791a      	ldrb	r2, [r3, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	795a      	ldrb	r2, [r3, #5]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	799a      	ldrb	r2, [r3, #6]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	79da      	ldrb	r2, [r3, #7]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	7a1a      	ldrb	r2, [r3, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	721a      	strb	r2, [r3, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781a      	ldrb	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	785a      	ldrb	r2, [r3, #1]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	789a      	ldrb	r2, [r3, #2]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	78da      	ldrb	r2, [r3, #3]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	3305      	adds	r3, #5
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	799a      	ldrb	r2, [r3, #6]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	719a      	strb	r2, [r3, #6]
}
 8009ec2:	bf00      	nop
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b087      	sub	sp, #28
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d120      	bne.n	8009f28 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	1e9a      	subs	r2, r3, #2
 8009eec:	88fb      	ldrh	r3, [r7, #6]
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	bf28      	it	cs
 8009ef2:	4613      	movcs	r3, r2
 8009ef4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3302      	adds	r3, #2
 8009efa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009efc:	2300      	movs	r3, #0
 8009efe:	82fb      	strh	r3, [r7, #22]
 8009f00:	e00b      	b.n	8009f1a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f02:	8afb      	ldrh	r3, [r7, #22]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	781a      	ldrb	r2, [r3, #0]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	3301      	adds	r3, #1
 8009f12:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f14:	8afb      	ldrh	r3, [r7, #22]
 8009f16:	3302      	adds	r3, #2
 8009f18:	82fb      	strh	r3, [r7, #22]
 8009f1a:	8afa      	ldrh	r2, [r7, #22]
 8009f1c:	8abb      	ldrh	r3, [r7, #20]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d3ef      	bcc.n	8009f02 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2200      	movs	r2, #0
 8009f26:	701a      	strb	r2, [r3, #0]
  }
}
 8009f28:	bf00      	nop
 8009f2a:	371c      	adds	r7, #28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	881a      	ldrh	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	4413      	add	r3, r2
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4413      	add	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b086      	sub	sp, #24
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	4613      	mov	r3, r2
 8009f76:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	789b      	ldrb	r3, [r3, #2]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d002      	beq.n	8009f8a <USBH_CtlReq+0x20>
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d01d      	beq.n	8009fc4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009f88:	e043      	b.n	800a012 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	88fa      	ldrh	r2, [r7, #6]
 8009f94:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2203      	movs	r2, #3
 8009faa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f000 fe0f 	bl	800abe0 <osMessageQueuePut>
      break;
 8009fc2:	e026      	b.n	800a012 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f829 	bl	800a01c <USBH_HandleControl>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <USBH_CtlReq+0x70>
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d106      	bne.n	8009fe8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	761a      	strb	r2, [r3, #24]
 8009fe6:	e005      	b.n	8009ff4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d102      	bne.n	8009ff4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2203      	movs	r2, #3
 8009ff8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a008:	2300      	movs	r3, #0
 800a00a:	2200      	movs	r2, #0
 800a00c:	f000 fde8 	bl	800abe0 <osMessageQueuePut>
      break;
 800a010:	bf00      	nop
  }
  return status;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af02      	add	r7, sp, #8
 800a022:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a028:	2300      	movs	r3, #0
 800a02a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	7e1b      	ldrb	r3, [r3, #24]
 800a030:	3b01      	subs	r3, #1
 800a032:	2b0a      	cmp	r3, #10
 800a034:	f200 8229 	bhi.w	800a48a <USBH_HandleControl+0x46e>
 800a038:	a201      	add	r2, pc, #4	; (adr r2, 800a040 <USBH_HandleControl+0x24>)
 800a03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03e:	bf00      	nop
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	0800a087 	.word	0x0800a087
 800a048:	0800a129 	.word	0x0800a129
 800a04c:	0800a14f 	.word	0x0800a14f
 800a050:	0800a1db 	.word	0x0800a1db
 800a054:	0800a205 	.word	0x0800a205
 800a058:	0800a2c7 	.word	0x0800a2c7
 800a05c:	0800a2e9 	.word	0x0800a2e9
 800a060:	0800a37b 	.word	0x0800a37b
 800a064:	0800a3a1 	.word	0x0800a3a1
 800a068:	0800a433 	.word	0x0800a433
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f103 0110 	add.w	r1, r3, #16
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	795b      	ldrb	r3, [r3, #5]
 800a076:	461a      	mov	r2, r3
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fa17 	bl	800a4ac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	761a      	strb	r2, [r3, #24]
      break;
 800a084:	e20c      	b.n	800a4a0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	795b      	ldrb	r3, [r3, #5]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f003 fea1 	bl	800ddd4 <USBH_LL_GetURBState>
 800a092:	4603      	mov	r3, r0
 800a094:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a096:	7bbb      	ldrb	r3, [r7, #14]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d12c      	bne.n	800a0f6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	7c1b      	ldrb	r3, [r3, #16]
 800a0a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8adb      	ldrh	r3, [r3, #22]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00a      	beq.n	800a0c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a0ae:	7b7b      	ldrb	r3, [r7, #13]
 800a0b0:	2b80      	cmp	r3, #128	; 0x80
 800a0b2:	d103      	bne.n	800a0bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	761a      	strb	r2, [r3, #24]
 800a0ba:	e00d      	b.n	800a0d8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2205      	movs	r2, #5
 800a0c0:	761a      	strb	r2, [r3, #24]
 800a0c2:	e009      	b.n	800a0d8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a0c4:	7b7b      	ldrb	r3, [r7, #13]
 800a0c6:	2b80      	cmp	r3, #128	; 0x80
 800a0c8:	d103      	bne.n	800a0d2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2209      	movs	r2, #9
 800a0ce:	761a      	strb	r2, [r3, #24]
 800a0d0:	e002      	b.n	800a0d8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2207      	movs	r2, #7
 800a0d6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f000 fd76 	bl	800abe0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a0f4:	e1cb      	b.n	800a48e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	d003      	beq.n	800a104 <USBH_HandleControl+0xe8>
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	f040 81c5 	bne.w	800a48e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	220b      	movs	r2, #11
 800a108:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2203      	movs	r2, #3
 800a10e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a11e:	2300      	movs	r3, #0
 800a120:	2200      	movs	r2, #0
 800a122:	f000 fd5d 	bl	800abe0 <osMessageQueuePut>
      break;
 800a126:	e1b2      	b.n	800a48e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a12e:	b29a      	uxth	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6899      	ldr	r1, [r3, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	899a      	ldrh	r2, [r3, #12]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	791b      	ldrb	r3, [r3, #4]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f9f2 	bl	800a52a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2204      	movs	r2, #4
 800a14a:	761a      	strb	r2, [r3, #24]
      break;
 800a14c:	e1a8      	b.n	800a4a0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	791b      	ldrb	r3, [r3, #4]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f003 fe3d 	bl	800ddd4 <USBH_LL_GetURBState>
 800a15a:	4603      	mov	r3, r0
 800a15c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d110      	bne.n	800a186 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2209      	movs	r2, #9
 800a168:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2203      	movs	r2, #3
 800a16e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a17e:	2300      	movs	r3, #0
 800a180:	2200      	movs	r2, #0
 800a182:	f000 fd2d 	bl	800abe0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b05      	cmp	r3, #5
 800a18a:	d110      	bne.n	800a1ae <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a18c:	2303      	movs	r3, #3
 800a18e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2203      	movs	r2, #3
 800a194:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f000 fd1a 	bl	800abe0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1ac:	e171      	b.n	800a492 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	f040 816e 	bne.w	800a492 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	220b      	movs	r2, #11
 800a1ba:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2203      	movs	r2, #3
 800a1c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f000 fd04 	bl	800abe0 <osMessageQueuePut>
      break;
 800a1d8:	e15b      	b.n	800a492 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6899      	ldr	r1, [r3, #8]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	899a      	ldrh	r2, [r3, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	795b      	ldrb	r3, [r3, #5]
 800a1e6:	2001      	movs	r0, #1
 800a1e8:	9000      	str	r0, [sp, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f978 	bl	800a4e0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2206      	movs	r2, #6
 800a200:	761a      	strb	r2, [r3, #24]
      break;
 800a202:	e14d      	b.n	800a4a0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	795b      	ldrb	r3, [r3, #5]
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f003 fde2 	bl	800ddd4 <USBH_LL_GetURBState>
 800a210:	4603      	mov	r3, r0
 800a212:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a214:	7bbb      	ldrb	r3, [r7, #14]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d111      	bne.n	800a23e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2207      	movs	r2, #7
 800a21e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2203      	movs	r2, #3
 800a224:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a234:	2300      	movs	r3, #0
 800a236:	2200      	movs	r2, #0
 800a238:	f000 fcd2 	bl	800abe0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a23c:	e12b      	b.n	800a496 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	2b05      	cmp	r3, #5
 800a242:	d113      	bne.n	800a26c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	220c      	movs	r2, #12
 800a248:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a24a:	2303      	movs	r3, #3
 800a24c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2203      	movs	r2, #3
 800a252:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a262:	2300      	movs	r3, #0
 800a264:	2200      	movs	r2, #0
 800a266:	f000 fcbb 	bl	800abe0 <osMessageQueuePut>
      break;
 800a26a:	e114      	b.n	800a496 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d111      	bne.n	800a296 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2205      	movs	r2, #5
 800a276:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2203      	movs	r2, #3
 800a27c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a28c:	2300      	movs	r3, #0
 800a28e:	2200      	movs	r2, #0
 800a290:	f000 fca6 	bl	800abe0 <osMessageQueuePut>
      break;
 800a294:	e0ff      	b.n	800a496 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	2b04      	cmp	r3, #4
 800a29a:	f040 80fc 	bne.w	800a496 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	220b      	movs	r2, #11
 800a2a2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2203      	movs	r2, #3
 800a2ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f000 fc8e 	bl	800abe0 <osMessageQueuePut>
      break;
 800a2c4:	e0e7      	b.n	800a496 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	791b      	ldrb	r3, [r3, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f92b 	bl	800a52a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2208      	movs	r2, #8
 800a2e4:	761a      	strb	r2, [r3, #24]

      break;
 800a2e6:	e0db      	b.n	800a4a0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	791b      	ldrb	r3, [r3, #4]
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f003 fd70 	bl	800ddd4 <USBH_LL_GetURBState>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d113      	bne.n	800a326 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	220d      	movs	r2, #13
 800a302:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2203      	movs	r2, #3
 800a30c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a31c:	2300      	movs	r3, #0
 800a31e:	2200      	movs	r2, #0
 800a320:	f000 fc5e 	bl	800abe0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a324:	e0b9      	b.n	800a49a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a326:	7bbb      	ldrb	r3, [r7, #14]
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d111      	bne.n	800a350 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	220b      	movs	r2, #11
 800a330:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2203      	movs	r2, #3
 800a336:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a346:	2300      	movs	r3, #0
 800a348:	2200      	movs	r2, #0
 800a34a:	f000 fc49 	bl	800abe0 <osMessageQueuePut>
      break;
 800a34e:	e0a4      	b.n	800a49a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b05      	cmp	r3, #5
 800a354:	f040 80a1 	bne.w	800a49a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a358:	2303      	movs	r3, #3
 800a35a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2203      	movs	r2, #3
 800a360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a370:	2300      	movs	r3, #0
 800a372:	2200      	movs	r2, #0
 800a374:	f000 fc34 	bl	800abe0 <osMessageQueuePut>
      break;
 800a378:	e08f      	b.n	800a49a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	795b      	ldrb	r3, [r3, #5]
 800a37e:	2201      	movs	r2, #1
 800a380:	9200      	str	r2, [sp, #0]
 800a382:	2200      	movs	r2, #0
 800a384:	2100      	movs	r1, #0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f8aa 	bl	800a4e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	220a      	movs	r2, #10
 800a39c:	761a      	strb	r2, [r3, #24]
      break;
 800a39e:	e07f      	b.n	800a4a0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	795b      	ldrb	r3, [r3, #5]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f003 fd14 	bl	800ddd4 <USBH_LL_GetURBState>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d113      	bne.n	800a3de <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	220d      	movs	r2, #13
 800a3be:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2203      	movs	r2, #3
 800a3c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f000 fc02 	bl	800abe0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a3dc:	e05f      	b.n	800a49e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d111      	bne.n	800a408 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2209      	movs	r2, #9
 800a3e8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a3fe:	2300      	movs	r3, #0
 800a400:	2200      	movs	r2, #0
 800a402:	f000 fbed 	bl	800abe0 <osMessageQueuePut>
      break;
 800a406:	e04a      	b.n	800a49e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	d147      	bne.n	800a49e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	220b      	movs	r2, #11
 800a412:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2203      	movs	r2, #3
 800a418:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a428:	2300      	movs	r3, #0
 800a42a:	2200      	movs	r2, #0
 800a42c:	f000 fbd8 	bl	800abe0 <osMessageQueuePut>
      break;
 800a430:	e035      	b.n	800a49e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7e5b      	ldrb	r3, [r3, #25]
 800a436:	3301      	adds	r3, #1
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	765a      	strb	r2, [r3, #25]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	7e5b      	ldrb	r3, [r3, #25]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d806      	bhi.n	800a454 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a452:	e025      	b.n	800a4a0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a45a:	2106      	movs	r1, #6
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	795b      	ldrb	r3, [r3, #5]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f90d 	bl	800a68c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	791b      	ldrb	r3, [r3, #4]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f907 	bl	800a68c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a484:	2302      	movs	r3, #2
 800a486:	73fb      	strb	r3, [r7, #15]
      break;
 800a488:	e00a      	b.n	800a4a0 <USBH_HandleControl+0x484>

    default:
      break;
 800a48a:	bf00      	nop
 800a48c:	e008      	b.n	800a4a0 <USBH_HandleControl+0x484>
      break;
 800a48e:	bf00      	nop
 800a490:	e006      	b.n	800a4a0 <USBH_HandleControl+0x484>
      break;
 800a492:	bf00      	nop
 800a494:	e004      	b.n	800a4a0 <USBH_HandleControl+0x484>
      break;
 800a496:	bf00      	nop
 800a498:	e002      	b.n	800a4a0 <USBH_HandleControl+0x484>
      break;
 800a49a:	bf00      	nop
 800a49c:	e000      	b.n	800a4a0 <USBH_HandleControl+0x484>
      break;
 800a49e:	bf00      	nop
  }

  return status;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop

0800a4ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af04      	add	r7, sp, #16
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a4ba:	79f9      	ldrb	r1, [r7, #7]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	9303      	str	r3, [sp, #12]
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	9302      	str	r3, [sp, #8]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f003 fc4e 	bl	800dd72 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af04      	add	r7, sp, #16
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	80fb      	strh	r3, [r7, #6]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a504:	7979      	ldrb	r1, [r7, #5]
 800a506:	7e3b      	ldrb	r3, [r7, #24]
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	9302      	str	r3, [sp, #8]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	2301      	movs	r3, #1
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2300      	movs	r3, #0
 800a518:	2200      	movs	r2, #0
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f003 fc29 	bl	800dd72 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b088      	sub	sp, #32
 800a52e:	af04      	add	r7, sp, #16
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	4611      	mov	r1, r2
 800a536:	461a      	mov	r2, r3
 800a538:	460b      	mov	r3, r1
 800a53a:	80fb      	strh	r3, [r7, #6]
 800a53c:	4613      	mov	r3, r2
 800a53e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a540:	7979      	ldrb	r1, [r7, #5]
 800a542:	2300      	movs	r3, #0
 800a544:	9303      	str	r3, [sp, #12]
 800a546:	88fb      	ldrh	r3, [r7, #6]
 800a548:	9302      	str	r3, [sp, #8]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	2301      	movs	r3, #1
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	2300      	movs	r3, #0
 800a554:	2201      	movs	r2, #1
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f003 fc0b 	bl	800dd72 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a55c:	2300      	movs	r3, #0

}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b088      	sub	sp, #32
 800a56a:	af04      	add	r7, sp, #16
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	4611      	mov	r1, r2
 800a572:	461a      	mov	r2, r3
 800a574:	460b      	mov	r3, r1
 800a576:	80fb      	strh	r3, [r7, #6]
 800a578:	4613      	mov	r3, r2
 800a57a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a58a:	7979      	ldrb	r1, [r7, #5]
 800a58c:	7e3b      	ldrb	r3, [r7, #24]
 800a58e:	9303      	str	r3, [sp, #12]
 800a590:	88fb      	ldrh	r3, [r7, #6]
 800a592:	9302      	str	r3, [sp, #8]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	2301      	movs	r3, #1
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	2302      	movs	r3, #2
 800a59e:	2200      	movs	r2, #0
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f003 fbe6 	bl	800dd72 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af04      	add	r7, sp, #16
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	460b      	mov	r3, r1
 800a5c0:	80fb      	strh	r3, [r7, #6]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a5c6:	7979      	ldrb	r1, [r7, #5]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	88fb      	ldrh	r3, [r7, #6]
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	2302      	movs	r3, #2
 800a5da:	2201      	movs	r2, #1
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f003 fbc8 	bl	800dd72 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af04      	add	r7, sp, #16
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	70fb      	strb	r3, [r7, #3]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70bb      	strb	r3, [r7, #2]
 800a602:	4613      	mov	r3, r2
 800a604:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a606:	7878      	ldrb	r0, [r7, #1]
 800a608:	78ba      	ldrb	r2, [r7, #2]
 800a60a:	78f9      	ldrb	r1, [r7, #3]
 800a60c:	8b3b      	ldrh	r3, [r7, #24]
 800a60e:	9302      	str	r3, [sp, #8]
 800a610:	7d3b      	ldrb	r3, [r7, #20]
 800a612:	9301      	str	r3, [sp, #4]
 800a614:	7c3b      	ldrb	r3, [r7, #16]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	4603      	mov	r3, r0
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f003 fb5b 	bl	800dcd6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a636:	78fb      	ldrb	r3, [r7, #3]
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f003 fb7a 	bl	800dd34 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f836 	bl	800a6c8 <USBH_GetFreePipe>
 800a65c:	4603      	mov	r3, r0
 800a65e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a660:	89fb      	ldrh	r3, [r7, #14]
 800a662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a666:	4293      	cmp	r3, r2
 800a668:	d00a      	beq.n	800a680 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	89fb      	ldrh	r3, [r7, #14]
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	33e0      	adds	r3, #224	; 0xe0
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	440b      	add	r3, r1
 800a67e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a680:	89fb      	ldrh	r3, [r7, #14]
 800a682:	b2db      	uxtb	r3, r3
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	2b0a      	cmp	r3, #10
 800a69c:	d80d      	bhi.n	800a6ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	33e0      	adds	r3, #224	; 0xe0
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	78fb      	ldrb	r3, [r7, #3]
 800a6ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a6b0:	6879      	ldr	r1, [r7, #4]
 800a6b2:	33e0      	adds	r3, #224	; 0xe0
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	440b      	add	r3, r1
 800a6b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]
 800a6d8:	e00f      	b.n	800a6fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	33e0      	adds	r3, #224	; 0xe0
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	e007      	b.n	800a704 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	73fb      	strb	r3, [r7, #15]
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	2b0a      	cmp	r3, #10
 800a6fe:	d9ec      	bls.n	800a6da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a700:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a710:	b480      	push	{r7}
 800a712:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a714:	bf00      	nop
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
	...

0800a720 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a726:	f3ef 8305 	mrs	r3, IPSR
 800a72a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a72c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10f      	bne.n	800a752 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a732:	f3ef 8310 	mrs	r3, PRIMASK
 800a736:	607b      	str	r3, [r7, #4]
  return(result);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a73e:	f3ef 8311 	mrs	r3, BASEPRI
 800a742:	603b      	str	r3, [r7, #0]
  return(result);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d007      	beq.n	800a75a <osKernelInitialize+0x3a>
 800a74a:	4b0e      	ldr	r3, [pc, #56]	; (800a784 <osKernelInitialize+0x64>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d103      	bne.n	800a75a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a752:	f06f 0305 	mvn.w	r3, #5
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e00c      	b.n	800a774 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a75a:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <osKernelInitialize+0x64>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d105      	bne.n	800a76e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <osKernelInitialize+0x64>)
 800a764:	2201      	movs	r2, #1
 800a766:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e002      	b.n	800a774 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a76e:	f04f 33ff 	mov.w	r3, #4294967295
 800a772:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a774:	68fb      	ldr	r3, [r7, #12]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	200000bc 	.word	0x200000bc

0800a788 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a78e:	f3ef 8305 	mrs	r3, IPSR
 800a792:	60bb      	str	r3, [r7, #8]
  return(result);
 800a794:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10f      	bne.n	800a7ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a79a:	f3ef 8310 	mrs	r3, PRIMASK
 800a79e:	607b      	str	r3, [r7, #4]
  return(result);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d105      	bne.n	800a7b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a7aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <osKernelStart+0x3a>
 800a7b2:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <osKernelStart+0x68>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d103      	bne.n	800a7c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a7ba:	f06f 0305 	mvn.w	r3, #5
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e010      	b.n	800a7e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <osKernelStart+0x68>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d109      	bne.n	800a7de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a7ca:	f7ff ffa1 	bl	800a710 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a7ce:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <osKernelStart+0x68>)
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a7d4:	f001 fc08 	bl	800bfe8 <vTaskStartScheduler>
      stat = osOK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e002      	b.n	800a7e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a7de:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	200000bc 	.word	0x200000bc

0800a7f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b090      	sub	sp, #64	; 0x40
 800a7f8:	af04      	add	r7, sp, #16
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a800:	2300      	movs	r3, #0
 800a802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a804:	f3ef 8305 	mrs	r3, IPSR
 800a808:	61fb      	str	r3, [r7, #28]
  return(result);
 800a80a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f040 808f 	bne.w	800a930 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a812:	f3ef 8310 	mrs	r3, PRIMASK
 800a816:	61bb      	str	r3, [r7, #24]
  return(result);
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d105      	bne.n	800a82a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a81e:	f3ef 8311 	mrs	r3, BASEPRI
 800a822:	617b      	str	r3, [r7, #20]
  return(result);
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <osThreadNew+0x3e>
 800a82a:	4b44      	ldr	r3, [pc, #272]	; (800a93c <osThreadNew+0x148>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d07e      	beq.n	800a930 <osThreadNew+0x13c>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d07b      	beq.n	800a930 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a838:	2380      	movs	r3, #128	; 0x80
 800a83a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a83c:	2318      	movs	r3, #24
 800a83e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a844:	f04f 33ff 	mov.w	r3, #4294967295
 800a848:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d045      	beq.n	800a8dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <osThreadNew+0x6a>
        name = attr->name;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d002      	beq.n	800a86c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d008      	beq.n	800a884 <osThreadNew+0x90>
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	2b38      	cmp	r3, #56	; 0x38
 800a876:	d805      	bhi.n	800a884 <osThreadNew+0x90>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <osThreadNew+0x94>
        return (NULL);
 800a884:	2300      	movs	r3, #0
 800a886:	e054      	b.n	800a932 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d003      	beq.n	800a898 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	089b      	lsrs	r3, r3, #2
 800a896:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00e      	beq.n	800a8be <osThreadNew+0xca>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	2b5b      	cmp	r3, #91	; 0x5b
 800a8a6:	d90a      	bls.n	800a8be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d006      	beq.n	800a8be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <osThreadNew+0xca>
        mem = 1;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	623b      	str	r3, [r7, #32]
 800a8bc:	e010      	b.n	800a8e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10c      	bne.n	800a8e0 <osThreadNew+0xec>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d108      	bne.n	800a8e0 <osThreadNew+0xec>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d104      	bne.n	800a8e0 <osThreadNew+0xec>
          mem = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	623b      	str	r3, [r7, #32]
 800a8da:	e001      	b.n	800a8e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d110      	bne.n	800a908 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8ee:	9202      	str	r2, [sp, #8]
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f001 f99d 	bl	800bc3c <xTaskCreateStatic>
 800a902:	4603      	mov	r3, r0
 800a904:	613b      	str	r3, [r7, #16]
 800a906:	e013      	b.n	800a930 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d110      	bne.n	800a930 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	b29a      	uxth	r2, r3
 800a912:	f107 0310 	add.w	r3, r7, #16
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f001 f9e8 	bl	800bcf6 <xTaskCreate>
 800a926:	4603      	mov	r3, r0
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d001      	beq.n	800a930 <osThreadNew+0x13c>
          hTask = NULL;
 800a92c:	2300      	movs	r3, #0
 800a92e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a930:	693b      	ldr	r3, [r7, #16]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3730      	adds	r7, #48	; 0x30
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	200000bc 	.word	0x200000bc

0800a940 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a948:	f3ef 8305 	mrs	r3, IPSR
 800a94c:	613b      	str	r3, [r7, #16]
  return(result);
 800a94e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10f      	bne.n	800a974 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a954:	f3ef 8310 	mrs	r3, PRIMASK
 800a958:	60fb      	str	r3, [r7, #12]
  return(result);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d105      	bne.n	800a96c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a960:	f3ef 8311 	mrs	r3, BASEPRI
 800a964:	60bb      	str	r3, [r7, #8]
  return(result);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d007      	beq.n	800a97c <osDelay+0x3c>
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <osDelay+0x58>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d103      	bne.n	800a97c <osDelay+0x3c>
    stat = osErrorISR;
 800a974:	f06f 0305 	mvn.w	r3, #5
 800a978:	617b      	str	r3, [r7, #20]
 800a97a:	e007      	b.n	800a98c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 fafa 	bl	800bf80 <vTaskDelay>
    }
  }

  return (stat);
 800a98c:	697b      	ldr	r3, [r7, #20]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	200000bc 	.word	0x200000bc

0800a99c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08c      	sub	sp, #48	; 0x30
 800a9a0:	af02      	add	r7, sp, #8
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9ac:	f3ef 8305 	mrs	r3, IPSR
 800a9b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a9b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f040 8086 	bne.w	800aac6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ba:	f3ef 8310 	mrs	r3, PRIMASK
 800a9be:	617b      	str	r3, [r7, #20]
  return(result);
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d105      	bne.n	800a9d2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9c6:	f3ef 8311 	mrs	r3, BASEPRI
 800a9ca:	613b      	str	r3, [r7, #16]
  return(result);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <osSemaphoreNew+0x3e>
 800a9d2:	4b3f      	ldr	r3, [pc, #252]	; (800aad0 <osSemaphoreNew+0x134>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d075      	beq.n	800aac6 <osSemaphoreNew+0x12a>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d072      	beq.n	800aac6 <osSemaphoreNew+0x12a>
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d86e      	bhi.n	800aac6 <osSemaphoreNew+0x12a>
    mem = -1;
 800a9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d015      	beq.n	800aa20 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d006      	beq.n	800aa0a <osSemaphoreNew+0x6e>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	2b4f      	cmp	r3, #79	; 0x4f
 800aa02:	d902      	bls.n	800aa0a <osSemaphoreNew+0x6e>
        mem = 1;
 800aa04:	2301      	movs	r3, #1
 800aa06:	623b      	str	r3, [r7, #32]
 800aa08:	e00c      	b.n	800aa24 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d108      	bne.n	800aa24 <osSemaphoreNew+0x88>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d104      	bne.n	800aa24 <osSemaphoreNew+0x88>
          mem = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	623b      	str	r3, [r7, #32]
 800aa1e:	e001      	b.n	800aa24 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2a:	d04c      	beq.n	800aac6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d128      	bne.n	800aa84 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d10a      	bne.n	800aa4e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	9200      	str	r2, [sp, #0]
 800aa40:	2200      	movs	r2, #0
 800aa42:	2100      	movs	r1, #0
 800aa44:	2001      	movs	r0, #1
 800aa46:	f000 fb01 	bl	800b04c <xQueueGenericCreateStatic>
 800aa4a:	6278      	str	r0, [r7, #36]	; 0x24
 800aa4c:	e005      	b.n	800aa5a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800aa4e:	2203      	movs	r2, #3
 800aa50:	2100      	movs	r1, #0
 800aa52:	2001      	movs	r0, #1
 800aa54:	f000 fb72 	bl	800b13c <xQueueGenericCreate>
 800aa58:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d022      	beq.n	800aaa6 <osSemaphoreNew+0x10a>
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d01f      	beq.n	800aaa6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aa66:	2300      	movs	r3, #0
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa6e:	f000 fc33 	bl	800b2d8 <xQueueGenericSend>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d016      	beq.n	800aaa6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800aa78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa7a:	f000 ff23 	bl	800b8c4 <vQueueDelete>
            hSemaphore = NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	627b      	str	r3, [r7, #36]	; 0x24
 800aa82:	e010      	b.n	800aaa6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d108      	bne.n	800aa9c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	68b9      	ldr	r1, [r7, #8]
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 fbb5 	bl	800b202 <xQueueCreateCountingSemaphoreStatic>
 800aa98:	6278      	str	r0, [r7, #36]	; 0x24
 800aa9a:	e004      	b.n	800aaa6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aa9c:	68b9      	ldr	r1, [r7, #8]
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 fbe6 	bl	800b270 <xQueueCreateCountingSemaphore>
 800aaa4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00c      	beq.n	800aac6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <osSemaphoreNew+0x11e>
          name = attr->name;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	61fb      	str	r3, [r7, #28]
 800aab8:	e001      	b.n	800aabe <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aabe:	69f9      	ldr	r1, [r7, #28]
 800aac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aac2:	f001 f833 	bl	800bb2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3728      	adds	r7, #40	; 0x28
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	200000bc 	.word	0x200000bc

0800aad4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08c      	sub	sp, #48	; 0x30
 800aad8:	af02      	add	r7, sp, #8
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aae0:	2300      	movs	r3, #0
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aae4:	f3ef 8305 	mrs	r3, IPSR
 800aae8:	61bb      	str	r3, [r7, #24]
  return(result);
 800aaea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d16f      	bne.n	800abd0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaf0:	f3ef 8310 	mrs	r3, PRIMASK
 800aaf4:	617b      	str	r3, [r7, #20]
  return(result);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d105      	bne.n	800ab08 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aafc:	f3ef 8311 	mrs	r3, BASEPRI
 800ab00:	613b      	str	r3, [r7, #16]
  return(result);
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <osMessageQueueNew+0x3c>
 800ab08:	4b34      	ldr	r3, [pc, #208]	; (800abdc <osMessageQueueNew+0x108>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d05f      	beq.n	800abd0 <osMessageQueueNew+0xfc>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d05c      	beq.n	800abd0 <osMessageQueueNew+0xfc>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d059      	beq.n	800abd0 <osMessageQueueNew+0xfc>
    mem = -1;
 800ab1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d029      	beq.n	800ab7c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d012      	beq.n	800ab56 <osMessageQueueNew+0x82>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b4f      	cmp	r3, #79	; 0x4f
 800ab36:	d90e      	bls.n	800ab56 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	695a      	ldr	r2, [r3, #20]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	fb01 f303 	mul.w	r3, r1, r3
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d302      	bcc.n	800ab56 <osMessageQueueNew+0x82>
        mem = 1;
 800ab50:	2301      	movs	r3, #1
 800ab52:	623b      	str	r3, [r7, #32]
 800ab54:	e014      	b.n	800ab80 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d110      	bne.n	800ab80 <osMessageQueueNew+0xac>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10c      	bne.n	800ab80 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d108      	bne.n	800ab80 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d104      	bne.n	800ab80 <osMessageQueueNew+0xac>
          mem = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	623b      	str	r3, [r7, #32]
 800ab7a:	e001      	b.n	800ab80 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d10b      	bne.n	800ab9e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691a      	ldr	r2, [r3, #16]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	2100      	movs	r1, #0
 800ab90:	9100      	str	r1, [sp, #0]
 800ab92:	68b9      	ldr	r1, [r7, #8]
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 fa59 	bl	800b04c <xQueueGenericCreateStatic>
 800ab9a:	6278      	str	r0, [r7, #36]	; 0x24
 800ab9c:	e008      	b.n	800abb0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d105      	bne.n	800abb0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800aba4:	2200      	movs	r2, #0
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 fac7 	bl	800b13c <xQueueGenericCreate>
 800abae:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00c      	beq.n	800abd0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	61fb      	str	r3, [r7, #28]
 800abc2:	e001      	b.n	800abc8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800abc4:	2300      	movs	r3, #0
 800abc6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800abc8:	69f9      	ldr	r1, [r7, #28]
 800abca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abcc:	f000 ffae 	bl	800bb2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3728      	adds	r7, #40	; 0x28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	200000bc 	.word	0x200000bc

0800abe0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08a      	sub	sp, #40	; 0x28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	603b      	str	r3, [r7, #0]
 800abec:	4613      	mov	r3, r2
 800abee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abf8:	f3ef 8305 	mrs	r3, IPSR
 800abfc:	61fb      	str	r3, [r7, #28]
  return(result);
 800abfe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10f      	bne.n	800ac24 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac04:	f3ef 8310 	mrs	r3, PRIMASK
 800ac08:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d105      	bne.n	800ac1c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac10:	f3ef 8311 	mrs	r3, BASEPRI
 800ac14:	617b      	str	r3, [r7, #20]
  return(result);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d02c      	beq.n	800ac76 <osMessageQueuePut+0x96>
 800ac1c:	4b28      	ldr	r3, [pc, #160]	; (800acc0 <osMessageQueuePut+0xe0>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d128      	bne.n	800ac76 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d005      	beq.n	800ac36 <osMessageQueuePut+0x56>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <osMessageQueuePut+0x56>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ac36:	f06f 0303 	mvn.w	r3, #3
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac3c:	e039      	b.n	800acb2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ac42:	f107 0210 	add.w	r2, r7, #16
 800ac46:	2300      	movs	r3, #0
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	6a38      	ldr	r0, [r7, #32]
 800ac4c:	f000 fc42 	bl	800b4d4 <xQueueGenericSendFromISR>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d003      	beq.n	800ac5e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ac56:	f06f 0302 	mvn.w	r3, #2
 800ac5a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac5c:	e029      	b.n	800acb2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d026      	beq.n	800acb2 <osMessageQueuePut+0xd2>
 800ac64:	4b17      	ldr	r3, [pc, #92]	; (800acc4 <osMessageQueuePut+0xe4>)
 800ac66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac74:	e01d      	b.n	800acb2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <osMessageQueuePut+0xa2>
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ac82:	f06f 0303 	mvn.w	r3, #3
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
 800ac88:	e014      	b.n	800acb4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	6a38      	ldr	r0, [r7, #32]
 800ac92:	f000 fb21 	bl	800b2d8 <xQueueGenericSend>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d00b      	beq.n	800acb4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800aca2:	f06f 0301 	mvn.w	r3, #1
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24
 800aca8:	e004      	b.n	800acb4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800acaa:	f06f 0302 	mvn.w	r3, #2
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
 800acb0:	e000      	b.n	800acb4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800acb2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3728      	adds	r7, #40	; 0x28
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	200000bc 	.word	0x200000bc
 800acc4:	e000ed04 	.word	0xe000ed04

0800acc8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	; 0x28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800acda:	2300      	movs	r3, #0
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acde:	f3ef 8305 	mrs	r3, IPSR
 800ace2:	61fb      	str	r3, [r7, #28]
  return(result);
 800ace4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10f      	bne.n	800ad0a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acea:	f3ef 8310 	mrs	r3, PRIMASK
 800acee:	61bb      	str	r3, [r7, #24]
  return(result);
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d105      	bne.n	800ad02 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acf6:	f3ef 8311 	mrs	r3, BASEPRI
 800acfa:	617b      	str	r3, [r7, #20]
  return(result);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d02c      	beq.n	800ad5c <osMessageQueueGet+0x94>
 800ad02:	4b28      	ldr	r3, [pc, #160]	; (800ada4 <osMessageQueueGet+0xdc>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d128      	bne.n	800ad5c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <osMessageQueueGet+0x54>
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d002      	beq.n	800ad1c <osMessageQueueGet+0x54>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d003      	beq.n	800ad24 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ad1c:	f06f 0303 	mvn.w	r3, #3
 800ad20:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad22:	e038      	b.n	800ad96 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ad24:	2300      	movs	r3, #0
 800ad26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ad28:	f107 0310 	add.w	r3, r7, #16
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	68b9      	ldr	r1, [r7, #8]
 800ad30:	6a38      	ldr	r0, [r7, #32]
 800ad32:	f000 fd47 	bl	800b7c4 <xQueueReceiveFromISR>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d003      	beq.n	800ad44 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ad3c:	f06f 0302 	mvn.w	r3, #2
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad42:	e028      	b.n	800ad96 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d025      	beq.n	800ad96 <osMessageQueueGet+0xce>
 800ad4a:	4b17      	ldr	r3, [pc, #92]	; (800ada8 <osMessageQueueGet+0xe0>)
 800ad4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad5a:	e01c      	b.n	800ad96 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <osMessageQueueGet+0xa0>
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d103      	bne.n	800ad70 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ad68:	f06f 0303 	mvn.w	r3, #3
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad6e:	e013      	b.n	800ad98 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	6a38      	ldr	r0, [r7, #32]
 800ad76:	f000 fc45 	bl	800b604 <xQueueReceive>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d00b      	beq.n	800ad98 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ad86:	f06f 0301 	mvn.w	r3, #1
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8c:	e004      	b.n	800ad98 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ad8e:	f06f 0302 	mvn.w	r3, #2
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
 800ad94:	e000      	b.n	800ad98 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad96:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3728      	adds	r7, #40	; 0x28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200000bc 	.word	0x200000bc
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4a07      	ldr	r2, [pc, #28]	; (800add8 <vApplicationGetIdleTaskMemory+0x2c>)
 800adbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4a06      	ldr	r2, [pc, #24]	; (800addc <vApplicationGetIdleTaskMemory+0x30>)
 800adc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2280      	movs	r2, #128	; 0x80
 800adc8:	601a      	str	r2, [r3, #0]
}
 800adca:	bf00      	nop
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	200000c0 	.word	0x200000c0
 800addc:	2000011c 	.word	0x2000011c

0800ade0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4a07      	ldr	r2, [pc, #28]	; (800ae0c <vApplicationGetTimerTaskMemory+0x2c>)
 800adf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	4a06      	ldr	r2, [pc, #24]	; (800ae10 <vApplicationGetTimerTaskMemory+0x30>)
 800adf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adfe:	601a      	str	r2, [r3, #0]
}
 800ae00:	bf00      	nop
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	2000031c 	.word	0x2000031c
 800ae10:	20000378 	.word	0x20000378

0800ae14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f103 0208 	add.w	r2, r3, #8
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f103 0208 	add.w	r2, r3, #8
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f103 0208 	add.w	r2, r3, #8
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ae62:	bf00      	nop
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	1c5a      	adds	r2, r3, #1
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	601a      	str	r2, [r3, #0]
}
 800aeaa:	bf00      	nop
 800aeac:	3714      	adds	r7, #20
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aecc:	d103      	bne.n	800aed6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e00c      	b.n	800aef0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3308      	adds	r3, #8
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	e002      	b.n	800aee4 <vListInsert+0x2e>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d2f6      	bcs.n	800aede <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	601a      	str	r2, [r3, #0]
}
 800af1c:	bf00      	nop
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6892      	ldr	r2, [r2, #8]
 800af3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	6852      	ldr	r2, [r2, #4]
 800af48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d103      	bne.n	800af5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	689a      	ldr	r2, [r3, #8]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	1e5a      	subs	r2, r3, #1
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800afa6:	f002 f9c5 	bl	800d334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afb6:	fb01 f303 	mul.w	r3, r1, r3
 800afba:	441a      	add	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	3b01      	subs	r3, #1
 800afd8:	68f9      	ldr	r1, [r7, #12]
 800afda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afdc:	fb01 f303 	mul.w	r3, r1, r3
 800afe0:	441a      	add	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	22ff      	movs	r2, #255	; 0xff
 800afea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	22ff      	movs	r2, #255	; 0xff
 800aff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d114      	bne.n	800b026 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d01a      	beq.n	800b03a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	3310      	adds	r3, #16
 800b008:	4618      	mov	r0, r3
 800b00a:	f001 fa77 	bl	800c4fc <xTaskRemoveFromEventList>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d012      	beq.n	800b03a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b014:	4b0c      	ldr	r3, [pc, #48]	; (800b048 <xQueueGenericReset+0xcc>)
 800b016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	e009      	b.n	800b03a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3310      	adds	r3, #16
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fef2 	bl	800ae14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3324      	adds	r3, #36	; 0x24
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff feed 	bl	800ae14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b03a:	f002 f9ab 	bl	800d394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b03e:	2301      	movs	r3, #1
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08e      	sub	sp, #56	; 0x38
 800b050:	af02      	add	r7, sp, #8
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <xQueueGenericCreateStatic+0x52>
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <xQueueGenericCreateStatic+0x56>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e000      	b.n	800b0a4 <xQueueGenericCreateStatic+0x58>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	623b      	str	r3, [r7, #32]
}
 800b0ba:	bf00      	nop
 800b0bc:	e7fe      	b.n	800b0bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <xQueueGenericCreateStatic+0x7e>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <xQueueGenericCreateStatic+0x82>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e000      	b.n	800b0d0 <xQueueGenericCreateStatic+0x84>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10a      	bne.n	800b0ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	61fb      	str	r3, [r7, #28]
}
 800b0e6:	bf00      	nop
 800b0e8:	e7fe      	b.n	800b0e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b0ea:	2350      	movs	r3, #80	; 0x50
 800b0ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b50      	cmp	r3, #80	; 0x50
 800b0f2:	d00a      	beq.n	800b10a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	61bb      	str	r3, [r7, #24]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b10a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00d      	beq.n	800b132 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b11e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	4613      	mov	r3, r2
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 f845 	bl	800b1bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b134:	4618      	mov	r0, r3
 800b136:	3730      	adds	r7, #48	; 0x30
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08a      	sub	sp, #40	; 0x28
 800b140:	af02      	add	r7, sp, #8
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	4613      	mov	r3, r2
 800b148:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613b      	str	r3, [r7, #16]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d102      	bne.n	800b172 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	61fb      	str	r3, [r7, #28]
 800b170:	e004      	b.n	800b17c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	fb02 f303 	mul.w	r3, r2, r3
 800b17a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	3350      	adds	r3, #80	; 0x50
 800b180:	4618      	mov	r0, r3
 800b182:	f002 f9f9 	bl	800d578 <pvPortMalloc>
 800b186:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d011      	beq.n	800b1b2 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	3350      	adds	r3, #80	; 0x50
 800b196:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1a0:	79fa      	ldrb	r2, [r7, #7]
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 f805 	bl	800b1bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1b2:	69bb      	ldr	r3, [r7, #24]
	}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3720      	adds	r7, #32
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d103      	bne.n	800b1d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	e002      	b.n	800b1de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	69b8      	ldr	r0, [r7, #24]
 800b1ee:	f7ff fec5 	bl	800af7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	78fa      	ldrb	r2, [r7, #3]
 800b1f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b1fa:	bf00      	nop
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b202:	b580      	push	{r7, lr}
 800b204:	b08a      	sub	sp, #40	; 0x28
 800b206:	af02      	add	r7, sp, #8
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10a      	bne.n	800b22a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	61bb      	str	r3, [r7, #24]
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d90a      	bls.n	800b248 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	617b      	str	r3, [r7, #20]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b248:	2302      	movs	r3, #2
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	2100      	movs	r1, #0
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f7ff fefa 	bl	800b04c <xQueueGenericCreateStatic>
 800b258:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b266:	69fb      	ldr	r3, [r7, #28]
	}
 800b268:	4618      	mov	r0, r3
 800b26a:	3720      	adds	r7, #32
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10a      	bne.n	800b296 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	613b      	str	r3, [r7, #16]
}
 800b292:	bf00      	nop
 800b294:	e7fe      	b.n	800b294 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d90a      	bls.n	800b2b4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60fb      	str	r3, [r7, #12]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff ff3f 	bl	800b13c <xQueueGenericCreate>
 800b2be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b2cc:	697b      	ldr	r3, [r7, #20]
	}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
	...

0800b2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08e      	sub	sp, #56	; 0x38
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
 800b2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10a      	bne.n	800b30a <xQueueGenericSend+0x32>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d103      	bne.n	800b318 <xQueueGenericSend+0x40>
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <xQueueGenericSend+0x44>
 800b318:	2301      	movs	r3, #1
 800b31a:	e000      	b.n	800b31e <xQueueGenericSend+0x46>
 800b31c:	2300      	movs	r3, #0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10a      	bne.n	800b338 <xQueueGenericSend+0x60>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b334:	bf00      	nop
 800b336:	e7fe      	b.n	800b336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d103      	bne.n	800b346 <xQueueGenericSend+0x6e>
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b342:	2b01      	cmp	r3, #1
 800b344:	d101      	bne.n	800b34a <xQueueGenericSend+0x72>
 800b346:	2301      	movs	r3, #1
 800b348:	e000      	b.n	800b34c <xQueueGenericSend+0x74>
 800b34a:	2300      	movs	r3, #0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10a      	bne.n	800b366 <xQueueGenericSend+0x8e>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	623b      	str	r3, [r7, #32]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b366:	f001 fa87 	bl	800c878 <xTaskGetSchedulerState>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d102      	bne.n	800b376 <xQueueGenericSend+0x9e>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <xQueueGenericSend+0xa2>
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <xQueueGenericSend+0xa4>
 800b37a:	2300      	movs	r3, #0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <xQueueGenericSend+0xbe>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	61fb      	str	r3, [r7, #28]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b396:	f001 ffcd 	bl	800d334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d302      	bcc.n	800b3ac <xQueueGenericSend+0xd4>
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d129      	bne.n	800b400 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3b2:	f000 faaa 	bl	800b90a <prvCopyDataToQueue>
 800b3b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d010      	beq.n	800b3e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	3324      	adds	r3, #36	; 0x24
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f001 f899 	bl	800c4fc <xTaskRemoveFromEventList>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d013      	beq.n	800b3f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b3d0:	4b3f      	ldr	r3, [pc, #252]	; (800b4d0 <xQueueGenericSend+0x1f8>)
 800b3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	e00a      	b.n	800b3f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d007      	beq.n	800b3f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3e8:	4b39      	ldr	r3, [pc, #228]	; (800b4d0 <xQueueGenericSend+0x1f8>)
 800b3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3f8:	f001 ffcc 	bl	800d394 <vPortExitCritical>
				return pdPASS;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e063      	b.n	800b4c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d103      	bne.n	800b40e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b406:	f001 ffc5 	bl	800d394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e05c      	b.n	800b4c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b414:	f107 0314 	add.w	r3, r7, #20
 800b418:	4618      	mov	r0, r3
 800b41a:	f001 f8d3 	bl	800c5c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b41e:	2301      	movs	r3, #1
 800b420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b422:	f001 ffb7 	bl	800d394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b426:	f000 fe45 	bl	800c0b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b42a:	f001 ff83 	bl	800d334 <vPortEnterCritical>
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b434:	b25b      	sxtb	r3, r3
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43a:	d103      	bne.n	800b444 <xQueueGenericSend+0x16c>
 800b43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b44a:	b25b      	sxtb	r3, r3
 800b44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b450:	d103      	bne.n	800b45a <xQueueGenericSend+0x182>
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b45a:	f001 ff9b 	bl	800d394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b45e:	1d3a      	adds	r2, r7, #4
 800b460:	f107 0314 	add.w	r3, r7, #20
 800b464:	4611      	mov	r1, r2
 800b466:	4618      	mov	r0, r3
 800b468:	f001 f8c2 	bl	800c5f0 <xTaskCheckForTimeOut>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d124      	bne.n	800b4bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b474:	f000 fb41 	bl	800bafa <prvIsQueueFull>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d018      	beq.n	800b4b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	3310      	adds	r3, #16
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	4611      	mov	r1, r2
 800b486:	4618      	mov	r0, r3
 800b488:	f000 ffe8 	bl	800c45c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b48e:	f000 facc 	bl	800ba2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b492:	f000 fe1d 	bl	800c0d0 <xTaskResumeAll>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f47f af7c 	bne.w	800b396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <xQueueGenericSend+0x1f8>)
 800b4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	e772      	b.n	800b396 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4b2:	f000 faba 	bl	800ba2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4b6:	f000 fe0b 	bl	800c0d0 <xTaskResumeAll>
 800b4ba:	e76c      	b.n	800b396 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4be:	f000 fab4 	bl	800ba2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4c2:	f000 fe05 	bl	800c0d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b4c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3738      	adds	r7, #56	; 0x38
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	e000ed04 	.word	0xe000ed04

0800b4d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08e      	sub	sp, #56	; 0x38
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
 800b4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10a      	bne.n	800b502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4fe:	bf00      	nop
 800b500:	e7fe      	b.n	800b500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d103      	bne.n	800b510 <xQueueGenericSendFromISR+0x3c>
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d101      	bne.n	800b514 <xQueueGenericSendFromISR+0x40>
 800b510:	2301      	movs	r3, #1
 800b512:	e000      	b.n	800b516 <xQueueGenericSendFromISR+0x42>
 800b514:	2300      	movs	r3, #0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10a      	bne.n	800b530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	623b      	str	r3, [r7, #32]
}
 800b52c:	bf00      	nop
 800b52e:	e7fe      	b.n	800b52e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b02      	cmp	r3, #2
 800b534:	d103      	bne.n	800b53e <xQueueGenericSendFromISR+0x6a>
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d101      	bne.n	800b542 <xQueueGenericSendFromISR+0x6e>
 800b53e:	2301      	movs	r3, #1
 800b540:	e000      	b.n	800b544 <xQueueGenericSendFromISR+0x70>
 800b542:	2300      	movs	r3, #0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	61fb      	str	r3, [r7, #28]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b55e:	f001 ffcb 	bl	800d4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b562:	f3ef 8211 	mrs	r2, BASEPRI
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	61ba      	str	r2, [r7, #24]
 800b578:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b57a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b57c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b586:	429a      	cmp	r2, r3
 800b588:	d302      	bcc.n	800b590 <xQueueGenericSendFromISR+0xbc>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d12c      	bne.n	800b5ea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5a0:	f000 f9b3 	bl	800b90a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ac:	d112      	bne.n	800b5d4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d016      	beq.n	800b5e4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	3324      	adds	r3, #36	; 0x24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 ff9e 	bl	800c4fc <xTaskRemoveFromEventList>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00e      	beq.n	800b5e4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e007      	b.n	800b5e4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5d8:	3301      	adds	r3, #1
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	b25a      	sxtb	r2, r3
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b5e8:	e001      	b.n	800b5ee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3738      	adds	r7, #56	; 0x38
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b08c      	sub	sp, #48	; 0x30
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b610:	2300      	movs	r3, #0
 800b612:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10a      	bne.n	800b634 <xQueueReceive+0x30>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	623b      	str	r3, [r7, #32]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d103      	bne.n	800b642 <xQueueReceive+0x3e>
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <xQueueReceive+0x42>
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <xQueueReceive+0x44>
 800b646:	2300      	movs	r3, #0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <xQueueReceive+0x5e>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	61fb      	str	r3, [r7, #28]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b662:	f001 f909 	bl	800c878 <xTaskGetSchedulerState>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <xQueueReceive+0x6e>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <xQueueReceive+0x72>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueReceive+0x74>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <xQueueReceive+0x8e>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	61bb      	str	r3, [r7, #24]
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b692:	f001 fe4f 	bl	800d334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d01f      	beq.n	800b6e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6a6:	f000 f99a 	bl	800b9de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	1e5a      	subs	r2, r3, #1
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00f      	beq.n	800b6da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	3310      	adds	r3, #16
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 ff1c 	bl	800c4fc <xTaskRemoveFromEventList>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6ca:	4b3d      	ldr	r3, [pc, #244]	; (800b7c0 <xQueueReceive+0x1bc>)
 800b6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6da:	f001 fe5b 	bl	800d394 <vPortExitCritical>
				return pdPASS;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e069      	b.n	800b7b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6e8:	f001 fe54 	bl	800d394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e062      	b.n	800b7b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6f6:	f107 0310 	add.w	r3, r7, #16
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 ff62 	bl	800c5c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b704:	f001 fe46 	bl	800d394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b708:	f000 fcd4 	bl	800c0b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b70c:	f001 fe12 	bl	800d334 <vPortEnterCritical>
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b716:	b25b      	sxtb	r3, r3
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71c:	d103      	bne.n	800b726 <xQueueReceive+0x122>
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b72c:	b25b      	sxtb	r3, r3
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d103      	bne.n	800b73c <xQueueReceive+0x138>
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b73c:	f001 fe2a 	bl	800d394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b740:	1d3a      	adds	r2, r7, #4
 800b742:	f107 0310 	add.w	r3, r7, #16
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 ff51 	bl	800c5f0 <xTaskCheckForTimeOut>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d123      	bne.n	800b79c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b756:	f000 f9ba 	bl	800bace <prvIsQueueEmpty>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d017      	beq.n	800b790 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	3324      	adds	r3, #36	; 0x24
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fe77 	bl	800c45c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b770:	f000 f95b 	bl	800ba2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b774:	f000 fcac 	bl	800c0d0 <xTaskResumeAll>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d189      	bne.n	800b692 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b77e:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <xQueueReceive+0x1bc>)
 800b780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b784:	601a      	str	r2, [r3, #0]
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	e780      	b.n	800b692 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b792:	f000 f94a 	bl	800ba2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b796:	f000 fc9b 	bl	800c0d0 <xTaskResumeAll>
 800b79a:	e77a      	b.n	800b692 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b79e:	f000 f944 	bl	800ba2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7a2:	f000 fc95 	bl	800c0d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7a8:	f000 f991 	bl	800bace <prvIsQueueEmpty>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f43f af6f 	beq.w	800b692 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3730      	adds	r7, #48	; 0x30
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	e000ed04 	.word	0xe000ed04

0800b7c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08e      	sub	sp, #56	; 0x38
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	623b      	str	r3, [r7, #32]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d103      	bne.n	800b7fe <xQueueReceiveFromISR+0x3a>
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <xQueueReceiveFromISR+0x3e>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e000      	b.n	800b804 <xQueueReceiveFromISR+0x40>
 800b802:	2300      	movs	r3, #0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10a      	bne.n	800b81e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	61fb      	str	r3, [r7, #28]
}
 800b81a:	bf00      	nop
 800b81c:	e7fe      	b.n	800b81c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b81e:	f001 fe6b 	bl	800d4f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b822:	f3ef 8211 	mrs	r2, BASEPRI
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	61ba      	str	r2, [r7, #24]
 800b838:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b83a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	2b00      	cmp	r3, #0
 800b848:	d02f      	beq.n	800b8aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b854:	68b9      	ldr	r1, [r7, #8]
 800b856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b858:	f000 f8c1 	bl	800b9de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	1e5a      	subs	r2, r3, #1
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b864:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d112      	bne.n	800b894 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d016      	beq.n	800b8a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b878:	3310      	adds	r3, #16
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 fe3e 	bl	800c4fc <xTaskRemoveFromEventList>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00e      	beq.n	800b8a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00b      	beq.n	800b8a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	e007      	b.n	800b8a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	3301      	adds	r3, #1
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	b25a      	sxtb	r2, r3
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a8:	e001      	b.n	800b8ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f383 8811 	msr	BASEPRI, r3
}
 800b8b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3738      	adds	r7, #56	; 0x38
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10a      	bne.n	800b8ec <vQueueDelete+0x28>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	60bb      	str	r3, [r7, #8]
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f000 f947 	bl	800bb80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d102      	bne.n	800b902 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f001 feff 	bl	800d700 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b902:	bf00      	nop
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b086      	sub	sp, #24
 800b90e:	af00      	add	r7, sp, #0
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b916:	2300      	movs	r3, #0
 800b918:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10d      	bne.n	800b944 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d14d      	bne.n	800b9cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	4618      	mov	r0, r3
 800b936:	f000 ffbd 	bl	800c8b4 <xTaskPriorityDisinherit>
 800b93a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	609a      	str	r2, [r3, #8]
 800b942:	e043      	b.n	800b9cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d119      	bne.n	800b97e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6858      	ldr	r0, [r3, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b952:	461a      	mov	r2, r3
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	f002 fb2f 	bl	800dfb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	441a      	add	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	429a      	cmp	r2, r3
 800b972:	d32b      	bcc.n	800b9cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	605a      	str	r2, [r3, #4]
 800b97c:	e026      	b.n	800b9cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	68d8      	ldr	r0, [r3, #12]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	461a      	mov	r2, r3
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	f002 fb15 	bl	800dfb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	68da      	ldr	r2, [r3, #12]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	425b      	negs	r3, r3
 800b998:	441a      	add	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68da      	ldr	r2, [r3, #12]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d207      	bcs.n	800b9ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	425b      	negs	r3, r3
 800b9b4:	441a      	add	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d105      	bne.n	800b9cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b9d4:	697b      	ldr	r3, [r7, #20]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d018      	beq.n	800ba22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68da      	ldr	r2, [r3, #12]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f8:	441a      	add	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68da      	ldr	r2, [r3, #12]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d303      	bcc.n	800ba12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	68d9      	ldr	r1, [r3, #12]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6838      	ldr	r0, [r7, #0]
 800ba1e:	f002 facb 	bl	800dfb8 <memcpy>
	}
}
 800ba22:	bf00      	nop
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba32:	f001 fc7f 	bl	800d334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba3e:	e011      	b.n	800ba64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d012      	beq.n	800ba6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3324      	adds	r3, #36	; 0x24
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 fd55 	bl	800c4fc <xTaskRemoveFromEventList>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba58:	f000 fe2c 	bl	800c6b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dce9      	bgt.n	800ba40 <prvUnlockQueue+0x16>
 800ba6c:	e000      	b.n	800ba70 <prvUnlockQueue+0x46>
					break;
 800ba6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	22ff      	movs	r2, #255	; 0xff
 800ba74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba78:	f001 fc8c 	bl	800d394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba7c:	f001 fc5a 	bl	800d334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba88:	e011      	b.n	800baae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d012      	beq.n	800bab8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3310      	adds	r3, #16
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 fd30 	bl	800c4fc <xTaskRemoveFromEventList>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800baa2:	f000 fe07 	bl	800c6b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800baae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	dce9      	bgt.n	800ba8a <prvUnlockQueue+0x60>
 800bab6:	e000      	b.n	800baba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bab8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	22ff      	movs	r2, #255	; 0xff
 800babe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bac2:	f001 fc67 	bl	800d394 <vPortExitCritical>
}
 800bac6:	bf00      	nop
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bad6:	f001 fc2d 	bl	800d334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d102      	bne.n	800bae8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bae2:	2301      	movs	r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]
 800bae6:	e001      	b.n	800baec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baec:	f001 fc52 	bl	800d394 <vPortExitCritical>

	return xReturn;
 800baf0:	68fb      	ldr	r3, [r7, #12]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb02:	f001 fc17 	bl	800d334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d102      	bne.n	800bb18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb12:	2301      	movs	r3, #1
 800bb14:	60fb      	str	r3, [r7, #12]
 800bb16:	e001      	b.n	800bb1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb1c:	f001 fc3a 	bl	800d394 <vPortExitCritical>

	return xReturn;
 800bb20:	68fb      	ldr	r3, [r7, #12]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb36:	2300      	movs	r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	e014      	b.n	800bb66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb3c:	4a0f      	ldr	r2, [pc, #60]	; (800bb7c <vQueueAddToRegistry+0x50>)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10b      	bne.n	800bb60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb48:	490c      	ldr	r1, [pc, #48]	; (800bb7c <vQueueAddToRegistry+0x50>)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb52:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <vQueueAddToRegistry+0x50>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	4413      	add	r3, r2
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb5e:	e006      	b.n	800bb6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3301      	adds	r3, #1
 800bb64:	60fb      	str	r3, [r7, #12]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b07      	cmp	r3, #7
 800bb6a:	d9e7      	bls.n	800bb3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb6c:	bf00      	nop
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	20004cc0 	.word	0x20004cc0

0800bb80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	e016      	b.n	800bbbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bb8e:	4a10      	ldr	r2, [pc, #64]	; (800bbd0 <vQueueUnregisterQueue+0x50>)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	4413      	add	r3, r2
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d10b      	bne.n	800bbb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bb9e:	4a0c      	ldr	r2, [pc, #48]	; (800bbd0 <vQueueUnregisterQueue+0x50>)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2100      	movs	r1, #0
 800bba4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bba8:	4a09      	ldr	r2, [pc, #36]	; (800bbd0 <vQueueUnregisterQueue+0x50>)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	00db      	lsls	r3, r3, #3
 800bbae:	4413      	add	r3, r2
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	605a      	str	r2, [r3, #4]
				break;
 800bbb4:	e006      	b.n	800bbc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2b07      	cmp	r3, #7
 800bbc0:	d9e5      	bls.n	800bb8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	20004cc0 	.word	0x20004cc0

0800bbd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bbe4:	f001 fba6 	bl	800d334 <vPortEnterCritical>
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbee:	b25b      	sxtb	r3, r3
 800bbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf4:	d103      	bne.n	800bbfe <vQueueWaitForMessageRestricted+0x2a>
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc04:	b25b      	sxtb	r3, r3
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0a:	d103      	bne.n	800bc14 <vQueueWaitForMessageRestricted+0x40>
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc14:	f001 fbbe 	bl	800d394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d106      	bne.n	800bc2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	3324      	adds	r3, #36	; 0x24
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	68b9      	ldr	r1, [r7, #8]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 fc3b 	bl	800c4a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc2e:	6978      	ldr	r0, [r7, #20]
 800bc30:	f7ff fefb 	bl	800ba2a <prvUnlockQueue>
	}
 800bc34:	bf00      	nop
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08e      	sub	sp, #56	; 0x38
 800bc40:	af04      	add	r7, sp, #16
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	623b      	str	r3, [r7, #32]
}
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <xTaskCreateStatic+0x46>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	61fb      	str	r3, [r7, #28]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc82:	235c      	movs	r3, #92	; 0x5c
 800bc84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	2b5c      	cmp	r3, #92	; 0x5c
 800bc8a:	d00a      	beq.n	800bca2 <xTaskCreateStatic+0x66>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	61bb      	str	r3, [r7, #24]
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bca2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d01e      	beq.n	800bce8 <xTaskCreateStatic+0xac>
 800bcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d01b      	beq.n	800bce8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	9303      	str	r3, [sp, #12]
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	9302      	str	r3, [sp, #8]
 800bcca:	f107 0314 	add.w	r3, r7, #20
 800bcce:	9301      	str	r3, [sp, #4]
 800bcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 f850 	bl	800bd80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bce2:	f000 f8dd 	bl	800bea0 <prvAddNewTaskToReadyList>
 800bce6:	e001      	b.n	800bcec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bce8:	2300      	movs	r3, #0
 800bcea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bcec:	697b      	ldr	r3, [r7, #20]
	}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3728      	adds	r7, #40	; 0x28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b08c      	sub	sp, #48	; 0x30
 800bcfa:	af04      	add	r7, sp, #16
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	603b      	str	r3, [r7, #0]
 800bd02:	4613      	mov	r3, r2
 800bd04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd06:	88fb      	ldrh	r3, [r7, #6]
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 fc34 	bl	800d578 <pvPortMalloc>
 800bd10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00e      	beq.n	800bd36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd18:	205c      	movs	r0, #92	; 0x5c
 800bd1a:	f001 fc2d 	bl	800d578 <pvPortMalloc>
 800bd1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	631a      	str	r2, [r3, #48]	; 0x30
 800bd2c:	e005      	b.n	800bd3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd2e:	6978      	ldr	r0, [r7, #20]
 800bd30:	f001 fce6 	bl	800d700 <vPortFree>
 800bd34:	e001      	b.n	800bd3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d017      	beq.n	800bd70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd48:	88fa      	ldrh	r2, [r7, #6]
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	9303      	str	r3, [sp, #12]
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	9302      	str	r3, [sp, #8]
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	9301      	str	r3, [sp, #4]
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68b9      	ldr	r1, [r7, #8]
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f000 f80e 	bl	800bd80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd64:	69f8      	ldr	r0, [r7, #28]
 800bd66:	f000 f89b 	bl	800bea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	61bb      	str	r3, [r7, #24]
 800bd6e:	e002      	b.n	800bd76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd70:	f04f 33ff 	mov.w	r3, #4294967295
 800bd74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd76:	69bb      	ldr	r3, [r7, #24]
	}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3720      	adds	r7, #32
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	461a      	mov	r2, r3
 800bd98:	21a5      	movs	r1, #165	; 0xa5
 800bd9a:	f002 f91b 	bl	800dfd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f023 0307 	bic.w	r3, r3, #7
 800bdb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	f003 0307 	and.w	r3, r3, #7
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	617b      	str	r3, [r7, #20]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d01f      	beq.n	800be1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdde:	2300      	movs	r3, #0
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e012      	b.n	800be0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	4413      	add	r3, r2
 800bdea:	7819      	ldrb	r1, [r3, #0]
 800bdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3334      	adds	r3, #52	; 0x34
 800bdf4:	460a      	mov	r2, r1
 800bdf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	3301      	adds	r3, #1
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	2b0f      	cmp	r3, #15
 800be0e:	d9e9      	bls.n	800bde4 <prvInitialiseNewTask+0x64>
 800be10:	e000      	b.n	800be14 <prvInitialiseNewTask+0x94>
			{
				break;
 800be12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be1c:	e003      	b.n	800be26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	2b37      	cmp	r3, #55	; 0x37
 800be2a:	d901      	bls.n	800be30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be2c:	2337      	movs	r3, #55	; 0x37
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	2200      	movs	r2, #0
 800be40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	3304      	adds	r3, #4
 800be46:	4618      	mov	r0, r3
 800be48:	f7ff f804 	bl	800ae54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	3318      	adds	r3, #24
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe ffff 	bl	800ae54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	2200      	movs	r2, #0
 800be70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	68f9      	ldr	r1, [r7, #12]
 800be7e:	69b8      	ldr	r0, [r7, #24]
 800be80:	f001 f928 	bl	800d0d4 <pxPortInitialiseStack>
 800be84:	4602      	mov	r2, r0
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d002      	beq.n	800be96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be96:	bf00      	nop
 800be98:	3720      	adds	r7, #32
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bea8:	f001 fa44 	bl	800d334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800beac:	4b2d      	ldr	r3, [pc, #180]	; (800bf64 <prvAddNewTaskToReadyList+0xc4>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	4a2c      	ldr	r2, [pc, #176]	; (800bf64 <prvAddNewTaskToReadyList+0xc4>)
 800beb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800beb6:	4b2c      	ldr	r3, [pc, #176]	; (800bf68 <prvAddNewTaskToReadyList+0xc8>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d109      	bne.n	800bed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bebe:	4a2a      	ldr	r2, [pc, #168]	; (800bf68 <prvAddNewTaskToReadyList+0xc8>)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bec4:	4b27      	ldr	r3, [pc, #156]	; (800bf64 <prvAddNewTaskToReadyList+0xc4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d110      	bne.n	800beee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800becc:	f000 fc16 	bl	800c6fc <prvInitialiseTaskLists>
 800bed0:	e00d      	b.n	800beee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bed2:	4b26      	ldr	r3, [pc, #152]	; (800bf6c <prvAddNewTaskToReadyList+0xcc>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d109      	bne.n	800beee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800beda:	4b23      	ldr	r3, [pc, #140]	; (800bf68 <prvAddNewTaskToReadyList+0xc8>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d802      	bhi.n	800beee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bee8:	4a1f      	ldr	r2, [pc, #124]	; (800bf68 <prvAddNewTaskToReadyList+0xc8>)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800beee:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <prvAddNewTaskToReadyList+0xd0>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3301      	adds	r3, #1
 800bef4:	4a1e      	ldr	r2, [pc, #120]	; (800bf70 <prvAddNewTaskToReadyList+0xd0>)
 800bef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bef8:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <prvAddNewTaskToReadyList+0xd0>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf04:	4b1b      	ldr	r3, [pc, #108]	; (800bf74 <prvAddNewTaskToReadyList+0xd4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d903      	bls.n	800bf14 <prvAddNewTaskToReadyList+0x74>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	4a18      	ldr	r2, [pc, #96]	; (800bf74 <prvAddNewTaskToReadyList+0xd4>)
 800bf12:	6013      	str	r3, [r2, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf18:	4613      	mov	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4a15      	ldr	r2, [pc, #84]	; (800bf78 <prvAddNewTaskToReadyList+0xd8>)
 800bf22:	441a      	add	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7fe ff9f 	bl	800ae6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf30:	f001 fa30 	bl	800d394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf34:	4b0d      	ldr	r3, [pc, #52]	; (800bf6c <prvAddNewTaskToReadyList+0xcc>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00e      	beq.n	800bf5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	; (800bf68 <prvAddNewTaskToReadyList+0xc8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d207      	bcs.n	800bf5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf4a:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <prvAddNewTaskToReadyList+0xdc>)
 800bf4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20000c4c 	.word	0x20000c4c
 800bf68:	20000778 	.word	0x20000778
 800bf6c:	20000c58 	.word	0x20000c58
 800bf70:	20000c68 	.word	0x20000c68
 800bf74:	20000c54 	.word	0x20000c54
 800bf78:	2000077c 	.word	0x2000077c
 800bf7c:	e000ed04 	.word	0xe000ed04

0800bf80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d017      	beq.n	800bfc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf92:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <vTaskDelay+0x60>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <vTaskDelay+0x30>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	60bb      	str	r3, [r7, #8]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bfb0:	f000 f880 	bl	800c0b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fcea 	bl	800c990 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bfbc:	f000 f888 	bl	800c0d0 <xTaskResumeAll>
 800bfc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d107      	bne.n	800bfd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bfc8:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <vTaskDelay+0x64>)
 800bfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfd8:	bf00      	nop
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	20000c74 	.word	0x20000c74
 800bfe4:	e000ed04 	.word	0xe000ed04

0800bfe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bff6:	463a      	mov	r2, r7
 800bff8:	1d39      	adds	r1, r7, #4
 800bffa:	f107 0308 	add.w	r3, r7, #8
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe fed4 	bl	800adac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	9202      	str	r2, [sp, #8]
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	2300      	movs	r3, #0
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	2300      	movs	r3, #0
 800c014:	460a      	mov	r2, r1
 800c016:	4921      	ldr	r1, [pc, #132]	; (800c09c <vTaskStartScheduler+0xb4>)
 800c018:	4821      	ldr	r0, [pc, #132]	; (800c0a0 <vTaskStartScheduler+0xb8>)
 800c01a:	f7ff fe0f 	bl	800bc3c <xTaskCreateStatic>
 800c01e:	4603      	mov	r3, r0
 800c020:	4a20      	ldr	r2, [pc, #128]	; (800c0a4 <vTaskStartScheduler+0xbc>)
 800c022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c024:	4b1f      	ldr	r3, [pc, #124]	; (800c0a4 <vTaskStartScheduler+0xbc>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c02c:	2301      	movs	r3, #1
 800c02e:	617b      	str	r3, [r7, #20]
 800c030:	e001      	b.n	800c036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c032:	2300      	movs	r3, #0
 800c034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d102      	bne.n	800c042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c03c:	f000 fcfc 	bl	800ca38 <xTimerCreateTimerTask>
 800c040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d116      	bne.n	800c076 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	613b      	str	r3, [r7, #16]
}
 800c05a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c05c:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <vTaskStartScheduler+0xc0>)
 800c05e:	f04f 32ff 	mov.w	r2, #4294967295
 800c062:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c064:	4b11      	ldr	r3, [pc, #68]	; (800c0ac <vTaskStartScheduler+0xc4>)
 800c066:	2201      	movs	r2, #1
 800c068:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c06a:	4b11      	ldr	r3, [pc, #68]	; (800c0b0 <vTaskStartScheduler+0xc8>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c070:	f001 f8be 	bl	800d1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c074:	e00e      	b.n	800c094 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07c:	d10a      	bne.n	800c094 <vTaskStartScheduler+0xac>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	60fb      	str	r3, [r7, #12]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <vTaskStartScheduler+0xaa>
}
 800c094:	bf00      	nop
 800c096:	3718      	adds	r7, #24
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	0800e240 	.word	0x0800e240
 800c0a0:	0800c6cd 	.word	0x0800c6cd
 800c0a4:	20000c70 	.word	0x20000c70
 800c0a8:	20000c6c 	.word	0x20000c6c
 800c0ac:	20000c58 	.word	0x20000c58
 800c0b0:	20000c50 	.word	0x20000c50

0800c0b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c0b8:	4b04      	ldr	r3, [pc, #16]	; (800c0cc <vTaskSuspendAll+0x18>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	4a03      	ldr	r2, [pc, #12]	; (800c0cc <vTaskSuspendAll+0x18>)
 800c0c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c0c2:	bf00      	nop
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	20000c74 	.word	0x20000c74

0800c0d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c0de:	4b42      	ldr	r3, [pc, #264]	; (800c1e8 <xTaskResumeAll+0x118>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10a      	bne.n	800c0fc <xTaskResumeAll+0x2c>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	603b      	str	r3, [r7, #0]
}
 800c0f8:	bf00      	nop
 800c0fa:	e7fe      	b.n	800c0fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0fc:	f001 f91a 	bl	800d334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c100:	4b39      	ldr	r3, [pc, #228]	; (800c1e8 <xTaskResumeAll+0x118>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3b01      	subs	r3, #1
 800c106:	4a38      	ldr	r2, [pc, #224]	; (800c1e8 <xTaskResumeAll+0x118>)
 800c108:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c10a:	4b37      	ldr	r3, [pc, #220]	; (800c1e8 <xTaskResumeAll+0x118>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d162      	bne.n	800c1d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c112:	4b36      	ldr	r3, [pc, #216]	; (800c1ec <xTaskResumeAll+0x11c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d05e      	beq.n	800c1d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c11a:	e02f      	b.n	800c17c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c11c:	4b34      	ldr	r3, [pc, #208]	; (800c1f0 <xTaskResumeAll+0x120>)
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3318      	adds	r3, #24
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fefd 	bl	800af28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3304      	adds	r3, #4
 800c132:	4618      	mov	r0, r3
 800c134:	f7fe fef8 	bl	800af28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13c:	4b2d      	ldr	r3, [pc, #180]	; (800c1f4 <xTaskResumeAll+0x124>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	429a      	cmp	r2, r3
 800c142:	d903      	bls.n	800c14c <xTaskResumeAll+0x7c>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c148:	4a2a      	ldr	r2, [pc, #168]	; (800c1f4 <xTaskResumeAll+0x124>)
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4a27      	ldr	r2, [pc, #156]	; (800c1f8 <xTaskResumeAll+0x128>)
 800c15a:	441a      	add	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3304      	adds	r3, #4
 800c160:	4619      	mov	r1, r3
 800c162:	4610      	mov	r0, r2
 800c164:	f7fe fe83 	bl	800ae6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16c:	4b23      	ldr	r3, [pc, #140]	; (800c1fc <xTaskResumeAll+0x12c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	429a      	cmp	r2, r3
 800c174:	d302      	bcc.n	800c17c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c176:	4b22      	ldr	r3, [pc, #136]	; (800c200 <xTaskResumeAll+0x130>)
 800c178:	2201      	movs	r2, #1
 800c17a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c17c:	4b1c      	ldr	r3, [pc, #112]	; (800c1f0 <xTaskResumeAll+0x120>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1cb      	bne.n	800c11c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c18a:	f000 fb55 	bl	800c838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c18e:	4b1d      	ldr	r3, [pc, #116]	; (800c204 <xTaskResumeAll+0x134>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d010      	beq.n	800c1bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c19a:	f000 f847 	bl	800c22c <xTaskIncrementTick>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c1a4:	4b16      	ldr	r3, [pc, #88]	; (800c200 <xTaskResumeAll+0x130>)
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1f1      	bne.n	800c19a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c1b6:	4b13      	ldr	r3, [pc, #76]	; (800c204 <xTaskResumeAll+0x134>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c1bc:	4b10      	ldr	r3, [pc, #64]	; (800c200 <xTaskResumeAll+0x130>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d009      	beq.n	800c1d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c1c8:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <xTaskResumeAll+0x138>)
 800c1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1d8:	f001 f8dc 	bl	800d394 <vPortExitCritical>

	return xAlreadyYielded;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000c74 	.word	0x20000c74
 800c1ec:	20000c4c 	.word	0x20000c4c
 800c1f0:	20000c0c 	.word	0x20000c0c
 800c1f4:	20000c54 	.word	0x20000c54
 800c1f8:	2000077c 	.word	0x2000077c
 800c1fc:	20000778 	.word	0x20000778
 800c200:	20000c60 	.word	0x20000c60
 800c204:	20000c5c 	.word	0x20000c5c
 800c208:	e000ed04 	.word	0xe000ed04

0800c20c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <xTaskGetTickCount+0x1c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c218:	687b      	ldr	r3, [r7, #4]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	20000c50 	.word	0x20000c50

0800c22c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c232:	2300      	movs	r3, #0
 800c234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c236:	4b4f      	ldr	r3, [pc, #316]	; (800c374 <xTaskIncrementTick+0x148>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f040 8089 	bne.w	800c352 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c240:	4b4d      	ldr	r3, [pc, #308]	; (800c378 <xTaskIncrementTick+0x14c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3301      	adds	r3, #1
 800c246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c248:	4a4b      	ldr	r2, [pc, #300]	; (800c378 <xTaskIncrementTick+0x14c>)
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d120      	bne.n	800c296 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c254:	4b49      	ldr	r3, [pc, #292]	; (800c37c <xTaskIncrementTick+0x150>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00a      	beq.n	800c274 <xTaskIncrementTick+0x48>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	603b      	str	r3, [r7, #0]
}
 800c270:	bf00      	nop
 800c272:	e7fe      	b.n	800c272 <xTaskIncrementTick+0x46>
 800c274:	4b41      	ldr	r3, [pc, #260]	; (800c37c <xTaskIncrementTick+0x150>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]
 800c27a:	4b41      	ldr	r3, [pc, #260]	; (800c380 <xTaskIncrementTick+0x154>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a3f      	ldr	r2, [pc, #252]	; (800c37c <xTaskIncrementTick+0x150>)
 800c280:	6013      	str	r3, [r2, #0]
 800c282:	4a3f      	ldr	r2, [pc, #252]	; (800c380 <xTaskIncrementTick+0x154>)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	4b3e      	ldr	r3, [pc, #248]	; (800c384 <xTaskIncrementTick+0x158>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3301      	adds	r3, #1
 800c28e:	4a3d      	ldr	r2, [pc, #244]	; (800c384 <xTaskIncrementTick+0x158>)
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	f000 fad1 	bl	800c838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c296:	4b3c      	ldr	r3, [pc, #240]	; (800c388 <xTaskIncrementTick+0x15c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d349      	bcc.n	800c334 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2a0:	4b36      	ldr	r3, [pc, #216]	; (800c37c <xTaskIncrementTick+0x150>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d104      	bne.n	800c2b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2aa:	4b37      	ldr	r3, [pc, #220]	; (800c388 <xTaskIncrementTick+0x15c>)
 800c2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b0:	601a      	str	r2, [r3, #0]
					break;
 800c2b2:	e03f      	b.n	800c334 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2b4:	4b31      	ldr	r3, [pc, #196]	; (800c37c <xTaskIncrementTick+0x150>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d203      	bcs.n	800c2d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2cc:	4a2e      	ldr	r2, [pc, #184]	; (800c388 <xTaskIncrementTick+0x15c>)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2d2:	e02f      	b.n	800c334 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fe fe25 	bl	800af28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d004      	beq.n	800c2f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	3318      	adds	r3, #24
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fe1c 	bl	800af28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f4:	4b25      	ldr	r3, [pc, #148]	; (800c38c <xTaskIncrementTick+0x160>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d903      	bls.n	800c304 <xTaskIncrementTick+0xd8>
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	4a22      	ldr	r2, [pc, #136]	; (800c38c <xTaskIncrementTick+0x160>)
 800c302:	6013      	str	r3, [r2, #0]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4a1f      	ldr	r2, [pc, #124]	; (800c390 <xTaskIncrementTick+0x164>)
 800c312:	441a      	add	r2, r3
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	3304      	adds	r3, #4
 800c318:	4619      	mov	r1, r3
 800c31a:	4610      	mov	r0, r2
 800c31c:	f7fe fda7 	bl	800ae6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c324:	4b1b      	ldr	r3, [pc, #108]	; (800c394 <xTaskIncrementTick+0x168>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d3b8      	bcc.n	800c2a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c32e:	2301      	movs	r3, #1
 800c330:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c332:	e7b5      	b.n	800c2a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c334:	4b17      	ldr	r3, [pc, #92]	; (800c394 <xTaskIncrementTick+0x168>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33a:	4915      	ldr	r1, [pc, #84]	; (800c390 <xTaskIncrementTick+0x164>)
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	440b      	add	r3, r1
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d907      	bls.n	800c35c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800c34c:	2301      	movs	r3, #1
 800c34e:	617b      	str	r3, [r7, #20]
 800c350:	e004      	b.n	800c35c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c352:	4b11      	ldr	r3, [pc, #68]	; (800c398 <xTaskIncrementTick+0x16c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3301      	adds	r3, #1
 800c358:	4a0f      	ldr	r2, [pc, #60]	; (800c398 <xTaskIncrementTick+0x16c>)
 800c35a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c35c:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <xTaskIncrementTick+0x170>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c368:	697b      	ldr	r3, [r7, #20]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000c74 	.word	0x20000c74
 800c378:	20000c50 	.word	0x20000c50
 800c37c:	20000c04 	.word	0x20000c04
 800c380:	20000c08 	.word	0x20000c08
 800c384:	20000c64 	.word	0x20000c64
 800c388:	20000c6c 	.word	0x20000c6c
 800c38c:	20000c54 	.word	0x20000c54
 800c390:	2000077c 	.word	0x2000077c
 800c394:	20000778 	.word	0x20000778
 800c398:	20000c5c 	.word	0x20000c5c
 800c39c:	20000c60 	.word	0x20000c60

0800c3a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3a6:	4b28      	ldr	r3, [pc, #160]	; (800c448 <vTaskSwitchContext+0xa8>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d003      	beq.n	800c3b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3ae:	4b27      	ldr	r3, [pc, #156]	; (800c44c <vTaskSwitchContext+0xac>)
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3b4:	e041      	b.n	800c43a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c3b6:	4b25      	ldr	r3, [pc, #148]	; (800c44c <vTaskSwitchContext+0xac>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3bc:	4b24      	ldr	r3, [pc, #144]	; (800c450 <vTaskSwitchContext+0xb0>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]
 800c3c2:	e010      	b.n	800c3e6 <vTaskSwitchContext+0x46>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <vTaskSwitchContext+0x40>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	607b      	str	r3, [r7, #4]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <vTaskSwitchContext+0x3e>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	60fb      	str	r3, [r7, #12]
 800c3e6:	491b      	ldr	r1, [pc, #108]	; (800c454 <vTaskSwitchContext+0xb4>)
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	440b      	add	r3, r1
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0e4      	beq.n	800c3c4 <vTaskSwitchContext+0x24>
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4a13      	ldr	r2, [pc, #76]	; (800c454 <vTaskSwitchContext+0xb4>)
 800c406:	4413      	add	r3, r2
 800c408:	60bb      	str	r3, [r7, #8]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	605a      	str	r2, [r3, #4]
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	3308      	adds	r3, #8
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d104      	bne.n	800c42a <vTaskSwitchContext+0x8a>
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	4a09      	ldr	r2, [pc, #36]	; (800c458 <vTaskSwitchContext+0xb8>)
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	4a06      	ldr	r2, [pc, #24]	; (800c450 <vTaskSwitchContext+0xb0>)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6013      	str	r3, [r2, #0]
}
 800c43a:	bf00      	nop
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	20000c74 	.word	0x20000c74
 800c44c:	20000c60 	.word	0x20000c60
 800c450:	20000c54 	.word	0x20000c54
 800c454:	2000077c 	.word	0x2000077c
 800c458:	20000778 	.word	0x20000778

0800c45c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	60fb      	str	r3, [r7, #12]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <vTaskPlaceOnEventList+0x44>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	3318      	adds	r3, #24
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7fe fd13 	bl	800aeb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c490:	2101      	movs	r1, #1
 800c492:	6838      	ldr	r0, [r7, #0]
 800c494:	f000 fa7c 	bl	800c990 <prvAddCurrentTaskToDelayedList>
}
 800c498:	bf00      	nop
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20000778 	.word	0x20000778

0800c4a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	617b      	str	r3, [r7, #20]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3318      	adds	r3, #24
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f7fe fcca 	bl	800ae6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	68b8      	ldr	r0, [r7, #8]
 800c4ea:	f000 fa51 	bl	800c990 <prvAddCurrentTaskToDelayedList>
	}
 800c4ee:	bf00      	nop
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000778 	.word	0x20000778

0800c4fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10a      	bne.n	800c528 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	60fb      	str	r3, [r7, #12]
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	3318      	adds	r3, #24
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fcfb 	bl	800af28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c532:	4b1e      	ldr	r3, [pc, #120]	; (800c5ac <xTaskRemoveFromEventList+0xb0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d11d      	bne.n	800c576 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	3304      	adds	r3, #4
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fe fcf2 	bl	800af28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c548:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <xTaskRemoveFromEventList+0xb4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d903      	bls.n	800c558 <xTaskRemoveFromEventList+0x5c>
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c554:	4a16      	ldr	r2, [pc, #88]	; (800c5b0 <xTaskRemoveFromEventList+0xb4>)
 800c556:	6013      	str	r3, [r2, #0]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4a13      	ldr	r2, [pc, #76]	; (800c5b4 <xTaskRemoveFromEventList+0xb8>)
 800c566:	441a      	add	r2, r3
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	3304      	adds	r3, #4
 800c56c:	4619      	mov	r1, r3
 800c56e:	4610      	mov	r0, r2
 800c570:	f7fe fc7d 	bl	800ae6e <vListInsertEnd>
 800c574:	e005      	b.n	800c582 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	3318      	adds	r3, #24
 800c57a:	4619      	mov	r1, r3
 800c57c:	480e      	ldr	r0, [pc, #56]	; (800c5b8 <xTaskRemoveFromEventList+0xbc>)
 800c57e:	f7fe fc76 	bl	800ae6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	4b0d      	ldr	r3, [pc, #52]	; (800c5bc <xTaskRemoveFromEventList+0xc0>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d905      	bls.n	800c59c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c590:	2301      	movs	r3, #1
 800c592:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c594:	4b0a      	ldr	r3, [pc, #40]	; (800c5c0 <xTaskRemoveFromEventList+0xc4>)
 800c596:	2201      	movs	r2, #1
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	e001      	b.n	800c5a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c5a0:	697b      	ldr	r3, [r7, #20]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000c74 	.word	0x20000c74
 800c5b0:	20000c54 	.word	0x20000c54
 800c5b4:	2000077c 	.word	0x2000077c
 800c5b8:	20000c0c 	.word	0x20000c0c
 800c5bc:	20000778 	.word	0x20000778
 800c5c0:	20000c60 	.word	0x20000c60

0800c5c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5cc:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <vTaskInternalSetTimeOutState+0x24>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5d4:	4b05      	ldr	r3, [pc, #20]	; (800c5ec <vTaskInternalSetTimeOutState+0x28>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	605a      	str	r2, [r3, #4]
}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	20000c64 	.word	0x20000c64
 800c5ec:	20000c50 	.word	0x20000c50

0800c5f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10a      	bne.n	800c616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	613b      	str	r3, [r7, #16]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10a      	bne.n	800c632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	60fb      	str	r3, [r7, #12]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c632:	f000 fe7f 	bl	800d334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c636:	4b1d      	ldr	r3, [pc, #116]	; (800c6ac <xTaskCheckForTimeOut+0xbc>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64e:	d102      	bne.n	800c656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c650:	2300      	movs	r3, #0
 800c652:	61fb      	str	r3, [r7, #28]
 800c654:	e023      	b.n	800c69e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b15      	ldr	r3, [pc, #84]	; (800c6b0 <xTaskCheckForTimeOut+0xc0>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d007      	beq.n	800c672 <xTaskCheckForTimeOut+0x82>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d302      	bcc.n	800c672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c66c:	2301      	movs	r3, #1
 800c66e:	61fb      	str	r3, [r7, #28]
 800c670:	e015      	b.n	800c69e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d20b      	bcs.n	800c694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	1ad2      	subs	r2, r2, r3
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff ff9b 	bl	800c5c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c68e:	2300      	movs	r3, #0
 800c690:	61fb      	str	r3, [r7, #28]
 800c692:	e004      	b.n	800c69e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c69a:	2301      	movs	r3, #1
 800c69c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c69e:	f000 fe79 	bl	800d394 <vPortExitCritical>

	return xReturn;
 800c6a2:	69fb      	ldr	r3, [r7, #28]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3720      	adds	r7, #32
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	20000c50 	.word	0x20000c50
 800c6b0:	20000c64 	.word	0x20000c64

0800c6b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6b8:	4b03      	ldr	r3, [pc, #12]	; (800c6c8 <vTaskMissedYield+0x14>)
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	601a      	str	r2, [r3, #0]
}
 800c6be:	bf00      	nop
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	20000c60 	.word	0x20000c60

0800c6cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6d4:	f000 f852 	bl	800c77c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <prvIdleTask+0x28>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d9f9      	bls.n	800c6d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6e0:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <prvIdleTask+0x2c>)
 800c6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6f0:	e7f0      	b.n	800c6d4 <prvIdleTask+0x8>
 800c6f2:	bf00      	nop
 800c6f4:	2000077c 	.word	0x2000077c
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c702:	2300      	movs	r3, #0
 800c704:	607b      	str	r3, [r7, #4]
 800c706:	e00c      	b.n	800c722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	4613      	mov	r3, r2
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	4413      	add	r3, r2
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4a12      	ldr	r2, [pc, #72]	; (800c75c <prvInitialiseTaskLists+0x60>)
 800c714:	4413      	add	r3, r2
 800c716:	4618      	mov	r0, r3
 800c718:	f7fe fb7c 	bl	800ae14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3301      	adds	r3, #1
 800c720:	607b      	str	r3, [r7, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b37      	cmp	r3, #55	; 0x37
 800c726:	d9ef      	bls.n	800c708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c728:	480d      	ldr	r0, [pc, #52]	; (800c760 <prvInitialiseTaskLists+0x64>)
 800c72a:	f7fe fb73 	bl	800ae14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c72e:	480d      	ldr	r0, [pc, #52]	; (800c764 <prvInitialiseTaskLists+0x68>)
 800c730:	f7fe fb70 	bl	800ae14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c734:	480c      	ldr	r0, [pc, #48]	; (800c768 <prvInitialiseTaskLists+0x6c>)
 800c736:	f7fe fb6d 	bl	800ae14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c73a:	480c      	ldr	r0, [pc, #48]	; (800c76c <prvInitialiseTaskLists+0x70>)
 800c73c:	f7fe fb6a 	bl	800ae14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c740:	480b      	ldr	r0, [pc, #44]	; (800c770 <prvInitialiseTaskLists+0x74>)
 800c742:	f7fe fb67 	bl	800ae14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c746:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <prvInitialiseTaskLists+0x78>)
 800c748:	4a05      	ldr	r2, [pc, #20]	; (800c760 <prvInitialiseTaskLists+0x64>)
 800c74a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <prvInitialiseTaskLists+0x7c>)
 800c74e:	4a05      	ldr	r2, [pc, #20]	; (800c764 <prvInitialiseTaskLists+0x68>)
 800c750:	601a      	str	r2, [r3, #0]
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	2000077c 	.word	0x2000077c
 800c760:	20000bdc 	.word	0x20000bdc
 800c764:	20000bf0 	.word	0x20000bf0
 800c768:	20000c0c 	.word	0x20000c0c
 800c76c:	20000c20 	.word	0x20000c20
 800c770:	20000c38 	.word	0x20000c38
 800c774:	20000c04 	.word	0x20000c04
 800c778:	20000c08 	.word	0x20000c08

0800c77c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c782:	e019      	b.n	800c7b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c784:	f000 fdd6 	bl	800d334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c788:	4b10      	ldr	r3, [pc, #64]	; (800c7cc <prvCheckTasksWaitingTermination+0x50>)
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3304      	adds	r3, #4
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe fbc7 	bl	800af28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c79a:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <prvCheckTasksWaitingTermination+0x54>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	4a0b      	ldr	r2, [pc, #44]	; (800c7d0 <prvCheckTasksWaitingTermination+0x54>)
 800c7a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7a4:	4b0b      	ldr	r3, [pc, #44]	; (800c7d4 <prvCheckTasksWaitingTermination+0x58>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	4a0a      	ldr	r2, [pc, #40]	; (800c7d4 <prvCheckTasksWaitingTermination+0x58>)
 800c7ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c7ae:	f000 fdf1 	bl	800d394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f810 	bl	800c7d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7b8:	4b06      	ldr	r3, [pc, #24]	; (800c7d4 <prvCheckTasksWaitingTermination+0x58>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e1      	bne.n	800c784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20000c20 	.word	0x20000c20
 800c7d0:	20000c4c 	.word	0x20000c4c
 800c7d4:	20000c34 	.word	0x20000c34

0800c7d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d108      	bne.n	800c7fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 ff86 	bl	800d700 <vPortFree>
				vPortFree( pxTCB );
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 ff83 	bl	800d700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7fa:	e018      	b.n	800c82e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c802:	2b01      	cmp	r3, #1
 800c804:	d103      	bne.n	800c80e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 ff7a 	bl	800d700 <vPortFree>
	}
 800c80c:	e00f      	b.n	800c82e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c814:	2b02      	cmp	r3, #2
 800c816:	d00a      	beq.n	800c82e <prvDeleteTCB+0x56>
	__asm volatile
 800c818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	60fb      	str	r3, [r7, #12]
}
 800c82a:	bf00      	nop
 800c82c:	e7fe      	b.n	800c82c <prvDeleteTCB+0x54>
	}
 800c82e:	bf00      	nop
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c83e:	4b0c      	ldr	r3, [pc, #48]	; (800c870 <prvResetNextTaskUnblockTime+0x38>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d104      	bne.n	800c852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c848:	4b0a      	ldr	r3, [pc, #40]	; (800c874 <prvResetNextTaskUnblockTime+0x3c>)
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295
 800c84e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c850:	e008      	b.n	800c864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c852:	4b07      	ldr	r3, [pc, #28]	; (800c870 <prvResetNextTaskUnblockTime+0x38>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	4a04      	ldr	r2, [pc, #16]	; (800c874 <prvResetNextTaskUnblockTime+0x3c>)
 800c862:	6013      	str	r3, [r2, #0]
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	20000c04 	.word	0x20000c04
 800c874:	20000c6c 	.word	0x20000c6c

0800c878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c87e:	4b0b      	ldr	r3, [pc, #44]	; (800c8ac <xTaskGetSchedulerState+0x34>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c886:	2301      	movs	r3, #1
 800c888:	607b      	str	r3, [r7, #4]
 800c88a:	e008      	b.n	800c89e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c88c:	4b08      	ldr	r3, [pc, #32]	; (800c8b0 <xTaskGetSchedulerState+0x38>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d102      	bne.n	800c89a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c894:	2302      	movs	r3, #2
 800c896:	607b      	str	r3, [r7, #4]
 800c898:	e001      	b.n	800c89e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c89a:	2300      	movs	r3, #0
 800c89c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c89e:	687b      	ldr	r3, [r7, #4]
	}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	20000c58 	.word	0x20000c58
 800c8b0:	20000c74 	.word	0x20000c74

0800c8b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d056      	beq.n	800c978 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8ca:	4b2e      	ldr	r3, [pc, #184]	; (800c984 <xTaskPriorityDisinherit+0xd0>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d00a      	beq.n	800c8ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	60fb      	str	r3, [r7, #12]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10a      	bne.n	800c908 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	60bb      	str	r3, [r7, #8]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c90c:	1e5a      	subs	r2, r3, #1
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d02c      	beq.n	800c978 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c922:	2b00      	cmp	r3, #0
 800c924:	d128      	bne.n	800c978 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	3304      	adds	r3, #4
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fe fafc 	bl	800af28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c948:	4b0f      	ldr	r3, [pc, #60]	; (800c988 <xTaskPriorityDisinherit+0xd4>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d903      	bls.n	800c958 <xTaskPriorityDisinherit+0xa4>
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c954:	4a0c      	ldr	r2, [pc, #48]	; (800c988 <xTaskPriorityDisinherit+0xd4>)
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c95c:	4613      	mov	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4a09      	ldr	r2, [pc, #36]	; (800c98c <xTaskPriorityDisinherit+0xd8>)
 800c966:	441a      	add	r2, r3
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3304      	adds	r3, #4
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f7fe fa7d 	bl	800ae6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c974:	2301      	movs	r3, #1
 800c976:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c978:	697b      	ldr	r3, [r7, #20]
	}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20000778 	.word	0x20000778
 800c988:	20000c54 	.word	0x20000c54
 800c98c:	2000077c 	.word	0x2000077c

0800c990 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c99a:	4b21      	ldr	r3, [pc, #132]	; (800ca20 <prvAddCurrentTaskToDelayedList+0x90>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9a0:	4b20      	ldr	r3, [pc, #128]	; (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fe fabe 	bl	800af28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	d10a      	bne.n	800c9ca <prvAddCurrentTaskToDelayedList+0x3a>
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d007      	beq.n	800c9ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ba:	4b1a      	ldr	r3, [pc, #104]	; (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	4819      	ldr	r0, [pc, #100]	; (800ca28 <prvAddCurrentTaskToDelayedList+0x98>)
 800c9c4:	f7fe fa53 	bl	800ae6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9c8:	e026      	b.n	800ca18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9d2:	4b14      	ldr	r3, [pc, #80]	; (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d209      	bcs.n	800c9f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9e2:	4b12      	ldr	r3, [pc, #72]	; (800ca2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	f7fe fa61 	bl	800aeb6 <vListInsert>
}
 800c9f4:	e010      	b.n	800ca18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9f6:	4b0e      	ldr	r3, [pc, #56]	; (800ca30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ca24 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f7fe fa57 	bl	800aeb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca08:	4b0a      	ldr	r3, [pc, #40]	; (800ca34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d202      	bcs.n	800ca18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca12:	4a08      	ldr	r2, [pc, #32]	; (800ca34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	6013      	str	r3, [r2, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20000c50 	.word	0x20000c50
 800ca24:	20000778 	.word	0x20000778
 800ca28:	20000c38 	.word	0x20000c38
 800ca2c:	20000c08 	.word	0x20000c08
 800ca30:	20000c04 	.word	0x20000c04
 800ca34:	20000c6c 	.word	0x20000c6c

0800ca38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca42:	f000 fb07 	bl	800d054 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca46:	4b1c      	ldr	r3, [pc, #112]	; (800cab8 <xTimerCreateTimerTask+0x80>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d021      	beq.n	800ca92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca56:	1d3a      	adds	r2, r7, #4
 800ca58:	f107 0108 	add.w	r1, r7, #8
 800ca5c:	f107 030c 	add.w	r3, r7, #12
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fe f9bd 	bl	800ade0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	9202      	str	r2, [sp, #8]
 800ca6e:	9301      	str	r3, [sp, #4]
 800ca70:	2302      	movs	r3, #2
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	2300      	movs	r3, #0
 800ca76:	460a      	mov	r2, r1
 800ca78:	4910      	ldr	r1, [pc, #64]	; (800cabc <xTimerCreateTimerTask+0x84>)
 800ca7a:	4811      	ldr	r0, [pc, #68]	; (800cac0 <xTimerCreateTimerTask+0x88>)
 800ca7c:	f7ff f8de 	bl	800bc3c <xTaskCreateStatic>
 800ca80:	4603      	mov	r3, r0
 800ca82:	4a10      	ldr	r2, [pc, #64]	; (800cac4 <xTimerCreateTimerTask+0x8c>)
 800ca84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca86:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <xTimerCreateTimerTask+0x8c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10a      	bne.n	800caae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ca98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	613b      	str	r3, [r7, #16]
}
 800caaa:	bf00      	nop
 800caac:	e7fe      	b.n	800caac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800caae:	697b      	ldr	r3, [r7, #20]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	20000ca8 	.word	0x20000ca8
 800cabc:	0800e248 	.word	0x0800e248
 800cac0:	0800cbfd 	.word	0x0800cbfd
 800cac4:	20000cac 	.word	0x20000cac

0800cac8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b08a      	sub	sp, #40	; 0x28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10a      	bne.n	800caf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	623b      	str	r3, [r7, #32]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800caf6:	4b1a      	ldr	r3, [pc, #104]	; (800cb60 <xTimerGenericCommand+0x98>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d02a      	beq.n	800cb54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	2b05      	cmp	r3, #5
 800cb0e:	dc18      	bgt.n	800cb42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb10:	f7ff feb2 	bl	800c878 <xTaskGetSchedulerState>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d109      	bne.n	800cb2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb1a:	4b11      	ldr	r3, [pc, #68]	; (800cb60 <xTimerGenericCommand+0x98>)
 800cb1c:	6818      	ldr	r0, [r3, #0]
 800cb1e:	f107 0110 	add.w	r1, r7, #16
 800cb22:	2300      	movs	r3, #0
 800cb24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb26:	f7fe fbd7 	bl	800b2d8 <xQueueGenericSend>
 800cb2a:	6278      	str	r0, [r7, #36]	; 0x24
 800cb2c:	e012      	b.n	800cb54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb2e:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <xTimerGenericCommand+0x98>)
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	f107 0110 	add.w	r1, r7, #16
 800cb36:	2300      	movs	r3, #0
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f7fe fbcd 	bl	800b2d8 <xQueueGenericSend>
 800cb3e:	6278      	str	r0, [r7, #36]	; 0x24
 800cb40:	e008      	b.n	800cb54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <xTimerGenericCommand+0x98>)
 800cb44:	6818      	ldr	r0, [r3, #0]
 800cb46:	f107 0110 	add.w	r1, r7, #16
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	f7fe fcc1 	bl	800b4d4 <xQueueGenericSendFromISR>
 800cb52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3728      	adds	r7, #40	; 0x28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20000ca8 	.word	0x20000ca8

0800cb64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af02      	add	r7, sp, #8
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb6e:	4b22      	ldr	r3, [pc, #136]	; (800cbf8 <prvProcessExpiredTimer+0x94>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fe f9d3 	bl	800af28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb88:	f003 0304 	and.w	r3, r3, #4
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d022      	beq.n	800cbd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	699a      	ldr	r2, [r3, #24]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	18d1      	adds	r1, r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	6978      	ldr	r0, [r7, #20]
 800cb9e:	f000 f8d1 	bl	800cd44 <prvInsertTimerInActiveList>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01f      	beq.n	800cbe8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cba8:	2300      	movs	r3, #0
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	2300      	movs	r3, #0
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	6978      	ldr	r0, [r7, #20]
 800cbb4:	f7ff ff88 	bl	800cac8 <xTimerGenericCommand>
 800cbb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d113      	bne.n	800cbe8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	60fb      	str	r3, [r7, #12]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbdc:	f023 0301 	bic.w	r3, r3, #1
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	6978      	ldr	r0, [r7, #20]
 800cbee:	4798      	blx	r3
}
 800cbf0:	bf00      	nop
 800cbf2:	3718      	adds	r7, #24
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	20000ca0 	.word	0x20000ca0

0800cbfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc04:	f107 0308 	add.w	r3, r7, #8
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 f857 	bl	800ccbc <prvGetNextExpireTime>
 800cc0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	4619      	mov	r1, r3
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f803 	bl	800cc20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc1a:	f000 f8d5 	bl	800cdc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc1e:	e7f1      	b.n	800cc04 <prvTimerTask+0x8>

0800cc20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc2a:	f7ff fa43 	bl	800c0b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc2e:	f107 0308 	add.w	r3, r7, #8
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 f866 	bl	800cd04 <prvSampleTimeNow>
 800cc38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d130      	bne.n	800cca2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10a      	bne.n	800cc5c <prvProcessTimerOrBlockTask+0x3c>
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d806      	bhi.n	800cc5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc4e:	f7ff fa3f 	bl	800c0d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc52:	68f9      	ldr	r1, [r7, #12]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7ff ff85 	bl	800cb64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc5a:	e024      	b.n	800cca6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d008      	beq.n	800cc74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc62:	4b13      	ldr	r3, [pc, #76]	; (800ccb0 <prvProcessTimerOrBlockTask+0x90>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <prvProcessTimerOrBlockTask+0x50>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e000      	b.n	800cc72 <prvProcessTimerOrBlockTask+0x52>
 800cc70:	2300      	movs	r3, #0
 800cc72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc74:	4b0f      	ldr	r3, [pc, #60]	; (800ccb4 <prvProcessTimerOrBlockTask+0x94>)
 800cc76:	6818      	ldr	r0, [r3, #0]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	4619      	mov	r1, r3
 800cc82:	f7fe ffa7 	bl	800bbd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc86:	f7ff fa23 	bl	800c0d0 <xTaskResumeAll>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10a      	bne.n	800cca6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc90:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <prvProcessTimerOrBlockTask+0x98>)
 800cc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	f3bf 8f6f 	isb	sy
}
 800cca0:	e001      	b.n	800cca6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cca2:	f7ff fa15 	bl	800c0d0 <xTaskResumeAll>
}
 800cca6:	bf00      	nop
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000ca4 	.word	0x20000ca4
 800ccb4:	20000ca8 	.word	0x20000ca8
 800ccb8:	e000ed04 	.word	0xe000ed04

0800ccbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ccc4:	4b0e      	ldr	r3, [pc, #56]	; (800cd00 <prvGetNextExpireTime+0x44>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <prvGetNextExpireTime+0x16>
 800ccce:	2201      	movs	r2, #1
 800ccd0:	e000      	b.n	800ccd4 <prvGetNextExpireTime+0x18>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d105      	bne.n	800ccec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cce0:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <prvGetNextExpireTime+0x44>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	60fb      	str	r3, [r7, #12]
 800ccea:	e001      	b.n	800ccf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ccec:	2300      	movs	r3, #0
 800ccee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	20000ca0 	.word	0x20000ca0

0800cd04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd0c:	f7ff fa7e 	bl	800c20c <xTaskGetTickCount>
 800cd10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd12:	4b0b      	ldr	r3, [pc, #44]	; (800cd40 <prvSampleTimeNow+0x3c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d205      	bcs.n	800cd28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd1c:	f000 f936 	bl	800cf8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	e002      	b.n	800cd2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd2e:	4a04      	ldr	r2, [pc, #16]	; (800cd40 <prvSampleTimeNow+0x3c>)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd34:	68fb      	ldr	r3, [r7, #12]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20000cb0 	.word	0x20000cb0

0800cd44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
 800cd50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d812      	bhi.n	800cd90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	1ad2      	subs	r2, r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d302      	bcc.n	800cd7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	617b      	str	r3, [r7, #20]
 800cd7c:	e01b      	b.n	800cdb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd7e:	4b10      	ldr	r3, [pc, #64]	; (800cdc0 <prvInsertTimerInActiveList+0x7c>)
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3304      	adds	r3, #4
 800cd86:	4619      	mov	r1, r3
 800cd88:	4610      	mov	r0, r2
 800cd8a:	f7fe f894 	bl	800aeb6 <vListInsert>
 800cd8e:	e012      	b.n	800cdb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d206      	bcs.n	800cda6 <prvInsertTimerInActiveList+0x62>
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d302      	bcc.n	800cda6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cda0:	2301      	movs	r3, #1
 800cda2:	617b      	str	r3, [r7, #20]
 800cda4:	e007      	b.n	800cdb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cda6:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <prvInsertTimerInActiveList+0x80>)
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3304      	adds	r3, #4
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	f7fe f880 	bl	800aeb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cdb6:	697b      	ldr	r3, [r7, #20]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20000ca4 	.word	0x20000ca4
 800cdc4:	20000ca0 	.word	0x20000ca0

0800cdc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08e      	sub	sp, #56	; 0x38
 800cdcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdce:	e0ca      	b.n	800cf66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da18      	bge.n	800ce08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cdd6:	1d3b      	adds	r3, r7, #4
 800cdd8:	3304      	adds	r3, #4
 800cdda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10a      	bne.n	800cdf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	61fb      	str	r3, [r7, #28]
}
 800cdf4:	bf00      	nop
 800cdf6:	e7fe      	b.n	800cdf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdfe:	6850      	ldr	r0, [r2, #4]
 800ce00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce02:	6892      	ldr	r2, [r2, #8]
 800ce04:	4611      	mov	r1, r2
 800ce06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f2c0 80aa 	blt.w	800cf64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d004      	beq.n	800ce26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	3304      	adds	r3, #4
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7fe f881 	bl	800af28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce26:	463b      	mov	r3, r7
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff ff6b 	bl	800cd04 <prvSampleTimeNow>
 800ce2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b09      	cmp	r3, #9
 800ce34:	f200 8097 	bhi.w	800cf66 <prvProcessReceivedCommands+0x19e>
 800ce38:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <prvProcessReceivedCommands+0x78>)
 800ce3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3e:	bf00      	nop
 800ce40:	0800ce69 	.word	0x0800ce69
 800ce44:	0800ce69 	.word	0x0800ce69
 800ce48:	0800ce69 	.word	0x0800ce69
 800ce4c:	0800cedd 	.word	0x0800cedd
 800ce50:	0800cef1 	.word	0x0800cef1
 800ce54:	0800cf3b 	.word	0x0800cf3b
 800ce58:	0800ce69 	.word	0x0800ce69
 800ce5c:	0800ce69 	.word	0x0800ce69
 800ce60:	0800cedd 	.word	0x0800cedd
 800ce64:	0800cef1 	.word	0x0800cef1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	18d1      	adds	r1, r2, r3
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce88:	f7ff ff5c 	bl	800cd44 <prvInsertTimerInActiveList>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d069      	beq.n	800cf66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d05e      	beq.n	800cf66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	441a      	add	r2, r3
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceba:	f7ff fe05 	bl	800cac8 <xTimerGenericCommand>
 800cebe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d14f      	bne.n	800cf66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	61bb      	str	r3, [r7, #24]
}
 800ced8:	bf00      	nop
 800ceda:	e7fe      	b.n	800ceda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee2:	f023 0301 	bic.w	r3, r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ceee:	e03a      	b.n	800cf66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cef6:	f043 0301 	orr.w	r3, r3, #1
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10a      	bne.n	800cf26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	617b      	str	r3, [r7, #20]
}
 800cf22:	bf00      	nop
 800cf24:	e7fe      	b.n	800cf24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2c:	18d1      	adds	r1, r2, r3
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf34:	f7ff ff06 	bl	800cd44 <prvInsertTimerInActiveList>
					break;
 800cf38:	e015      	b.n	800cf66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf40:	f003 0302 	and.w	r3, r3, #2
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cf48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf4a:	f000 fbd9 	bl	800d700 <vPortFree>
 800cf4e:	e00a      	b.n	800cf66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf56:	f023 0301 	bic.w	r3, r3, #1
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf62:	e000      	b.n	800cf66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cf64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf66:	4b08      	ldr	r3, [pc, #32]	; (800cf88 <prvProcessReceivedCommands+0x1c0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	1d39      	adds	r1, r7, #4
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fb48 	bl	800b604 <xQueueReceive>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f47f af2a 	bne.w	800cdd0 <prvProcessReceivedCommands+0x8>
	}
}
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	3730      	adds	r7, #48	; 0x30
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	20000ca8 	.word	0x20000ca8

0800cf8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b088      	sub	sp, #32
 800cf90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf92:	e048      	b.n	800d026 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf94:	4b2d      	ldr	r3, [pc, #180]	; (800d04c <prvSwitchTimerLists+0xc0>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf9e:	4b2b      	ldr	r3, [pc, #172]	; (800d04c <prvSwitchTimerLists+0xc0>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fd ffbb 	bl	800af28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d02e      	beq.n	800d026 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	699b      	ldr	r3, [r3, #24]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	4413      	add	r3, r2
 800cfd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfd2:	68ba      	ldr	r2, [r7, #8]
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d90e      	bls.n	800cff8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfe6:	4b19      	ldr	r3, [pc, #100]	; (800d04c <prvSwitchTimerLists+0xc0>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3304      	adds	r3, #4
 800cfee:	4619      	mov	r1, r3
 800cff0:	4610      	mov	r0, r2
 800cff2:	f7fd ff60 	bl	800aeb6 <vListInsert>
 800cff6:	e016      	b.n	800d026 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cff8:	2300      	movs	r3, #0
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	2300      	movs	r3, #0
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	2100      	movs	r1, #0
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7ff fd60 	bl	800cac8 <xTimerGenericCommand>
 800d008:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10a      	bne.n	800d026 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	603b      	str	r3, [r7, #0]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d026:	4b09      	ldr	r3, [pc, #36]	; (800d04c <prvSwitchTimerLists+0xc0>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1b1      	bne.n	800cf94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d030:	4b06      	ldr	r3, [pc, #24]	; (800d04c <prvSwitchTimerLists+0xc0>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d036:	4b06      	ldr	r3, [pc, #24]	; (800d050 <prvSwitchTimerLists+0xc4>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a04      	ldr	r2, [pc, #16]	; (800d04c <prvSwitchTimerLists+0xc0>)
 800d03c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d03e:	4a04      	ldr	r2, [pc, #16]	; (800d050 <prvSwitchTimerLists+0xc4>)
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	6013      	str	r3, [r2, #0]
}
 800d044:	bf00      	nop
 800d046:	3718      	adds	r7, #24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	20000ca0 	.word	0x20000ca0
 800d050:	20000ca4 	.word	0x20000ca4

0800d054 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d05a:	f000 f96b 	bl	800d334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d05e:	4b15      	ldr	r3, [pc, #84]	; (800d0b4 <prvCheckForValidListAndQueue+0x60>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d120      	bne.n	800d0a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d066:	4814      	ldr	r0, [pc, #80]	; (800d0b8 <prvCheckForValidListAndQueue+0x64>)
 800d068:	f7fd fed4 	bl	800ae14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d06c:	4813      	ldr	r0, [pc, #76]	; (800d0bc <prvCheckForValidListAndQueue+0x68>)
 800d06e:	f7fd fed1 	bl	800ae14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d072:	4b13      	ldr	r3, [pc, #76]	; (800d0c0 <prvCheckForValidListAndQueue+0x6c>)
 800d074:	4a10      	ldr	r2, [pc, #64]	; (800d0b8 <prvCheckForValidListAndQueue+0x64>)
 800d076:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d078:	4b12      	ldr	r3, [pc, #72]	; (800d0c4 <prvCheckForValidListAndQueue+0x70>)
 800d07a:	4a10      	ldr	r2, [pc, #64]	; (800d0bc <prvCheckForValidListAndQueue+0x68>)
 800d07c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d07e:	2300      	movs	r3, #0
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	4b11      	ldr	r3, [pc, #68]	; (800d0c8 <prvCheckForValidListAndQueue+0x74>)
 800d084:	4a11      	ldr	r2, [pc, #68]	; (800d0cc <prvCheckForValidListAndQueue+0x78>)
 800d086:	2110      	movs	r1, #16
 800d088:	200a      	movs	r0, #10
 800d08a:	f7fd ffdf 	bl	800b04c <xQueueGenericCreateStatic>
 800d08e:	4603      	mov	r3, r0
 800d090:	4a08      	ldr	r2, [pc, #32]	; (800d0b4 <prvCheckForValidListAndQueue+0x60>)
 800d092:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d094:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <prvCheckForValidListAndQueue+0x60>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d005      	beq.n	800d0a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d09c:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <prvCheckForValidListAndQueue+0x60>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	490b      	ldr	r1, [pc, #44]	; (800d0d0 <prvCheckForValidListAndQueue+0x7c>)
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fd42 	bl	800bb2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0a8:	f000 f974 	bl	800d394 <vPortExitCritical>
}
 800d0ac:	bf00      	nop
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000ca8 	.word	0x20000ca8
 800d0b8:	20000c78 	.word	0x20000c78
 800d0bc:	20000c8c 	.word	0x20000c8c
 800d0c0:	20000ca0 	.word	0x20000ca0
 800d0c4:	20000ca4 	.word	0x20000ca4
 800d0c8:	20000d54 	.word	0x20000d54
 800d0cc:	20000cb4 	.word	0x20000cb4
 800d0d0:	0800e250 	.word	0x0800e250

0800d0d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3b04      	subs	r3, #4
 800d0e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3b04      	subs	r3, #4
 800d0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	f023 0201 	bic.w	r2, r3, #1
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3b04      	subs	r3, #4
 800d102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d104:	4a0c      	ldr	r2, [pc, #48]	; (800d138 <pxPortInitialiseStack+0x64>)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3b14      	subs	r3, #20
 800d10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3b04      	subs	r3, #4
 800d11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f06f 0202 	mvn.w	r2, #2
 800d122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3b20      	subs	r3, #32
 800d128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d12a:	68fb      	ldr	r3, [r7, #12]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	0800d13d 	.word	0x0800d13d

0800d13c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d146:	4b12      	ldr	r3, [pc, #72]	; (800d190 <prvTaskExitError+0x54>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14e:	d00a      	beq.n	800d166 <prvTaskExitError+0x2a>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	60fb      	str	r3, [r7, #12]
}
 800d162:	bf00      	nop
 800d164:	e7fe      	b.n	800d164 <prvTaskExitError+0x28>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	60bb      	str	r3, [r7, #8]
}
 800d178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d17a:	bf00      	nop
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d0fc      	beq.n	800d17c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	2000002c 	.word	0x2000002c
	...

0800d1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1a0:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <pxCurrentTCBConst2>)
 800d1a2:	6819      	ldr	r1, [r3, #0]
 800d1a4:	6808      	ldr	r0, [r1, #0]
 800d1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1aa:	f380 8809 	msr	PSP, r0
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f04f 0000 	mov.w	r0, #0
 800d1b6:	f380 8811 	msr	BASEPRI, r0
 800d1ba:	4770      	bx	lr
 800d1bc:	f3af 8000 	nop.w

0800d1c0 <pxCurrentTCBConst2>:
 800d1c0:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop

0800d1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1c8:	4808      	ldr	r0, [pc, #32]	; (800d1ec <prvPortStartFirstTask+0x24>)
 800d1ca:	6800      	ldr	r0, [r0, #0]
 800d1cc:	6800      	ldr	r0, [r0, #0]
 800d1ce:	f380 8808 	msr	MSP, r0
 800d1d2:	f04f 0000 	mov.w	r0, #0
 800d1d6:	f380 8814 	msr	CONTROL, r0
 800d1da:	b662      	cpsie	i
 800d1dc:	b661      	cpsie	f
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	df00      	svc	0
 800d1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1ea:	bf00      	nop
 800d1ec:	e000ed08 	.word	0xe000ed08

0800d1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1f6:	4b46      	ldr	r3, [pc, #280]	; (800d310 <xPortStartScheduler+0x120>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a46      	ldr	r2, [pc, #280]	; (800d314 <xPortStartScheduler+0x124>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d10a      	bne.n	800d216 <xPortStartScheduler+0x26>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	613b      	str	r3, [r7, #16]
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d216:	4b3e      	ldr	r3, [pc, #248]	; (800d310 <xPortStartScheduler+0x120>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a3f      	ldr	r2, [pc, #252]	; (800d318 <xPortStartScheduler+0x128>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d10a      	bne.n	800d236 <xPortStartScheduler+0x46>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	60fb      	str	r3, [r7, #12]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d236:	4b39      	ldr	r3, [pc, #228]	; (800d31c <xPortStartScheduler+0x12c>)
 800d238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	22ff      	movs	r2, #255	; 0xff
 800d246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d250:	78fb      	ldrb	r3, [r7, #3]
 800d252:	b2db      	uxtb	r3, r3
 800d254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	4b31      	ldr	r3, [pc, #196]	; (800d320 <xPortStartScheduler+0x130>)
 800d25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d25e:	4b31      	ldr	r3, [pc, #196]	; (800d324 <xPortStartScheduler+0x134>)
 800d260:	2207      	movs	r2, #7
 800d262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d264:	e009      	b.n	800d27a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d266:	4b2f      	ldr	r3, [pc, #188]	; (800d324 <xPortStartScheduler+0x134>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	4a2d      	ldr	r2, [pc, #180]	; (800d324 <xPortStartScheduler+0x134>)
 800d26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	b2db      	uxtb	r3, r3
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	b2db      	uxtb	r3, r3
 800d278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d282:	2b80      	cmp	r3, #128	; 0x80
 800d284:	d0ef      	beq.n	800d266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d286:	4b27      	ldr	r3, [pc, #156]	; (800d324 <xPortStartScheduler+0x134>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f1c3 0307 	rsb	r3, r3, #7
 800d28e:	2b04      	cmp	r3, #4
 800d290:	d00a      	beq.n	800d2a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	60bb      	str	r3, [r7, #8]
}
 800d2a4:	bf00      	nop
 800d2a6:	e7fe      	b.n	800d2a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2a8:	4b1e      	ldr	r3, [pc, #120]	; (800d324 <xPortStartScheduler+0x134>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	021b      	lsls	r3, r3, #8
 800d2ae:	4a1d      	ldr	r2, [pc, #116]	; (800d324 <xPortStartScheduler+0x134>)
 800d2b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2b2:	4b1c      	ldr	r3, [pc, #112]	; (800d324 <xPortStartScheduler+0x134>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2ba:	4a1a      	ldr	r2, [pc, #104]	; (800d324 <xPortStartScheduler+0x134>)
 800d2bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2c6:	4b18      	ldr	r3, [pc, #96]	; (800d328 <xPortStartScheduler+0x138>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a17      	ldr	r2, [pc, #92]	; (800d328 <xPortStartScheduler+0x138>)
 800d2cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2d2:	4b15      	ldr	r3, [pc, #84]	; (800d328 <xPortStartScheduler+0x138>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a14      	ldr	r2, [pc, #80]	; (800d328 <xPortStartScheduler+0x138>)
 800d2d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2de:	f000 f8dd 	bl	800d49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2e2:	4b12      	ldr	r3, [pc, #72]	; (800d32c <xPortStartScheduler+0x13c>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2e8:	f000 f8fc 	bl	800d4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2ec:	4b10      	ldr	r3, [pc, #64]	; (800d330 <xPortStartScheduler+0x140>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a0f      	ldr	r2, [pc, #60]	; (800d330 <xPortStartScheduler+0x140>)
 800d2f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d2f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2f8:	f7ff ff66 	bl	800d1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2fc:	f7ff f850 	bl	800c3a0 <vTaskSwitchContext>
	prvTaskExitError();
 800d300:	f7ff ff1c 	bl	800d13c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	e000ed00 	.word	0xe000ed00
 800d314:	410fc271 	.word	0x410fc271
 800d318:	410fc270 	.word	0x410fc270
 800d31c:	e000e400 	.word	0xe000e400
 800d320:	20000da4 	.word	0x20000da4
 800d324:	20000da8 	.word	0x20000da8
 800d328:	e000ed20 	.word	0xe000ed20
 800d32c:	2000002c 	.word	0x2000002c
 800d330:	e000ef34 	.word	0xe000ef34

0800d334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	607b      	str	r3, [r7, #4]
}
 800d34c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d34e:	4b0f      	ldr	r3, [pc, #60]	; (800d38c <vPortEnterCritical+0x58>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3301      	adds	r3, #1
 800d354:	4a0d      	ldr	r2, [pc, #52]	; (800d38c <vPortEnterCritical+0x58>)
 800d356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d358:	4b0c      	ldr	r3, [pc, #48]	; (800d38c <vPortEnterCritical+0x58>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d10f      	bne.n	800d380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d360:	4b0b      	ldr	r3, [pc, #44]	; (800d390 <vPortEnterCritical+0x5c>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00a      	beq.n	800d380 <vPortEnterCritical+0x4c>
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	603b      	str	r3, [r7, #0]
}
 800d37c:	bf00      	nop
 800d37e:	e7fe      	b.n	800d37e <vPortEnterCritical+0x4a>
	}
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	2000002c 	.word	0x2000002c
 800d390:	e000ed04 	.word	0xe000ed04

0800d394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d39a:	4b12      	ldr	r3, [pc, #72]	; (800d3e4 <vPortExitCritical+0x50>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10a      	bne.n	800d3b8 <vPortExitCritical+0x24>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	607b      	str	r3, [r7, #4]
}
 800d3b4:	bf00      	nop
 800d3b6:	e7fe      	b.n	800d3b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <vPortExitCritical+0x50>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	4a09      	ldr	r2, [pc, #36]	; (800d3e4 <vPortExitCritical+0x50>)
 800d3c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3c2:	4b08      	ldr	r3, [pc, #32]	; (800d3e4 <vPortExitCritical+0x50>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d105      	bne.n	800d3d6 <vPortExitCritical+0x42>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	f383 8811 	msr	BASEPRI, r3
}
 800d3d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3d6:	bf00      	nop
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	2000002c 	.word	0x2000002c
	...

0800d3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3f0:	f3ef 8009 	mrs	r0, PSP
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	4b15      	ldr	r3, [pc, #84]	; (800d450 <pxCurrentTCBConst>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	f01e 0f10 	tst.w	lr, #16
 800d400:	bf08      	it	eq
 800d402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40a:	6010      	str	r0, [r2, #0]
 800d40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d410:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d414:	f380 8811 	msr	BASEPRI, r0
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f7fe ffbe 	bl	800c3a0 <vTaskSwitchContext>
 800d424:	f04f 0000 	mov.w	r0, #0
 800d428:	f380 8811 	msr	BASEPRI, r0
 800d42c:	bc09      	pop	{r0, r3}
 800d42e:	6819      	ldr	r1, [r3, #0]
 800d430:	6808      	ldr	r0, [r1, #0]
 800d432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d436:	f01e 0f10 	tst.w	lr, #16
 800d43a:	bf08      	it	eq
 800d43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d440:	f380 8809 	msr	PSP, r0
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	f3af 8000 	nop.w

0800d450 <pxCurrentTCBConst>:
 800d450:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d454:	bf00      	nop
 800d456:	bf00      	nop

0800d458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	607b      	str	r3, [r7, #4]
}
 800d470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d472:	f7fe fedb 	bl	800c22c <xTaskIncrementTick>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d47c:	4b06      	ldr	r3, [pc, #24]	; (800d498 <SysTick_Handler+0x40>)
 800d47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d482:	601a      	str	r2, [r3, #0]
 800d484:	2300      	movs	r3, #0
 800d486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	f383 8811 	msr	BASEPRI, r3
}
 800d48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	e000ed04 	.word	0xe000ed04

0800d49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d49c:	b480      	push	{r7}
 800d49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <vPortSetupTimerInterrupt+0x34>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4a6:	4b0b      	ldr	r3, [pc, #44]	; (800d4d4 <vPortSetupTimerInterrupt+0x38>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4ac:	4b0a      	ldr	r3, [pc, #40]	; (800d4d8 <vPortSetupTimerInterrupt+0x3c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a0a      	ldr	r2, [pc, #40]	; (800d4dc <vPortSetupTimerInterrupt+0x40>)
 800d4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b6:	099b      	lsrs	r3, r3, #6
 800d4b8:	4a09      	ldr	r2, [pc, #36]	; (800d4e0 <vPortSetupTimerInterrupt+0x44>)
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4be:	4b04      	ldr	r3, [pc, #16]	; (800d4d0 <vPortSetupTimerInterrupt+0x34>)
 800d4c0:	2207      	movs	r2, #7
 800d4c2:	601a      	str	r2, [r3, #0]
}
 800d4c4:	bf00      	nop
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	e000e010 	.word	0xe000e010
 800d4d4:	e000e018 	.word	0xe000e018
 800d4d8:	20000000 	.word	0x20000000
 800d4dc:	10624dd3 	.word	0x10624dd3
 800d4e0:	e000e014 	.word	0xe000e014

0800d4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d4f4 <vPortEnableVFP+0x10>
 800d4e8:	6801      	ldr	r1, [r0, #0]
 800d4ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d4ee:	6001      	str	r1, [r0, #0]
 800d4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4f2:	bf00      	nop
 800d4f4:	e000ed88 	.word	0xe000ed88

0800d4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4fe:	f3ef 8305 	mrs	r3, IPSR
 800d502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b0f      	cmp	r3, #15
 800d508:	d914      	bls.n	800d534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d50a:	4a17      	ldr	r2, [pc, #92]	; (800d568 <vPortValidateInterruptPriority+0x70>)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4413      	add	r3, r2
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d514:	4b15      	ldr	r3, [pc, #84]	; (800d56c <vPortValidateInterruptPriority+0x74>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	7afa      	ldrb	r2, [r7, #11]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d20a      	bcs.n	800d534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	607b      	str	r3, [r7, #4]
}
 800d530:	bf00      	nop
 800d532:	e7fe      	b.n	800d532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d534:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <vPortValidateInterruptPriority+0x78>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d53c:	4b0d      	ldr	r3, [pc, #52]	; (800d574 <vPortValidateInterruptPriority+0x7c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	429a      	cmp	r2, r3
 800d542:	d90a      	bls.n	800d55a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d548:	f383 8811 	msr	BASEPRI, r3
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	603b      	str	r3, [r7, #0]
}
 800d556:	bf00      	nop
 800d558:	e7fe      	b.n	800d558 <vPortValidateInterruptPriority+0x60>
	}
 800d55a:	bf00      	nop
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	e000e3f0 	.word	0xe000e3f0
 800d56c:	20000da4 	.word	0x20000da4
 800d570:	e000ed0c 	.word	0xe000ed0c
 800d574:	20000da8 	.word	0x20000da8

0800d578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08a      	sub	sp, #40	; 0x28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d580:	2300      	movs	r3, #0
 800d582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d584:	f7fe fd96 	bl	800c0b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d588:	4b58      	ldr	r3, [pc, #352]	; (800d6ec <pvPortMalloc+0x174>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d590:	f000 f910 	bl	800d7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d594:	4b56      	ldr	r3, [pc, #344]	; (800d6f0 <pvPortMalloc+0x178>)
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4013      	ands	r3, r2
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f040 808e 	bne.w	800d6be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d01d      	beq.n	800d5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d5a8:	2208      	movs	r2, #8
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d014      	beq.n	800d5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f023 0307 	bic.w	r3, r3, #7
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f003 0307 	and.w	r3, r3, #7
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00a      	beq.n	800d5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	617b      	str	r3, [r7, #20]
}
 800d5e0:	bf00      	nop
 800d5e2:	e7fe      	b.n	800d5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d069      	beq.n	800d6be <pvPortMalloc+0x146>
 800d5ea:	4b42      	ldr	r3, [pc, #264]	; (800d6f4 <pvPortMalloc+0x17c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d864      	bhi.n	800d6be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5f4:	4b40      	ldr	r3, [pc, #256]	; (800d6f8 <pvPortMalloc+0x180>)
 800d5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5f8:	4b3f      	ldr	r3, [pc, #252]	; (800d6f8 <pvPortMalloc+0x180>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5fe:	e004      	b.n	800d60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d903      	bls.n	800d61c <pvPortMalloc+0xa4>
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1f1      	bne.n	800d600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d61c:	4b33      	ldr	r3, [pc, #204]	; (800d6ec <pvPortMalloc+0x174>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d622:	429a      	cmp	r2, r3
 800d624:	d04b      	beq.n	800d6be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d626:	6a3b      	ldr	r3, [r7, #32]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2208      	movs	r2, #8
 800d62c:	4413      	add	r3, r2
 800d62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	1ad2      	subs	r2, r2, r3
 800d640:	2308      	movs	r3, #8
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	429a      	cmp	r2, r3
 800d646:	d91f      	bls.n	800d688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4413      	add	r3, r2
 800d64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	f003 0307 	and.w	r3, r3, #7
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00a      	beq.n	800d670 <pvPortMalloc+0xf8>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	613b      	str	r3, [r7, #16]
}
 800d66c:	bf00      	nop
 800d66e:	e7fe      	b.n	800d66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	1ad2      	subs	r2, r2, r3
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d682:	69b8      	ldr	r0, [r7, #24]
 800d684:	f000 f8f8 	bl	800d878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d688:	4b1a      	ldr	r3, [pc, #104]	; (800d6f4 <pvPortMalloc+0x17c>)
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	4a18      	ldr	r2, [pc, #96]	; (800d6f4 <pvPortMalloc+0x17c>)
 800d694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d696:	4b17      	ldr	r3, [pc, #92]	; (800d6f4 <pvPortMalloc+0x17c>)
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	4b18      	ldr	r3, [pc, #96]	; (800d6fc <pvPortMalloc+0x184>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d203      	bcs.n	800d6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6a2:	4b14      	ldr	r3, [pc, #80]	; (800d6f4 <pvPortMalloc+0x17c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a15      	ldr	r2, [pc, #84]	; (800d6fc <pvPortMalloc+0x184>)
 800d6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ac:	685a      	ldr	r2, [r3, #4]
 800d6ae:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <pvPortMalloc+0x178>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	431a      	orrs	r2, r3
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6be:	f7fe fd07 	bl	800c0d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	f003 0307 	and.w	r3, r3, #7
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00a      	beq.n	800d6e2 <pvPortMalloc+0x16a>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	60fb      	str	r3, [r7, #12]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <pvPortMalloc+0x168>
	return pvReturn;
 800d6e2:	69fb      	ldr	r3, [r7, #28]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3728      	adds	r7, #40	; 0x28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	200049b4 	.word	0x200049b4
 800d6f0:	200049c0 	.word	0x200049c0
 800d6f4:	200049b8 	.word	0x200049b8
 800d6f8:	200049ac 	.word	0x200049ac
 800d6fc:	200049bc 	.word	0x200049bc

0800d700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d048      	beq.n	800d7a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d712:	2308      	movs	r3, #8
 800d714:	425b      	negs	r3, r3
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	4413      	add	r3, r2
 800d71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	4b21      	ldr	r3, [pc, #132]	; (800d7ac <vPortFree+0xac>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4013      	ands	r3, r2
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10a      	bne.n	800d744 <vPortFree+0x44>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	60fb      	str	r3, [r7, #12]
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00a      	beq.n	800d762 <vPortFree+0x62>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	60bb      	str	r3, [r7, #8]
}
 800d75e:	bf00      	nop
 800d760:	e7fe      	b.n	800d760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	4b11      	ldr	r3, [pc, #68]	; (800d7ac <vPortFree+0xac>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4013      	ands	r3, r2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d019      	beq.n	800d7a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d115      	bne.n	800d7a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	4b0b      	ldr	r3, [pc, #44]	; (800d7ac <vPortFree+0xac>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	43db      	mvns	r3, r3
 800d782:	401a      	ands	r2, r3
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d788:	f7fe fc94 	bl	800c0b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	4b07      	ldr	r3, [pc, #28]	; (800d7b0 <vPortFree+0xb0>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4413      	add	r3, r2
 800d796:	4a06      	ldr	r2, [pc, #24]	; (800d7b0 <vPortFree+0xb0>)
 800d798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d79a:	6938      	ldr	r0, [r7, #16]
 800d79c:	f000 f86c 	bl	800d878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d7a0:	f7fe fc96 	bl	800c0d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7a4:	bf00      	nop
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	200049c0 	.word	0x200049c0
 800d7b0:	200049b8 	.word	0x200049b8

0800d7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7c0:	4b27      	ldr	r3, [pc, #156]	; (800d860 <prvHeapInit+0xac>)
 800d7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00c      	beq.n	800d7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	3307      	adds	r3, #7
 800d7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f023 0307 	bic.w	r3, r3, #7
 800d7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7dc:	68ba      	ldr	r2, [r7, #8]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	4a1f      	ldr	r2, [pc, #124]	; (800d860 <prvHeapInit+0xac>)
 800d7e4:	4413      	add	r3, r2
 800d7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7ec:	4a1d      	ldr	r2, [pc, #116]	; (800d864 <prvHeapInit+0xb0>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7f2:	4b1c      	ldr	r3, [pc, #112]	; (800d864 <prvHeapInit+0xb0>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d800:	2208      	movs	r2, #8
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	1a9b      	subs	r3, r3, r2
 800d806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f023 0307 	bic.w	r3, r3, #7
 800d80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	4a15      	ldr	r2, [pc, #84]	; (800d868 <prvHeapInit+0xb4>)
 800d814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d816:	4b14      	ldr	r3, [pc, #80]	; (800d868 <prvHeapInit+0xb4>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2200      	movs	r2, #0
 800d81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d81e:	4b12      	ldr	r3, [pc, #72]	; (800d868 <prvHeapInit+0xb4>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	1ad2      	subs	r2, r2, r3
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d834:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <prvHeapInit+0xb4>)
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	4a0a      	ldr	r2, [pc, #40]	; (800d86c <prvHeapInit+0xb8>)
 800d842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	4a09      	ldr	r2, [pc, #36]	; (800d870 <prvHeapInit+0xbc>)
 800d84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d84c:	4b09      	ldr	r3, [pc, #36]	; (800d874 <prvHeapInit+0xc0>)
 800d84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d852:	601a      	str	r2, [r3, #0]
}
 800d854:	bf00      	nop
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	20000dac 	.word	0x20000dac
 800d864:	200049ac 	.word	0x200049ac
 800d868:	200049b4 	.word	0x200049b4
 800d86c:	200049bc 	.word	0x200049bc
 800d870:	200049b8 	.word	0x200049b8
 800d874:	200049c0 	.word	0x200049c0

0800d878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d880:	4b28      	ldr	r3, [pc, #160]	; (800d924 <prvInsertBlockIntoFreeList+0xac>)
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	e002      	b.n	800d88c <prvInsertBlockIntoFreeList+0x14>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	429a      	cmp	r2, r3
 800d894:	d8f7      	bhi.n	800d886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d108      	bne.n	800d8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	441a      	add	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	441a      	add	r2, r3
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d118      	bne.n	800d900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	4b15      	ldr	r3, [pc, #84]	; (800d928 <prvInsertBlockIntoFreeList+0xb0>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d00d      	beq.n	800d8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	441a      	add	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	e008      	b.n	800d908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <prvInsertBlockIntoFreeList+0xb0>)
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	e003      	b.n	800d908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d002      	beq.n	800d916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d916:	bf00      	nop
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	200049ac 	.word	0x200049ac
 800d928:	200049b4 	.word	0x200049b4

0800d92c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d930:	2201      	movs	r2, #1
 800d932:	490e      	ldr	r1, [pc, #56]	; (800d96c <MX_USB_HOST_Init+0x40>)
 800d934:	480e      	ldr	r0, [pc, #56]	; (800d970 <MX_USB_HOST_Init+0x44>)
 800d936:	f7fb f963 	bl	8008c00 <USBH_Init>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d940:	f7f3 fd2e 	bl	80013a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d944:	490b      	ldr	r1, [pc, #44]	; (800d974 <MX_USB_HOST_Init+0x48>)
 800d946:	480a      	ldr	r0, [pc, #40]	; (800d970 <MX_USB_HOST_Init+0x44>)
 800d948:	f7fb fa0a 	bl	8008d60 <USBH_RegisterClass>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d952:	f7f3 fd25 	bl	80013a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d956:	4806      	ldr	r0, [pc, #24]	; (800d970 <MX_USB_HOST_Init+0x44>)
 800d958:	f7fb fa8e 	bl	8008e78 <USBH_Start>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d962:	f7f3 fd1d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d966:	bf00      	nop
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	0800d979 	.word	0x0800d979
 800d970:	20004d00 	.word	0x20004d00
 800d974:	2000000c 	.word	0x2000000c

0800d978 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	460b      	mov	r3, r1
 800d982:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	3b01      	subs	r3, #1
 800d988:	2b04      	cmp	r3, #4
 800d98a:	d819      	bhi.n	800d9c0 <USBH_UserProcess+0x48>
 800d98c:	a201      	add	r2, pc, #4	; (adr r2, 800d994 <USBH_UserProcess+0x1c>)
 800d98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d992:	bf00      	nop
 800d994:	0800d9c1 	.word	0x0800d9c1
 800d998:	0800d9b1 	.word	0x0800d9b1
 800d99c:	0800d9c1 	.word	0x0800d9c1
 800d9a0:	0800d9b9 	.word	0x0800d9b9
 800d9a4:	0800d9a9 	.word	0x0800d9a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d9a8:	4b09      	ldr	r3, [pc, #36]	; (800d9d0 <USBH_UserProcess+0x58>)
 800d9aa:	2203      	movs	r2, #3
 800d9ac:	701a      	strb	r2, [r3, #0]
  break;
 800d9ae:	e008      	b.n	800d9c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d9b0:	4b07      	ldr	r3, [pc, #28]	; (800d9d0 <USBH_UserProcess+0x58>)
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	701a      	strb	r2, [r3, #0]
  break;
 800d9b6:	e004      	b.n	800d9c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d9b8:	4b05      	ldr	r3, [pc, #20]	; (800d9d0 <USBH_UserProcess+0x58>)
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	701a      	strb	r2, [r3, #0]
  break;
 800d9be:	e000      	b.n	800d9c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800d9c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d9c2:	bf00      	nop
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	200049c4 	.word	0x200049c4

0800d9d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08a      	sub	sp, #40	; 0x28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9dc:	f107 0314 	add.w	r3, r7, #20
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	601a      	str	r2, [r3, #0]
 800d9e4:	605a      	str	r2, [r3, #4]
 800d9e6:	609a      	str	r2, [r3, #8]
 800d9e8:	60da      	str	r2, [r3, #12]
 800d9ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d9f4:	d147      	bne.n	800da86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	613b      	str	r3, [r7, #16]
 800d9fa:	4b25      	ldr	r3, [pc, #148]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800d9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9fe:	4a24      	ldr	r2, [pc, #144]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800da00:	f043 0301 	orr.w	r3, r3, #1
 800da04:	6313      	str	r3, [r2, #48]	; 0x30
 800da06:	4b22      	ldr	r3, [pc, #136]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800da08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	613b      	str	r3, [r7, #16]
 800da10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800da12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da18:	2300      	movs	r3, #0
 800da1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da1c:	2300      	movs	r3, #0
 800da1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800da20:	f107 0314 	add.w	r3, r7, #20
 800da24:	4619      	mov	r1, r3
 800da26:	481b      	ldr	r0, [pc, #108]	; (800da94 <HAL_HCD_MspInit+0xc0>)
 800da28:	f7f5 f8f6 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800da2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800da30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da32:	2302      	movs	r3, #2
 800da34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da36:	2300      	movs	r3, #0
 800da38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da3a:	2300      	movs	r3, #0
 800da3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da3e:	230a      	movs	r3, #10
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da42:	f107 0314 	add.w	r3, r7, #20
 800da46:	4619      	mov	r1, r3
 800da48:	4812      	ldr	r0, [pc, #72]	; (800da94 <HAL_HCD_MspInit+0xc0>)
 800da4a:	f7f5 f8e5 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800da50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da52:	4a0f      	ldr	r2, [pc, #60]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800da54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da58:	6353      	str	r3, [r2, #52]	; 0x34
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800da60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da62:	4a0b      	ldr	r2, [pc, #44]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800da64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da68:	6453      	str	r3, [r2, #68]	; 0x44
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <HAL_HCD_MspInit+0xbc>)
 800da6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800da76:	2200      	movs	r2, #0
 800da78:	2105      	movs	r1, #5
 800da7a:	2043      	movs	r0, #67	; 0x43
 800da7c:	f7f4 fd7a 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da80:	2043      	movs	r0, #67	; 0x43
 800da82:	f7f4 fd93 	bl	80025ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da86:	bf00      	nop
 800da88:	3728      	adds	r7, #40	; 0x28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	40023800 	.word	0x40023800
 800da94:	40020000 	.word	0x40020000

0800da98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fb fe93 	bl	80097d2 <USBH_LL_IncTimer>
}
 800daac:	bf00      	nop
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fb fed7 	bl	8009876 <USBH_LL_Connect>
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fb feec 	bl	80098bc <USBH_LL_Disconnect>
}
 800dae4:	bf00      	nop
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
 800daf8:	4613      	mov	r3, r2
 800dafa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db02:	4618      	mov	r0, r3
 800db04:	f7fb ff23 	bl	800994e <USBH_LL_NotifyURBChange>
#endif
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fb fe81 	bl	8009826 <USBH_LL_PortEnabled>
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fb fe8d 	bl	800985a <USBH_LL_PortDisabled>
}
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800db56:	2b01      	cmp	r3, #1
 800db58:	d12a      	bne.n	800dbb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800db5a:	4a18      	ldr	r2, [pc, #96]	; (800dbbc <USBH_LL_Init+0x74>)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a15      	ldr	r2, [pc, #84]	; (800dbbc <USBH_LL_Init+0x74>)
 800db66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800db6a:	4b14      	ldr	r3, [pc, #80]	; (800dbbc <USBH_LL_Init+0x74>)
 800db6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800db70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800db72:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <USBH_LL_Init+0x74>)
 800db74:	2208      	movs	r2, #8
 800db76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800db78:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <USBH_LL_Init+0x74>)
 800db7a:	2201      	movs	r2, #1
 800db7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800db7e:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <USBH_LL_Init+0x74>)
 800db80:	2200      	movs	r2, #0
 800db82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800db84:	4b0d      	ldr	r3, [pc, #52]	; (800dbbc <USBH_LL_Init+0x74>)
 800db86:	2202      	movs	r2, #2
 800db88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800db8a:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <USBH_LL_Init+0x74>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800db90:	480a      	ldr	r0, [pc, #40]	; (800dbbc <USBH_LL_Init+0x74>)
 800db92:	f7f5 fa11 	bl	8002fb8 <HAL_HCD_Init>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800db9c:	f7f3 fc00 	bl	80013a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dba0:	4806      	ldr	r0, [pc, #24]	; (800dbbc <USBH_LL_Init+0x74>)
 800dba2:	f7f5 fe15 	bl	80037d0 <HAL_HCD_GetCurrentFrame>
 800dba6:	4603      	mov	r3, r0
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7fb fe02 	bl	80097b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	200050e4 	.word	0x200050e4

0800dbc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7f5 fd82 	bl	80036e0 <HAL_HCD_Start>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f000 f95e 	bl	800dea4 <USBH_Get_USB_Status>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b084      	sub	sp, #16
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7f5 fd8a 	bl	8003726 <HAL_HCD_Stop>
 800dc12:	4603      	mov	r3, r0
 800dc14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc16:	7bfb      	ldrb	r3, [r7, #15]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 f943 	bl	800dea4 <USBH_Get_USB_Status>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dc34:	2301      	movs	r3, #1
 800dc36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f5 fdd4 	bl	80037ec <HAL_HCD_GetCurrentSpeed>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d00c      	beq.n	800dc64 <USBH_LL_GetSpeed+0x38>
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	d80d      	bhi.n	800dc6a <USBH_LL_GetSpeed+0x3e>
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <USBH_LL_GetSpeed+0x2c>
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d003      	beq.n	800dc5e <USBH_LL_GetSpeed+0x32>
 800dc56:	e008      	b.n	800dc6a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc5c:	e008      	b.n	800dc70 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	73fb      	strb	r3, [r7, #15]
    break;
 800dc62:	e005      	b.n	800dc70 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dc64:	2302      	movs	r3, #2
 800dc66:	73fb      	strb	r3, [r7, #15]
    break;
 800dc68:	e002      	b.n	800dc70 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc6e:	bf00      	nop
  }
  return  speed;
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc82:	2300      	movs	r3, #0
 800dc84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7f5 fd65 	bl	8003760 <HAL_HCD_ResetPort>
 800dc96:	4603      	mov	r3, r0
 800dc98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 f901 	bl	800dea4 <USBH_Get_USB_Status>
 800dca2:	4603      	mov	r3, r0
 800dca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dca6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcc2:	78fa      	ldrb	r2, [r7, #3]
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7f5 fd6d 	bl	80037a6 <HAL_HCD_HC_GetXferCount>
 800dccc:	4603      	mov	r3, r0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dcd6:	b590      	push	{r4, r7, lr}
 800dcd8:	b089      	sub	sp, #36	; 0x24
 800dcda:	af04      	add	r7, sp, #16
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	4608      	mov	r0, r1
 800dce0:	4611      	mov	r1, r2
 800dce2:	461a      	mov	r2, r3
 800dce4:	4603      	mov	r3, r0
 800dce6:	70fb      	strb	r3, [r7, #3]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70bb      	strb	r3, [r7, #2]
 800dcec:	4613      	mov	r3, r2
 800dcee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dcfe:	787c      	ldrb	r4, [r7, #1]
 800dd00:	78ba      	ldrb	r2, [r7, #2]
 800dd02:	78f9      	ldrb	r1, [r7, #3]
 800dd04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd06:	9302      	str	r3, [sp, #8]
 800dd08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	4623      	mov	r3, r4
 800dd16:	f7f5 f9b1 	bl	800307c <HAL_HCD_HC_Init>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd1e:	7bfb      	ldrb	r3, [r7, #15]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f000 f8bf 	bl	800dea4 <USBH_Get_USB_Status>
 800dd26:	4603      	mov	r3, r0
 800dd28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3714      	adds	r7, #20
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd90      	pop	{r4, r7, pc}

0800dd34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd4e:	78fa      	ldrb	r2, [r7, #3]
 800dd50:	4611      	mov	r1, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7f5 fa2a 	bl	80031ac <HAL_HCD_HC_Halt>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 f8a0 	bl	800dea4 <USBH_Get_USB_Status>
 800dd64:	4603      	mov	r3, r0
 800dd66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd68:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dd72:	b590      	push	{r4, r7, lr}
 800dd74:	b089      	sub	sp, #36	; 0x24
 800dd76:	af04      	add	r7, sp, #16
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	4608      	mov	r0, r1
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	461a      	mov	r2, r3
 800dd80:	4603      	mov	r3, r0
 800dd82:	70fb      	strb	r3, [r7, #3]
 800dd84:	460b      	mov	r3, r1
 800dd86:	70bb      	strb	r3, [r7, #2]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dd9a:	787c      	ldrb	r4, [r7, #1]
 800dd9c:	78ba      	ldrb	r2, [r7, #2]
 800dd9e:	78f9      	ldrb	r1, [r7, #3]
 800dda0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dda4:	9303      	str	r3, [sp, #12]
 800dda6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dda8:	9302      	str	r3, [sp, #8]
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	4623      	mov	r3, r4
 800ddb6:	f7f5 fa1d 	bl	80031f4 <HAL_HCD_HC_SubmitRequest>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 f86f 	bl	800dea4 <USBH_Get_USB_Status>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3714      	adds	r7, #20
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd90      	pop	{r4, r7, pc}

0800ddd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dde6:	78fa      	ldrb	r2, [r7, #3]
 800dde8:	4611      	mov	r1, r2
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f5 fcc6 	bl	800377c <HAL_HCD_HC_GetURBState>
 800ddf0:	4603      	mov	r3, r0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	460b      	mov	r3, r1
 800de04:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d103      	bne.n	800de18 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	4618      	mov	r0, r3
 800de14:	f000 f872 	bl	800defc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800de18:	20c8      	movs	r0, #200	; 0xc8
 800de1a:	f7f3 fec3 	bl	8001ba4 <HAL_Delay>
  return USBH_OK;
 800de1e:	2300      	movs	r3, #0
}
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	460b      	mov	r3, r1
 800de32:	70fb      	strb	r3, [r7, #3]
 800de34:	4613      	mov	r3, r2
 800de36:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de3e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800de40:	78fa      	ldrb	r2, [r7, #3]
 800de42:	68f9      	ldr	r1, [r7, #12]
 800de44:	4613      	mov	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	440b      	add	r3, r1
 800de4e:	333b      	adds	r3, #59	; 0x3b
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00a      	beq.n	800de6c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	68f9      	ldr	r1, [r7, #12]
 800de5a:	4613      	mov	r3, r2
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4413      	add	r3, r2
 800de60:	00db      	lsls	r3, r3, #3
 800de62:	440b      	add	r3, r1
 800de64:	3350      	adds	r3, #80	; 0x50
 800de66:	78ba      	ldrb	r2, [r7, #2]
 800de68:	701a      	strb	r2, [r3, #0]
 800de6a:	e009      	b.n	800de80 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800de6c:	78fa      	ldrb	r2, [r7, #3]
 800de6e:	68f9      	ldr	r1, [r7, #12]
 800de70:	4613      	mov	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	00db      	lsls	r3, r3, #3
 800de78:	440b      	add	r3, r1
 800de7a:	3351      	adds	r3, #81	; 0x51
 800de7c:	78ba      	ldrb	r2, [r7, #2]
 800de7e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3714      	adds	r7, #20
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr

0800de8e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b082      	sub	sp, #8
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7f3 fe84 	bl	8001ba4 <HAL_Delay>
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800deb2:	79fb      	ldrb	r3, [r7, #7]
 800deb4:	2b03      	cmp	r3, #3
 800deb6:	d817      	bhi.n	800dee8 <USBH_Get_USB_Status+0x44>
 800deb8:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <USBH_Get_USB_Status+0x1c>)
 800deba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debe:	bf00      	nop
 800dec0:	0800ded1 	.word	0x0800ded1
 800dec4:	0800ded7 	.word	0x0800ded7
 800dec8:	0800dedd 	.word	0x0800dedd
 800decc:	0800dee3 	.word	0x0800dee3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	73fb      	strb	r3, [r7, #15]
    break;
 800ded4:	e00b      	b.n	800deee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ded6:	2302      	movs	r3, #2
 800ded8:	73fb      	strb	r3, [r7, #15]
    break;
 800deda:	e008      	b.n	800deee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dedc:	2301      	movs	r3, #1
 800dede:	73fb      	strb	r3, [r7, #15]
    break;
 800dee0:	e005      	b.n	800deee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dee2:	2302      	movs	r3, #2
 800dee4:	73fb      	strb	r3, [r7, #15]
    break;
 800dee6:	e002      	b.n	800deee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dee8:	2302      	movs	r3, #2
 800deea:	73fb      	strb	r3, [r7, #15]
    break;
 800deec:	bf00      	nop
  }
  return usb_status;
 800deee:	7bfb      	ldrb	r3, [r7, #15]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	4603      	mov	r3, r0
 800df04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800df06:	79fb      	ldrb	r3, [r7, #7]
 800df08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d102      	bne.n	800df16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800df10:	2301      	movs	r3, #1
 800df12:	73fb      	strb	r3, [r7, #15]
 800df14:	e001      	b.n	800df1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800df16:	2300      	movs	r3, #0
 800df18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800df1a:	7bfb      	ldrb	r3, [r7, #15]
 800df1c:	461a      	mov	r2, r3
 800df1e:	2101      	movs	r1, #1
 800df20:	4803      	ldr	r0, [pc, #12]	; (800df30 <MX_DriverVbusFS+0x34>)
 800df22:	f7f5 f815 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800df26:	bf00      	nop
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	40020800 	.word	0x40020800

0800df34 <calloc>:
 800df34:	4b02      	ldr	r3, [pc, #8]	; (800df40 <calloc+0xc>)
 800df36:	460a      	mov	r2, r1
 800df38:	4601      	mov	r1, r0
 800df3a:	6818      	ldr	r0, [r3, #0]
 800df3c:	f000 b852 	b.w	800dfe4 <_calloc_r>
 800df40:	20000030 	.word	0x20000030

0800df44 <__errno>:
 800df44:	4b01      	ldr	r3, [pc, #4]	; (800df4c <__errno+0x8>)
 800df46:	6818      	ldr	r0, [r3, #0]
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	20000030 	.word	0x20000030

0800df50 <__libc_init_array>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	4d0d      	ldr	r5, [pc, #52]	; (800df88 <__libc_init_array+0x38>)
 800df54:	4c0d      	ldr	r4, [pc, #52]	; (800df8c <__libc_init_array+0x3c>)
 800df56:	1b64      	subs	r4, r4, r5
 800df58:	10a4      	asrs	r4, r4, #2
 800df5a:	2600      	movs	r6, #0
 800df5c:	42a6      	cmp	r6, r4
 800df5e:	d109      	bne.n	800df74 <__libc_init_array+0x24>
 800df60:	4d0b      	ldr	r5, [pc, #44]	; (800df90 <__libc_init_array+0x40>)
 800df62:	4c0c      	ldr	r4, [pc, #48]	; (800df94 <__libc_init_array+0x44>)
 800df64:	f000 f916 	bl	800e194 <_init>
 800df68:	1b64      	subs	r4, r4, r5
 800df6a:	10a4      	asrs	r4, r4, #2
 800df6c:	2600      	movs	r6, #0
 800df6e:	42a6      	cmp	r6, r4
 800df70:	d105      	bne.n	800df7e <__libc_init_array+0x2e>
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	f855 3b04 	ldr.w	r3, [r5], #4
 800df78:	4798      	blx	r3
 800df7a:	3601      	adds	r6, #1
 800df7c:	e7ee      	b.n	800df5c <__libc_init_array+0xc>
 800df7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df82:	4798      	blx	r3
 800df84:	3601      	adds	r6, #1
 800df86:	e7f2      	b.n	800df6e <__libc_init_array+0x1e>
 800df88:	0800e380 	.word	0x0800e380
 800df8c:	0800e380 	.word	0x0800e380
 800df90:	0800e380 	.word	0x0800e380
 800df94:	0800e384 	.word	0x0800e384

0800df98 <malloc>:
 800df98:	4b02      	ldr	r3, [pc, #8]	; (800dfa4 <malloc+0xc>)
 800df9a:	4601      	mov	r1, r0
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	f000 b881 	b.w	800e0a4 <_malloc_r>
 800dfa2:	bf00      	nop
 800dfa4:	20000030 	.word	0x20000030

0800dfa8 <free>:
 800dfa8:	4b02      	ldr	r3, [pc, #8]	; (800dfb4 <free+0xc>)
 800dfaa:	4601      	mov	r1, r0
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	f000 b829 	b.w	800e004 <_free_r>
 800dfb2:	bf00      	nop
 800dfb4:	20000030 	.word	0x20000030

0800dfb8 <memcpy>:
 800dfb8:	440a      	add	r2, r1
 800dfba:	4291      	cmp	r1, r2
 800dfbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfc0:	d100      	bne.n	800dfc4 <memcpy+0xc>
 800dfc2:	4770      	bx	lr
 800dfc4:	b510      	push	{r4, lr}
 800dfc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfce:	4291      	cmp	r1, r2
 800dfd0:	d1f9      	bne.n	800dfc6 <memcpy+0xe>
 800dfd2:	bd10      	pop	{r4, pc}

0800dfd4 <memset>:
 800dfd4:	4402      	add	r2, r0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d100      	bne.n	800dfde <memset+0xa>
 800dfdc:	4770      	bx	lr
 800dfde:	f803 1b01 	strb.w	r1, [r3], #1
 800dfe2:	e7f9      	b.n	800dfd8 <memset+0x4>

0800dfe4 <_calloc_r>:
 800dfe4:	b513      	push	{r0, r1, r4, lr}
 800dfe6:	434a      	muls	r2, r1
 800dfe8:	4611      	mov	r1, r2
 800dfea:	9201      	str	r2, [sp, #4]
 800dfec:	f000 f85a 	bl	800e0a4 <_malloc_r>
 800dff0:	4604      	mov	r4, r0
 800dff2:	b118      	cbz	r0, 800dffc <_calloc_r+0x18>
 800dff4:	9a01      	ldr	r2, [sp, #4]
 800dff6:	2100      	movs	r1, #0
 800dff8:	f7ff ffec 	bl	800dfd4 <memset>
 800dffc:	4620      	mov	r0, r4
 800dffe:	b002      	add	sp, #8
 800e000:	bd10      	pop	{r4, pc}
	...

0800e004 <_free_r>:
 800e004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e006:	2900      	cmp	r1, #0
 800e008:	d048      	beq.n	800e09c <_free_r+0x98>
 800e00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e00e:	9001      	str	r0, [sp, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f1a1 0404 	sub.w	r4, r1, #4
 800e016:	bfb8      	it	lt
 800e018:	18e4      	addlt	r4, r4, r3
 800e01a:	f000 f8ad 	bl	800e178 <__malloc_lock>
 800e01e:	4a20      	ldr	r2, [pc, #128]	; (800e0a0 <_free_r+0x9c>)
 800e020:	9801      	ldr	r0, [sp, #4]
 800e022:	6813      	ldr	r3, [r2, #0]
 800e024:	4615      	mov	r5, r2
 800e026:	b933      	cbnz	r3, 800e036 <_free_r+0x32>
 800e028:	6063      	str	r3, [r4, #4]
 800e02a:	6014      	str	r4, [r2, #0]
 800e02c:	b003      	add	sp, #12
 800e02e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e032:	f000 b8a7 	b.w	800e184 <__malloc_unlock>
 800e036:	42a3      	cmp	r3, r4
 800e038:	d90b      	bls.n	800e052 <_free_r+0x4e>
 800e03a:	6821      	ldr	r1, [r4, #0]
 800e03c:	1862      	adds	r2, r4, r1
 800e03e:	4293      	cmp	r3, r2
 800e040:	bf04      	itt	eq
 800e042:	681a      	ldreq	r2, [r3, #0]
 800e044:	685b      	ldreq	r3, [r3, #4]
 800e046:	6063      	str	r3, [r4, #4]
 800e048:	bf04      	itt	eq
 800e04a:	1852      	addeq	r2, r2, r1
 800e04c:	6022      	streq	r2, [r4, #0]
 800e04e:	602c      	str	r4, [r5, #0]
 800e050:	e7ec      	b.n	800e02c <_free_r+0x28>
 800e052:	461a      	mov	r2, r3
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	b10b      	cbz	r3, 800e05c <_free_r+0x58>
 800e058:	42a3      	cmp	r3, r4
 800e05a:	d9fa      	bls.n	800e052 <_free_r+0x4e>
 800e05c:	6811      	ldr	r1, [r2, #0]
 800e05e:	1855      	adds	r5, r2, r1
 800e060:	42a5      	cmp	r5, r4
 800e062:	d10b      	bne.n	800e07c <_free_r+0x78>
 800e064:	6824      	ldr	r4, [r4, #0]
 800e066:	4421      	add	r1, r4
 800e068:	1854      	adds	r4, r2, r1
 800e06a:	42a3      	cmp	r3, r4
 800e06c:	6011      	str	r1, [r2, #0]
 800e06e:	d1dd      	bne.n	800e02c <_free_r+0x28>
 800e070:	681c      	ldr	r4, [r3, #0]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	6053      	str	r3, [r2, #4]
 800e076:	4421      	add	r1, r4
 800e078:	6011      	str	r1, [r2, #0]
 800e07a:	e7d7      	b.n	800e02c <_free_r+0x28>
 800e07c:	d902      	bls.n	800e084 <_free_r+0x80>
 800e07e:	230c      	movs	r3, #12
 800e080:	6003      	str	r3, [r0, #0]
 800e082:	e7d3      	b.n	800e02c <_free_r+0x28>
 800e084:	6825      	ldr	r5, [r4, #0]
 800e086:	1961      	adds	r1, r4, r5
 800e088:	428b      	cmp	r3, r1
 800e08a:	bf04      	itt	eq
 800e08c:	6819      	ldreq	r1, [r3, #0]
 800e08e:	685b      	ldreq	r3, [r3, #4]
 800e090:	6063      	str	r3, [r4, #4]
 800e092:	bf04      	itt	eq
 800e094:	1949      	addeq	r1, r1, r5
 800e096:	6021      	streq	r1, [r4, #0]
 800e098:	6054      	str	r4, [r2, #4]
 800e09a:	e7c7      	b.n	800e02c <_free_r+0x28>
 800e09c:	b003      	add	sp, #12
 800e09e:	bd30      	pop	{r4, r5, pc}
 800e0a0:	200049c8 	.word	0x200049c8

0800e0a4 <_malloc_r>:
 800e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a6:	1ccd      	adds	r5, r1, #3
 800e0a8:	f025 0503 	bic.w	r5, r5, #3
 800e0ac:	3508      	adds	r5, #8
 800e0ae:	2d0c      	cmp	r5, #12
 800e0b0:	bf38      	it	cc
 800e0b2:	250c      	movcc	r5, #12
 800e0b4:	2d00      	cmp	r5, #0
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	db01      	blt.n	800e0be <_malloc_r+0x1a>
 800e0ba:	42a9      	cmp	r1, r5
 800e0bc:	d903      	bls.n	800e0c6 <_malloc_r+0x22>
 800e0be:	230c      	movs	r3, #12
 800e0c0:	6033      	str	r3, [r6, #0]
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0c6:	f000 f857 	bl	800e178 <__malloc_lock>
 800e0ca:	4921      	ldr	r1, [pc, #132]	; (800e150 <_malloc_r+0xac>)
 800e0cc:	680a      	ldr	r2, [r1, #0]
 800e0ce:	4614      	mov	r4, r2
 800e0d0:	b99c      	cbnz	r4, 800e0fa <_malloc_r+0x56>
 800e0d2:	4f20      	ldr	r7, [pc, #128]	; (800e154 <_malloc_r+0xb0>)
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	b923      	cbnz	r3, 800e0e2 <_malloc_r+0x3e>
 800e0d8:	4621      	mov	r1, r4
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f000 f83c 	bl	800e158 <_sbrk_r>
 800e0e0:	6038      	str	r0, [r7, #0]
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f000 f837 	bl	800e158 <_sbrk_r>
 800e0ea:	1c43      	adds	r3, r0, #1
 800e0ec:	d123      	bne.n	800e136 <_malloc_r+0x92>
 800e0ee:	230c      	movs	r3, #12
 800e0f0:	6033      	str	r3, [r6, #0]
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f000 f846 	bl	800e184 <__malloc_unlock>
 800e0f8:	e7e3      	b.n	800e0c2 <_malloc_r+0x1e>
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	1b5b      	subs	r3, r3, r5
 800e0fe:	d417      	bmi.n	800e130 <_malloc_r+0x8c>
 800e100:	2b0b      	cmp	r3, #11
 800e102:	d903      	bls.n	800e10c <_malloc_r+0x68>
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	441c      	add	r4, r3
 800e108:	6025      	str	r5, [r4, #0]
 800e10a:	e004      	b.n	800e116 <_malloc_r+0x72>
 800e10c:	6863      	ldr	r3, [r4, #4]
 800e10e:	42a2      	cmp	r2, r4
 800e110:	bf0c      	ite	eq
 800e112:	600b      	streq	r3, [r1, #0]
 800e114:	6053      	strne	r3, [r2, #4]
 800e116:	4630      	mov	r0, r6
 800e118:	f000 f834 	bl	800e184 <__malloc_unlock>
 800e11c:	f104 000b 	add.w	r0, r4, #11
 800e120:	1d23      	adds	r3, r4, #4
 800e122:	f020 0007 	bic.w	r0, r0, #7
 800e126:	1ac2      	subs	r2, r0, r3
 800e128:	d0cc      	beq.n	800e0c4 <_malloc_r+0x20>
 800e12a:	1a1b      	subs	r3, r3, r0
 800e12c:	50a3      	str	r3, [r4, r2]
 800e12e:	e7c9      	b.n	800e0c4 <_malloc_r+0x20>
 800e130:	4622      	mov	r2, r4
 800e132:	6864      	ldr	r4, [r4, #4]
 800e134:	e7cc      	b.n	800e0d0 <_malloc_r+0x2c>
 800e136:	1cc4      	adds	r4, r0, #3
 800e138:	f024 0403 	bic.w	r4, r4, #3
 800e13c:	42a0      	cmp	r0, r4
 800e13e:	d0e3      	beq.n	800e108 <_malloc_r+0x64>
 800e140:	1a21      	subs	r1, r4, r0
 800e142:	4630      	mov	r0, r6
 800e144:	f000 f808 	bl	800e158 <_sbrk_r>
 800e148:	3001      	adds	r0, #1
 800e14a:	d1dd      	bne.n	800e108 <_malloc_r+0x64>
 800e14c:	e7cf      	b.n	800e0ee <_malloc_r+0x4a>
 800e14e:	bf00      	nop
 800e150:	200049c8 	.word	0x200049c8
 800e154:	200049cc 	.word	0x200049cc

0800e158 <_sbrk_r>:
 800e158:	b538      	push	{r3, r4, r5, lr}
 800e15a:	4d06      	ldr	r5, [pc, #24]	; (800e174 <_sbrk_r+0x1c>)
 800e15c:	2300      	movs	r3, #0
 800e15e:	4604      	mov	r4, r0
 800e160:	4608      	mov	r0, r1
 800e162:	602b      	str	r3, [r5, #0]
 800e164:	f7f3 fc66 	bl	8001a34 <_sbrk>
 800e168:	1c43      	adds	r3, r0, #1
 800e16a:	d102      	bne.n	800e172 <_sbrk_r+0x1a>
 800e16c:	682b      	ldr	r3, [r5, #0]
 800e16e:	b103      	cbz	r3, 800e172 <_sbrk_r+0x1a>
 800e170:	6023      	str	r3, [r4, #0]
 800e172:	bd38      	pop	{r3, r4, r5, pc}
 800e174:	200053a8 	.word	0x200053a8

0800e178 <__malloc_lock>:
 800e178:	4801      	ldr	r0, [pc, #4]	; (800e180 <__malloc_lock+0x8>)
 800e17a:	f000 b809 	b.w	800e190 <__retarget_lock_acquire_recursive>
 800e17e:	bf00      	nop
 800e180:	200053b0 	.word	0x200053b0

0800e184 <__malloc_unlock>:
 800e184:	4801      	ldr	r0, [pc, #4]	; (800e18c <__malloc_unlock+0x8>)
 800e186:	f000 b804 	b.w	800e192 <__retarget_lock_release_recursive>
 800e18a:	bf00      	nop
 800e18c:	200053b0 	.word	0x200053b0

0800e190 <__retarget_lock_acquire_recursive>:
 800e190:	4770      	bx	lr

0800e192 <__retarget_lock_release_recursive>:
 800e192:	4770      	bx	lr

0800e194 <_init>:
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	bf00      	nop
 800e198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19a:	bc08      	pop	{r3}
 800e19c:	469e      	mov	lr, r3
 800e19e:	4770      	bx	lr

0800e1a0 <_fini>:
 800e1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a2:	bf00      	nop
 800e1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a6:	bc08      	pop	{r3}
 800e1a8:	469e      	mov	lr, r3
 800e1aa:	4770      	bx	lr
