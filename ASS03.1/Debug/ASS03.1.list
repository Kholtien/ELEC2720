
ASS03.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c8c  08003c8c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c94  08003c94  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000084  08003d20  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003d20  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a33a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf7  00000000  00000000  0002a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214b9  00000000  00000000  0002ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ce2  00000000  00000000  0004e349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4094  00000000  00000000  0005702b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011b0bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002568  00000000  00000000  0011b114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bbc 	.word	0x08003bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08003bbc 	.word	0x08003bbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc0c 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f82c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8be 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f892 	bl	80006a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  // Set up the printf routines
  my_USART_Init (& huart2); // !!!! ADDED USART 2 to accept printf etc.
 800057c:	480e      	ldr	r0, [pc, #56]	; (80005b8 <main+0x50>)
 800057e:	f000 fb97 	bl	8000cb0 <my_USART_Init>


  //Clear screen
  printf(CLEAR_M);
 8000582:	200c      	movs	r0, #12
 8000584:	f000 fbca 	bl	8000d1c <putchar>
  printf(RESET_M);
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <main+0x54>)
 800058a:	f002 fbc1 	bl	8002d10 <iprintf>
  HAL_UART_Receive_IT(&huart2, rec_data, 4);
 800058e:	2204      	movs	r2, #4
 8000590:	490b      	ldr	r1, [pc, #44]	; (80005c0 <main+0x58>)
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0x50>)
 8000594:	f001 fdf7 	bl	8002186 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	2213      	movs	r2, #19
 800059c:	4909      	ldr	r1, [pc, #36]	; (80005c4 <main+0x5c>)
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x50>)
 80005a0:	f001 fcbd 	bl	8001f1e <HAL_UART_Transmit>
	  HAL_Delay(500);
 80005a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a8:	f000 fc60 	bl	8000e6c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); //Green LED
 80005ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <main+0x60>)
 80005b2:	f000 ffd8 	bl	8001566 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 80005b6:	e7ef      	b.n	8000598 <main+0x30>
 80005b8:	200000b0 	.word	0x200000b0
 80005bc:	08003bd4 	.word	0x08003bd4
 80005c0:	200000f4 	.word	0x200000f4
 80005c4:	20000000 	.word	0x20000000
 80005c8:	40020c00 	.word	0x40020c00

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fb90 	bl	8002d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f000 ffa2 	bl	800159c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f9a7 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2105      	movs	r1, #5
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fa03 	bl	8001a8c <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800068c:	f000 f990 	bl	80009b0 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 fbd4 	bl	8001e84 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f965 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000b0 	.word	0x200000b0
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4ba1      	ldr	r3, [pc, #644]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4aa0      	ldr	r2, [pc, #640]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b9e      	ldr	r3, [pc, #632]	; (8000994 <MX_GPIO_Init+0x2a0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b9a      	ldr	r3, [pc, #616]	; (8000994 <MX_GPIO_Init+0x2a0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a99      	ldr	r2, [pc, #612]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b97      	ldr	r3, [pc, #604]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b93      	ldr	r3, [pc, #588]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a92      	ldr	r2, [pc, #584]	; (8000994 <MX_GPIO_Init+0x2a0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b90      	ldr	r3, [pc, #576]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b8c      	ldr	r3, [pc, #560]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a8b      	ldr	r2, [pc, #556]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b89      	ldr	r3, [pc, #548]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b85      	ldr	r3, [pc, #532]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a84      	ldr	r2, [pc, #528]	; (8000994 <MX_GPIO_Init+0x2a0>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b82      	ldr	r3, [pc, #520]	; (8000994 <MX_GPIO_Init+0x2a0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b7e      	ldr	r3, [pc, #504]	; (8000994 <MX_GPIO_Init+0x2a0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a7d      	ldr	r2, [pc, #500]	; (8000994 <MX_GPIO_Init+0x2a0>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b7b      	ldr	r3, [pc, #492]	; (8000994 <MX_GPIO_Init+0x2a0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	4878      	ldr	r0, [pc, #480]	; (8000998 <MX_GPIO_Init+0x2a4>)
 80007b8:	f000 febc 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4876      	ldr	r0, [pc, #472]	; (800099c <MX_GPIO_Init+0x2a8>)
 80007c2:	f000 feb7 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007cc:	4874      	ldr	r0, [pc, #464]	; (80009a0 <MX_GPIO_Init+0x2ac>)
 80007ce:	f000 feb1 	bl	8001534 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	486b      	ldr	r0, [pc, #428]	; (8000998 <MX_GPIO_Init+0x2a4>)
 80007ea:	f000 fd07 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4865      	ldr	r0, [pc, #404]	; (800099c <MX_GPIO_Init+0x2a8>)
 8000806:	f000 fcf9 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800081a:	2305      	movs	r3, #5
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	485d      	ldr	r0, [pc, #372]	; (800099c <MX_GPIO_Init+0x2a8>)
 8000826:	f000 fce9 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800082e:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <MX_GPIO_Init+0x2b0>)
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	485a      	ldr	r0, [pc, #360]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800083e:	f000 fcdd 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000852:	2306      	movs	r3, #6
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4852      	ldr	r0, [pc, #328]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800085e:	f000 fccd 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000862:	23e0      	movs	r3, #224	; 0xe0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000872:	2305      	movs	r3, #5
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	484a      	ldr	r0, [pc, #296]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800087e:	f000 fcbd 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000882:	2304      	movs	r3, #4
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4845      	ldr	r0, [pc, #276]	; (80009ac <MX_GPIO_Init+0x2b8>)
 8000896:	f000 fcb1 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ac:	2305      	movs	r3, #5
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	483d      	ldr	r0, [pc, #244]	; (80009ac <MX_GPIO_Init+0x2b8>)
 80008b8:	f000 fca0 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4832      	ldr	r0, [pc, #200]	; (80009a0 <MX_GPIO_Init+0x2ac>)
 80008d6:	f000 fc91 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ec:	2306      	movs	r3, #6
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4829      	ldr	r0, [pc, #164]	; (800099c <MX_GPIO_Init+0x2a8>)
 80008f8:	f000 fc80 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4825      	ldr	r0, [pc, #148]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000912:	f000 fc73 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000916:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000928:	230a      	movs	r3, #10
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	481d      	ldr	r0, [pc, #116]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000934:	f000 fc62 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000938:	2320      	movs	r3, #32
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <MX_GPIO_Init+0x2ac>)
 800094c:	f000 fc56 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000950:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095a:	2301      	movs	r3, #1
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000962:	2304      	movs	r3, #4
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480f      	ldr	r0, [pc, #60]	; (80009ac <MX_GPIO_Init+0x2b8>)
 800096e:	f000 fc45 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_GPIO_Init+0x2b0>)
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0x2a4>)
 8000986:	f000 fc39 	bl	80011fc <HAL_GPIO_Init>

}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	; 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	10120000 	.word	0x10120000
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f000 fb2a 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <HAL_UART_MspInit+0x94>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d133      	bne.n	8000a96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a82:	f000 fbbb 	bl	80011fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2026      	movs	r0, #38	; 0x26
 8000a8c:	f000 faed 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a90:	2026      	movs	r0, #38	; 0x26
 8000a92:	f000 fb06 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f998 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <USART2_IRQHandler+0x38>)
 8000b06:	f001 fb6f 	bl	80021e8 <HAL_UART_IRQHandler>
  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin); //Blue LED
 8000b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0e:	480b      	ldr	r0, [pc, #44]	; (8000b3c <USART2_IRQHandler+0x3c>)
 8000b10:	f000 fd29 	bl	8001566 <HAL_GPIO_TogglePin>


  if(huart2.RxXferCount == 0){
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <USART2_IRQHandler+0x38>)
 8000b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d109      	bne.n	8000b32 <USART2_IRQHandler+0x32>
	  HAL_UART_Receive_IT(&huart2, rec_data, 4); //sets the data pointer and the data count to 4. re-enables the interrupts sets state to busy
 8000b1e:	2204      	movs	r2, #4
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <USART2_IRQHandler+0x40>)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <USART2_IRQHandler+0x38>)
 8000b24:	f001 fb2f 	bl	8002186 <HAL_UART_Receive_IT>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //Orange LED
 8000b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <USART2_IRQHandler+0x3c>)
 8000b2e:	f000 fd1a 	bl	8001566 <HAL_GPIO_TogglePin>
  }
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000b0 	.word	0x200000b0
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	200000f4 	.word	0x200000f4

08000b44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b56:	f000 f8cf 	bl	8000cf8 <__io_getchar>
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
	}

return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f899 	bl	8000cd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
	}
	return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f002 f82c 	bl	8002cac <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20020000 	.word	0x20020000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	200000a0 	.word	0x200000a0
 8000c88:	20000110 	.word	0x20000110

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <my_USART_Init>:
 * Written by Bob Betz
 * Date: 22/10/20
 */

void my_USART_Init(UART_HandleTypeDef *pHuartAct)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	pHuart = pHuartAct;
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <my_USART_Init+0x1c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200000a4 	.word	0x200000a4

08000cd0 <__io_putchar>:
/*
 * Redefinition of the weak routines to my own.
 */
int __io_putchar(int ch)

{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHuart, (uint8_t *)(&ch), 1, 0xFFFF);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <__io_putchar+0x24>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	1d39      	adds	r1, r7, #4
 8000cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f001 f91b 	bl	8001f1e <HAL_UART_Transmit>
  return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000a4 	.word	0x200000a4

08000cf8 <__io_getchar>:


int __io_getchar(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(pHuart, (uint8_t *)(&ch), 1, 0xFFFF);
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <__io_getchar+0x20>)
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	1df9      	adds	r1, r7, #7
 8000d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f001 f99a 	bl	8002042 <HAL_UART_Receive>
  return (int)ch;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000a4 	.word	0x200000a4

08000d1c <putchar>:
{
	return (char)__io_getchar();
}

int putchar(int ch)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	return __io_putchar(ch);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ffd3 	bl	8000cd0 <__io_putchar>
 8000d2a:	4603      	mov	r3, r0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3a:	490e      	ldr	r1, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d50:	4c0b      	ldr	r4, [pc, #44]	; (8000d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5e:	f7ff ff95 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f001 ffa9 	bl	8002cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fbff 	bl	8000568 <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000d78:	08003c9c 	.word	0x08003c9c
  ldr r2, =_sbss
 8000d7c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000d80:	2000010c 	.word	0x2000010c

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_Init+0x40>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_Init+0x40>)
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_Init+0x40>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f94f 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f808 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fdfe 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x54>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x58>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f967 	bl	80010be <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f000 f92f 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_InitTick+0x5c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000014 	.word	0x20000014
 8000e24:	2000001c 	.word	0x2000001c
 8000e28:	20000018 	.word	0x20000018

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000001c 	.word	0x2000001c
 8000e50:	200000f8 	.word	0x200000f8

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200000f8 	.word	0x200000f8

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff ffee 	bl	8000e54 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffde 	bl	8000e54 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000001c 	.word	0x2000001c

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff29 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff3e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff31 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff feb6 	bl	8000e54 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e052      	b.n	80011ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0216 	bic.w	r2, r2, #22
 8001116:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001126:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	2b00      	cmp	r3, #0
 800112e:	d103      	bne.n	8001138 <HAL_DMA_Abort+0x62>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0208 	bic.w	r2, r2, #8
 8001146:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001158:	e013      	b.n	8001182 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800115a:	f7ff fe7b 	bl	8000e54 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b05      	cmp	r3, #5
 8001166:	d90c      	bls.n	8001182 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2220      	movs	r2, #32
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2203      	movs	r2, #3
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e015      	b.n	80011ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e4      	bne.n	800115a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	223f      	movs	r2, #63	; 0x3f
 8001196:	409a      	lsls	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d004      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00c      	b.n	80011ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2205      	movs	r2, #5
 80011d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e16b      	b.n	80014f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 815a 	bne.w	80014ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124a:	2b02      	cmp	r3, #2
 800124c:	d130      	bne.n	80012b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d017      	beq.n	80012ec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80b4 	beq.w	80014ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_GPIO_Init+0x30c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a5f      	ldr	r2, [pc, #380]	; (8001508 <HAL_GPIO_Init+0x30c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_GPIO_Init+0x30c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139e:	4a5b      	ldr	r2, [pc, #364]	; (800150c <HAL_GPIO_Init+0x310>)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a52      	ldr	r2, [pc, #328]	; (8001510 <HAL_GPIO_Init+0x314>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x226>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_GPIO_Init+0x318>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x222>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a50      	ldr	r2, [pc, #320]	; (8001518 <HAL_GPIO_Init+0x31c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x21e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4f      	ldr	r2, [pc, #316]	; (800151c <HAL_GPIO_Init+0x320>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x21a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_GPIO_Init+0x324>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x216>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4d      	ldr	r2, [pc, #308]	; (8001524 <HAL_GPIO_Init+0x328>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x212>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_GPIO_Init+0x32c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x20e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4b      	ldr	r2, [pc, #300]	; (800152c <HAL_GPIO_Init+0x330>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x20a>
 8001402:	2307      	movs	r3, #7
 8001404:	e00e      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001406:	2308      	movs	r3, #8
 8001408:	e00c      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800140a:	2306      	movs	r3, #6
 800140c:	e00a      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001422:	2300      	movs	r3, #0
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f002 0203 	and.w	r2, r2, #3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	; (800150c <HAL_GPIO_Init+0x310>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HAL_GPIO_Init+0x334>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_GPIO_Init+0x334>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ba:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_GPIO_Init+0x334>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_GPIO_Init+0x334>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <HAL_GPIO_Init+0x334>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	f67f ae90 	bls.w	8001218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40021c00 	.word	0x40021c00
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001578:	887a      	ldrh	r2, [r7, #2]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	041a      	lsls	r2, r3, #16
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43d9      	mvns	r1, r3
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	400b      	ands	r3, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e264      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	4ba3      	ldr	r3, [pc, #652]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d00c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4ba0      	ldr	r3, [pc, #640]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d112      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b9d      	ldr	r3, [pc, #628]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b99      	ldr	r3, [pc, #612]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d157      	bne.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e23f      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x74>
 8001602:	4b91      	ldr	r3, [pc, #580]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a90      	ldr	r2, [pc, #576]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a8a      	ldr	r2, [pc, #552]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a87      	ldr	r2, [pc, #540]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a83      	ldr	r2, [pc, #524]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a80      	ldr	r2, [pc, #512]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fbfe 	bl	8000e54 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fbfa 	bl	8000e54 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e204      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0xc0>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fbea 	bl	8000e54 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fbe6 	bl	8000e54 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1f0      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0xe8>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d11c      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d116      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1c4      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b56      	ldr	r3, [pc, #344]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4952      	ldr	r1, [pc, #328]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e03a      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_RCC_OscConfig+0x2b0>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fb9f 	bl	8000e54 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fb9b 	bl	8000e54 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1a5      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4940      	ldr	r1, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_OscConfig+0x2b0>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb7e 	bl	8000e54 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fb7a 	bl	8000e54 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e184      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d030      	beq.n	80017e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d016      	beq.n	80017bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_RCC_OscConfig+0x2b4>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fb5e 	bl	8000e54 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fb5a 	bl	8000e54 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e164      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
 80017ba:	e015      	b.n	80017e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_OscConfig+0x2b4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fb47 	bl	8000e54 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fb43 	bl	8000e54 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e14d      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80a0 	beq.w	8001936 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x2b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d121      	bne.n	8001876 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_RCC_OscConfig+0x2b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_RCC_OscConfig+0x2b8>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb09 	bl	8000e54 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e011      	b.n	800186a <HAL_RCC_OscConfig+0x2ce>
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	42470000 	.word	0x42470000
 8001850:	42470e80 	.word	0x42470e80
 8001854:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001858:	f7ff fafc 	bl	8000e54 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e106      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <HAL_RCC_OscConfig+0x4e4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d106      	bne.n	800188c <HAL_RCC_OscConfig+0x2f0>
 800187e:	4b81      	ldr	r3, [pc, #516]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a80      	ldr	r2, [pc, #512]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	e01c      	b.n	80018c6 <HAL_RCC_OscConfig+0x32a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x312>
 8001894:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a77      	ldr	r2, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x32a>
 80018ae:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a74      	ldr	r2, [pc, #464]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a71      	ldr	r2, [pc, #452]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff fac1 	bl	8000e54 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff fabd 	bl	8000e54 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0c5      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <HAL_RCC_OscConfig+0x33a>
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff faab 	bl	8000e54 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff faa7 	bl	8000e54 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0af      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 809b 	beq.w	8001a76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001940:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d05c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d141      	bne.n	80019d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x4ec>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fa7b 	bl	8000e54 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fa77 	bl	8000e54 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e081      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001974:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	019b      	lsls	r3, r3, #6
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	061b      	lsls	r3, r3, #24
 80019a4:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_RCC_OscConfig+0x4ec>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fa50 	bl	8000e54 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fa4c 	bl	8000e54 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e056      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x41c>
 80019d6:	e04e      	b.n	8001a76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_OscConfig+0x4ec>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff fa39 	bl	8000e54 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff fa35 	bl	8000e54 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e03f      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x44a>
 8001a04:	e037      	b.n	8001a76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e032      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d028      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d121      	bne.n	8001a72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d11a      	bne.n	8001a72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d111      	bne.n	8001a72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40007000 	.word	0x40007000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	42470060 	.word	0x42470060

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0cc      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d90c      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b8      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	494d      	ldr	r1, [pc, #308]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d044      	beq.n	8001bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e07f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e067      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4934      	ldr	r1, [pc, #208]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f96a 	bl	8000e54 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff f966 	bl	8000e54 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e04f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d20c      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e032      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c12:	f000 f821 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f8ca 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	08003bdc 	.word	0x08003bdc
 8001c50:	20000014 	.word	0x20000014
 8001c54:	20000018 	.word	0x20000018

08001c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c70:	4b67      	ldr	r3, [pc, #412]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d00d      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	f200 80bd 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x34>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8a:	e0b7      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c8e:	60bb      	str	r3, [r7, #8]
       break;
 8001c90:	e0b7      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c92:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c94:	60bb      	str	r3, [r7, #8]
      break;
 8001c96:	e0b4      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c98:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04d      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cae:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cbe:	f04f 0100 	mov.w	r1, #0
 8001cc2:	ea02 0800 	and.w	r8, r2, r0
 8001cc6:	ea03 0901 	and.w	r9, r3, r1
 8001cca:	4640      	mov	r0, r8
 8001ccc:	4649      	mov	r1, r9
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	014b      	lsls	r3, r1, #5
 8001cd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cdc:	0142      	lsls	r2, r0, #5
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	ebb0 0008 	subs.w	r0, r0, r8
 8001ce6:	eb61 0109 	sbc.w	r1, r1, r9
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	018b      	lsls	r3, r1, #6
 8001cf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cf8:	0182      	lsls	r2, r0, #6
 8001cfa:	1a12      	subs	r2, r2, r0
 8001cfc:	eb63 0301 	sbc.w	r3, r3, r1
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	00d9      	lsls	r1, r3, #3
 8001d0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d0e:	00d0      	lsls	r0, r2, #3
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	eb12 0208 	adds.w	r2, r2, r8
 8001d18:	eb43 0309 	adc.w	r3, r3, r9
 8001d1c:	f04f 0000 	mov.w	r0, #0
 8001d20:	f04f 0100 	mov.w	r1, #0
 8001d24:	0259      	lsls	r1, r3, #9
 8001d26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d2a:	0250      	lsls	r0, r2, #9
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	f7fe fa98 	bl	8000270 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e04a      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	461a      	mov	r2, r3
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	ea02 0400 	and.w	r4, r2, r0
 8001d62:	ea03 0501 	and.w	r5, r3, r1
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	014b      	lsls	r3, r1, #5
 8001d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d78:	0142      	lsls	r2, r0, #5
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	1b00      	subs	r0, r0, r4
 8001d80:	eb61 0105 	sbc.w	r1, r1, r5
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	018b      	lsls	r3, r1, #6
 8001d8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d92:	0182      	lsls	r2, r0, #6
 8001d94:	1a12      	subs	r2, r2, r0
 8001d96:	eb63 0301 	sbc.w	r3, r3, r1
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	00d9      	lsls	r1, r3, #3
 8001da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001da8:	00d0      	lsls	r0, r2, #3
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	1912      	adds	r2, r2, r4
 8001db0:	eb45 0303 	adc.w	r3, r5, r3
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0299      	lsls	r1, r3, #10
 8001dbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dc2:	0290      	lsls	r0, r2, #10
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	f7fe fa4c 	bl	8000270 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	60bb      	str	r3, [r7, #8]
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dfe:	60bb      	str	r3, [r7, #8]
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	68bb      	ldr	r3, [r7, #8]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	007a1200 	.word	0x007a1200

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000014 	.word	0x20000014

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0a9b      	lsrs	r3, r3, #10
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	08003bec 	.word	0x08003bec

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e60:	f7ff ffdc 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0b5b      	lsrs	r3, r3, #13
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	08003bec 	.word	0x08003bec

08001e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e03f      	b.n	8001f16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fdae 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fd27 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b08a      	sub	sp, #40	; 0x28
 8001f22:	af02      	add	r7, sp, #8
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d17c      	bne.n	8002038 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_UART_Transmit+0x2c>
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e075      	b.n	800203a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_UART_Transmit+0x3e>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e06e      	b.n	800203a <HAL_UART_Transmit+0x11c>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f72:	f7fe ff6f 	bl	8000e54 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_UART_Transmit+0x82>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	e003      	b.n	8001fa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fb0:	e02a      	b.n	8002008 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fae9 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e036      	b.n	800203a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e007      	b.n	8001ffa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1cf      	bne.n	8001fb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	2140      	movs	r1, #64	; 0x40
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fab9 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e006      	b.n	800203a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b08a      	sub	sp, #40	; 0x28
 8002046:	af02      	add	r7, sp, #8
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	f040 808c 	bne.w	800217c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_UART_Receive+0x2e>
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e084      	b.n	800217e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_UART_Receive+0x40>
 800207e:	2302      	movs	r3, #2
 8002080:	e07d      	b.n	800217e <HAL_UART_Receive+0x13c>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2222      	movs	r2, #34	; 0x22
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800209e:	f7fe fed9 	bl	8000e54 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b8:	d108      	bne.n	80020cc <HAL_UART_Receive+0x8a>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e003      	b.n	80020d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020dc:	e043      	b.n	8002166 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2120      	movs	r1, #32
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fa53 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e042      	b.n	800217e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10c      	bne.n	8002118 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210a:	b29a      	uxth	r2, r3
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	3302      	adds	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	e01f      	b.n	8002158 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002120:	d007      	beq.n	8002132 <HAL_UART_Receive+0xf0>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <HAL_UART_Receive+0xfe>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e008      	b.n	8002152 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214c:	b2da      	uxtb	r2, r3
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1b6      	bne.n	80020de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	4613      	mov	r3, r2
 8002192:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b20      	cmp	r3, #32
 800219e:	d11d      	bne.n	80021dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_UART_Receive_IT+0x26>
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e016      	b.n	80021de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_UART_Receive_IT+0x38>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e00f      	b.n	80021de <HAL_UART_Receive_IT+0x58>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa28 	bl	8002628 <UART_Start_Receive_IT>
 80021d8:	4603      	mov	r3, r0
 80021da:	e000      	b.n	80021de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_UART_IRQHandler+0x52>
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fadb 	bl	80027ee <UART_Receive_IT>
      return;
 8002238:	e17c      	b.n	8002534 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80b1 	beq.w	80023a4 <HAL_UART_IRQHandler+0x1bc>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_UART_IRQHandler+0x70>
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80a6 	beq.w	80023a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_UART_IRQHandler+0x90>
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_UART_IRQHandler+0xb0>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f043 0202 	orr.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_UART_IRQHandler+0xd0>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00f      	beq.n	80022e2 <HAL_UART_IRQHandler+0xfa>
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_UART_IRQHandler+0xee>
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f043 0208 	orr.w	r2, r3, #8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 811f 	beq.w	800252a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_UART_IRQHandler+0x11e>
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa74 	bl	80027ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <HAL_UART_IRQHandler+0x146>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d031      	beq.n	8002392 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9b4 	bl	800269c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d123      	bne.n	800238a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002350:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	2b00      	cmp	r3, #0
 8002358:	d013      	beq.n	8002382 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	4a77      	ldr	r2, [pc, #476]	; (800253c <HAL_UART_IRQHandler+0x354>)
 8002360:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ff25 	bl	80011b6 <HAL_DMA_Abort_IT>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800237c:	4610      	mov	r0, r2
 800237e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002380:	e00e      	b.n	80023a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8f0 	bl	8002568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002388:	e00a      	b.n	80023a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8ec 	bl	8002568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002390:	e006      	b.n	80023a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8e8 	bl	8002568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800239e:	e0c4      	b.n	800252a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a0:	bf00      	nop
    return;
 80023a2:	e0c2      	b.n	800252a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	f040 80a2 	bne.w	80024f2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 809c 	beq.w	80024f2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8096 	beq.w	80024f2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d14f      	bne.n	800248a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80023f4:	8a3b      	ldrh	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8099 	beq.w	800252e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002400:	8a3a      	ldrh	r2, [r7, #16]
 8002402:	429a      	cmp	r2, r3
 8002404:	f080 8093 	bcs.w	800252e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8a3a      	ldrh	r2, [r7, #16]
 800240c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002418:	d02b      	beq.n	8002472 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002428:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002448:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0210 	bic.w	r2, r2, #16
 8002466:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fe32 	bl	80010d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800247a:	b29b      	uxth	r3, r3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	b29b      	uxth	r3, r3
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f87a 	bl	800257c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002488:	e051      	b.n	800252e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002492:	b29b      	uxth	r3, r3
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d047      	beq.n	8002532 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80024a2:	8a7b      	ldrh	r3, [r7, #18]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d044      	beq.n	8002532 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024b6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0210 	bic.w	r2, r2, #16
 80024e4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024e6:	8a7b      	ldrh	r3, [r7, #18]
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f846 	bl	800257c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80024f0:	e01f      	b.n	8002532 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_UART_IRQHandler+0x326>
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f909 	bl	800271e <UART_Transmit_IT>
    return;
 800250c:	e012      	b.n	8002534 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <HAL_UART_IRQHandler+0x34c>
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f94b 	bl	80027be <UART_EndTransmit_IT>
    return;
 8002528:	e004      	b.n	8002534 <HAL_UART_IRQHandler+0x34c>
    return;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <HAL_UART_IRQHandler+0x34c>
      return;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <HAL_UART_IRQHandler+0x34c>
      return;
 8002532:	bf00      	nop
  }
}
 8002534:	3728      	adds	r7, #40	; 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	080026f7 	.word	0x080026f7

08002540 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a4:	e02c      	b.n	8002600 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d028      	beq.n	8002600 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80025b4:	f7fe fc4e 	bl	8000e54 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d21d      	bcs.n	8002600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e00f      	b.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	429a      	cmp	r2, r3
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	429a      	cmp	r2, r3
 800261c:	d0c3      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2222      	movs	r2, #34	; 0x22
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0210 	bic.w	r2, r2, #16
 80026da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff ff29 	bl	8002568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b21      	cmp	r3, #33	; 0x21
 8002730:	d13e      	bne.n	80027b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273a:	d114      	bne.n	8002766 <UART_Transmit_IT+0x48>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d110      	bne.n	8002766 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002758:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	1c9a      	adds	r2, r3, #2
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	621a      	str	r2, [r3, #32]
 8002764:	e008      	b.n	8002778 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6211      	str	r1, [r2, #32]
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29b      	uxth	r3, r3
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4619      	mov	r1, r3
 8002786:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10f      	bne.n	80027ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff feae 	bl	8002540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b22      	cmp	r3, #34	; 0x22
 8002800:	f040 8087 	bne.w	8002912 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d117      	bne.n	800283e <UART_Receive_IT+0x50>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d113      	bne.n	800283e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	b29a      	uxth	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
 800283c:	e026      	b.n	800288c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002850:	d007      	beq.n	8002862 <UART_Receive_IT+0x74>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <UART_Receive_IT+0x82>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e008      	b.n	8002882 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4619      	mov	r1, r3
 800289a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800289c:	2b00      	cmp	r3, #0
 800289e:	d136      	bne.n	800290e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0220 	bic.w	r2, r2, #32
 80028ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10e      	bne.n	80028fe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0210 	bic.w	r2, r2, #16
 80028ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fe40 	bl	800257c <HAL_UARTEx_RxEventCallback>
 80028fc:	e002      	b.n	8002904 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fe28 	bl	8002554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e002      	b.n	8002914 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002920:	b09f      	sub	sp, #124	; 0x7c
 8002922:	af00      	add	r7, sp, #0
 8002924:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002932:	68d9      	ldr	r1, [r3, #12]
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	ea40 0301 	orr.w	r3, r0, r1
 800293c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800293e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	431a      	orrs	r2, r3
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	431a      	orrs	r2, r3
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	4313      	orrs	r3, r2
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002960:	f021 010c 	bic.w	r1, r1, #12
 8002964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800296a:	430b      	orrs	r3, r1
 800296c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297a:	6999      	ldr	r1, [r3, #24]
 800297c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	ea40 0301 	orr.w	r3, r0, r1
 8002984:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4bc5      	ldr	r3, [pc, #788]	; (8002ca0 <UART_SetConfig+0x384>)
 800298c:	429a      	cmp	r2, r3
 800298e:	d004      	beq.n	800299a <UART_SetConfig+0x7e>
 8002990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4bc3      	ldr	r3, [pc, #780]	; (8002ca4 <UART_SetConfig+0x388>)
 8002996:	429a      	cmp	r2, r3
 8002998:	d103      	bne.n	80029a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800299a:	f7ff fa5f 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 800299e:	6778      	str	r0, [r7, #116]	; 0x74
 80029a0:	e002      	b.n	80029a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029a2:	f7ff fa47 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 80029a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b0:	f040 80b6 	bne.w	8002b20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b6:	461c      	mov	r4, r3
 80029b8:	f04f 0500 	mov.w	r5, #0
 80029bc:	4622      	mov	r2, r4
 80029be:	462b      	mov	r3, r5
 80029c0:	1891      	adds	r1, r2, r2
 80029c2:	6439      	str	r1, [r7, #64]	; 0x40
 80029c4:	415b      	adcs	r3, r3
 80029c6:	647b      	str	r3, [r7, #68]	; 0x44
 80029c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029cc:	1912      	adds	r2, r2, r4
 80029ce:	eb45 0303 	adc.w	r3, r5, r3
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	00d9      	lsls	r1, r3, #3
 80029dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029e0:	00d0      	lsls	r0, r2, #3
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	1911      	adds	r1, r2, r4
 80029e8:	6639      	str	r1, [r7, #96]	; 0x60
 80029ea:	416b      	adcs	r3, r5
 80029ec:	667b      	str	r3, [r7, #100]	; 0x64
 80029ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	1891      	adds	r1, r2, r2
 80029fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80029fc:	415b      	adcs	r3, r3
 80029fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a08:	f7fd fc32 	bl	8000270 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4ba5      	ldr	r3, [pc, #660]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002a12:	fba3 2302 	umull	r2, r3, r3, r2
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	011e      	lsls	r6, r3, #4
 8002a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	f04f 0500 	mov.w	r5, #0
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	1891      	adds	r1, r2, r2
 8002a28:	6339      	str	r1, [r7, #48]	; 0x30
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a32:	1912      	adds	r2, r2, r4
 8002a34:	eb45 0303 	adc.w	r3, r5, r3
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	00d9      	lsls	r1, r3, #3
 8002a42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a46:	00d0      	lsls	r0, r2, #3
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	1911      	adds	r1, r2, r4
 8002a4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a50:	416b      	adcs	r3, r5
 8002a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	1891      	adds	r1, r2, r2
 8002a60:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a62:	415b      	adcs	r3, r3
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a6e:	f7fd fbff 	bl	8000270 <__aeabi_uldivmod>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002a78:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	2164      	movs	r1, #100	; 0x64
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	3332      	adds	r3, #50	; 0x32
 8002a8a:	4a87      	ldr	r2, [pc, #540]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a98:	441e      	add	r6, r3
 8002a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	1894      	adds	r4, r2, r2
 8002aa8:	623c      	str	r4, [r7, #32]
 8002aaa:	415b      	adcs	r3, r3
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
 8002aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ab2:	1812      	adds	r2, r2, r0
 8002ab4:	eb41 0303 	adc.w	r3, r1, r3
 8002ab8:	f04f 0400 	mov.w	r4, #0
 8002abc:	f04f 0500 	mov.w	r5, #0
 8002ac0:	00dd      	lsls	r5, r3, #3
 8002ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ac6:	00d4      	lsls	r4, r2, #3
 8002ac8:	4622      	mov	r2, r4
 8002aca:	462b      	mov	r3, r5
 8002acc:	1814      	adds	r4, r2, r0
 8002ace:	653c      	str	r4, [r7, #80]	; 0x50
 8002ad0:	414b      	adcs	r3, r1
 8002ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	1891      	adds	r1, r2, r2
 8002ae0:	61b9      	str	r1, [r7, #24]
 8002ae2:	415b      	adcs	r3, r3
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002aee:	f7fd fbbf 	bl	8000270 <__aeabi_uldivmod>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002af8:	fba3 1302 	umull	r1, r3, r3, r2
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	2164      	movs	r1, #100	; 0x64
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	3332      	adds	r3, #50	; 0x32
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	f003 0207 	and.w	r2, r3, #7
 8002b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4432      	add	r2, r6
 8002b1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b1e:	e0b9      	b.n	8002c94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b22:	461c      	mov	r4, r3
 8002b24:	f04f 0500 	mov.w	r5, #0
 8002b28:	4622      	mov	r2, r4
 8002b2a:	462b      	mov	r3, r5
 8002b2c:	1891      	adds	r1, r2, r2
 8002b2e:	6139      	str	r1, [r7, #16]
 8002b30:	415b      	adcs	r3, r3
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b38:	1912      	adds	r2, r2, r4
 8002b3a:	eb45 0303 	adc.w	r3, r5, r3
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	00d9      	lsls	r1, r3, #3
 8002b48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b4c:	00d0      	lsls	r0, r2, #3
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	eb12 0804 	adds.w	r8, r2, r4
 8002b56:	eb43 0905 	adc.w	r9, r3, r5
 8002b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	008b      	lsls	r3, r1, #2
 8002b6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b72:	0082      	lsls	r2, r0, #2
 8002b74:	4640      	mov	r0, r8
 8002b76:	4649      	mov	r1, r9
 8002b78:	f7fd fb7a 	bl	8000270 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002b82:	fba3 2302 	umull	r2, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	011e      	lsls	r6, r3, #4
 8002b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	1894      	adds	r4, r2, r2
 8002b98:	60bc      	str	r4, [r7, #8]
 8002b9a:	415b      	adcs	r3, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ba2:	1812      	adds	r2, r2, r0
 8002ba4:	eb41 0303 	adc.w	r3, r1, r3
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	f04f 0500 	mov.w	r5, #0
 8002bb0:	00dd      	lsls	r5, r3, #3
 8002bb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bb6:	00d4      	lsls	r4, r2, #3
 8002bb8:	4622      	mov	r2, r4
 8002bba:	462b      	mov	r3, r5
 8002bbc:	1814      	adds	r4, r2, r0
 8002bbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8002bc0:	414b      	adcs	r3, r1
 8002bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	008b      	lsls	r3, r1, #2
 8002bd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bdc:	0082      	lsls	r2, r0, #2
 8002bde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002be2:	f7fd fb45 	bl	8000270 <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002bec:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	3332      	adds	r3, #50	; 0x32
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0a:	441e      	add	r6, r3
 8002c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	1894      	adds	r4, r2, r2
 8002c1a:	603c      	str	r4, [r7, #0]
 8002c1c:	415b      	adcs	r3, r3
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c24:	1812      	adds	r2, r2, r0
 8002c26:	eb41 0303 	adc.w	r3, r1, r3
 8002c2a:	f04f 0400 	mov.w	r4, #0
 8002c2e:	f04f 0500 	mov.w	r5, #0
 8002c32:	00dd      	lsls	r5, r3, #3
 8002c34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c38:	00d4      	lsls	r4, r2, #3
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	462b      	mov	r3, r5
 8002c3e:	eb12 0a00 	adds.w	sl, r2, r0
 8002c42:	eb43 0b01 	adc.w	fp, r3, r1
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	008b      	lsls	r3, r1, #2
 8002c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c5e:	0082      	lsls	r2, r0, #2
 8002c60:	4650      	mov	r0, sl
 8002c62:	4659      	mov	r1, fp
 8002c64:	f7fd fb04 	bl	8000270 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2164      	movs	r1, #100	; 0x64
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <UART_SetConfig+0x38c>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4432      	add	r2, r6
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	377c      	adds	r7, #124	; 0x7c
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40011400 	.word	0x40011400
 8002ca8:	51eb851f 	.word	0x51eb851f

08002cac <__errno>:
 8002cac:	4b01      	ldr	r3, [pc, #4]	; (8002cb4 <__errno+0x8>)
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000020 	.word	0x20000020

08002cb8 <__libc_init_array>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	4d0d      	ldr	r5, [pc, #52]	; (8002cf0 <__libc_init_array+0x38>)
 8002cbc:	4c0d      	ldr	r4, [pc, #52]	; (8002cf4 <__libc_init_array+0x3c>)
 8002cbe:	1b64      	subs	r4, r4, r5
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	2600      	movs	r6, #0
 8002cc4:	42a6      	cmp	r6, r4
 8002cc6:	d109      	bne.n	8002cdc <__libc_init_array+0x24>
 8002cc8:	4d0b      	ldr	r5, [pc, #44]	; (8002cf8 <__libc_init_array+0x40>)
 8002cca:	4c0c      	ldr	r4, [pc, #48]	; (8002cfc <__libc_init_array+0x44>)
 8002ccc:	f000 ff76 	bl	8003bbc <_init>
 8002cd0:	1b64      	subs	r4, r4, r5
 8002cd2:	10a4      	asrs	r4, r4, #2
 8002cd4:	2600      	movs	r6, #0
 8002cd6:	42a6      	cmp	r6, r4
 8002cd8:	d105      	bne.n	8002ce6 <__libc_init_array+0x2e>
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce0:	4798      	blx	r3
 8002ce2:	3601      	adds	r6, #1
 8002ce4:	e7ee      	b.n	8002cc4 <__libc_init_array+0xc>
 8002ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cea:	4798      	blx	r3
 8002cec:	3601      	adds	r6, #1
 8002cee:	e7f2      	b.n	8002cd6 <__libc_init_array+0x1e>
 8002cf0:	08003c94 	.word	0x08003c94
 8002cf4:	08003c94 	.word	0x08003c94
 8002cf8:	08003c94 	.word	0x08003c94
 8002cfc:	08003c98 	.word	0x08003c98

08002d00 <memset>:
 8002d00:	4402      	add	r2, r0
 8002d02:	4603      	mov	r3, r0
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d100      	bne.n	8002d0a <memset+0xa>
 8002d08:	4770      	bx	lr
 8002d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0e:	e7f9      	b.n	8002d04 <memset+0x4>

08002d10 <iprintf>:
 8002d10:	b40f      	push	{r0, r1, r2, r3}
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <iprintf+0x2c>)
 8002d14:	b513      	push	{r0, r1, r4, lr}
 8002d16:	681c      	ldr	r4, [r3, #0]
 8002d18:	b124      	cbz	r4, 8002d24 <iprintf+0x14>
 8002d1a:	69a3      	ldr	r3, [r4, #24]
 8002d1c:	b913      	cbnz	r3, 8002d24 <iprintf+0x14>
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f000 f866 	bl	8002df0 <__sinit>
 8002d24:	ab05      	add	r3, sp, #20
 8002d26:	9a04      	ldr	r2, [sp, #16]
 8002d28:	68a1      	ldr	r1, [r4, #8]
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f000 f983 	bl	8003038 <_vfiprintf_r>
 8002d32:	b002      	add	sp, #8
 8002d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d38:	b004      	add	sp, #16
 8002d3a:	4770      	bx	lr
 8002d3c:	20000020 	.word	0x20000020

08002d40 <std>:
 8002d40:	2300      	movs	r3, #0
 8002d42:	b510      	push	{r4, lr}
 8002d44:	4604      	mov	r4, r0
 8002d46:	e9c0 3300 	strd	r3, r3, [r0]
 8002d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d4e:	6083      	str	r3, [r0, #8]
 8002d50:	8181      	strh	r1, [r0, #12]
 8002d52:	6643      	str	r3, [r0, #100]	; 0x64
 8002d54:	81c2      	strh	r2, [r0, #14]
 8002d56:	6183      	str	r3, [r0, #24]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	305c      	adds	r0, #92	; 0x5c
 8002d5e:	f7ff ffcf 	bl	8002d00 <memset>
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <std+0x38>)
 8002d64:	6263      	str	r3, [r4, #36]	; 0x24
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <std+0x3c>)
 8002d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <std+0x40>)
 8002d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <std+0x44>)
 8002d70:	6224      	str	r4, [r4, #32]
 8002d72:	6323      	str	r3, [r4, #48]	; 0x30
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	bf00      	nop
 8002d78:	080035e1 	.word	0x080035e1
 8002d7c:	08003603 	.word	0x08003603
 8002d80:	0800363b 	.word	0x0800363b
 8002d84:	0800365f 	.word	0x0800365f

08002d88 <_cleanup_r>:
 8002d88:	4901      	ldr	r1, [pc, #4]	; (8002d90 <_cleanup_r+0x8>)
 8002d8a:	f000 b8af 	b.w	8002eec <_fwalk_reent>
 8002d8e:	bf00      	nop
 8002d90:	08003939 	.word	0x08003939

08002d94 <__sfmoreglue>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	1e4a      	subs	r2, r1, #1
 8002d98:	2568      	movs	r5, #104	; 0x68
 8002d9a:	4355      	muls	r5, r2
 8002d9c:	460e      	mov	r6, r1
 8002d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002da2:	f000 f8c5 	bl	8002f30 <_malloc_r>
 8002da6:	4604      	mov	r4, r0
 8002da8:	b140      	cbz	r0, 8002dbc <__sfmoreglue+0x28>
 8002daa:	2100      	movs	r1, #0
 8002dac:	e9c0 1600 	strd	r1, r6, [r0]
 8002db0:	300c      	adds	r0, #12
 8002db2:	60a0      	str	r0, [r4, #8]
 8002db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002db8:	f7ff ffa2 	bl	8002d00 <memset>
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}

08002dc0 <__sfp_lock_acquire>:
 8002dc0:	4801      	ldr	r0, [pc, #4]	; (8002dc8 <__sfp_lock_acquire+0x8>)
 8002dc2:	f000 b8b3 	b.w	8002f2c <__retarget_lock_acquire_recursive>
 8002dc6:	bf00      	nop
 8002dc8:	20000104 	.word	0x20000104

08002dcc <__sfp_lock_release>:
 8002dcc:	4801      	ldr	r0, [pc, #4]	; (8002dd4 <__sfp_lock_release+0x8>)
 8002dce:	f000 b8ae 	b.w	8002f2e <__retarget_lock_release_recursive>
 8002dd2:	bf00      	nop
 8002dd4:	20000104 	.word	0x20000104

08002dd8 <__sinit_lock_acquire>:
 8002dd8:	4801      	ldr	r0, [pc, #4]	; (8002de0 <__sinit_lock_acquire+0x8>)
 8002dda:	f000 b8a7 	b.w	8002f2c <__retarget_lock_acquire_recursive>
 8002dde:	bf00      	nop
 8002de0:	200000ff 	.word	0x200000ff

08002de4 <__sinit_lock_release>:
 8002de4:	4801      	ldr	r0, [pc, #4]	; (8002dec <__sinit_lock_release+0x8>)
 8002de6:	f000 b8a2 	b.w	8002f2e <__retarget_lock_release_recursive>
 8002dea:	bf00      	nop
 8002dec:	200000ff 	.word	0x200000ff

08002df0 <__sinit>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	4604      	mov	r4, r0
 8002df4:	f7ff fff0 	bl	8002dd8 <__sinit_lock_acquire>
 8002df8:	69a3      	ldr	r3, [r4, #24]
 8002dfa:	b11b      	cbz	r3, 8002e04 <__sinit+0x14>
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e00:	f7ff bff0 	b.w	8002de4 <__sinit_lock_release>
 8002e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e08:	6523      	str	r3, [r4, #80]	; 0x50
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <__sinit+0x68>)
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <__sinit+0x6c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e12:	42a3      	cmp	r3, r4
 8002e14:	bf04      	itt	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	61a3      	streq	r3, [r4, #24]
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f000 f820 	bl	8002e60 <__sfp>
 8002e20:	6060      	str	r0, [r4, #4]
 8002e22:	4620      	mov	r0, r4
 8002e24:	f000 f81c 	bl	8002e60 <__sfp>
 8002e28:	60a0      	str	r0, [r4, #8]
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f000 f818 	bl	8002e60 <__sfp>
 8002e30:	2200      	movs	r2, #0
 8002e32:	60e0      	str	r0, [r4, #12]
 8002e34:	2104      	movs	r1, #4
 8002e36:	6860      	ldr	r0, [r4, #4]
 8002e38:	f7ff ff82 	bl	8002d40 <std>
 8002e3c:	68a0      	ldr	r0, [r4, #8]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2109      	movs	r1, #9
 8002e42:	f7ff ff7d 	bl	8002d40 <std>
 8002e46:	68e0      	ldr	r0, [r4, #12]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	2112      	movs	r1, #18
 8002e4c:	f7ff ff78 	bl	8002d40 <std>
 8002e50:	2301      	movs	r3, #1
 8002e52:	61a3      	str	r3, [r4, #24]
 8002e54:	e7d2      	b.n	8002dfc <__sinit+0xc>
 8002e56:	bf00      	nop
 8002e58:	08003bf4 	.word	0x08003bf4
 8002e5c:	08002d89 	.word	0x08002d89

08002e60 <__sfp>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	4607      	mov	r7, r0
 8002e64:	f7ff ffac 	bl	8002dc0 <__sfp_lock_acquire>
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <__sfp+0x84>)
 8002e6a:	681e      	ldr	r6, [r3, #0]
 8002e6c:	69b3      	ldr	r3, [r6, #24]
 8002e6e:	b913      	cbnz	r3, 8002e76 <__sfp+0x16>
 8002e70:	4630      	mov	r0, r6
 8002e72:	f7ff ffbd 	bl	8002df0 <__sinit>
 8002e76:	3648      	adds	r6, #72	; 0x48
 8002e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	d503      	bpl.n	8002e88 <__sfp+0x28>
 8002e80:	6833      	ldr	r3, [r6, #0]
 8002e82:	b30b      	cbz	r3, 8002ec8 <__sfp+0x68>
 8002e84:	6836      	ldr	r6, [r6, #0]
 8002e86:	e7f7      	b.n	8002e78 <__sfp+0x18>
 8002e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e8c:	b9d5      	cbnz	r5, 8002ec4 <__sfp+0x64>
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <__sfp+0x88>)
 8002e90:	60e3      	str	r3, [r4, #12]
 8002e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e96:	6665      	str	r5, [r4, #100]	; 0x64
 8002e98:	f000 f847 	bl	8002f2a <__retarget_lock_init_recursive>
 8002e9c:	f7ff ff96 	bl	8002dcc <__sfp_lock_release>
 8002ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ea8:	6025      	str	r5, [r4, #0]
 8002eaa:	61a5      	str	r5, [r4, #24]
 8002eac:	2208      	movs	r2, #8
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002eb4:	f7ff ff24 	bl	8002d00 <memset>
 8002eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec4:	3468      	adds	r4, #104	; 0x68
 8002ec6:	e7d9      	b.n	8002e7c <__sfp+0x1c>
 8002ec8:	2104      	movs	r1, #4
 8002eca:	4638      	mov	r0, r7
 8002ecc:	f7ff ff62 	bl	8002d94 <__sfmoreglue>
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	6030      	str	r0, [r6, #0]
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d1d5      	bne.n	8002e84 <__sfp+0x24>
 8002ed8:	f7ff ff78 	bl	8002dcc <__sfp_lock_release>
 8002edc:	230c      	movs	r3, #12
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	e7ee      	b.n	8002ec0 <__sfp+0x60>
 8002ee2:	bf00      	nop
 8002ee4:	08003bf4 	.word	0x08003bf4
 8002ee8:	ffff0001 	.word	0xffff0001

08002eec <_fwalk_reent>:
 8002eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef0:	4606      	mov	r6, r0
 8002ef2:	4688      	mov	r8, r1
 8002ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ef8:	2700      	movs	r7, #0
 8002efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002efe:	f1b9 0901 	subs.w	r9, r9, #1
 8002f02:	d505      	bpl.n	8002f10 <_fwalk_reent+0x24>
 8002f04:	6824      	ldr	r4, [r4, #0]
 8002f06:	2c00      	cmp	r4, #0
 8002f08:	d1f7      	bne.n	8002efa <_fwalk_reent+0xe>
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f10:	89ab      	ldrh	r3, [r5, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d907      	bls.n	8002f26 <_fwalk_reent+0x3a>
 8002f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	d003      	beq.n	8002f26 <_fwalk_reent+0x3a>
 8002f1e:	4629      	mov	r1, r5
 8002f20:	4630      	mov	r0, r6
 8002f22:	47c0      	blx	r8
 8002f24:	4307      	orrs	r7, r0
 8002f26:	3568      	adds	r5, #104	; 0x68
 8002f28:	e7e9      	b.n	8002efe <_fwalk_reent+0x12>

08002f2a <__retarget_lock_init_recursive>:
 8002f2a:	4770      	bx	lr

08002f2c <__retarget_lock_acquire_recursive>:
 8002f2c:	4770      	bx	lr

08002f2e <__retarget_lock_release_recursive>:
 8002f2e:	4770      	bx	lr

08002f30 <_malloc_r>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	1ccd      	adds	r5, r1, #3
 8002f34:	f025 0503 	bic.w	r5, r5, #3
 8002f38:	3508      	adds	r5, #8
 8002f3a:	2d0c      	cmp	r5, #12
 8002f3c:	bf38      	it	cc
 8002f3e:	250c      	movcc	r5, #12
 8002f40:	2d00      	cmp	r5, #0
 8002f42:	4606      	mov	r6, r0
 8002f44:	db01      	blt.n	8002f4a <_malloc_r+0x1a>
 8002f46:	42a9      	cmp	r1, r5
 8002f48:	d903      	bls.n	8002f52 <_malloc_r+0x22>
 8002f4a:	230c      	movs	r3, #12
 8002f4c:	6033      	str	r3, [r6, #0]
 8002f4e:	2000      	movs	r0, #0
 8002f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f52:	f000 fda3 	bl	8003a9c <__malloc_lock>
 8002f56:	4921      	ldr	r1, [pc, #132]	; (8002fdc <_malloc_r+0xac>)
 8002f58:	680a      	ldr	r2, [r1, #0]
 8002f5a:	4614      	mov	r4, r2
 8002f5c:	b99c      	cbnz	r4, 8002f86 <_malloc_r+0x56>
 8002f5e:	4f20      	ldr	r7, [pc, #128]	; (8002fe0 <_malloc_r+0xb0>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b923      	cbnz	r3, 8002f6e <_malloc_r+0x3e>
 8002f64:	4621      	mov	r1, r4
 8002f66:	4630      	mov	r0, r6
 8002f68:	f000 fb2a 	bl	80035c0 <_sbrk_r>
 8002f6c:	6038      	str	r0, [r7, #0]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	4630      	mov	r0, r6
 8002f72:	f000 fb25 	bl	80035c0 <_sbrk_r>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	d123      	bne.n	8002fc2 <_malloc_r+0x92>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	6033      	str	r3, [r6, #0]
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f000 fd92 	bl	8003aa8 <__malloc_unlock>
 8002f84:	e7e3      	b.n	8002f4e <_malloc_r+0x1e>
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	1b5b      	subs	r3, r3, r5
 8002f8a:	d417      	bmi.n	8002fbc <_malloc_r+0x8c>
 8002f8c:	2b0b      	cmp	r3, #11
 8002f8e:	d903      	bls.n	8002f98 <_malloc_r+0x68>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	441c      	add	r4, r3
 8002f94:	6025      	str	r5, [r4, #0]
 8002f96:	e004      	b.n	8002fa2 <_malloc_r+0x72>
 8002f98:	6863      	ldr	r3, [r4, #4]
 8002f9a:	42a2      	cmp	r2, r4
 8002f9c:	bf0c      	ite	eq
 8002f9e:	600b      	streq	r3, [r1, #0]
 8002fa0:	6053      	strne	r3, [r2, #4]
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f000 fd80 	bl	8003aa8 <__malloc_unlock>
 8002fa8:	f104 000b 	add.w	r0, r4, #11
 8002fac:	1d23      	adds	r3, r4, #4
 8002fae:	f020 0007 	bic.w	r0, r0, #7
 8002fb2:	1ac2      	subs	r2, r0, r3
 8002fb4:	d0cc      	beq.n	8002f50 <_malloc_r+0x20>
 8002fb6:	1a1b      	subs	r3, r3, r0
 8002fb8:	50a3      	str	r3, [r4, r2]
 8002fba:	e7c9      	b.n	8002f50 <_malloc_r+0x20>
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	6864      	ldr	r4, [r4, #4]
 8002fc0:	e7cc      	b.n	8002f5c <_malloc_r+0x2c>
 8002fc2:	1cc4      	adds	r4, r0, #3
 8002fc4:	f024 0403 	bic.w	r4, r4, #3
 8002fc8:	42a0      	cmp	r0, r4
 8002fca:	d0e3      	beq.n	8002f94 <_malloc_r+0x64>
 8002fcc:	1a21      	subs	r1, r4, r0
 8002fce:	4630      	mov	r0, r6
 8002fd0:	f000 faf6 	bl	80035c0 <_sbrk_r>
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	d1dd      	bne.n	8002f94 <_malloc_r+0x64>
 8002fd8:	e7cf      	b.n	8002f7a <_malloc_r+0x4a>
 8002fda:	bf00      	nop
 8002fdc:	200000a8 	.word	0x200000a8
 8002fe0:	200000ac 	.word	0x200000ac

08002fe4 <__sfputc_r>:
 8002fe4:	6893      	ldr	r3, [r2, #8]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	b410      	push	{r4}
 8002fec:	6093      	str	r3, [r2, #8]
 8002fee:	da08      	bge.n	8003002 <__sfputc_r+0x1e>
 8002ff0:	6994      	ldr	r4, [r2, #24]
 8002ff2:	42a3      	cmp	r3, r4
 8002ff4:	db01      	blt.n	8002ffa <__sfputc_r+0x16>
 8002ff6:	290a      	cmp	r1, #10
 8002ff8:	d103      	bne.n	8003002 <__sfputc_r+0x1e>
 8002ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffe:	f000 bb33 	b.w	8003668 <__swbuf_r>
 8003002:	6813      	ldr	r3, [r2, #0]
 8003004:	1c58      	adds	r0, r3, #1
 8003006:	6010      	str	r0, [r2, #0]
 8003008:	7019      	strb	r1, [r3, #0]
 800300a:	4608      	mov	r0, r1
 800300c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003010:	4770      	bx	lr

08003012 <__sfputs_r>:
 8003012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003014:	4606      	mov	r6, r0
 8003016:	460f      	mov	r7, r1
 8003018:	4614      	mov	r4, r2
 800301a:	18d5      	adds	r5, r2, r3
 800301c:	42ac      	cmp	r4, r5
 800301e:	d101      	bne.n	8003024 <__sfputs_r+0x12>
 8003020:	2000      	movs	r0, #0
 8003022:	e007      	b.n	8003034 <__sfputs_r+0x22>
 8003024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003028:	463a      	mov	r2, r7
 800302a:	4630      	mov	r0, r6
 800302c:	f7ff ffda 	bl	8002fe4 <__sfputc_r>
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d1f3      	bne.n	800301c <__sfputs_r+0xa>
 8003034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003038 <_vfiprintf_r>:
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	460d      	mov	r5, r1
 800303e:	b09d      	sub	sp, #116	; 0x74
 8003040:	4614      	mov	r4, r2
 8003042:	4698      	mov	r8, r3
 8003044:	4606      	mov	r6, r0
 8003046:	b118      	cbz	r0, 8003050 <_vfiprintf_r+0x18>
 8003048:	6983      	ldr	r3, [r0, #24]
 800304a:	b90b      	cbnz	r3, 8003050 <_vfiprintf_r+0x18>
 800304c:	f7ff fed0 	bl	8002df0 <__sinit>
 8003050:	4b89      	ldr	r3, [pc, #548]	; (8003278 <_vfiprintf_r+0x240>)
 8003052:	429d      	cmp	r5, r3
 8003054:	d11b      	bne.n	800308e <_vfiprintf_r+0x56>
 8003056:	6875      	ldr	r5, [r6, #4]
 8003058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800305a:	07d9      	lsls	r1, r3, #31
 800305c:	d405      	bmi.n	800306a <_vfiprintf_r+0x32>
 800305e:	89ab      	ldrh	r3, [r5, #12]
 8003060:	059a      	lsls	r2, r3, #22
 8003062:	d402      	bmi.n	800306a <_vfiprintf_r+0x32>
 8003064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003066:	f7ff ff61 	bl	8002f2c <__retarget_lock_acquire_recursive>
 800306a:	89ab      	ldrh	r3, [r5, #12]
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	d501      	bpl.n	8003074 <_vfiprintf_r+0x3c>
 8003070:	692b      	ldr	r3, [r5, #16]
 8003072:	b9eb      	cbnz	r3, 80030b0 <_vfiprintf_r+0x78>
 8003074:	4629      	mov	r1, r5
 8003076:	4630      	mov	r0, r6
 8003078:	f000 fb5a 	bl	8003730 <__swsetup_r>
 800307c:	b1c0      	cbz	r0, 80030b0 <_vfiprintf_r+0x78>
 800307e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003080:	07dc      	lsls	r4, r3, #31
 8003082:	d50e      	bpl.n	80030a2 <_vfiprintf_r+0x6a>
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	b01d      	add	sp, #116	; 0x74
 800308a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <_vfiprintf_r+0x244>)
 8003090:	429d      	cmp	r5, r3
 8003092:	d101      	bne.n	8003098 <_vfiprintf_r+0x60>
 8003094:	68b5      	ldr	r5, [r6, #8]
 8003096:	e7df      	b.n	8003058 <_vfiprintf_r+0x20>
 8003098:	4b79      	ldr	r3, [pc, #484]	; (8003280 <_vfiprintf_r+0x248>)
 800309a:	429d      	cmp	r5, r3
 800309c:	bf08      	it	eq
 800309e:	68f5      	ldreq	r5, [r6, #12]
 80030a0:	e7da      	b.n	8003058 <_vfiprintf_r+0x20>
 80030a2:	89ab      	ldrh	r3, [r5, #12]
 80030a4:	0598      	lsls	r0, r3, #22
 80030a6:	d4ed      	bmi.n	8003084 <_vfiprintf_r+0x4c>
 80030a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030aa:	f7ff ff40 	bl	8002f2e <__retarget_lock_release_recursive>
 80030ae:	e7e9      	b.n	8003084 <_vfiprintf_r+0x4c>
 80030b0:	2300      	movs	r3, #0
 80030b2:	9309      	str	r3, [sp, #36]	; 0x24
 80030b4:	2320      	movs	r3, #32
 80030b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80030be:	2330      	movs	r3, #48	; 0x30
 80030c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003284 <_vfiprintf_r+0x24c>
 80030c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030c8:	f04f 0901 	mov.w	r9, #1
 80030cc:	4623      	mov	r3, r4
 80030ce:	469a      	mov	sl, r3
 80030d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030d4:	b10a      	cbz	r2, 80030da <_vfiprintf_r+0xa2>
 80030d6:	2a25      	cmp	r2, #37	; 0x25
 80030d8:	d1f9      	bne.n	80030ce <_vfiprintf_r+0x96>
 80030da:	ebba 0b04 	subs.w	fp, sl, r4
 80030de:	d00b      	beq.n	80030f8 <_vfiprintf_r+0xc0>
 80030e0:	465b      	mov	r3, fp
 80030e2:	4622      	mov	r2, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	4630      	mov	r0, r6
 80030e8:	f7ff ff93 	bl	8003012 <__sfputs_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	f000 80aa 	beq.w	8003246 <_vfiprintf_r+0x20e>
 80030f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030f4:	445a      	add	r2, fp
 80030f6:	9209      	str	r2, [sp, #36]	; 0x24
 80030f8:	f89a 3000 	ldrb.w	r3, [sl]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a2 	beq.w	8003246 <_vfiprintf_r+0x20e>
 8003102:	2300      	movs	r3, #0
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800310c:	f10a 0a01 	add.w	sl, sl, #1
 8003110:	9304      	str	r3, [sp, #16]
 8003112:	9307      	str	r3, [sp, #28]
 8003114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003118:	931a      	str	r3, [sp, #104]	; 0x68
 800311a:	4654      	mov	r4, sl
 800311c:	2205      	movs	r2, #5
 800311e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003122:	4858      	ldr	r0, [pc, #352]	; (8003284 <_vfiprintf_r+0x24c>)
 8003124:	f7fd f854 	bl	80001d0 <memchr>
 8003128:	9a04      	ldr	r2, [sp, #16]
 800312a:	b9d8      	cbnz	r0, 8003164 <_vfiprintf_r+0x12c>
 800312c:	06d1      	lsls	r1, r2, #27
 800312e:	bf44      	itt	mi
 8003130:	2320      	movmi	r3, #32
 8003132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003136:	0713      	lsls	r3, r2, #28
 8003138:	bf44      	itt	mi
 800313a:	232b      	movmi	r3, #43	; 0x2b
 800313c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003140:	f89a 3000 	ldrb.w	r3, [sl]
 8003144:	2b2a      	cmp	r3, #42	; 0x2a
 8003146:	d015      	beq.n	8003174 <_vfiprintf_r+0x13c>
 8003148:	9a07      	ldr	r2, [sp, #28]
 800314a:	4654      	mov	r4, sl
 800314c:	2000      	movs	r0, #0
 800314e:	f04f 0c0a 	mov.w	ip, #10
 8003152:	4621      	mov	r1, r4
 8003154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003158:	3b30      	subs	r3, #48	; 0x30
 800315a:	2b09      	cmp	r3, #9
 800315c:	d94e      	bls.n	80031fc <_vfiprintf_r+0x1c4>
 800315e:	b1b0      	cbz	r0, 800318e <_vfiprintf_r+0x156>
 8003160:	9207      	str	r2, [sp, #28]
 8003162:	e014      	b.n	800318e <_vfiprintf_r+0x156>
 8003164:	eba0 0308 	sub.w	r3, r0, r8
 8003168:	fa09 f303 	lsl.w	r3, r9, r3
 800316c:	4313      	orrs	r3, r2
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	46a2      	mov	sl, r4
 8003172:	e7d2      	b.n	800311a <_vfiprintf_r+0xe2>
 8003174:	9b03      	ldr	r3, [sp, #12]
 8003176:	1d19      	adds	r1, r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	9103      	str	r1, [sp, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	bfbb      	ittet	lt
 8003180:	425b      	neglt	r3, r3
 8003182:	f042 0202 	orrlt.w	r2, r2, #2
 8003186:	9307      	strge	r3, [sp, #28]
 8003188:	9307      	strlt	r3, [sp, #28]
 800318a:	bfb8      	it	lt
 800318c:	9204      	strlt	r2, [sp, #16]
 800318e:	7823      	ldrb	r3, [r4, #0]
 8003190:	2b2e      	cmp	r3, #46	; 0x2e
 8003192:	d10c      	bne.n	80031ae <_vfiprintf_r+0x176>
 8003194:	7863      	ldrb	r3, [r4, #1]
 8003196:	2b2a      	cmp	r3, #42	; 0x2a
 8003198:	d135      	bne.n	8003206 <_vfiprintf_r+0x1ce>
 800319a:	9b03      	ldr	r3, [sp, #12]
 800319c:	1d1a      	adds	r2, r3, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	9203      	str	r2, [sp, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfb8      	it	lt
 80031a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80031aa:	3402      	adds	r4, #2
 80031ac:	9305      	str	r3, [sp, #20]
 80031ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003294 <_vfiprintf_r+0x25c>
 80031b2:	7821      	ldrb	r1, [r4, #0]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4650      	mov	r0, sl
 80031b8:	f7fd f80a 	bl	80001d0 <memchr>
 80031bc:	b140      	cbz	r0, 80031d0 <_vfiprintf_r+0x198>
 80031be:	2340      	movs	r3, #64	; 0x40
 80031c0:	eba0 000a 	sub.w	r0, r0, sl
 80031c4:	fa03 f000 	lsl.w	r0, r3, r0
 80031c8:	9b04      	ldr	r3, [sp, #16]
 80031ca:	4303      	orrs	r3, r0
 80031cc:	3401      	adds	r4, #1
 80031ce:	9304      	str	r3, [sp, #16]
 80031d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d4:	482c      	ldr	r0, [pc, #176]	; (8003288 <_vfiprintf_r+0x250>)
 80031d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031da:	2206      	movs	r2, #6
 80031dc:	f7fc fff8 	bl	80001d0 <memchr>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d03f      	beq.n	8003264 <_vfiprintf_r+0x22c>
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <_vfiprintf_r+0x254>)
 80031e6:	bb1b      	cbnz	r3, 8003230 <_vfiprintf_r+0x1f8>
 80031e8:	9b03      	ldr	r3, [sp, #12]
 80031ea:	3307      	adds	r3, #7
 80031ec:	f023 0307 	bic.w	r3, r3, #7
 80031f0:	3308      	adds	r3, #8
 80031f2:	9303      	str	r3, [sp, #12]
 80031f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f6:	443b      	add	r3, r7
 80031f8:	9309      	str	r3, [sp, #36]	; 0x24
 80031fa:	e767      	b.n	80030cc <_vfiprintf_r+0x94>
 80031fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003200:	460c      	mov	r4, r1
 8003202:	2001      	movs	r0, #1
 8003204:	e7a5      	b.n	8003152 <_vfiprintf_r+0x11a>
 8003206:	2300      	movs	r3, #0
 8003208:	3401      	adds	r4, #1
 800320a:	9305      	str	r3, [sp, #20]
 800320c:	4619      	mov	r1, r3
 800320e:	f04f 0c0a 	mov.w	ip, #10
 8003212:	4620      	mov	r0, r4
 8003214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003218:	3a30      	subs	r2, #48	; 0x30
 800321a:	2a09      	cmp	r2, #9
 800321c:	d903      	bls.n	8003226 <_vfiprintf_r+0x1ee>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0c5      	beq.n	80031ae <_vfiprintf_r+0x176>
 8003222:	9105      	str	r1, [sp, #20]
 8003224:	e7c3      	b.n	80031ae <_vfiprintf_r+0x176>
 8003226:	fb0c 2101 	mla	r1, ip, r1, r2
 800322a:	4604      	mov	r4, r0
 800322c:	2301      	movs	r3, #1
 800322e:	e7f0      	b.n	8003212 <_vfiprintf_r+0x1da>
 8003230:	ab03      	add	r3, sp, #12
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	462a      	mov	r2, r5
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <_vfiprintf_r+0x258>)
 8003238:	a904      	add	r1, sp, #16
 800323a:	4630      	mov	r0, r6
 800323c:	f3af 8000 	nop.w
 8003240:	4607      	mov	r7, r0
 8003242:	1c78      	adds	r0, r7, #1
 8003244:	d1d6      	bne.n	80031f4 <_vfiprintf_r+0x1bc>
 8003246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003248:	07d9      	lsls	r1, r3, #31
 800324a:	d405      	bmi.n	8003258 <_vfiprintf_r+0x220>
 800324c:	89ab      	ldrh	r3, [r5, #12]
 800324e:	059a      	lsls	r2, r3, #22
 8003250:	d402      	bmi.n	8003258 <_vfiprintf_r+0x220>
 8003252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003254:	f7ff fe6b 	bl	8002f2e <__retarget_lock_release_recursive>
 8003258:	89ab      	ldrh	r3, [r5, #12]
 800325a:	065b      	lsls	r3, r3, #25
 800325c:	f53f af12 	bmi.w	8003084 <_vfiprintf_r+0x4c>
 8003260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003262:	e711      	b.n	8003088 <_vfiprintf_r+0x50>
 8003264:	ab03      	add	r3, sp, #12
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	462a      	mov	r2, r5
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <_vfiprintf_r+0x258>)
 800326c:	a904      	add	r1, sp, #16
 800326e:	4630      	mov	r0, r6
 8003270:	f000 f880 	bl	8003374 <_printf_i>
 8003274:	e7e4      	b.n	8003240 <_vfiprintf_r+0x208>
 8003276:	bf00      	nop
 8003278:	08003c18 	.word	0x08003c18
 800327c:	08003c38 	.word	0x08003c38
 8003280:	08003bf8 	.word	0x08003bf8
 8003284:	08003c58 	.word	0x08003c58
 8003288:	08003c62 	.word	0x08003c62
 800328c:	00000000 	.word	0x00000000
 8003290:	08003013 	.word	0x08003013
 8003294:	08003c5e 	.word	0x08003c5e

08003298 <_printf_common>:
 8003298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	4616      	mov	r6, r2
 800329e:	4699      	mov	r9, r3
 80032a0:	688a      	ldr	r2, [r1, #8]
 80032a2:	690b      	ldr	r3, [r1, #16]
 80032a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bfb8      	it	lt
 80032ac:	4613      	movlt	r3, r2
 80032ae:	6033      	str	r3, [r6, #0]
 80032b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032b4:	4607      	mov	r7, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	b10a      	cbz	r2, 80032be <_printf_common+0x26>
 80032ba:	3301      	adds	r3, #1
 80032bc:	6033      	str	r3, [r6, #0]
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	0699      	lsls	r1, r3, #26
 80032c2:	bf42      	ittt	mi
 80032c4:	6833      	ldrmi	r3, [r6, #0]
 80032c6:	3302      	addmi	r3, #2
 80032c8:	6033      	strmi	r3, [r6, #0]
 80032ca:	6825      	ldr	r5, [r4, #0]
 80032cc:	f015 0506 	ands.w	r5, r5, #6
 80032d0:	d106      	bne.n	80032e0 <_printf_common+0x48>
 80032d2:	f104 0a19 	add.w	sl, r4, #25
 80032d6:	68e3      	ldr	r3, [r4, #12]
 80032d8:	6832      	ldr	r2, [r6, #0]
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	42ab      	cmp	r3, r5
 80032de:	dc26      	bgt.n	800332e <_printf_common+0x96>
 80032e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032e4:	1e13      	subs	r3, r2, #0
 80032e6:	6822      	ldr	r2, [r4, #0]
 80032e8:	bf18      	it	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	0692      	lsls	r2, r2, #26
 80032ee:	d42b      	bmi.n	8003348 <_printf_common+0xb0>
 80032f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032f4:	4649      	mov	r1, r9
 80032f6:	4638      	mov	r0, r7
 80032f8:	47c0      	blx	r8
 80032fa:	3001      	adds	r0, #1
 80032fc:	d01e      	beq.n	800333c <_printf_common+0xa4>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	68e5      	ldr	r5, [r4, #12]
 8003302:	6832      	ldr	r2, [r6, #0]
 8003304:	f003 0306 	and.w	r3, r3, #6
 8003308:	2b04      	cmp	r3, #4
 800330a:	bf08      	it	eq
 800330c:	1aad      	subeq	r5, r5, r2
 800330e:	68a3      	ldr	r3, [r4, #8]
 8003310:	6922      	ldr	r2, [r4, #16]
 8003312:	bf0c      	ite	eq
 8003314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003318:	2500      	movne	r5, #0
 800331a:	4293      	cmp	r3, r2
 800331c:	bfc4      	itt	gt
 800331e:	1a9b      	subgt	r3, r3, r2
 8003320:	18ed      	addgt	r5, r5, r3
 8003322:	2600      	movs	r6, #0
 8003324:	341a      	adds	r4, #26
 8003326:	42b5      	cmp	r5, r6
 8003328:	d11a      	bne.n	8003360 <_printf_common+0xc8>
 800332a:	2000      	movs	r0, #0
 800332c:	e008      	b.n	8003340 <_printf_common+0xa8>
 800332e:	2301      	movs	r3, #1
 8003330:	4652      	mov	r2, sl
 8003332:	4649      	mov	r1, r9
 8003334:	4638      	mov	r0, r7
 8003336:	47c0      	blx	r8
 8003338:	3001      	adds	r0, #1
 800333a:	d103      	bne.n	8003344 <_printf_common+0xac>
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003344:	3501      	adds	r5, #1
 8003346:	e7c6      	b.n	80032d6 <_printf_common+0x3e>
 8003348:	18e1      	adds	r1, r4, r3
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	2030      	movs	r0, #48	; 0x30
 800334e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003352:	4422      	add	r2, r4
 8003354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800335c:	3302      	adds	r3, #2
 800335e:	e7c7      	b.n	80032f0 <_printf_common+0x58>
 8003360:	2301      	movs	r3, #1
 8003362:	4622      	mov	r2, r4
 8003364:	4649      	mov	r1, r9
 8003366:	4638      	mov	r0, r7
 8003368:	47c0      	blx	r8
 800336a:	3001      	adds	r0, #1
 800336c:	d0e6      	beq.n	800333c <_printf_common+0xa4>
 800336e:	3601      	adds	r6, #1
 8003370:	e7d9      	b.n	8003326 <_printf_common+0x8e>
	...

08003374 <_printf_i>:
 8003374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003378:	460c      	mov	r4, r1
 800337a:	4691      	mov	r9, r2
 800337c:	7e27      	ldrb	r7, [r4, #24]
 800337e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003380:	2f78      	cmp	r7, #120	; 0x78
 8003382:	4680      	mov	r8, r0
 8003384:	469a      	mov	sl, r3
 8003386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800338a:	d807      	bhi.n	800339c <_printf_i+0x28>
 800338c:	2f62      	cmp	r7, #98	; 0x62
 800338e:	d80a      	bhi.n	80033a6 <_printf_i+0x32>
 8003390:	2f00      	cmp	r7, #0
 8003392:	f000 80d8 	beq.w	8003546 <_printf_i+0x1d2>
 8003396:	2f58      	cmp	r7, #88	; 0x58
 8003398:	f000 80a3 	beq.w	80034e2 <_printf_i+0x16e>
 800339c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033a4:	e03a      	b.n	800341c <_printf_i+0xa8>
 80033a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033aa:	2b15      	cmp	r3, #21
 80033ac:	d8f6      	bhi.n	800339c <_printf_i+0x28>
 80033ae:	a001      	add	r0, pc, #4	; (adr r0, 80033b4 <_printf_i+0x40>)
 80033b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033b4:	0800340d 	.word	0x0800340d
 80033b8:	08003421 	.word	0x08003421
 80033bc:	0800339d 	.word	0x0800339d
 80033c0:	0800339d 	.word	0x0800339d
 80033c4:	0800339d 	.word	0x0800339d
 80033c8:	0800339d 	.word	0x0800339d
 80033cc:	08003421 	.word	0x08003421
 80033d0:	0800339d 	.word	0x0800339d
 80033d4:	0800339d 	.word	0x0800339d
 80033d8:	0800339d 	.word	0x0800339d
 80033dc:	0800339d 	.word	0x0800339d
 80033e0:	0800352d 	.word	0x0800352d
 80033e4:	08003451 	.word	0x08003451
 80033e8:	0800350f 	.word	0x0800350f
 80033ec:	0800339d 	.word	0x0800339d
 80033f0:	0800339d 	.word	0x0800339d
 80033f4:	0800354f 	.word	0x0800354f
 80033f8:	0800339d 	.word	0x0800339d
 80033fc:	08003451 	.word	0x08003451
 8003400:	0800339d 	.word	0x0800339d
 8003404:	0800339d 	.word	0x0800339d
 8003408:	08003517 	.word	0x08003517
 800340c:	680b      	ldr	r3, [r1, #0]
 800340e:	1d1a      	adds	r2, r3, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	600a      	str	r2, [r1, #0]
 8003414:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800341c:	2301      	movs	r3, #1
 800341e:	e0a3      	b.n	8003568 <_printf_i+0x1f4>
 8003420:	6825      	ldr	r5, [r4, #0]
 8003422:	6808      	ldr	r0, [r1, #0]
 8003424:	062e      	lsls	r6, r5, #24
 8003426:	f100 0304 	add.w	r3, r0, #4
 800342a:	d50a      	bpl.n	8003442 <_printf_i+0xce>
 800342c:	6805      	ldr	r5, [r0, #0]
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	2d00      	cmp	r5, #0
 8003432:	da03      	bge.n	800343c <_printf_i+0xc8>
 8003434:	232d      	movs	r3, #45	; 0x2d
 8003436:	426d      	negs	r5, r5
 8003438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800343c:	485e      	ldr	r0, [pc, #376]	; (80035b8 <_printf_i+0x244>)
 800343e:	230a      	movs	r3, #10
 8003440:	e019      	b.n	8003476 <_printf_i+0x102>
 8003442:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003446:	6805      	ldr	r5, [r0, #0]
 8003448:	600b      	str	r3, [r1, #0]
 800344a:	bf18      	it	ne
 800344c:	b22d      	sxthne	r5, r5
 800344e:	e7ef      	b.n	8003430 <_printf_i+0xbc>
 8003450:	680b      	ldr	r3, [r1, #0]
 8003452:	6825      	ldr	r5, [r4, #0]
 8003454:	1d18      	adds	r0, r3, #4
 8003456:	6008      	str	r0, [r1, #0]
 8003458:	0628      	lsls	r0, r5, #24
 800345a:	d501      	bpl.n	8003460 <_printf_i+0xec>
 800345c:	681d      	ldr	r5, [r3, #0]
 800345e:	e002      	b.n	8003466 <_printf_i+0xf2>
 8003460:	0669      	lsls	r1, r5, #25
 8003462:	d5fb      	bpl.n	800345c <_printf_i+0xe8>
 8003464:	881d      	ldrh	r5, [r3, #0]
 8003466:	4854      	ldr	r0, [pc, #336]	; (80035b8 <_printf_i+0x244>)
 8003468:	2f6f      	cmp	r7, #111	; 0x6f
 800346a:	bf0c      	ite	eq
 800346c:	2308      	moveq	r3, #8
 800346e:	230a      	movne	r3, #10
 8003470:	2100      	movs	r1, #0
 8003472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003476:	6866      	ldr	r6, [r4, #4]
 8003478:	60a6      	str	r6, [r4, #8]
 800347a:	2e00      	cmp	r6, #0
 800347c:	bfa2      	ittt	ge
 800347e:	6821      	ldrge	r1, [r4, #0]
 8003480:	f021 0104 	bicge.w	r1, r1, #4
 8003484:	6021      	strge	r1, [r4, #0]
 8003486:	b90d      	cbnz	r5, 800348c <_printf_i+0x118>
 8003488:	2e00      	cmp	r6, #0
 800348a:	d04d      	beq.n	8003528 <_printf_i+0x1b4>
 800348c:	4616      	mov	r6, r2
 800348e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003492:	fb03 5711 	mls	r7, r3, r1, r5
 8003496:	5dc7      	ldrb	r7, [r0, r7]
 8003498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800349c:	462f      	mov	r7, r5
 800349e:	42bb      	cmp	r3, r7
 80034a0:	460d      	mov	r5, r1
 80034a2:	d9f4      	bls.n	800348e <_printf_i+0x11a>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d10b      	bne.n	80034c0 <_printf_i+0x14c>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	07df      	lsls	r7, r3, #31
 80034ac:	d508      	bpl.n	80034c0 <_printf_i+0x14c>
 80034ae:	6923      	ldr	r3, [r4, #16]
 80034b0:	6861      	ldr	r1, [r4, #4]
 80034b2:	4299      	cmp	r1, r3
 80034b4:	bfde      	ittt	le
 80034b6:	2330      	movle	r3, #48	; 0x30
 80034b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034c0:	1b92      	subs	r2, r2, r6
 80034c2:	6122      	str	r2, [r4, #16]
 80034c4:	f8cd a000 	str.w	sl, [sp]
 80034c8:	464b      	mov	r3, r9
 80034ca:	aa03      	add	r2, sp, #12
 80034cc:	4621      	mov	r1, r4
 80034ce:	4640      	mov	r0, r8
 80034d0:	f7ff fee2 	bl	8003298 <_printf_common>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d14c      	bne.n	8003572 <_printf_i+0x1fe>
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	b004      	add	sp, #16
 80034de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e2:	4835      	ldr	r0, [pc, #212]	; (80035b8 <_printf_i+0x244>)
 80034e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	680e      	ldr	r6, [r1, #0]
 80034ec:	061f      	lsls	r7, r3, #24
 80034ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80034f2:	600e      	str	r6, [r1, #0]
 80034f4:	d514      	bpl.n	8003520 <_printf_i+0x1ac>
 80034f6:	07d9      	lsls	r1, r3, #31
 80034f8:	bf44      	itt	mi
 80034fa:	f043 0320 	orrmi.w	r3, r3, #32
 80034fe:	6023      	strmi	r3, [r4, #0]
 8003500:	b91d      	cbnz	r5, 800350a <_printf_i+0x196>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	f023 0320 	bic.w	r3, r3, #32
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	2310      	movs	r3, #16
 800350c:	e7b0      	b.n	8003470 <_printf_i+0xfc>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	f043 0320 	orr.w	r3, r3, #32
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	2378      	movs	r3, #120	; 0x78
 8003518:	4828      	ldr	r0, [pc, #160]	; (80035bc <_printf_i+0x248>)
 800351a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800351e:	e7e3      	b.n	80034e8 <_printf_i+0x174>
 8003520:	065e      	lsls	r6, r3, #25
 8003522:	bf48      	it	mi
 8003524:	b2ad      	uxthmi	r5, r5
 8003526:	e7e6      	b.n	80034f6 <_printf_i+0x182>
 8003528:	4616      	mov	r6, r2
 800352a:	e7bb      	b.n	80034a4 <_printf_i+0x130>
 800352c:	680b      	ldr	r3, [r1, #0]
 800352e:	6826      	ldr	r6, [r4, #0]
 8003530:	6960      	ldr	r0, [r4, #20]
 8003532:	1d1d      	adds	r5, r3, #4
 8003534:	600d      	str	r5, [r1, #0]
 8003536:	0635      	lsls	r5, r6, #24
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	d501      	bpl.n	8003540 <_printf_i+0x1cc>
 800353c:	6018      	str	r0, [r3, #0]
 800353e:	e002      	b.n	8003546 <_printf_i+0x1d2>
 8003540:	0671      	lsls	r1, r6, #25
 8003542:	d5fb      	bpl.n	800353c <_printf_i+0x1c8>
 8003544:	8018      	strh	r0, [r3, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	6123      	str	r3, [r4, #16]
 800354a:	4616      	mov	r6, r2
 800354c:	e7ba      	b.n	80034c4 <_printf_i+0x150>
 800354e:	680b      	ldr	r3, [r1, #0]
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	600a      	str	r2, [r1, #0]
 8003554:	681e      	ldr	r6, [r3, #0]
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	2100      	movs	r1, #0
 800355a:	4630      	mov	r0, r6
 800355c:	f7fc fe38 	bl	80001d0 <memchr>
 8003560:	b108      	cbz	r0, 8003566 <_printf_i+0x1f2>
 8003562:	1b80      	subs	r0, r0, r6
 8003564:	6060      	str	r0, [r4, #4]
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	6123      	str	r3, [r4, #16]
 800356a:	2300      	movs	r3, #0
 800356c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003570:	e7a8      	b.n	80034c4 <_printf_i+0x150>
 8003572:	6923      	ldr	r3, [r4, #16]
 8003574:	4632      	mov	r2, r6
 8003576:	4649      	mov	r1, r9
 8003578:	4640      	mov	r0, r8
 800357a:	47d0      	blx	sl
 800357c:	3001      	adds	r0, #1
 800357e:	d0ab      	beq.n	80034d8 <_printf_i+0x164>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	079b      	lsls	r3, r3, #30
 8003584:	d413      	bmi.n	80035ae <_printf_i+0x23a>
 8003586:	68e0      	ldr	r0, [r4, #12]
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	4298      	cmp	r0, r3
 800358c:	bfb8      	it	lt
 800358e:	4618      	movlt	r0, r3
 8003590:	e7a4      	b.n	80034dc <_printf_i+0x168>
 8003592:	2301      	movs	r3, #1
 8003594:	4632      	mov	r2, r6
 8003596:	4649      	mov	r1, r9
 8003598:	4640      	mov	r0, r8
 800359a:	47d0      	blx	sl
 800359c:	3001      	adds	r0, #1
 800359e:	d09b      	beq.n	80034d8 <_printf_i+0x164>
 80035a0:	3501      	adds	r5, #1
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	9903      	ldr	r1, [sp, #12]
 80035a6:	1a5b      	subs	r3, r3, r1
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dcf2      	bgt.n	8003592 <_printf_i+0x21e>
 80035ac:	e7eb      	b.n	8003586 <_printf_i+0x212>
 80035ae:	2500      	movs	r5, #0
 80035b0:	f104 0619 	add.w	r6, r4, #25
 80035b4:	e7f5      	b.n	80035a2 <_printf_i+0x22e>
 80035b6:	bf00      	nop
 80035b8:	08003c69 	.word	0x08003c69
 80035bc:	08003c7a 	.word	0x08003c7a

080035c0 <_sbrk_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	4d06      	ldr	r5, [pc, #24]	; (80035dc <_sbrk_r+0x1c>)
 80035c4:	2300      	movs	r3, #0
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	602b      	str	r3, [r5, #0]
 80035cc:	f7fd fb28 	bl	8000c20 <_sbrk>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_sbrk_r+0x1a>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_sbrk_r+0x1a>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	20000108 	.word	0x20000108

080035e0 <__sread>:
 80035e0:	b510      	push	{r4, lr}
 80035e2:	460c      	mov	r4, r1
 80035e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e8:	f000 fab4 	bl	8003b54 <_read_r>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	bfab      	itete	ge
 80035f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035f2:	89a3      	ldrhlt	r3, [r4, #12]
 80035f4:	181b      	addge	r3, r3, r0
 80035f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035fa:	bfac      	ite	ge
 80035fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80035fe:	81a3      	strhlt	r3, [r4, #12]
 8003600:	bd10      	pop	{r4, pc}

08003602 <__swrite>:
 8003602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003606:	461f      	mov	r7, r3
 8003608:	898b      	ldrh	r3, [r1, #12]
 800360a:	05db      	lsls	r3, r3, #23
 800360c:	4605      	mov	r5, r0
 800360e:	460c      	mov	r4, r1
 8003610:	4616      	mov	r6, r2
 8003612:	d505      	bpl.n	8003620 <__swrite+0x1e>
 8003614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003618:	2302      	movs	r3, #2
 800361a:	2200      	movs	r2, #0
 800361c:	f000 f9c8 	bl	80039b0 <_lseek_r>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800362a:	81a3      	strh	r3, [r4, #12]
 800362c:	4632      	mov	r2, r6
 800362e:	463b      	mov	r3, r7
 8003630:	4628      	mov	r0, r5
 8003632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003636:	f000 b869 	b.w	800370c <_write_r>

0800363a <__sseek>:
 800363a:	b510      	push	{r4, lr}
 800363c:	460c      	mov	r4, r1
 800363e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003642:	f000 f9b5 	bl	80039b0 <_lseek_r>
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	bf15      	itete	ne
 800364c:	6560      	strne	r0, [r4, #84]	; 0x54
 800364e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003656:	81a3      	strheq	r3, [r4, #12]
 8003658:	bf18      	it	ne
 800365a:	81a3      	strhne	r3, [r4, #12]
 800365c:	bd10      	pop	{r4, pc}

0800365e <__sclose>:
 800365e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003662:	f000 b8d3 	b.w	800380c <_close_r>
	...

08003668 <__swbuf_r>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	460e      	mov	r6, r1
 800366c:	4614      	mov	r4, r2
 800366e:	4605      	mov	r5, r0
 8003670:	b118      	cbz	r0, 800367a <__swbuf_r+0x12>
 8003672:	6983      	ldr	r3, [r0, #24]
 8003674:	b90b      	cbnz	r3, 800367a <__swbuf_r+0x12>
 8003676:	f7ff fbbb 	bl	8002df0 <__sinit>
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <__swbuf_r+0x98>)
 800367c:	429c      	cmp	r4, r3
 800367e:	d12b      	bne.n	80036d8 <__swbuf_r+0x70>
 8003680:	686c      	ldr	r4, [r5, #4]
 8003682:	69a3      	ldr	r3, [r4, #24]
 8003684:	60a3      	str	r3, [r4, #8]
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	071a      	lsls	r2, r3, #28
 800368a:	d52f      	bpl.n	80036ec <__swbuf_r+0x84>
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	b36b      	cbz	r3, 80036ec <__swbuf_r+0x84>
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	6820      	ldr	r0, [r4, #0]
 8003694:	1ac0      	subs	r0, r0, r3
 8003696:	6963      	ldr	r3, [r4, #20]
 8003698:	b2f6      	uxtb	r6, r6
 800369a:	4283      	cmp	r3, r0
 800369c:	4637      	mov	r7, r6
 800369e:	dc04      	bgt.n	80036aa <__swbuf_r+0x42>
 80036a0:	4621      	mov	r1, r4
 80036a2:	4628      	mov	r0, r5
 80036a4:	f000 f948 	bl	8003938 <_fflush_r>
 80036a8:	bb30      	cbnz	r0, 80036f8 <__swbuf_r+0x90>
 80036aa:	68a3      	ldr	r3, [r4, #8]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	60a3      	str	r3, [r4, #8]
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	6022      	str	r2, [r4, #0]
 80036b6:	701e      	strb	r6, [r3, #0]
 80036b8:	6963      	ldr	r3, [r4, #20]
 80036ba:	3001      	adds	r0, #1
 80036bc:	4283      	cmp	r3, r0
 80036be:	d004      	beq.n	80036ca <__swbuf_r+0x62>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	07db      	lsls	r3, r3, #31
 80036c4:	d506      	bpl.n	80036d4 <__swbuf_r+0x6c>
 80036c6:	2e0a      	cmp	r6, #10
 80036c8:	d104      	bne.n	80036d4 <__swbuf_r+0x6c>
 80036ca:	4621      	mov	r1, r4
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 f933 	bl	8003938 <_fflush_r>
 80036d2:	b988      	cbnz	r0, 80036f8 <__swbuf_r+0x90>
 80036d4:	4638      	mov	r0, r7
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <__swbuf_r+0x9c>)
 80036da:	429c      	cmp	r4, r3
 80036dc:	d101      	bne.n	80036e2 <__swbuf_r+0x7a>
 80036de:	68ac      	ldr	r4, [r5, #8]
 80036e0:	e7cf      	b.n	8003682 <__swbuf_r+0x1a>
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <__swbuf_r+0xa0>)
 80036e4:	429c      	cmp	r4, r3
 80036e6:	bf08      	it	eq
 80036e8:	68ec      	ldreq	r4, [r5, #12]
 80036ea:	e7ca      	b.n	8003682 <__swbuf_r+0x1a>
 80036ec:	4621      	mov	r1, r4
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 f81e 	bl	8003730 <__swsetup_r>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d0cb      	beq.n	8003690 <__swbuf_r+0x28>
 80036f8:	f04f 37ff 	mov.w	r7, #4294967295
 80036fc:	e7ea      	b.n	80036d4 <__swbuf_r+0x6c>
 80036fe:	bf00      	nop
 8003700:	08003c18 	.word	0x08003c18
 8003704:	08003c38 	.word	0x08003c38
 8003708:	08003bf8 	.word	0x08003bf8

0800370c <_write_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d07      	ldr	r5, [pc, #28]	; (800372c <_write_r+0x20>)
 8003710:	4604      	mov	r4, r0
 8003712:	4608      	mov	r0, r1
 8003714:	4611      	mov	r1, r2
 8003716:	2200      	movs	r2, #0
 8003718:	602a      	str	r2, [r5, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	f7fd fa2f 	bl	8000b7e <_write>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_write_r+0x1e>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_write_r+0x1e>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000108 	.word	0x20000108

08003730 <__swsetup_r>:
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <__swsetup_r+0xcc>)
 8003732:	b570      	push	{r4, r5, r6, lr}
 8003734:	681d      	ldr	r5, [r3, #0]
 8003736:	4606      	mov	r6, r0
 8003738:	460c      	mov	r4, r1
 800373a:	b125      	cbz	r5, 8003746 <__swsetup_r+0x16>
 800373c:	69ab      	ldr	r3, [r5, #24]
 800373e:	b913      	cbnz	r3, 8003746 <__swsetup_r+0x16>
 8003740:	4628      	mov	r0, r5
 8003742:	f7ff fb55 	bl	8002df0 <__sinit>
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <__swsetup_r+0xd0>)
 8003748:	429c      	cmp	r4, r3
 800374a:	d10f      	bne.n	800376c <__swsetup_r+0x3c>
 800374c:	686c      	ldr	r4, [r5, #4]
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003754:	0719      	lsls	r1, r3, #28
 8003756:	d42c      	bmi.n	80037b2 <__swsetup_r+0x82>
 8003758:	06dd      	lsls	r5, r3, #27
 800375a:	d411      	bmi.n	8003780 <__swsetup_r+0x50>
 800375c:	2309      	movs	r3, #9
 800375e:	6033      	str	r3, [r6, #0]
 8003760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	e03e      	b.n	80037ea <__swsetup_r+0xba>
 800376c:	4b25      	ldr	r3, [pc, #148]	; (8003804 <__swsetup_r+0xd4>)
 800376e:	429c      	cmp	r4, r3
 8003770:	d101      	bne.n	8003776 <__swsetup_r+0x46>
 8003772:	68ac      	ldr	r4, [r5, #8]
 8003774:	e7eb      	b.n	800374e <__swsetup_r+0x1e>
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <__swsetup_r+0xd8>)
 8003778:	429c      	cmp	r4, r3
 800377a:	bf08      	it	eq
 800377c:	68ec      	ldreq	r4, [r5, #12]
 800377e:	e7e6      	b.n	800374e <__swsetup_r+0x1e>
 8003780:	0758      	lsls	r0, r3, #29
 8003782:	d512      	bpl.n	80037aa <__swsetup_r+0x7a>
 8003784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003786:	b141      	cbz	r1, 800379a <__swsetup_r+0x6a>
 8003788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800378c:	4299      	cmp	r1, r3
 800378e:	d002      	beq.n	8003796 <__swsetup_r+0x66>
 8003790:	4630      	mov	r0, r6
 8003792:	f000 f98f 	bl	8003ab4 <_free_r>
 8003796:	2300      	movs	r3, #0
 8003798:	6363      	str	r3, [r4, #52]	; 0x34
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	2300      	movs	r3, #0
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	6923      	ldr	r3, [r4, #16]
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	f043 0308 	orr.w	r3, r3, #8
 80037b0:	81a3      	strh	r3, [r4, #12]
 80037b2:	6923      	ldr	r3, [r4, #16]
 80037b4:	b94b      	cbnz	r3, 80037ca <__swsetup_r+0x9a>
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c0:	d003      	beq.n	80037ca <__swsetup_r+0x9a>
 80037c2:	4621      	mov	r1, r4
 80037c4:	4630      	mov	r0, r6
 80037c6:	f000 f929 	bl	8003a1c <__smakebuf_r>
 80037ca:	89a0      	ldrh	r0, [r4, #12]
 80037cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037d0:	f010 0301 	ands.w	r3, r0, #1
 80037d4:	d00a      	beq.n	80037ec <__swsetup_r+0xbc>
 80037d6:	2300      	movs	r3, #0
 80037d8:	60a3      	str	r3, [r4, #8]
 80037da:	6963      	ldr	r3, [r4, #20]
 80037dc:	425b      	negs	r3, r3
 80037de:	61a3      	str	r3, [r4, #24]
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	b943      	cbnz	r3, 80037f6 <__swsetup_r+0xc6>
 80037e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037e8:	d1ba      	bne.n	8003760 <__swsetup_r+0x30>
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	0781      	lsls	r1, r0, #30
 80037ee:	bf58      	it	pl
 80037f0:	6963      	ldrpl	r3, [r4, #20]
 80037f2:	60a3      	str	r3, [r4, #8]
 80037f4:	e7f4      	b.n	80037e0 <__swsetup_r+0xb0>
 80037f6:	2000      	movs	r0, #0
 80037f8:	e7f7      	b.n	80037ea <__swsetup_r+0xba>
 80037fa:	bf00      	nop
 80037fc:	20000020 	.word	0x20000020
 8003800:	08003c18 	.word	0x08003c18
 8003804:	08003c38 	.word	0x08003c38
 8003808:	08003bf8 	.word	0x08003bf8

0800380c <_close_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4d06      	ldr	r5, [pc, #24]	; (8003828 <_close_r+0x1c>)
 8003810:	2300      	movs	r3, #0
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	602b      	str	r3, [r5, #0]
 8003818:	f7fd f9cd 	bl	8000bb6 <_close>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d102      	bne.n	8003826 <_close_r+0x1a>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	b103      	cbz	r3, 8003826 <_close_r+0x1a>
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	20000108 	.word	0x20000108

0800382c <__sflush_r>:
 800382c:	898a      	ldrh	r2, [r1, #12]
 800382e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003832:	4605      	mov	r5, r0
 8003834:	0710      	lsls	r0, r2, #28
 8003836:	460c      	mov	r4, r1
 8003838:	d458      	bmi.n	80038ec <__sflush_r+0xc0>
 800383a:	684b      	ldr	r3, [r1, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	dc05      	bgt.n	800384c <__sflush_r+0x20>
 8003840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	dc02      	bgt.n	800384c <__sflush_r+0x20>
 8003846:	2000      	movs	r0, #0
 8003848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800384c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800384e:	2e00      	cmp	r6, #0
 8003850:	d0f9      	beq.n	8003846 <__sflush_r+0x1a>
 8003852:	2300      	movs	r3, #0
 8003854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003858:	682f      	ldr	r7, [r5, #0]
 800385a:	602b      	str	r3, [r5, #0]
 800385c:	d032      	beq.n	80038c4 <__sflush_r+0x98>
 800385e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	075a      	lsls	r2, r3, #29
 8003864:	d505      	bpl.n	8003872 <__sflush_r+0x46>
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	1ac0      	subs	r0, r0, r3
 800386a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800386c:	b10b      	cbz	r3, 8003872 <__sflush_r+0x46>
 800386e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003870:	1ac0      	subs	r0, r0, r3
 8003872:	2300      	movs	r3, #0
 8003874:	4602      	mov	r2, r0
 8003876:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003878:	6a21      	ldr	r1, [r4, #32]
 800387a:	4628      	mov	r0, r5
 800387c:	47b0      	blx	r6
 800387e:	1c43      	adds	r3, r0, #1
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	d106      	bne.n	8003892 <__sflush_r+0x66>
 8003884:	6829      	ldr	r1, [r5, #0]
 8003886:	291d      	cmp	r1, #29
 8003888:	d82c      	bhi.n	80038e4 <__sflush_r+0xb8>
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <__sflush_r+0x108>)
 800388c:	40ca      	lsrs	r2, r1
 800388e:	07d6      	lsls	r6, r2, #31
 8003890:	d528      	bpl.n	80038e4 <__sflush_r+0xb8>
 8003892:	2200      	movs	r2, #0
 8003894:	6062      	str	r2, [r4, #4]
 8003896:	04d9      	lsls	r1, r3, #19
 8003898:	6922      	ldr	r2, [r4, #16]
 800389a:	6022      	str	r2, [r4, #0]
 800389c:	d504      	bpl.n	80038a8 <__sflush_r+0x7c>
 800389e:	1c42      	adds	r2, r0, #1
 80038a0:	d101      	bne.n	80038a6 <__sflush_r+0x7a>
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	b903      	cbnz	r3, 80038a8 <__sflush_r+0x7c>
 80038a6:	6560      	str	r0, [r4, #84]	; 0x54
 80038a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038aa:	602f      	str	r7, [r5, #0]
 80038ac:	2900      	cmp	r1, #0
 80038ae:	d0ca      	beq.n	8003846 <__sflush_r+0x1a>
 80038b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038b4:	4299      	cmp	r1, r3
 80038b6:	d002      	beq.n	80038be <__sflush_r+0x92>
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 f8fb 	bl	8003ab4 <_free_r>
 80038be:	2000      	movs	r0, #0
 80038c0:	6360      	str	r0, [r4, #52]	; 0x34
 80038c2:	e7c1      	b.n	8003848 <__sflush_r+0x1c>
 80038c4:	6a21      	ldr	r1, [r4, #32]
 80038c6:	2301      	movs	r3, #1
 80038c8:	4628      	mov	r0, r5
 80038ca:	47b0      	blx	r6
 80038cc:	1c41      	adds	r1, r0, #1
 80038ce:	d1c7      	bne.n	8003860 <__sflush_r+0x34>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0c4      	beq.n	8003860 <__sflush_r+0x34>
 80038d6:	2b1d      	cmp	r3, #29
 80038d8:	d001      	beq.n	80038de <__sflush_r+0xb2>
 80038da:	2b16      	cmp	r3, #22
 80038dc:	d101      	bne.n	80038e2 <__sflush_r+0xb6>
 80038de:	602f      	str	r7, [r5, #0]
 80038e0:	e7b1      	b.n	8003846 <__sflush_r+0x1a>
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	e7ad      	b.n	8003848 <__sflush_r+0x1c>
 80038ec:	690f      	ldr	r7, [r1, #16]
 80038ee:	2f00      	cmp	r7, #0
 80038f0:	d0a9      	beq.n	8003846 <__sflush_r+0x1a>
 80038f2:	0793      	lsls	r3, r2, #30
 80038f4:	680e      	ldr	r6, [r1, #0]
 80038f6:	bf08      	it	eq
 80038f8:	694b      	ldreq	r3, [r1, #20]
 80038fa:	600f      	str	r7, [r1, #0]
 80038fc:	bf18      	it	ne
 80038fe:	2300      	movne	r3, #0
 8003900:	eba6 0807 	sub.w	r8, r6, r7
 8003904:	608b      	str	r3, [r1, #8]
 8003906:	f1b8 0f00 	cmp.w	r8, #0
 800390a:	dd9c      	ble.n	8003846 <__sflush_r+0x1a>
 800390c:	6a21      	ldr	r1, [r4, #32]
 800390e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003910:	4643      	mov	r3, r8
 8003912:	463a      	mov	r2, r7
 8003914:	4628      	mov	r0, r5
 8003916:	47b0      	blx	r6
 8003918:	2800      	cmp	r0, #0
 800391a:	dc06      	bgt.n	800392a <__sflush_r+0xfe>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e78e      	b.n	8003848 <__sflush_r+0x1c>
 800392a:	4407      	add	r7, r0
 800392c:	eba8 0800 	sub.w	r8, r8, r0
 8003930:	e7e9      	b.n	8003906 <__sflush_r+0xda>
 8003932:	bf00      	nop
 8003934:	20400001 	.word	0x20400001

08003938 <_fflush_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	690b      	ldr	r3, [r1, #16]
 800393c:	4605      	mov	r5, r0
 800393e:	460c      	mov	r4, r1
 8003940:	b913      	cbnz	r3, 8003948 <_fflush_r+0x10>
 8003942:	2500      	movs	r5, #0
 8003944:	4628      	mov	r0, r5
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	b118      	cbz	r0, 8003952 <_fflush_r+0x1a>
 800394a:	6983      	ldr	r3, [r0, #24]
 800394c:	b90b      	cbnz	r3, 8003952 <_fflush_r+0x1a>
 800394e:	f7ff fa4f 	bl	8002df0 <__sinit>
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <_fflush_r+0x6c>)
 8003954:	429c      	cmp	r4, r3
 8003956:	d11b      	bne.n	8003990 <_fflush_r+0x58>
 8003958:	686c      	ldr	r4, [r5, #4]
 800395a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ef      	beq.n	8003942 <_fflush_r+0xa>
 8003962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003964:	07d0      	lsls	r0, r2, #31
 8003966:	d404      	bmi.n	8003972 <_fflush_r+0x3a>
 8003968:	0599      	lsls	r1, r3, #22
 800396a:	d402      	bmi.n	8003972 <_fflush_r+0x3a>
 800396c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800396e:	f7ff fadd 	bl	8002f2c <__retarget_lock_acquire_recursive>
 8003972:	4628      	mov	r0, r5
 8003974:	4621      	mov	r1, r4
 8003976:	f7ff ff59 	bl	800382c <__sflush_r>
 800397a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800397c:	07da      	lsls	r2, r3, #31
 800397e:	4605      	mov	r5, r0
 8003980:	d4e0      	bmi.n	8003944 <_fflush_r+0xc>
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	059b      	lsls	r3, r3, #22
 8003986:	d4dd      	bmi.n	8003944 <_fflush_r+0xc>
 8003988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800398a:	f7ff fad0 	bl	8002f2e <__retarget_lock_release_recursive>
 800398e:	e7d9      	b.n	8003944 <_fflush_r+0xc>
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <_fflush_r+0x70>)
 8003992:	429c      	cmp	r4, r3
 8003994:	d101      	bne.n	800399a <_fflush_r+0x62>
 8003996:	68ac      	ldr	r4, [r5, #8]
 8003998:	e7df      	b.n	800395a <_fflush_r+0x22>
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <_fflush_r+0x74>)
 800399c:	429c      	cmp	r4, r3
 800399e:	bf08      	it	eq
 80039a0:	68ec      	ldreq	r4, [r5, #12]
 80039a2:	e7da      	b.n	800395a <_fflush_r+0x22>
 80039a4:	08003c18 	.word	0x08003c18
 80039a8:	08003c38 	.word	0x08003c38
 80039ac:	08003bf8 	.word	0x08003bf8

080039b0 <_lseek_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4d07      	ldr	r5, [pc, #28]	; (80039d0 <_lseek_r+0x20>)
 80039b4:	4604      	mov	r4, r0
 80039b6:	4608      	mov	r0, r1
 80039b8:	4611      	mov	r1, r2
 80039ba:	2200      	movs	r2, #0
 80039bc:	602a      	str	r2, [r5, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7fd f920 	bl	8000c04 <_lseek>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_lseek_r+0x1e>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_lseek_r+0x1e>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000108 	.word	0x20000108

080039d4 <__swhatbuf_r>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	460e      	mov	r6, r1
 80039d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039dc:	2900      	cmp	r1, #0
 80039de:	b096      	sub	sp, #88	; 0x58
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	da07      	bge.n	80039f6 <__swhatbuf_r+0x22>
 80039e6:	2300      	movs	r3, #0
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	89b3      	ldrh	r3, [r6, #12]
 80039ec:	061a      	lsls	r2, r3, #24
 80039ee:	d410      	bmi.n	8003a12 <__swhatbuf_r+0x3e>
 80039f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f4:	e00e      	b.n	8003a14 <__swhatbuf_r+0x40>
 80039f6:	466a      	mov	r2, sp
 80039f8:	f000 f8be 	bl	8003b78 <_fstat_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	dbf2      	blt.n	80039e6 <__swhatbuf_r+0x12>
 8003a00:	9a01      	ldr	r2, [sp, #4]
 8003a02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a0a:	425a      	negs	r2, r3
 8003a0c:	415a      	adcs	r2, r3
 8003a0e:	602a      	str	r2, [r5, #0]
 8003a10:	e7ee      	b.n	80039f0 <__swhatbuf_r+0x1c>
 8003a12:	2340      	movs	r3, #64	; 0x40
 8003a14:	2000      	movs	r0, #0
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	b016      	add	sp, #88	; 0x58
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}

08003a1c <__smakebuf_r>:
 8003a1c:	898b      	ldrh	r3, [r1, #12]
 8003a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a20:	079d      	lsls	r5, r3, #30
 8003a22:	4606      	mov	r6, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	d507      	bpl.n	8003a38 <__smakebuf_r+0x1c>
 8003a28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	2301      	movs	r3, #1
 8003a32:	6163      	str	r3, [r4, #20]
 8003a34:	b002      	add	sp, #8
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	ab01      	add	r3, sp, #4
 8003a3a:	466a      	mov	r2, sp
 8003a3c:	f7ff ffca 	bl	80039d4 <__swhatbuf_r>
 8003a40:	9900      	ldr	r1, [sp, #0]
 8003a42:	4605      	mov	r5, r0
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff fa73 	bl	8002f30 <_malloc_r>
 8003a4a:	b948      	cbnz	r0, 8003a60 <__smakebuf_r+0x44>
 8003a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a50:	059a      	lsls	r2, r3, #22
 8003a52:	d4ef      	bmi.n	8003a34 <__smakebuf_r+0x18>
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	e7e3      	b.n	8003a28 <__smakebuf_r+0xc>
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <__smakebuf_r+0x7c>)
 8003a62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	6020      	str	r0, [r4, #0]
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	6163      	str	r3, [r4, #20]
 8003a72:	9b01      	ldr	r3, [sp, #4]
 8003a74:	6120      	str	r0, [r4, #16]
 8003a76:	b15b      	cbz	r3, 8003a90 <__smakebuf_r+0x74>
 8003a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 f88d 	bl	8003b9c <_isatty_r>
 8003a82:	b128      	cbz	r0, 8003a90 <__smakebuf_r+0x74>
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	89a0      	ldrh	r0, [r4, #12]
 8003a92:	4305      	orrs	r5, r0
 8003a94:	81a5      	strh	r5, [r4, #12]
 8003a96:	e7cd      	b.n	8003a34 <__smakebuf_r+0x18>
 8003a98:	08002d89 	.word	0x08002d89

08003a9c <__malloc_lock>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__malloc_lock+0x8>)
 8003a9e:	f7ff ba45 	b.w	8002f2c <__retarget_lock_acquire_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	20000100 	.word	0x20000100

08003aa8 <__malloc_unlock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__malloc_unlock+0x8>)
 8003aaa:	f7ff ba40 	b.w	8002f2e <__retarget_lock_release_recursive>
 8003aae:	bf00      	nop
 8003ab0:	20000100 	.word	0x20000100

08003ab4 <_free_r>:
 8003ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	d048      	beq.n	8003b4c <_free_r+0x98>
 8003aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003abe:	9001      	str	r0, [sp, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ac6:	bfb8      	it	lt
 8003ac8:	18e4      	addlt	r4, r4, r3
 8003aca:	f7ff ffe7 	bl	8003a9c <__malloc_lock>
 8003ace:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <_free_r+0x9c>)
 8003ad0:	9801      	ldr	r0, [sp, #4]
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	4615      	mov	r5, r2
 8003ad6:	b933      	cbnz	r3, 8003ae6 <_free_r+0x32>
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	6014      	str	r4, [r2, #0]
 8003adc:	b003      	add	sp, #12
 8003ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ae2:	f7ff bfe1 	b.w	8003aa8 <__malloc_unlock>
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	d90b      	bls.n	8003b02 <_free_r+0x4e>
 8003aea:	6821      	ldr	r1, [r4, #0]
 8003aec:	1862      	adds	r2, r4, r1
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bf04      	itt	eq
 8003af2:	681a      	ldreq	r2, [r3, #0]
 8003af4:	685b      	ldreq	r3, [r3, #4]
 8003af6:	6063      	str	r3, [r4, #4]
 8003af8:	bf04      	itt	eq
 8003afa:	1852      	addeq	r2, r2, r1
 8003afc:	6022      	streq	r2, [r4, #0]
 8003afe:	602c      	str	r4, [r5, #0]
 8003b00:	e7ec      	b.n	8003adc <_free_r+0x28>
 8003b02:	461a      	mov	r2, r3
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b10b      	cbz	r3, 8003b0c <_free_r+0x58>
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	d9fa      	bls.n	8003b02 <_free_r+0x4e>
 8003b0c:	6811      	ldr	r1, [r2, #0]
 8003b0e:	1855      	adds	r5, r2, r1
 8003b10:	42a5      	cmp	r5, r4
 8003b12:	d10b      	bne.n	8003b2c <_free_r+0x78>
 8003b14:	6824      	ldr	r4, [r4, #0]
 8003b16:	4421      	add	r1, r4
 8003b18:	1854      	adds	r4, r2, r1
 8003b1a:	42a3      	cmp	r3, r4
 8003b1c:	6011      	str	r1, [r2, #0]
 8003b1e:	d1dd      	bne.n	8003adc <_free_r+0x28>
 8003b20:	681c      	ldr	r4, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	6053      	str	r3, [r2, #4]
 8003b26:	4421      	add	r1, r4
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	e7d7      	b.n	8003adc <_free_r+0x28>
 8003b2c:	d902      	bls.n	8003b34 <_free_r+0x80>
 8003b2e:	230c      	movs	r3, #12
 8003b30:	6003      	str	r3, [r0, #0]
 8003b32:	e7d3      	b.n	8003adc <_free_r+0x28>
 8003b34:	6825      	ldr	r5, [r4, #0]
 8003b36:	1961      	adds	r1, r4, r5
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	bf04      	itt	eq
 8003b3c:	6819      	ldreq	r1, [r3, #0]
 8003b3e:	685b      	ldreq	r3, [r3, #4]
 8003b40:	6063      	str	r3, [r4, #4]
 8003b42:	bf04      	itt	eq
 8003b44:	1949      	addeq	r1, r1, r5
 8003b46:	6021      	streq	r1, [r4, #0]
 8003b48:	6054      	str	r4, [r2, #4]
 8003b4a:	e7c7      	b.n	8003adc <_free_r+0x28>
 8003b4c:	b003      	add	sp, #12
 8003b4e:	bd30      	pop	{r4, r5, pc}
 8003b50:	200000a8 	.word	0x200000a8

08003b54 <_read_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d07      	ldr	r5, [pc, #28]	; (8003b74 <_read_r+0x20>)
 8003b58:	4604      	mov	r4, r0
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	602a      	str	r2, [r5, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fc ffee 	bl	8000b44 <_read>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_read_r+0x1e>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_read_r+0x1e>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000108 	.word	0x20000108

08003b78 <_fstat_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4d07      	ldr	r5, [pc, #28]	; (8003b98 <_fstat_r+0x20>)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	602b      	str	r3, [r5, #0]
 8003b86:	f7fd f822 	bl	8000bce <_fstat>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	d102      	bne.n	8003b94 <_fstat_r+0x1c>
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	b103      	cbz	r3, 8003b94 <_fstat_r+0x1c>
 8003b92:	6023      	str	r3, [r4, #0]
 8003b94:	bd38      	pop	{r3, r4, r5, pc}
 8003b96:	bf00      	nop
 8003b98:	20000108 	.word	0x20000108

08003b9c <_isatty_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d06      	ldr	r5, [pc, #24]	; (8003bb8 <_isatty_r+0x1c>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	f7fd f821 	bl	8000bee <_isatty>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d102      	bne.n	8003bb6 <_isatty_r+0x1a>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	b103      	cbz	r3, 8003bb6 <_isatty_r+0x1a>
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
 8003bb8:	20000108 	.word	0x20000108

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
