
ASSIGN02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007824  08007824  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800782c  0800782c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000090  080078c4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  080078c4  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017719  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346d  00000000  00000000  000377d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  0003bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002258b  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136df  00000000  00000000  0005efa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a8e  00000000  00000000  00072682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004254  00000000  00000000  0013c164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080077f0 	.word	0x080077f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080077f0 	.word	0x080077f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd3e 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f9ce 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa8e 	bl	80009ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 fa34 	bl	800093c <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80004d4:	f006 fd78 	bl	8006fc8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 fa5e 	bl	8000998 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004dc:	f006 fd9a 	bl	8007014 <MX_USB_HOST_Process>
//    if(joyStateStatus[0] == 1){
//    	HAL_Delay(500);
//    }
    /*State machine Start*/
//    StateMachine();
    StateMachine2();
 80004e0:	f000 f910 	bl	8000704 <StateMachine2>
    HAL_Delay(100);
 80004e4:	2064      	movs	r0, #100	; 0x64
 80004e6:	f000 fd9f 	bl	8001028 <HAL_Delay>
    MX_USB_HOST_Process();
 80004ea:	e7f7      	b.n	80004dc <main+0x1c>

080004ec <readJoysticks>:
  /* USER CODE END 3 */
}

/*Colton Functions Start*/
void readJoysticks(int joyStickState[], int size)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]

	GPIO_PinState joy_a_status = HAL_GPIO_ReadPin(JOY_A_GPIO_Port, JOY_A_Pin);
 80004f6:	2110      	movs	r1, #16
 80004f8:	481a      	ldr	r0, [pc, #104]	; (8000564 <readJoysticks+0x78>)
 80004fa:	f001 f867 	bl	80015cc <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState joy_b_status = HAL_GPIO_ReadPin(JOY_B_GPIO_Port, JOY_B_Pin);
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4817      	ldr	r0, [pc, #92]	; (8000564 <readJoysticks+0x78>)
 8000506:	f001 f861 	bl	80015cc <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState joy_c_status = HAL_GPIO_ReadPin(JOY_C_GPIO_Port, JOY_C_Pin);
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	4815      	ldr	r0, [pc, #84]	; (8000568 <readJoysticks+0x7c>)
 8000514:	f001 f85a 	bl	80015cc <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	737b      	strb	r3, [r7, #13]
	GPIO_PinState joy_d_status = HAL_GPIO_ReadPin(JOY_D_GPIO_Port, JOY_D_Pin);
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	4813      	ldr	r0, [pc, #76]	; (800056c <readJoysticks+0x80>)
 8000520:	f001 f854 	bl	80015cc <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	733b      	strb	r3, [r7, #12]
	GPIO_PinState joy_ctr_status = HAL_GPIO_ReadPin(JOY_CTR_GPIO_Port, JOY_CTR_Pin);
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	4810      	ldr	r0, [pc, #64]	; (800056c <readJoysticks+0x80>)
 800052c:	f001 f84e 	bl	80015cc <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	72fb      	strb	r3, [r7, #11]

	joyStickState[0] = joy_a_status;
 8000534:	7bfa      	ldrb	r2, [r7, #15]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
	joyStickState[1] = joy_b_status;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3304      	adds	r3, #4
 800053e:	7bba      	ldrb	r2, [r7, #14]
 8000540:	601a      	str	r2, [r3, #0]
	joyStickState[2] = joy_c_status;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3308      	adds	r3, #8
 8000546:	7b7a      	ldrb	r2, [r7, #13]
 8000548:	601a      	str	r2, [r3, #0]
	joyStickState[3] = joy_d_status;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	330c      	adds	r3, #12
 800054e:	7b3a      	ldrb	r2, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
	joyStickState[4] = joy_ctr_status;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	3310      	adds	r3, #16
 8000556:	7afa      	ldrb	r2, [r7, #11]
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020000 	.word	0x40020000
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800

08000570 <debounce>:

void debounce(float y[],int size)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	466b      	mov	r3, sp
 800057c:	461d      	mov	r5, r3
	int joyStateStatus[size];
 800057e:	683c      	ldr	r4, [r7, #0]
 8000580:	1e63      	subs	r3, r4, #1
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	4623      	mov	r3, r4
 8000586:	4618      	mov	r0, r3
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	f04f 0200 	mov.w	r2, #0
 8000590:	f04f 0300 	mov.w	r3, #0
 8000594:	014b      	lsls	r3, r1, #5
 8000596:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800059a:	0142      	lsls	r2, r0, #5
 800059c:	4623      	mov	r3, r4
 800059e:	4618      	mov	r0, r3
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	f04f 0200 	mov.w	r2, #0
 80005a8:	f04f 0300 	mov.w	r3, #0
 80005ac:	014b      	lsls	r3, r1, #5
 80005ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80005b2:	0142      	lsls	r2, r0, #5
 80005b4:	4623      	mov	r3, r4
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	3307      	adds	r3, #7
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	ebad 0d03 	sub.w	sp, sp, r3
 80005c2:	466b      	mov	r3, sp
 80005c4:	3303      	adds	r3, #3
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	617b      	str	r3, [r7, #20]
	float a = 0.5;
 80005cc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80005d0:	613b      	str	r3, [r7, #16]
	float b = 1 - a;
 80005d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80005da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005de:	edc7 7a03 	vstr	s15, [r7, #12]

	//zero the incoming array
	for(int i = 0; i < size; i++){
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
 80005e6:	e009      	b.n	80005fc <debounce+0x8c>
		y[i] = 0;
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	f04f 0200 	mov.w	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < size; i++){
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3301      	adds	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	69fa      	ldr	r2, [r7, #28]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf1      	blt.n	80005e8 <debounce+0x78>
	}

	//pseudocode mentioned in assignment
	for(int i = 0; i < 10; i++)
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
 8000608:	e031      	b.n	800066e <debounce+0xfe>
	{
		//read the current state of the joySticks
		readJoysticks(joyStateStatus,5);
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff6c 	bl	80004ec <readJoysticks>

		//Set joyStatePreviousStatus equal to what was last read
		for(int i = 0; i <= 4; i++){
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
 8000618:	e020      	b.n	800065c <debounce+0xec>
			y[i] = a*y[i] + b*joyStateStatus[i];
 800061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	ed93 7a00 	vldr	s14, [r3]
 8000626:	edd7 7a04 	vldr	s15, [r7, #16]
 800062a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000636:	ee07 3a90 	vmov	s15, r3
 800063a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800063e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000652:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i <= 4; i++){
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	3301      	adds	r3, #1
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	2b04      	cmp	r3, #4
 8000660:	dddb      	ble.n	800061a <debounce+0xaa>
		}
		HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fce0 	bl	8001028 <HAL_Delay>
	for(int i = 0; i < 10; i++)
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	3301      	adds	r3, #1
 800066c:	623b      	str	r3, [r7, #32]
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	2b09      	cmp	r3, #9
 8000672:	ddca      	ble.n	800060a <debounce+0x9a>
 8000674:	46ad      	mov	sp, r5
	}
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000680 <WriteLED>:
	joyStickState[3] = joy_d_status;
	joyStickState[4] = joy_ctr_status;
}

void WriteLED(int LED_Colour, int LED_Status)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d81b      	bhi.n	80006c8 <WriteLED+0x48>
 8000690:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <WriteLED+0x18>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006b1 	.word	0x080006b1
 80006a0:	080006b9 	.word	0x080006b9
 80006a4:	080006c1 	.word	0x080006c1
	int gpioPin;
	int ledNowStatus;

	switch (LED_Colour) {
		case GREEN:
			gpioPin = GPIO_PIN_12;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	60fb      	str	r3, [r7, #12]
			break;
 80006ae:	e00b      	b.n	80006c8 <WriteLED+0x48>
		case ORANGE:
			gpioPin = GPIO_PIN_13;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	60fb      	str	r3, [r7, #12]
			break;
 80006b6:	e007      	b.n	80006c8 <WriteLED+0x48>
		case RED:
			gpioPin = GPIO_PIN_14;
 80006b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006bc:	60fb      	str	r3, [r7, #12]
			break;
 80006be:	e003      	b.n	80006c8 <WriteLED+0x48>
		case BLUE:
			gpioPin = GPIO_PIN_15;
 80006c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c4:	60fb      	str	r3, [r7, #12]
			break;
 80006c6:	bf00      	nop
	}

	//Current Status
	if((GPIOD->ODR & gpioPin) == gpioPin){
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <WriteLED+0x80>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	401a      	ands	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d102      	bne.n	80006dc <WriteLED+0x5c>
		ledNowStatus = LED_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	e001      	b.n	80006e0 <WriteLED+0x60>
	}
	else{
		ledNowStatus = LED_OFF;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
	}

	if(ledNowStatus != LED_Status){
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d005      	beq.n	80006f4 <WriteLED+0x74>
		GPIOD->ODR = GPIOD->ODR ^ gpioPin; //Toggle LED
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <WriteLED+0x80>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4904      	ldr	r1, [pc, #16]	; (8000700 <WriteLED+0x80>)
 80006f0:	4053      	eors	r3, r2
 80006f2:	614b      	str	r3, [r1, #20]
	}
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40020c00 	.word	0x40020c00

08000704 <StateMachine2>:
void StateMachine2()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
    float joyStateStatus[5];
    debounce(joyStateStatus,5);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff2e 	bl	8000570 <debounce>
//	readJoysticks(joyStateStatus,5);
	static int currentState = ALL_LED_OFF;

	if(currentState == ALL_LED_OFF){
 8000714:	4b41      	ldr	r3, [pc, #260]	; (800081c <StateMachine2+0x118>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d126      	bne.n	800076a <StateMachine2+0x66>
		if(joyStateStatus[JOY_LEFT] == 0){
 800071c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000720:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	d105      	bne.n	8000736 <StateMachine2+0x32>
			currentState = LEFT_LED_ON;
 800072a:	4b3c      	ldr	r3, [pc, #240]	; (800081c <StateMachine2+0x118>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
			setLeftLedOn2();
 8000730:	f000 f882 	bl	8000838 <setLeftLedOn2>
			setLeftLedOn2();
		}
	}


}
 8000734:	e06e      	b.n	8000814 <StateMachine2+0x110>
		else if (joyStateStatus[JOY_RIGHT] == 0){
 8000736:	edd7 7a04 	vldr	s15, [r7, #16]
 800073a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000742:	d105      	bne.n	8000750 <StateMachine2+0x4c>
			currentState = RIGHT_LED_ON;
 8000744:	4b35      	ldr	r3, [pc, #212]	; (800081c <StateMachine2+0x118>)
 8000746:	2202      	movs	r2, #2
 8000748:	601a      	str	r2, [r3, #0]
			setRightLedOn2();
 800074a:	f000 f881 	bl	8000850 <setRightLedOn2>
}
 800074e:	e061      	b.n	8000814 <StateMachine2+0x110>
		else if (joyStateStatus[JOY_DOWN] == 0){
 8000750:	edd7 7a03 	vldr	s15, [r7, #12]
 8000754:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075c:	d15a      	bne.n	8000814 <StateMachine2+0x110>
			currentState = LEFT_LED_ON;
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <StateMachine2+0x118>)
 8000760:	2201      	movs	r2, #1
 8000762:	601a      	str	r2, [r3, #0]
			setLeftLedOn2();
 8000764:	f000 f868 	bl	8000838 <setLeftLedOn2>
}
 8000768:	e054      	b.n	8000814 <StateMachine2+0x110>
	else if(currentState == LEFT_LED_ON){
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <StateMachine2+0x118>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d126      	bne.n	80007c0 <StateMachine2+0xbc>
		if(joyStateStatus[JOY_CENTRE] == 0){
 8000772:	edd7 7a05 	vldr	s15, [r7, #20]
 8000776:	eef5 7a40 	vcmp.f32	s15, #0.0
 800077a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077e:	d105      	bne.n	800078c <StateMachine2+0x88>
			currentState = ALL_LED_OFF;
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <StateMachine2+0x118>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
			setAllLedOff2();
 8000786:	f000 f84b 	bl	8000820 <setAllLedOff2>
}
 800078a:	e043      	b.n	8000814 <StateMachine2+0x110>
		else if (joyStateStatus[JOY_RIGHT] == 0){
 800078c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000790:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000798:	d105      	bne.n	80007a6 <StateMachine2+0xa2>
			currentState = RIGHT_LED_ON;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <StateMachine2+0x118>)
 800079c:	2202      	movs	r2, #2
 800079e:	601a      	str	r2, [r3, #0]
			setRightLedOn2();
 80007a0:	f000 f856 	bl	8000850 <setRightLedOn2>
}
 80007a4:	e036      	b.n	8000814 <StateMachine2+0x110>
		else if (joyStateStatus[JOY_DOWN] == 0){
 80007a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b2:	d12f      	bne.n	8000814 <StateMachine2+0x110>
			currentState = RIGHT_LED_ON;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <StateMachine2+0x118>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	601a      	str	r2, [r3, #0]
			setRightLedOn2();
 80007ba:	f000 f849 	bl	8000850 <setRightLedOn2>
}
 80007be:	e029      	b.n	8000814 <StateMachine2+0x110>
	else if(currentState == RIGHT_LED_ON){
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <StateMachine2+0x118>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d125      	bne.n	8000814 <StateMachine2+0x110>
		if(joyStateStatus[JOY_CENTRE] == 0){
 80007c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80007cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d4:	d105      	bne.n	80007e2 <StateMachine2+0xde>
			currentState = ALL_LED_OFF;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <StateMachine2+0x118>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
			setAllLedOff2();
 80007dc:	f000 f820 	bl	8000820 <setAllLedOff2>
}
 80007e0:	e018      	b.n	8000814 <StateMachine2+0x110>
		else if (joyStateStatus[JOY_LEFT] == 0){
 80007e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ee:	d105      	bne.n	80007fc <StateMachine2+0xf8>
			currentState = LEFT_LED_ON;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <StateMachine2+0x118>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
			setLeftLedOn2();
 80007f6:	f000 f81f 	bl	8000838 <setLeftLedOn2>
}
 80007fa:	e00b      	b.n	8000814 <StateMachine2+0x110>
		else if (joyStateStatus[JOY_DOWN] == 0){
 80007fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000800:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000808:	d104      	bne.n	8000814 <StateMachine2+0x110>
			currentState = LEFT_LED_ON;
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <StateMachine2+0x118>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
			setLeftLedOn2();
 8000810:	f000 f812 	bl	8000838 <setLeftLedOn2>
}
 8000814:	bf00      	nop
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000ac 	.word	0x200000ac

08000820 <setAllLedOff2>:
void 	setAllLedOff2()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	WriteLED(GREEN, LED_OFF); //left
 8000824:	2100      	movs	r1, #0
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff ff2a 	bl	8000680 <WriteLED>
	WriteLED(RED, LED_OFF); //right
 800082c:	2100      	movs	r1, #0
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff26 	bl	8000680 <WriteLED>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <setLeftLedOn2>:
void 	setLeftLedOn2()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	WriteLED(GREEN, LED_ON); //left
 800083c:	2101      	movs	r1, #1
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff ff1e 	bl	8000680 <WriteLED>
	WriteLED(RED, LED_OFF); //right
 8000844:	2100      	movs	r1, #0
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff ff1a 	bl	8000680 <WriteLED>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <setRightLedOn2>:
void	setRightLedOn2()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	WriteLED(GREEN, LED_OFF); //left
 8000854:	2100      	movs	r1, #0
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff12 	bl	8000680 <WriteLED>
	WriteLED(RED, LED_ON); //right
 800085c:	2101      	movs	r1, #1
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff ff0e 	bl	8000680 <WriteLED>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f006 feea 	bl	8007650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <SystemClock_Config+0xcc>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd0>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e6:	2307      	movs	r3, #7
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fcd4 	bl	800329c <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008fa:	f000 f9bb 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800090a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	2105      	movs	r1, #5
 800091c:	4618      	mov	r0, r3
 800091e:	f002 ff2d 	bl	800377c <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000928:	f000 f9a4 	bl	8000c74 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3750      	adds	r7, #80	; 0x50
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_I2C1_Init+0x50>)
 8000942:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_I2C1_Init+0x54>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_I2C1_Init+0x50>)
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_I2C1_Init+0x58>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_I2C1_Init+0x50>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_I2C1_Init+0x50>)
 800097a:	f002 fb4b 	bl	8003014 <HAL_I2C_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000984:	f000 f976 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000c4 	.word	0x200000c4
 8000990:	40005400 	.word	0x40005400
 8000994:	000186a0 	.word	0x000186a0

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART2_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009d0:	f003 f8d0 	bl	8003b74 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f94b 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000118 	.word	0x20000118
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b94      	ldr	r3, [pc, #592]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a93      	ldr	r2, [pc, #588]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b91      	ldr	r3, [pc, #580]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	4b8d      	ldr	r3, [pc, #564]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a8c      	ldr	r2, [pc, #560]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b8a      	ldr	r3, [pc, #552]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b86      	ldr	r3, [pc, #536]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a85      	ldr	r2, [pc, #532]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b83      	ldr	r3, [pc, #524]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b7f      	ldr	r3, [pc, #508]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a7e      	ldr	r2, [pc, #504]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b7c      	ldr	r3, [pc, #496]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b78      	ldr	r3, [pc, #480]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a77      	ldr	r2, [pc, #476]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b75      	ldr	r3, [pc, #468]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b71      	ldr	r3, [pc, #452]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a70      	ldr	r2, [pc, #448]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b6e      	ldr	r3, [pc, #440]	; (8000c58 <MX_GPIO_Init+0x26c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	486b      	ldr	r0, [pc, #428]	; (8000c5c <MX_GPIO_Init+0x270>)
 8000ab0:	f000 fda4 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4869      	ldr	r0, [pc, #420]	; (8000c60 <MX_GPIO_Init+0x274>)
 8000aba:	f000 fd9f 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ac4:	4867      	ldr	r0, [pc, #412]	; (8000c64 <MX_GPIO_Init+0x278>)
 8000ac6:	f000 fd99 	bl	80015fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aca:	2308      	movs	r3, #8
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	485e      	ldr	r0, [pc, #376]	; (8000c5c <MX_GPIO_Init+0x270>)
 8000ae2:	f000 fbd7 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4858      	ldr	r0, [pc, #352]	; (8000c60 <MX_GPIO_Init+0x274>)
 8000afe:	f000 fbc9 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b02:	2308      	movs	r3, #8
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4850      	ldr	r0, [pc, #320]	; (8000c60 <MX_GPIO_Init+0x274>)
 8000b1e:	f000 fbb9 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b26:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <MX_GPIO_Init+0x27c>)
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	484d      	ldr	r0, [pc, #308]	; (8000c6c <MX_GPIO_Init+0x280>)
 8000b36:	f000 fbad 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_A_Pin JOY_B_Pin */
  GPIO_InitStruct.Pin = JOY_A_Pin|JOY_B_Pin;
 8000b3a:	2350      	movs	r3, #80	; 0x50
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4847      	ldr	r0, [pc, #284]	; (8000c6c <MX_GPIO_Init+0x280>)
 8000b4e:	f000 fba1 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b62:	2305      	movs	r3, #5
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483f      	ldr	r0, [pc, #252]	; (8000c6c <MX_GPIO_Init+0x280>)
 8000b6e:	f000 fb91 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b72:	2304      	movs	r3, #4
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	483a      	ldr	r0, [pc, #232]	; (8000c70 <MX_GPIO_Init+0x284>)
 8000b86:	f000 fb85 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4832      	ldr	r0, [pc, #200]	; (8000c70 <MX_GPIO_Init+0x284>)
 8000ba8:	f000 fb74 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_C_Pin */
  GPIO_InitStruct.Pin = JOY_C_Pin;
 8000bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_C_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	482b      	ldr	r0, [pc, #172]	; (8000c70 <MX_GPIO_Init+0x284>)
 8000bc2:	f000 fb67 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bc6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4821      	ldr	r0, [pc, #132]	; (8000c64 <MX_GPIO_Init+0x278>)
 8000be0:	f000 fb58 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_D_Pin JOY_CTR_Pin */
  GPIO_InitStruct.Pin = JOY_D_Pin|JOY_CTR_Pin;
 8000be4:	23c0      	movs	r3, #192	; 0xc0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481a      	ldr	r0, [pc, #104]	; (8000c60 <MX_GPIO_Init+0x274>)
 8000bf8:	f000 fb4c 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bfc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4811      	ldr	r0, [pc, #68]	; (8000c60 <MX_GPIO_Init+0x274>)
 8000c1a:	f000 fb3b 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_GPIO_Init+0x278>)
 8000c32:	f000 fb2f 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_GPIO_Init+0x27c>)
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_GPIO_Init+0x270>)
 8000c4a:	f000 fb23 	bl	8001294 <HAL_GPIO_Init>

}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	; 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	10120000 	.word	0x10120000
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020400 	.word	0x40020400

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f000 faa6 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_I2C_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12c      	bne.n	8000d4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d14:	2312      	movs	r3, #18
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d20:	2304      	movs	r3, #4
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <HAL_I2C_MspInit+0x8c>)
 8000d2c:	f000 fab2 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_I2C_MspInit+0x88>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40005400 	.word	0x40005400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020400 	.word	0x40020400

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12b      	bne.n	8000dda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0x8c>)
 8000dd6:	f000 fa5d 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004400 	.word	0x40004400
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8d4 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <OTG_FS_IRQHandler+0x10>)
 8000e4a:	f000 fe7f 	bl	8001b4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000534 	.word	0x20000534

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f006 fba8 	bl	80075dc <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	200000b0 	.word	0x200000b0
 8000ec0:	20000808 	.word	0x20000808

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <SystemInit+0x28>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <SystemInit+0x28>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SystemInit+0x28>)
 8000eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ede:	609a      	str	r2, [r3, #8]
#endif
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ef4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr  r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd3 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f006 fb63 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff facd 	bl	80004c0 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f2c:	08007834 	.word	0x08007834
  ldr  r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f34:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f38:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f3c:	20000808 	.word	0x20000808

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f94f 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fe82 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f967 	bl	800127a <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f92f 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	20000158 	.word	0x20000158

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000158 	.word	0x20000158

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff29 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff3e 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff31 	bl	80010d4 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	e16b      	b.n	8001588 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f040 815a 	bne.w	8001582 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d00b      	beq.n	80012ee <HAL_GPIO_Init+0x5a>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e2:	2b11      	cmp	r3, #17
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d130      	bne.n	8001350 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 0201 	and.w	r2, r3, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0xfc>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d123      	bne.n	80013d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80b4 	beq.w	8001582 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <HAL_GPIO_Init+0x30c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a5f      	ldr	r2, [pc, #380]	; (80015a0 <HAL_GPIO_Init+0x30c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <HAL_GPIO_Init+0x30c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001436:	4a5b      	ldr	r2, [pc, #364]	; (80015a4 <HAL_GPIO_Init+0x310>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x314>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d02b      	beq.n	80014ba <HAL_GPIO_Init+0x226>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a51      	ldr	r2, [pc, #324]	; (80015ac <HAL_GPIO_Init+0x318>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x222>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <HAL_GPIO_Init+0x31c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x21e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4f      	ldr	r2, [pc, #316]	; (80015b4 <HAL_GPIO_Init+0x320>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x21a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4e      	ldr	r2, [pc, #312]	; (80015b8 <HAL_GPIO_Init+0x324>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x216>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <HAL_GPIO_Init+0x328>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x212>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <HAL_GPIO_Init+0x32c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x20e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x20a>
 800149a:	2307      	movs	r3, #7
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_Init+0x228>
 800149e:	2308      	movs	r3, #8
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_GPIO_Init+0x310>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_GPIO_Init+0x334>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014fe:	4a32      	ldr	r2, [pc, #200]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f ae90 	bls.w	80012b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40021c00 	.word	0x40021c00
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e001      	b.n	80015ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800162e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001630:	b08f      	sub	sp, #60	; 0x3c
 8001632:	af0a      	add	r7, sp, #40	; 0x28
 8001634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e054      	b.n	80016ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f005 fd12 	bl	8007084 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fed4 	bl	800442c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	687e      	ldr	r6, [r7, #4]
 800168c:	466d      	mov	r5, sp
 800168e:	f106 0410 	add.w	r4, r6, #16
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169e:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a2:	1d33      	adds	r3, r6, #4
 80016a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f002 fe4e 	bl	8004348 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fecb 	bl	800444e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	687e      	ldr	r6, [r7, #4]
 80016c0:	466d      	mov	r5, sp
 80016c2:	f106 0410 	add.w	r4, r6, #16
 80016c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d6:	1d33      	adds	r3, r6, #4
 80016d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f002 ffde 	bl	800469c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016f2:	b590      	push	{r4, r7, lr}
 80016f4:	b089      	sub	sp, #36	; 0x24
 80016f6:	af04      	add	r7, sp, #16
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	4608      	mov	r0, r1
 80016fc:	4611      	mov	r1, r2
 80016fe:	461a      	mov	r2, r3
 8001700:	4603      	mov	r3, r0
 8001702:	70fb      	strb	r3, [r7, #3]
 8001704:	460b      	mov	r3, r1
 8001706:	70bb      	strb	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_HCD_HC_Init+0x28>
 8001716:	2302      	movs	r3, #2
 8001718:	e07f      	b.n	800181a <HAL_HCD_HC_Init+0x128>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	333d      	adds	r3, #61	; 0x3d
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3338      	adds	r3, #56	; 0x38
 8001746:	787a      	ldrb	r2, [r7, #1]
 8001748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	3340      	adds	r3, #64	; 0x40
 800175a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800175c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	3339      	adds	r3, #57	; 0x39
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	333f      	adds	r3, #63	; 0x3f
 8001782:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001786:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	78bb      	ldrb	r3, [r7, #2]
 800178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001790:	b2d8      	uxtb	r0, r3
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	333a      	adds	r3, #58	; 0x3a
 80017a0:	4602      	mov	r2, r0
 80017a2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da0a      	bge.n	80017c2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	333b      	adds	r3, #59	; 0x3b
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e009      	b.n	80017d6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	333b      	adds	r3, #59	; 0x3b
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	333c      	adds	r3, #60	; 0x3c
 80017e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017ea:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	787c      	ldrb	r4, [r7, #1]
 80017f2:	78ba      	ldrb	r2, [r7, #2]
 80017f4:	78f9      	ldrb	r1, [r7, #3]
 80017f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4623      	mov	r3, r4
 8001808:	f003 f8ca 	bl	80049a0 <USB_HC_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}

08001822 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_HCD_HC_Halt+0x1e>
 800183c:	2302      	movs	r3, #2
 800183e:	e00f      	b.n	8001860 <HAL_HCD_HC_Halt+0x3e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fb04 	bl	8004e5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4603      	mov	r3, r0
 8001878:	70fb      	strb	r3, [r7, #3]
 800187a:	460b      	mov	r3, r1
 800187c:	70bb      	strb	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	333b      	adds	r3, #59	; 0x3b
 8001892:	78ba      	ldrb	r2, [r7, #2]
 8001894:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	333f      	adds	r3, #63	; 0x3f
 80018a6:	787a      	ldrb	r2, [r7, #1]
 80018a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018aa:	7c3b      	ldrb	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d114      	bne.n	80018da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	3342      	adds	r3, #66	; 0x42
 80018c0:	2203      	movs	r2, #3
 80018c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	333d      	adds	r3, #61	; 0x3d
 80018d4:	7f3a      	ldrb	r2, [r7, #28]
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e009      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2202      	movs	r2, #2
 80018ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018ee:	787b      	ldrb	r3, [r7, #1]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	f200 80d6 	bhi.w	8001aa2 <HAL_HCD_HC_SubmitRequest+0x23a>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001a8d 	.word	0x08001a8d
 8001904:	08001979 	.word	0x08001979
 8001908:	08001a03 	.word	0x08001a03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800190c:	7c3b      	ldrb	r3, [r7, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	f040 80c9 	bne.w	8001aa6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80c5 	bne.w	8001aa6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800191c:	8b3b      	ldrh	r3, [r7, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3351      	adds	r3, #81	; 0x51
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3351      	adds	r3, #81	; 0x51
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001960:	e0a1      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	3342      	adds	r3, #66	; 0x42
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
      break;
 8001976:	e096      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001978:	78bb      	ldrb	r3, [r7, #2]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d120      	bne.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	3351      	adds	r3, #81	; 0x51
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	3342      	adds	r3, #66	; 0x42
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019a8:	e07e      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	3342      	adds	r3, #66	; 0x42
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
      break;
 80019be:	e073      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3350      	adds	r3, #80	; 0x50
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3342      	adds	r3, #66	; 0x42
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
      break;
 80019ea:	e05d      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	3342      	adds	r3, #66	; 0x42
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
      break;
 8001a00:	e052      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a02:	78bb      	ldrb	r3, [r7, #2]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d120      	bne.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	3351      	adds	r3, #81	; 0x51
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10a      	bne.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3342      	adds	r3, #66	; 0x42
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a32:	e039      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	3342      	adds	r3, #66	; 0x42
 8001a44:	2202      	movs	r2, #2
 8001a46:	701a      	strb	r2, [r3, #0]
      break;
 8001a48:	e02e      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	3350      	adds	r3, #80	; 0x50
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10a      	bne.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3342      	adds	r3, #66	; 0x42
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
      break;
 8001a74:	e018      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3342      	adds	r3, #66	; 0x42
 8001a86:	2202      	movs	r2, #2
 8001a88:	701a      	strb	r2, [r3, #0]
      break;
 8001a8a:	e00d      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3342      	adds	r3, #66	; 0x42
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
      break;
 8001aa0:	e002      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001aa2:	bf00      	nop
 8001aa4:	e000      	b.n	8001aa8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001aa6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3344      	adds	r3, #68	; 0x44
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	8b39      	ldrh	r1, [r7, #24]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4403      	add	r3, r0
 8001acc:	3348      	adds	r3, #72	; 0x48
 8001ace:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	335c      	adds	r3, #92	; 0x5c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	334c      	adds	r3, #76	; 0x4c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	3339      	adds	r3, #57	; 0x39
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b0c:	78fa      	ldrb	r2, [r7, #3]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	335d      	adds	r3, #93	; 0x5d
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	3338      	adds	r3, #56	; 0x38
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	18d1      	adds	r1, r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f003 f83a 	bl	8004bb4 <USB_HC_StartXfer>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop

08001b4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fd57 	bl	8004616 <USB_GetMode>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f040 80ef 	bne.w	8001d4e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fd3b 	bl	80045f0 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80e5 	beq.w	8001d4c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fd32 	bl	80045f0 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b96:	d104      	bne.n	8001ba2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fd22 	bl	80045f0 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bb6:	d104      	bne.n	8001bc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fd12 	bl	80045f0 <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bd6:	d104      	bne.n	8001be2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001be0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fd02 	bl	80045f0 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d103      	bne.n	8001bfe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fcf4 	bl	80045f0 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c12:	d115      	bne.n	8001c40 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 faa6 	bl	8007180 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fdea 	bl	8004814 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fcd3 	bl	80045f0 <USB_ReadInterrupts>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c54:	d102      	bne.n	8001c5c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f001 f968 	bl	8002f2c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fcc5 	bl	80045f0 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d106      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f005 fa69 	bl	8007148 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fcb4 	bl	80045f0 <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c92:	d138      	bne.n	8001d06 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 f8cf 	bl	8004e3c <USB_HC_ReadInterrupt>
 8001c9e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e025      	b.n	8001cf2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d018      	beq.n	8001cec <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd0:	d106      	bne.n	8001ce0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8cf 	bl	8001e7c <HCD_HC_IN_IRQHandler>
 8001cde:	e005      	b.n	8001cec <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fcfd 	bl	80026e6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3d4      	bcc.n	8001ca6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 fc70 	bl	80045f0 <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d101      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x1d2>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_HCD_IRQHandler+0x1d4>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d014      	beq.n	8001d4e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0210 	bic.w	r2, r2, #16
 8001d32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f001 f84b 	bl	8002dd0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0210 	orr.w	r2, r2, #16
 8001d48:	619a      	str	r2, [r3, #24]
 8001d4a:	e000      	b.n	8001d4e <HAL_HCD_IRQHandler+0x202>
      return;
 8001d4c:	bf00      	nop
    }
  }
}
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_HCD_Start+0x16>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e013      	b.n	8001d92 <HAL_HCD_Start+0x3e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fb47 	bl	800440a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fdaa 	bl	80048dc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_HCD_Stop+0x16>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e00d      	b.n	8001dcc <HAL_HCD_Stop+0x32>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 f989 	bl	80050d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 fd51 	bl	8004888 <USB_ResetPort>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	335c      	adds	r3, #92	; 0x5c
 8001e0c:	781b      	ldrb	r3, [r3, #0]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	334c      	adds	r3, #76	; 0x4c
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fd93 	bl	800497c <USB_GetCurrentFrame>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 fd6e 	bl	800494e <USB_GetHostSpeed>
 8001e72:	4603      	mov	r3, r0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d119      	bne.n	8001ee0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2304      	movs	r3, #4
 8001ebc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	0151      	lsls	r1, r2, #5
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	440a      	add	r2, r1
 8001ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	60d3      	str	r3, [r2, #12]
 8001ede:	e0ce      	b.n	800207e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef6:	d12c      	bne.n	8001f52 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	461a      	mov	r2, r3
 8001f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	335d      	adds	r3, #93	; 0x5d
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	0151      	lsls	r1, r2, #5
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	440a      	add	r2, r1
 8001f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 ff87 	bl	8004e5e <USB_HC_Halt>
 8001f50:	e095      	b.n	800207e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d109      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	461a      	mov	r2, r3
 8001f76:	2320      	movs	r3, #32
 8001f78:	6093      	str	r3, [r2, #8]
 8001f7a:	e080      	b.n	800207e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d134      	bne.n	8001ffc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	0151      	lsls	r1, r2, #5
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	440a      	add	r2, r1
 8001fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	335d      	adds	r3, #93	; 0x5d
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 ff32 	bl	8004e5e <USB_HC_Halt>
 8001ffa:	e040      	b.n	800207e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	d134      	bne.n	800207e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	0151      	lsls	r1, r2, #5
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	440a      	add	r2, r1
 800202a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f002 ff0d 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	2310      	movs	r3, #16
 8002054:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	335d      	adds	r3, #93	; 0x5d
 8002066:	2208      	movs	r2, #8
 8002068:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	461a      	mov	r2, r3
 8002078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002094:	d122      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	0151      	lsls	r1, r2, #5
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	440a      	add	r2, r1
 80020ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fecc 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020da:	e300      	b.n	80026de <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 80fd 	bne.w	80022ee <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3348      	adds	r3, #72	; 0x48
 800210c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0159      	lsls	r1, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	440b      	add	r3, r1
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002120:	1ad1      	subs	r1, r2, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4403      	add	r3, r0
 8002130:	334c      	adds	r3, #76	; 0x4c
 8002132:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	335d      	adds	r3, #93	; 0x5d
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	3358      	adds	r3, #88	; 0x58
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	461a      	mov	r2, r3
 800216a:	2301      	movs	r3, #1
 800216c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	333f      	adds	r3, #63	; 0x3f
 8002194:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002196:	2b02      	cmp	r3, #2
 8002198:	d121      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	0151      	lsls	r1, r2, #5
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	440a      	add	r2, r1
 80021b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fe4a 	bl	8004e5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2310      	movs	r3, #16
 80021da:	6093      	str	r3, [r2, #8]
 80021dc:	e070      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	333f      	adds	r3, #63	; 0x3f
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d12a      	bne.n	800224a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	0151      	lsls	r1, r2, #5
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	440a      	add	r2, r1
 800220a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800220e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002212:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	335c      	adds	r3, #92	; 0x5c
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	b2d8      	uxtb	r0, r3
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4601      	mov	r1, r0
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f004 ffaa 	bl	800719c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002248:	e03a      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	333f      	adds	r3, #63	; 0x3f
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d12f      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	3350      	adds	r3, #80	; 0x50
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2d8      	uxtb	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	3350      	adds	r3, #80	; 0x50
 800229c:	4602      	mov	r2, r0
 800229e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	b2d8      	uxtb	r0, r3
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	335c      	adds	r3, #92	; 0x5c
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4601      	mov	r1, r0
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f004 ff6e 	bl	800719c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3350      	adds	r3, #80	; 0x50
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2d8      	uxtb	r0, r3
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	3350      	adds	r3, #80	; 0x50
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]
}
 80022ec:	e1f7      	b.n	80026de <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b02      	cmp	r3, #2
 8002302:	f040 811a 	bne.w	800253a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	0151      	lsls	r1, r2, #5
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	440a      	add	r2, r1
 800231c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	335d      	adds	r3, #93	; 0x5d
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10a      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	335c      	adds	r3, #92	; 0x5c
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e0d9      	b.n	8002506 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	335d      	adds	r3, #93	; 0x5d
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d10a      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	335c      	adds	r3, #92	; 0x5c
 8002378:	2205      	movs	r2, #5
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e0c3      	b.n	8002506 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	335d      	adds	r3, #93	; 0x5d
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d00a      	beq.n	80023aa <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	335d      	adds	r3, #93	; 0x5d
 80023a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d156      	bne.n	8002458 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	3358      	adds	r3, #88	; 0x58
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1c59      	adds	r1, r3, #1
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4403      	add	r3, r0
 80023cc:	3358      	adds	r3, #88	; 0x58
 80023ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3358      	adds	r3, #88	; 0x58
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d914      	bls.n	8002410 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	3358      	adds	r3, #88	; 0x58
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	2204      	movs	r2, #4
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e009      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	335c      	adds	r3, #92	; 0x5c
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800243a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002442:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e056      	b.n	8002506 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	335d      	adds	r3, #93	; 0x5d
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d123      	bne.n	80024b6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	335c      	adds	r3, #92	; 0x5c
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002498:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024a0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e027      	b.n	8002506 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	335d      	adds	r3, #93	; 0x5d
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b07      	cmp	r3, #7
 80024ca:	d11c      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	3358      	adds	r3, #88	; 0x58
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1c59      	adds	r1, r3, #1
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4403      	add	r3, r0
 80024ee:	3358      	adds	r3, #88	; 0x58
 80024f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	335c      	adds	r3, #92	; 0x5c
 8002502:	2204      	movs	r2, #4
 8002504:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	2302      	movs	r3, #2
 8002516:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	b2d8      	uxtb	r0, r3
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4601      	mov	r1, r0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f004 fe32 	bl	800719c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002538:	e0d1      	b.n	80026de <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d13e      	bne.n	80025ce <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	0151      	lsls	r1, r2, #5
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	440a      	add	r2, r1
 8002566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3358      	adds	r3, #88	; 0x58
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4403      	add	r3, r0
 8002592:	3358      	adds	r3, #88	; 0x58
 8002594:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	335d      	adds	r3, #93	; 0x5d
 80025a6:	2206      	movs	r2, #6
 80025a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 fc52 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	6093      	str	r3, [r2, #8]
}
 80025cc:	e087      	b.n	80026de <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d17c      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	333f      	adds	r3, #63	; 0x3f
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d122      	bne.n	8002640 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	3358      	adds	r3, #88	; 0x58
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	0151      	lsls	r1, r2, #5
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	440a      	add	r2, r1
 8002624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fc10 	bl	8004e5e <USB_HC_Halt>
 800263e:	e045      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	333f      	adds	r3, #63	; 0x3f
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	333f      	adds	r3, #63	; 0x3f
 8002666:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002668:	2b02      	cmp	r3, #2
 800266a:	d12f      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	3358      	adds	r3, #88	; 0x58
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d121      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	335d      	adds	r3, #93	; 0x5d
 8002698:	2203      	movs	r2, #3
 800269a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	0151      	lsls	r1, r2, #5
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	440a      	add	r2, r1
 80026b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fbc9 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	2310      	movs	r3, #16
 80026dc:	6093      	str	r3, [r2, #8]
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d119      	bne.n	800274a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	461a      	mov	r2, r3
 8002724:	2304      	movs	r3, #4
 8002726:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	0151      	lsls	r1, r2, #5
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	440a      	add	r2, r1
 800273e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002742:	f043 0302 	orr.w	r3, r3, #2
 8002746:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002748:	e33e      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b20      	cmp	r3, #32
 800275e:	d141      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2320      	movs	r3, #32
 8002770:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	333d      	adds	r3, #61	; 0x3d
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	f040 831f 	bne.w	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	333d      	adds	r3, #61	; 0x3d
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	335c      	adds	r3, #92	; 0x5c
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	0151      	lsls	r1, r2, #5
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	440a      	add	r2, r1
 80027c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fb3e 	bl	8004e5e <USB_HC_Halt>
}
 80027e2:	e2f1      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d13f      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	335d      	adds	r3, #93	; 0x5d
 800280a:	2204      	movs	r2, #4
 800280c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	333d      	adds	r3, #61	; 0x3d
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	3358      	adds	r3, #88	; 0x58
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	0151      	lsls	r1, r2, #5
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	440a      	add	r2, r1
 800284c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fafc 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	2340      	movs	r3, #64	; 0x40
 8002876:	6093      	str	r3, [r2, #8]
}
 8002878:	e2a6      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002890:	d122      	bne.n	80028d8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 face 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	461a      	mov	r2, r3
 80028d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d4:	6093      	str	r3, [r2, #8]
}
 80028d6:	e277      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d135      	bne.n	800295a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	3358      	adds	r3, #88	; 0x58
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	0151      	lsls	r1, r2, #5
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	440a      	add	r2, r1
 8002918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fa96 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	461a      	mov	r2, r3
 8002940:	2301      	movs	r3, #1
 8002942:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	335d      	adds	r3, #93	; 0x5d
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
}
 8002958:	e236      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d12b      	bne.n	80029c8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2308      	movs	r3, #8
 8002980:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	0151      	lsls	r1, r2, #5
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	440a      	add	r2, r1
 8002998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fa56 	bl	8004e5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	335d      	adds	r3, #93	; 0x5d
 80029c2:	2205      	movs	r2, #5
 80029c4:	701a      	strb	r2, [r3, #0]
}
 80029c6:	e1ff      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d155      	bne.n	8002a8a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	3358      	adds	r3, #88	; 0x58
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	335d      	adds	r3, #93	; 0x5d
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	333d      	adds	r3, #61	; 0x3d
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d114      	bne.n	8002a46 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	333c      	adds	r3, #60	; 0x3c
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	333d      	adds	r3, #61	; 0x3d
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	0151      	lsls	r1, r2, #5
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 f9f4 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	461a      	mov	r2, r3
 8002a84:	2310      	movs	r3, #16
 8002a86:	6093      	str	r3, [r2, #8]
}
 8002a88:	e19e      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d12b      	bne.n	8002af8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	0151      	lsls	r1, r2, #5
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	440a      	add	r2, r1
 8002ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 f9c7 	bl	8004e5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	335d      	adds	r3, #93	; 0x5d
 8002ae0:	2206      	movs	r2, #6
 8002ae2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	6093      	str	r3, [r2, #8]
}
 8002af6:	e167      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0e:	d135      	bne.n	8002b7c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 f98f 	bl	8004e5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2310      	movs	r3, #16
 8002b50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	335d      	adds	r3, #93	; 0x5d
 8002b76:	2208      	movs	r2, #8
 8002b78:	701a      	strb	r2, [r3, #0]
}
 8002b7a:	e125      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	f040 811a 	bne.w	8002dc8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bae:	f023 0302 	bic.w	r3, r3, #2
 8002bb2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	335d      	adds	r3, #93	; 0x5d
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d137      	bne.n	8002c3a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	335c      	adds	r3, #92	; 0x5c
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	333f      	adds	r3, #63	; 0x3f
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d00b      	beq.n	8002c0c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	333f      	adds	r3, #63	; 0x3f
 8002c04:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	f040 80c5 	bne.w	8002d96 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3351      	adds	r3, #81	; 0x51
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2d8      	uxtb	r0, r3
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	3351      	adds	r3, #81	; 0x51
 8002c34:	4602      	mov	r2, r0
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e0ad      	b.n	8002d96 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	335d      	adds	r3, #93	; 0x5d
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d10a      	bne.n	8002c66 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e097      	b.n	8002d96 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	335d      	adds	r3, #93	; 0x5d
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d10a      	bne.n	8002c92 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	335c      	adds	r3, #92	; 0x5c
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e081      	b.n	8002d96 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	335d      	adds	r3, #93	; 0x5d
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d10a      	bne.n	8002cbe <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	335c      	adds	r3, #92	; 0x5c
 8002cb8:	2205      	movs	r2, #5
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e06b      	b.n	8002d96 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	335d      	adds	r3, #93	; 0x5d
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b06      	cmp	r3, #6
 8002cd2:	d00a      	beq.n	8002cea <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	335d      	adds	r3, #93	; 0x5d
 8002ce4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d155      	bne.n	8002d96 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3358      	adds	r3, #88	; 0x58
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c59      	adds	r1, r3, #1
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4403      	add	r3, r0
 8002d0c:	3358      	adds	r3, #88	; 0x58
 8002d0e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3358      	adds	r3, #88	; 0x58
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d914      	bls.n	8002d50 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	3358      	adds	r3, #88	; 0x58
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	335c      	adds	r3, #92	; 0x5c
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e009      	b.n	8002d64 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	335c      	adds	r3, #92	; 0x5c
 8002d60:	2202      	movs	r2, #2
 8002d62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2302      	movs	r3, #2
 8002da6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	b2d8      	uxtb	r0, r3
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	335c      	adds	r3, #92	; 0x5c
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f004 f9ea 	bl	800719c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	0c5b      	lsrs	r3, r3, #17
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e04:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d004      	beq.n	8002e16 <HCD_RXQLVL_IRQHandler+0x46>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	f000 8082 	beq.w	8002f18 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e14:	e083      	b.n	8002f1e <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d07f      	beq.n	8002f1c <HCD_RXQLVL_IRQHandler+0x14c>
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	3344      	adds	r3, #68	; 0x44
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d074      	beq.n	8002f1c <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	3344      	adds	r3, #68	; 0x44
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f001 fba6 	bl	800459e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	3344      	adds	r3, #68	; 0x44
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	18d1      	adds	r1, r2, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4403      	add	r3, r0
 8002e76:	3344      	adds	r3, #68	; 0x44
 8002e78:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	334c      	adds	r3, #76	; 0x4c
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	18d1      	adds	r1, r2, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4403      	add	r3, r0
 8002e9e:	334c      	adds	r3, #76	; 0x4c
 8002ea0:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HCD_RXQLVL_IRQHandler+0x158>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d031      	beq.n	8002f1c <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ece:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3350      	adds	r3, #80	; 0x50
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	f083 0301 	eor.w	r3, r3, #1
 8002f00:	b2d8      	uxtb	r0, r3
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	3350      	adds	r3, #80	; 0x50
 8002f12:	4602      	mov	r2, r0
 8002f14:	701a      	strb	r2, [r3, #0]
      break;
 8002f16:	e001      	b.n	8002f1c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002f18:	bf00      	nop
 8002f1a:	e000      	b.n	8002f1e <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8002f1c:	bf00      	nop
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	1ff80000 	.word	0x1ff80000

08002f2c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f58:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d10b      	bne.n	8002f7c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f004 f8f8 	bl	8007164 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d132      	bne.n	8002fec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d126      	bne.n	8002fe6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d113      	bne.n	8002fc8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002faa:	d106      	bne.n	8002fba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fc2e 	bl	8004814 <USB_InitFSLSPClkSel>
 8002fb8:	e011      	b.n	8002fde <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 fc27 	bl	8004814 <USB_InitFSLSPClkSel>
 8002fc6:	e00a      	b.n	8002fde <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fdc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f004 f8ea 	bl	80071b8 <HAL_HCD_PortEnabled_Callback>
 8002fe4:	e002      	b.n	8002fec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f004 f8f4 	bl	80071d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d103      	bne.n	8002ffe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f043 0320 	orr.w	r3, r3, #32
 8002ffc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6013      	str	r3, [r2, #0]
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e12b      	b.n	800327e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fe48 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003078:	f000 fd54 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 800307c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a81      	ldr	r2, [pc, #516]	; (8003288 <HAL_I2C_Init+0x274>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d807      	bhi.n	8003098 <HAL_I2C_Init+0x84>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a80      	ldr	r2, [pc, #512]	; (800328c <HAL_I2C_Init+0x278>)
 800308c:	4293      	cmp	r3, r2
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e006      	b.n	80030a6 <HAL_I2C_Init+0x92>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a7d      	ldr	r2, [pc, #500]	; (8003290 <HAL_I2C_Init+0x27c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	bf94      	ite	ls
 80030a0:	2301      	movls	r3, #1
 80030a2:	2300      	movhi	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0e7      	b.n	800327e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a78      	ldr	r2, [pc, #480]	; (8003294 <HAL_I2C_Init+0x280>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9b      	lsrs	r3, r3, #18
 80030b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <HAL_I2C_Init+0x274>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d802      	bhi.n	80030e8 <HAL_I2C_Init+0xd4>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	e009      	b.n	80030fc <HAL_I2C_Init+0xe8>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	4a69      	ldr	r2, [pc, #420]	; (8003298 <HAL_I2C_Init+0x284>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	3301      	adds	r3, #1
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800310e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	495c      	ldr	r1, [pc, #368]	; (8003288 <HAL_I2C_Init+0x274>)
 8003118:	428b      	cmp	r3, r1
 800311a:	d819      	bhi.n	8003150 <HAL_I2C_Init+0x13c>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e59      	subs	r1, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fbb1 f3f3 	udiv	r3, r1, r3
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003130:	400b      	ands	r3, r1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_I2C_Init+0x138>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e59      	subs	r1, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fbb1 f3f3 	udiv	r3, r1, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314a:	e051      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 800314c:	2304      	movs	r3, #4
 800314e:	e04f      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <HAL_I2C_Init+0x168>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e012      	b.n	80031a2 <HAL_I2C_Init+0x18e>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x196>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e022      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10e      	bne.n	80031d0 <HAL_I2C_Init+0x1bc>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1e58      	subs	r0, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	440b      	add	r3, r1
 80031c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	e00f      	b.n	80031f0 <HAL_I2C_Init+0x1dc>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6809      	ldr	r1, [r1, #0]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800321e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6911      	ldr	r1, [r2, #16]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	000186a0 	.word	0x000186a0
 800328c:	001e847f 	.word	0x001e847f
 8003290:	003d08ff 	.word	0x003d08ff
 8003294:	431bde83 	.word	0x431bde83
 8003298:	10624dd3 	.word	0x10624dd3

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e25b      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	4ba3      	ldr	r3, [pc, #652]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4ba0      	ldr	r3, [pc, #640]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b9d      	ldr	r3, [pc, #628]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b99      	ldr	r3, [pc, #612]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e236      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b91      	ldr	r3, [pc, #580]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a90      	ldr	r2, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a8a      	ldr	r2, [pc, #552]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a87      	ldr	r2, [pc, #540]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a83      	ldr	r2, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a80      	ldr	r2, [pc, #512]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fd fe5c 	bl	8001010 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fd fe58 	bl	8001010 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1fb      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd fe48 	bl	8001010 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fd fe44 	bl	8001010 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1e7      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1bb      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4952      	ldr	r1, [pc, #328]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_RCC_OscConfig+0x2b0>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fd fdfd 	bl	8001010 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fd fdf9 	bl	8001010 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e19c      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4940      	ldr	r1, [pc, #256]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b3f      	ldr	r3, [pc, #252]	; (800354c <HAL_RCC_OscConfig+0x2b0>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fd fddc 	bl	8001010 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fd fdd8 	bl	8001010 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e17b      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d030      	beq.n	80034e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b30      	ldr	r3, [pc, #192]	; (8003550 <HAL_RCC_OscConfig+0x2b4>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fd fdbc 	bl	8001010 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fd fdb8 	bl	8001010 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e15b      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e015      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_OscConfig+0x2b4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fda5 	bl	8001010 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fd fda1 	bl	8001010 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e144      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a0 	beq.w	8003636 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_OscConfig+0x2b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d121      	bne.n	8003576 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_RCC_OscConfig+0x2b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_RCC_OscConfig+0x2b8>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fd fd67 	bl	8001010 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e011      	b.n	800356a <HAL_RCC_OscConfig+0x2ce>
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
 8003554:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003558:	f7fd fd5a 	bl	8001010 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0fd      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356a:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x4d4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x2f0>
 800357e:	4b7d      	ldr	r3, [pc, #500]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a7c      	ldr	r2, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	e01c      	b.n	80035c6 <HAL_RCC_OscConfig+0x32a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d10c      	bne.n	80035ae <HAL_RCC_OscConfig+0x312>
 8003594:	4b77      	ldr	r3, [pc, #476]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a76      	ldr	r2, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	4b74      	ldr	r3, [pc, #464]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a73      	ldr	r2, [pc, #460]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e00b      	b.n	80035c6 <HAL_RCC_OscConfig+0x32a>
 80035ae:	4b71      	ldr	r3, [pc, #452]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a70      	ldr	r2, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a6d      	ldr	r2, [pc, #436]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d015      	beq.n	80035fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd fd1f 	bl	8001010 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fd fd1b 	bl	8001010 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0bc      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ee      	beq.n	80035d6 <HAL_RCC_OscConfig+0x33a>
 80035f8:	e014      	b.n	8003624 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fd fd09 	bl	8001010 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd fd05 	bl	8001010 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0a6      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ee      	bne.n	8003602 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362a:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a51      	ldr	r2, [pc, #324]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8092 	beq.w	8003764 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d05c      	beq.n	8003706 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d141      	bne.n	80036d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003654:	4b48      	ldr	r3, [pc, #288]	; (8003778 <HAL_RCC_OscConfig+0x4dc>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fd fcd9 	bl	8001010 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003662:	f7fd fcd5 	bl	8001010 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e078      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	019b      	lsls	r3, r3, #6
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	3b01      	subs	r3, #1
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	061b      	lsls	r3, r3, #24
 80036a4:	4933      	ldr	r1, [pc, #204]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036aa:	4b33      	ldr	r3, [pc, #204]	; (8003778 <HAL_RCC_OscConfig+0x4dc>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd fcae 	bl	8001010 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fcaa 	bl	8001010 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04d      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x41c>
 80036d6:	e045      	b.n	8003764 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x4dc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fd fc97 	bl	8001010 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fd fc93 	bl	8001010 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e036      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x44a>
 8003704:	e02e      	b.n	8003764 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e029      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	429a      	cmp	r2, r3
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d115      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800373a:	4013      	ands	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	d10d      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d106      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40007000 	.word	0x40007000
 8003774:	40023800 	.word	0x40023800
 8003778:	42470060 	.word	0x42470060

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fd fbd0 	bl	8001010 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fd fbcc 	bl	8001010 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fb30 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	0800780c 	.word	0x0800780c
 8003940:	20000000 	.word	0x20000000
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	2300      	movs	r3, #0
 800395a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003960:	4b67      	ldr	r3, [pc, #412]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d00d      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x40>
 800396c:	2b08      	cmp	r3, #8
 800396e:	f200 80bd 	bhi.w	8003aec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x34>
 8003976:	2b04      	cmp	r3, #4
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x3a>
 800397a:	e0b7      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800397e:	60bb      	str	r3, [r7, #8]
       break;
 8003980:	e0b7      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003982:	4b61      	ldr	r3, [pc, #388]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003984:	60bb      	str	r3, [r7, #8]
      break;
 8003986:	e0b4      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003988:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003990:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003992:	4b5b      	ldr	r3, [pc, #364]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d04d      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b58      	ldr	r3, [pc, #352]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	461a      	mov	r2, r3
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	ea02 0800 	and.w	r8, r2, r0
 80039b6:	ea03 0901 	and.w	r9, r3, r1
 80039ba:	4640      	mov	r0, r8
 80039bc:	4649      	mov	r1, r9
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	014b      	lsls	r3, r1, #5
 80039c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039cc:	0142      	lsls	r2, r0, #5
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	ebb0 0008 	subs.w	r0, r0, r8
 80039d6:	eb61 0109 	sbc.w	r1, r1, r9
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	018b      	lsls	r3, r1, #6
 80039e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039e8:	0182      	lsls	r2, r0, #6
 80039ea:	1a12      	subs	r2, r2, r0
 80039ec:	eb63 0301 	sbc.w	r3, r3, r1
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	00d9      	lsls	r1, r3, #3
 80039fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039fe:	00d0      	lsls	r0, r2, #3
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	eb12 0208 	adds.w	r2, r2, r8
 8003a08:	eb43 0309 	adc.w	r3, r3, r9
 8003a0c:	f04f 0000 	mov.w	r0, #0
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	0259      	lsls	r1, r3, #9
 8003a16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a1a:	0250      	lsls	r0, r2, #9
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	f7fc fbcc 	bl	80001c8 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4613      	mov	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e04a      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	461a      	mov	r2, r3
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	ea02 0400 	and.w	r4, r2, r0
 8003a52:	ea03 0501 	and.w	r5, r3, r1
 8003a56:	4620      	mov	r0, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	014b      	lsls	r3, r1, #5
 8003a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a68:	0142      	lsls	r2, r0, #5
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	1b00      	subs	r0, r0, r4
 8003a70:	eb61 0105 	sbc.w	r1, r1, r5
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	018b      	lsls	r3, r1, #6
 8003a7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a82:	0182      	lsls	r2, r0, #6
 8003a84:	1a12      	subs	r2, r2, r0
 8003a86:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	00d9      	lsls	r1, r3, #3
 8003a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a98:	00d0      	lsls	r0, r2, #3
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	1912      	adds	r2, r2, r4
 8003aa0:	eb45 0303 	adc.w	r3, r5, r3
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	0299      	lsls	r1, r3, #10
 8003aae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ab2:	0290      	lsls	r0, r2, #10
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f7fc fb80 	bl	80001c8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	3301      	adds	r3, #1
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aee:	60bb      	str	r3, [r7, #8]
      break;
 8003af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af2:	68bb      	ldr	r3, [r7, #8]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	007a1200 	.word	0x007a1200

08003b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b28:	f7ff fff0 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0a9b      	lsrs	r3, r3, #10
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0800781c 	.word	0x0800781c

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b50:	f7ff ffdc 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0b5b      	lsrs	r3, r3, #13
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	0800781c 	.word	0x0800781c

08003b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e03f      	b.n	8003c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd f8e0 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f829 	bl	8003c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	b0bd      	sub	sp, #244	; 0xf4
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2c:	68d9      	ldr	r1, [r3, #12]
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	ea40 0301 	orr.w	r3, r0, r1
 8003c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c68:	f021 010c 	bic.w	r1, r1, #12
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003c76:	430b      	orrs	r3, r1
 8003c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	6999      	ldr	r1, [r3, #24]
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	ea40 0301 	orr.w	r3, r0, r1
 8003c96:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca2:	f040 81a5 	bne.w	8003ff0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4bcd      	ldr	r3, [pc, #820]	; (8003fe4 <UART_SetConfig+0x3d4>)
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d006      	beq.n	8003cc0 <UART_SetConfig+0xb0>
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4bcb      	ldr	r3, [pc, #812]	; (8003fe8 <UART_SetConfig+0x3d8>)
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f040 80cb 	bne.w	8003e56 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7ff ff44 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8003cc4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ccc:	461c      	mov	r4, r3
 8003cce:	f04f 0500 	mov.w	r5, #0
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	1891      	adds	r1, r2, r2
 8003cd8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ce2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ce6:	1912      	adds	r2, r2, r4
 8003ce8:	eb45 0303 	adc.w	r3, r5, r3
 8003cec:	f04f 0000 	mov.w	r0, #0
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	00d9      	lsls	r1, r3, #3
 8003cf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cfa:	00d0      	lsls	r0, r2, #3
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	1911      	adds	r1, r2, r4
 8003d02:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003d06:	416b      	adcs	r3, r5
 8003d08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003d1e:	415b      	adcs	r3, r3
 8003d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d24:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003d28:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003d2c:	f7fc fa4c 	bl	80001c8 <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4bad      	ldr	r3, [pc, #692]	; (8003fec <UART_SetConfig+0x3dc>)
 8003d36:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	011e      	lsls	r6, r3, #4
 8003d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d42:	461c      	mov	r4, r3
 8003d44:	f04f 0500 	mov.w	r5, #0
 8003d48:	4622      	mov	r2, r4
 8003d4a:	462b      	mov	r3, r5
 8003d4c:	1891      	adds	r1, r2, r2
 8003d4e:	67b9      	str	r1, [r7, #120]	; 0x78
 8003d50:	415b      	adcs	r3, r3
 8003d52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d54:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003d58:	1912      	adds	r2, r2, r4
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f04f 0000 	mov.w	r0, #0
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	00d9      	lsls	r1, r3, #3
 8003d68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d6c:	00d0      	lsls	r0, r2, #3
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	1911      	adds	r1, r2, r4
 8003d74:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003d78:	416b      	adcs	r3, r5
 8003d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	1891      	adds	r1, r2, r2
 8003d8c:	6739      	str	r1, [r7, #112]	; 0x70
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	677b      	str	r3, [r7, #116]	; 0x74
 8003d92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d96:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003d9a:	f7fc fa15 	bl	80001c8 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4b92      	ldr	r3, [pc, #584]	; (8003fec <UART_SetConfig+0x3dc>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2164      	movs	r1, #100	; 0x64
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	3332      	adds	r3, #50	; 0x32
 8003db6:	4a8d      	ldr	r2, [pc, #564]	; (8003fec <UART_SetConfig+0x3dc>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dc4:	441e      	add	r6, r3
 8003dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	1894      	adds	r4, r2, r2
 8003dd6:	66bc      	str	r4, [r7, #104]	; 0x68
 8003dd8:	415b      	adcs	r3, r3
 8003dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ddc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003de0:	1812      	adds	r2, r2, r0
 8003de2:	eb41 0303 	adc.w	r3, r1, r3
 8003de6:	f04f 0400 	mov.w	r4, #0
 8003dea:	f04f 0500 	mov.w	r5, #0
 8003dee:	00dd      	lsls	r5, r3, #3
 8003df0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003df4:	00d4      	lsls	r4, r2, #3
 8003df6:	4622      	mov	r2, r4
 8003df8:	462b      	mov	r3, r5
 8003dfa:	1814      	adds	r4, r2, r0
 8003dfc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003e00:	414b      	adcs	r3, r1
 8003e02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	1891      	adds	r1, r2, r2
 8003e14:	6639      	str	r1, [r7, #96]	; 0x60
 8003e16:	415b      	adcs	r3, r3
 8003e18:	667b      	str	r3, [r7, #100]	; 0x64
 8003e1a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e22:	f7fc f9d1 	bl	80001c8 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4b70      	ldr	r3, [pc, #448]	; (8003fec <UART_SetConfig+0x3dc>)
 8003e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	2164      	movs	r1, #100	; 0x64
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	3332      	adds	r3, #50	; 0x32
 8003e3e:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <UART_SetConfig+0x3dc>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	f003 0207 	and.w	r2, r3, #7
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4432      	add	r2, r6
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e26d      	b.n	8004332 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e56:	f7ff fe65 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8003e5a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e62:	461c      	mov	r4, r3
 8003e64:	f04f 0500 	mov.w	r5, #0
 8003e68:	4622      	mov	r2, r4
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e70:	415b      	adcs	r3, r3
 8003e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e78:	1912      	adds	r2, r2, r4
 8003e7a:	eb45 0303 	adc.w	r3, r5, r3
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	00d9      	lsls	r1, r3, #3
 8003e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e8c:	00d0      	lsls	r0, r2, #3
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	1911      	adds	r1, r2, r4
 8003e94:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003e98:	416b      	adcs	r3, r5
 8003e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	1891      	adds	r1, r2, r2
 8003eac:	6539      	str	r1, [r7, #80]	; 0x50
 8003eae:	415b      	adcs	r3, r3
 8003eb0:	657b      	str	r3, [r7, #84]	; 0x54
 8003eb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003eb6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003eba:	f7fc f985 	bl	80001c8 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <UART_SetConfig+0x3dc>)
 8003ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	011e      	lsls	r6, r3, #4
 8003ecc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ed0:	461c      	mov	r4, r3
 8003ed2:	f04f 0500 	mov.w	r5, #0
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
 8003eda:	1891      	adds	r1, r2, r2
 8003edc:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ede:	415b      	adcs	r3, r3
 8003ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ee6:	1912      	adds	r2, r2, r4
 8003ee8:	eb45 0303 	adc.w	r3, r5, r3
 8003eec:	f04f 0000 	mov.w	r0, #0
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	00d9      	lsls	r1, r3, #3
 8003ef6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003efa:	00d0      	lsls	r0, r2, #3
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	1911      	adds	r1, r2, r4
 8003f02:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003f06:	416b      	adcs	r3, r5
 8003f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	1891      	adds	r1, r2, r2
 8003f1a:	6439      	str	r1, [r7, #64]	; 0x40
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f24:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003f28:	f7fc f94e 	bl	80001c8 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <UART_SetConfig+0x3dc>)
 8003f32:	fba3 1302 	umull	r1, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2164      	movs	r1, #100	; 0x64
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	3332      	adds	r3, #50	; 0x32
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <UART_SetConfig+0x3dc>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f52:	441e      	add	r6, r3
 8003f54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	1894      	adds	r4, r2, r2
 8003f64:	63bc      	str	r4, [r7, #56]	; 0x38
 8003f66:	415b      	adcs	r3, r3
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f6e:	1812      	adds	r2, r2, r0
 8003f70:	eb41 0303 	adc.w	r3, r1, r3
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	f04f 0500 	mov.w	r5, #0
 8003f7c:	00dd      	lsls	r5, r3, #3
 8003f7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f82:	00d4      	lsls	r4, r2, #3
 8003f84:	4622      	mov	r2, r4
 8003f86:	462b      	mov	r3, r5
 8003f88:	1814      	adds	r4, r2, r0
 8003f8a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003f8e:	414b      	adcs	r3, r1
 8003f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	6339      	str	r1, [r7, #48]	; 0x30
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fac:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fb0:	f7fc f90a 	bl	80001c8 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <UART_SetConfig+0x3dc>)
 8003fba:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2164      	movs	r1, #100	; 0x64
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <UART_SetConfig+0x3dc>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 0207 	and.w	r2, r3, #7
 8003fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4432      	add	r2, r6
 8003fe0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003fe2:	e1a6      	b.n	8004332 <UART_SetConfig+0x722>
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40011400 	.word	0x40011400
 8003fec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4bd1      	ldr	r3, [pc, #836]	; (800433c <UART_SetConfig+0x72c>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d006      	beq.n	800400a <UART_SetConfig+0x3fa>
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bcf      	ldr	r3, [pc, #828]	; (8004340 <UART_SetConfig+0x730>)
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 80ca 	bne.w	800419e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800400a:	f7ff fd9f 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 800400e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004016:	461c      	mov	r4, r3
 8004018:	f04f 0500 	mov.w	r5, #0
 800401c:	4622      	mov	r2, r4
 800401e:	462b      	mov	r3, r5
 8004020:	1891      	adds	r1, r2, r2
 8004022:	62b9      	str	r1, [r7, #40]	; 0x28
 8004024:	415b      	adcs	r3, r3
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800402c:	1912      	adds	r2, r2, r4
 800402e:	eb45 0303 	adc.w	r3, r5, r3
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	00d9      	lsls	r1, r3, #3
 800403c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004040:	00d0      	lsls	r0, r2, #3
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	eb12 0a04 	adds.w	sl, r2, r4
 800404a:	eb43 0b05 	adc.w	fp, r3, r5
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	008b      	lsls	r3, r1, #2
 8004064:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004068:	0082      	lsls	r2, r0, #2
 800406a:	4650      	mov	r0, sl
 800406c:	4659      	mov	r1, fp
 800406e:	f7fc f8ab 	bl	80001c8 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4bb3      	ldr	r3, [pc, #716]	; (8004344 <UART_SetConfig+0x734>)
 8004078:	fba3 2302 	umull	r2, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	011e      	lsls	r6, r3, #4
 8004080:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004084:	4618      	mov	r0, r3
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	1894      	adds	r4, r2, r2
 8004090:	623c      	str	r4, [r7, #32]
 8004092:	415b      	adcs	r3, r3
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800409a:	1812      	adds	r2, r2, r0
 800409c:	eb41 0303 	adc.w	r3, r1, r3
 80040a0:	f04f 0400 	mov.w	r4, #0
 80040a4:	f04f 0500 	mov.w	r5, #0
 80040a8:	00dd      	lsls	r5, r3, #3
 80040aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040ae:	00d4      	lsls	r4, r2, #3
 80040b0:	4622      	mov	r2, r4
 80040b2:	462b      	mov	r3, r5
 80040b4:	1814      	adds	r4, r2, r0
 80040b6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80040ba:	414b      	adcs	r3, r1
 80040bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	008b      	lsls	r3, r1, #2
 80040d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040da:	0082      	lsls	r2, r0, #2
 80040dc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80040e0:	f7fc f872 	bl	80001c8 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4b96      	ldr	r3, [pc, #600]	; (8004344 <UART_SetConfig+0x734>)
 80040ea:	fba3 1302 	umull	r1, r3, r3, r2
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2164      	movs	r1, #100	; 0x64
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	3332      	adds	r3, #50	; 0x32
 80040fc:	4a91      	ldr	r2, [pc, #580]	; (8004344 <UART_SetConfig+0x734>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004108:	441e      	add	r6, r3
 800410a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800410e:	4618      	mov	r0, r3
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	1894      	adds	r4, r2, r2
 800411a:	61bc      	str	r4, [r7, #24]
 800411c:	415b      	adcs	r3, r3
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004124:	1812      	adds	r2, r2, r0
 8004126:	eb41 0303 	adc.w	r3, r1, r3
 800412a:	f04f 0400 	mov.w	r4, #0
 800412e:	f04f 0500 	mov.w	r5, #0
 8004132:	00dd      	lsls	r5, r3, #3
 8004134:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004138:	00d4      	lsls	r4, r2, #3
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	1814      	adds	r4, r2, r0
 8004140:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004144:	414b      	adcs	r3, r1
 8004146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	008b      	lsls	r3, r1, #2
 8004160:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004164:	0082      	lsls	r2, r0, #2
 8004166:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800416a:	f7fc f82d 	bl	80001c8 <__aeabi_uldivmod>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4b74      	ldr	r3, [pc, #464]	; (8004344 <UART_SetConfig+0x734>)
 8004174:	fba3 1302 	umull	r1, r3, r3, r2
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	2164      	movs	r1, #100	; 0x64
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	3332      	adds	r3, #50	; 0x32
 8004186:	4a6f      	ldr	r2, [pc, #444]	; (8004344 <UART_SetConfig+0x734>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4432      	add	r2, r6
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	e0c9      	b.n	8004332 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800419e:	f7ff fcc1 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 80041a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041aa:	461c      	mov	r4, r3
 80041ac:	f04f 0500 	mov.w	r5, #0
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	6139      	str	r1, [r7, #16]
 80041b8:	415b      	adcs	r3, r3
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041c0:	1912      	adds	r2, r2, r4
 80041c2:	eb45 0303 	adc.w	r3, r5, r3
 80041c6:	f04f 0000 	mov.w	r0, #0
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	00d9      	lsls	r1, r3, #3
 80041d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041d4:	00d0      	lsls	r0, r2, #3
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	eb12 0804 	adds.w	r8, r2, r4
 80041de:	eb43 0905 	adc.w	r9, r3, r5
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	008b      	lsls	r3, r1, #2
 80041f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fc:	0082      	lsls	r2, r0, #2
 80041fe:	4640      	mov	r0, r8
 8004200:	4649      	mov	r1, r9
 8004202:	f7fb ffe1 	bl	80001c8 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4b4e      	ldr	r3, [pc, #312]	; (8004344 <UART_SetConfig+0x734>)
 800420c:	fba3 2302 	umull	r2, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	011e      	lsls	r6, r3, #4
 8004214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004218:	4618      	mov	r0, r3
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	1894      	adds	r4, r2, r2
 8004224:	60bc      	str	r4, [r7, #8]
 8004226:	415b      	adcs	r3, r3
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800422e:	1812      	adds	r2, r2, r0
 8004230:	eb41 0303 	adc.w	r3, r1, r3
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	f04f 0500 	mov.w	r5, #0
 800423c:	00dd      	lsls	r5, r3, #3
 800423e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004242:	00d4      	lsls	r4, r2, #3
 8004244:	4622      	mov	r2, r4
 8004246:	462b      	mov	r3, r5
 8004248:	1814      	adds	r4, r2, r0
 800424a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800424e:	414b      	adcs	r3, r1
 8004250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4618      	mov	r0, r3
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	008b      	lsls	r3, r1, #2
 800426a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800426e:	0082      	lsls	r2, r0, #2
 8004270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004274:	f7fb ffa8 	bl	80001c8 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4b31      	ldr	r3, [pc, #196]	; (8004344 <UART_SetConfig+0x734>)
 800427e:	fba3 1302 	umull	r1, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2164      	movs	r1, #100	; 0x64
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	3332      	adds	r3, #50	; 0x32
 8004290:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <UART_SetConfig+0x734>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429c:	441e      	add	r6, r3
 800429e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042a2:	4618      	mov	r0, r3
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	1894      	adds	r4, r2, r2
 80042ae:	603c      	str	r4, [r7, #0]
 80042b0:	415b      	adcs	r3, r3
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b8:	1812      	adds	r2, r2, r0
 80042ba:	eb41 0303 	adc.w	r3, r1, r3
 80042be:	f04f 0400 	mov.w	r4, #0
 80042c2:	f04f 0500 	mov.w	r5, #0
 80042c6:	00dd      	lsls	r5, r3, #3
 80042c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042cc:	00d4      	lsls	r4, r2, #3
 80042ce:	4622      	mov	r2, r4
 80042d0:	462b      	mov	r3, r5
 80042d2:	1814      	adds	r4, r2, r0
 80042d4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80042d8:	414b      	adcs	r3, r1
 80042da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	008b      	lsls	r3, r1, #2
 80042f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042f8:	0082      	lsls	r2, r0, #2
 80042fa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80042fe:	f7fb ff63 	bl	80001c8 <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <UART_SetConfig+0x734>)
 8004308:	fba3 1302 	umull	r1, r3, r3, r2
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2164      	movs	r1, #100	; 0x64
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	3332      	adds	r3, #50	; 0x32
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <UART_SetConfig+0x734>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 020f 	and.w	r2, r3, #15
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4432      	add	r2, r6
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	e7ff      	b.n	8004332 <UART_SetConfig+0x722>
 8004332:	bf00      	nop
 8004334:	37f4      	adds	r7, #244	; 0xf4
 8004336:	46bd      	mov	sp, r7
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	40011000 	.word	0x40011000
 8004340:	40011400 	.word	0x40011400
 8004344:	51eb851f 	.word	0x51eb851f

08004348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004348:	b084      	sub	sp, #16
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	f107 001c 	add.w	r0, r7, #28
 8004356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2b01      	cmp	r3, #1
 800435e:	d122      	bne.n	80043a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f94a 	bl	8004634 <USB_CoreReset>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e01a      	b.n	80043dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f93e 	bl	8004634 <USB_CoreReset>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
 80043ce:	e005      	b.n	80043dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d10b      	bne.n	80043fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f043 0206 	orr.w	r2, r3, #6
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004406:	b004      	add	sp, #16
 8004408:	4770      	bx	lr

0800440a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 0201 	bic.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]
 8004478:	e00b      	b.n	8004492 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]
 800448c:	e001      	b.n	8004492 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e003      	b.n	800449a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004492:	2032      	movs	r0, #50	; 0x32
 8004494:	f7fc fdc8 	bl	8001028 <HAL_Delay>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <USB_FlushTxFifo+0x48>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e006      	b.n	80044de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d0f0      	beq.n	80044be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	00030d40 	.word	0x00030d40

080044f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2210      	movs	r2, #16
 8004500:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3301      	adds	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a09      	ldr	r2, [pc, #36]	; (8004530 <USB_FlushRxFifo+0x40>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e006      	b.n	8004522 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d0f0      	beq.n	8004502 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	00030d40 	.word	0x00030d40

08004534 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4611      	mov	r1, r2
 8004540:	461a      	mov	r2, r3
 8004542:	460b      	mov	r3, r1
 8004544:	71fb      	strb	r3, [r7, #7]
 8004546:	4613      	mov	r3, r2
 8004548:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	d11a      	bne.n	8004590 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800455a:	88bb      	ldrh	r3, [r7, #4]
 800455c:	3303      	adds	r3, #3
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e00f      	b.n	8004588 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	031a      	lsls	r2, r3, #12
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004574:	461a      	mov	r2, r3
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3304      	adds	r3, #4
 8004580:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3301      	adds	r3, #1
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	429a      	cmp	r2, r3
 800458e:	d3eb      	bcc.n	8004568 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800459e:	b480      	push	{r7}
 80045a0:	b089      	sub	sp, #36	; 0x24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	3303      	adds	r3, #3
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e00b      	b.n	80045da <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3304      	adds	r3, #4
 80045d2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	3301      	adds	r3, #1
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3ef      	bcc.n	80045c2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80045e2:	69fb      	ldr	r3, [r7, #28]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3724      	adds	r7, #36	; 0x24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4013      	ands	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004608:	68fb      	ldr	r3, [r7, #12]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0301 	and.w	r3, r3, #1
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a13      	ldr	r2, [pc, #76]	; (8004698 <USB_CoreReset+0x64>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e01b      	b.n	800468a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	daf2      	bge.n	8004640 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <USB_CoreReset+0x64>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e006      	b.n	800468a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d0f0      	beq.n	800466a <USB_CoreReset+0x36>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	00030d40 	.word	0x00030d40

0800469c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800469c:	b084      	sub	sp, #16
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	f107 001c 	add.w	r0, r7, #28
 80046aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10a      	bne.n	800470a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	e014      	b.n	8004734 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004718:	f023 0304 	bic.w	r3, r3, #4
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e009      	b.n	8004734 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004734:	2110      	movs	r1, #16
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff feb4 	bl	80044a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff fed7 	bl	80044f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e015      	b.n	8004774 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	461a      	mov	r2, r3
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	429a      	cmp	r2, r3
 800477a:	d3e5      	bcc.n	8004748 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800477c:	2101      	movs	r1, #1
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8ac 	bl	80048dc <USB_DriveVbus>

  HAL_Delay(200U);
 8004784:	20c8      	movs	r0, #200	; 0xc8
 8004786:	f7fc fc4f 	bl	8001028 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a14      	ldr	r2, [pc, #80]	; (8004800 <USB_HostInit+0x164>)
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a13      	ldr	r2, [pc, #76]	; (8004804 <USB_HostInit+0x168>)
 80047b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80047ba:	e009      	b.n	80047d0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a10      	ldr	r2, [pc, #64]	; (8004808 <USB_HostInit+0x16c>)
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a10      	ldr	r2, [pc, #64]	; (800480c <USB_HostInit+0x170>)
 80047cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f043 0210 	orr.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <USB_HostInit+0x174>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047fa:	b004      	add	sp, #16
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	01000200 	.word	0x01000200
 8004804:	00e00300 	.word	0x00e00300
 8004808:	00600080 	.word	0x00600080
 800480c:	004000e0 	.word	0x004000e0
 8004810:	a3200008 	.word	0xa3200008

08004814 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	68f9      	ldr	r1, [r7, #12]
 8004848:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d107      	bne.n	8004866 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800485c:	461a      	mov	r2, r3
 800485e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004862:	6053      	str	r3, [r2, #4]
 8004864:	e009      	b.n	800487a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d106      	bne.n	800487a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004872:	461a      	mov	r2, r3
 8004874:	f241 7370 	movw	r3, #6000	; 0x1770
 8004878:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80048b8:	2064      	movs	r0, #100	; 0x64
 80048ba:	f7fc fbb5 	bl	8001028 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80048cc:	200a      	movs	r0, #10
 80048ce:	f7fc fbab 	bl	8001028 <HAL_Delay>

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004900:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <USB_DriveVbus+0x44>
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d106      	bne.n	8004920 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800491a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800491e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	d109      	bne.n	8004940 <USB_DriveVbus+0x64>
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800493a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800493e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	0c5b      	lsrs	r3, r3, #17
 800496c:	f003 0303 	and.w	r3, r3, #3
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	b29b      	uxth	r3, r3
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	4608      	mov	r0, r1
 80049aa:	4611      	mov	r1, r2
 80049ac:	461a      	mov	r2, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	70fb      	strb	r3, [r7, #3]
 80049b2:	460b      	mov	r3, r1
 80049b4:	70bb      	strb	r3, [r7, #2]
 80049b6:	4613      	mov	r3, r2
 80049b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	461a      	mov	r2, r3
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80049d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d87e      	bhi.n	8004adc <USB_HC_Init+0x13c>
 80049de:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <USB_HC_Init+0x44>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	08004a9f 	.word	0x08004a9f
 80049ec:	080049f5 	.word	0x080049f5
 80049f0:	08004a61 	.word	0x08004a61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	461a      	mov	r2, r3
 8004a02:	f240 439d 	movw	r3, #1181	; 0x49d
 8004a06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da10      	bge.n	8004a32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004a30:	e057      	b.n	8004ae2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d051      	beq.n	8004ae2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a5c:	60d3      	str	r3, [r2, #12]
      break;
 8004a5e:	e040      	b.n	8004ae2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004a72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da34      	bge.n	8004ae6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004a9c:	e023      	b.n	8004ae6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f240 2325 	movw	r3, #549	; 0x225
 8004ab0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da17      	bge.n	8004aea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004ad8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004ada:	e006      	b.n	8004aea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae0:	e004      	b.n	8004aec <USB_HC_Init+0x14c>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <USB_HC_Init+0x14c>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <USB_HC_Init+0x14c>
      break;
 8004aea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	2101      	movs	r1, #1
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b06:	4313      	orrs	r3, r2
 8004b08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da03      	bge.n	8004b26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	e001      	b.n	8004b2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d103      	bne.n	8004b3a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e001      	b.n	8004b3e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b3e:	787b      	ldrb	r3, [r7, #1]
 8004b40:	059b      	lsls	r3, r3, #22
 8004b42:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b46:	78bb      	ldrb	r3, [r7, #2]
 8004b48:	02db      	lsls	r3, r3, #11
 8004b4a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b54:	049b      	lsls	r3, r3, #18
 8004b56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	0159      	lsls	r1, r3, #5
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	440b      	add	r3, r1
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b74:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b7a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d10f      	bne.n	8004ba4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ba2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08c      	sub	sp, #48	; 0x30
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bd0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d028      	beq.n	8004c30 <USB_HC_StartXfer+0x7c>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	791b      	ldrb	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d124      	bne.n	8004c30 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10b      	bne.n	8004c04 <USB_HC_StartXfer+0x50>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	795b      	ldrb	r3, [r3, #5]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fa2e 	bl	800505c <USB_DoPing>
      return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e113      	b.n	8004e2c <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d112      	bne.n	8004c30 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004c28:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d018      	beq.n	8004c6a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	8912      	ldrh	r2, [r2, #8]
 8004c40:	4413      	add	r3, r2
 8004c42:	3b01      	subs	r3, #1
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	8912      	ldrh	r2, [r2, #8]
 8004c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c4c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004c4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c50:	8b7b      	ldrh	r3, [r7, #26]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d90b      	bls.n	8004c6e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004c56:	8b7b      	ldrh	r3, [r7, #26]
 8004c58:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	8912      	ldrh	r2, [r2, #8]
 8004c60:	fb02 f203 	mul.w	r2, r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	611a      	str	r2, [r3, #16]
 8004c68:	e001      	b.n	8004c6e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	78db      	ldrb	r3, [r3, #3]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	8912      	ldrh	r2, [r2, #8]
 8004c7c:	fb02 f203 	mul.w	r2, r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c8e:	04d9      	lsls	r1, r3, #19
 8004c90:	4b68      	ldr	r3, [pc, #416]	; (8004e34 <USB_HC_StartXfer+0x280>)
 8004c92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	7a9b      	ldrb	r3, [r3, #10]
 8004c9a:	075b      	lsls	r3, r3, #29
 8004c9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ca0:	69f9      	ldr	r1, [r7, #28]
 8004ca2:	0148      	lsls	r0, r1, #5
 8004ca4:	6a39      	ldr	r1, [r7, #32]
 8004ca6:	4401      	add	r1, r0
 8004ca8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004cac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	68d9      	ldr	r1, [r3, #12]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	7e7b      	ldrb	r3, [r7, #25]
 8004d12:	075b      	lsls	r3, r3, #29
 8004d14:	69f9      	ldr	r1, [r7, #28]
 8004d16:	0148      	lsls	r0, r1, #5
 8004d18:	6a39      	ldr	r1, [r7, #32]
 8004d1a:	4401      	add	r1, r0
 8004d1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a41      	ldr	r2, [pc, #260]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d34:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d3e:	4a3e      	ldr	r2, [pc, #248]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d40:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	78db      	ldrb	r3, [r3, #3]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	4a39      	ldr	r2, [pc, #228]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e005      	b.n	8004d64 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004d58:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d60:	4a35      	ldr	r2, [pc, #212]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d62:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d64:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	4a32      	ldr	r2, [pc, #200]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d6e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b2e      	ldr	r3, [pc, #184]	; (8004e38 <USB_HC_StartXfer+0x284>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e04e      	b.n	8004e2c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	78db      	ldrb	r3, [r3, #3]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d149      	bne.n	8004e2a <USB_HC_StartXfer+0x276>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d045      	beq.n	8004e2a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	79db      	ldrb	r3, [r3, #7]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d830      	bhi.n	8004e08 <USB_HC_StartXfer+0x254>
 8004da6:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <USB_HC_StartXfer+0x1f8>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004de1 	.word	0x08004de1
 8004db4:	08004dbd 	.word	0x08004dbd
 8004db8:	08004de1 	.word	0x08004de1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004dc6:	8afa      	ldrh	r2, [r7, #22]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d91c      	bls.n	8004e0c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f043 0220 	orr.w	r2, r3, #32
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	619a      	str	r2, [r3, #24]
        }
        break;
 8004dde:	e015      	b.n	8004e0c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	3303      	adds	r3, #3
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004dea:	8afa      	ldrh	r2, [r7, #22]
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d90a      	bls.n	8004e10 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e06:	e003      	b.n	8004e10 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004e08:	bf00      	nop
 8004e0a:	e002      	b.n	8004e12 <USB_HC_StartXfer+0x25e>
        break;
 8004e0c:	bf00      	nop
 8004e0e:	e000      	b.n	8004e12 <USB_HC_StartXfer+0x25e>
        break;
 8004e10:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	68d9      	ldr	r1, [r3, #12]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	785a      	ldrb	r2, [r3, #1]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2000      	movs	r0, #0
 8004e22:	9000      	str	r0, [sp, #0]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff fb85 	bl	8004534 <USB_WritePacket>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	1ff80000 	.word	0x1ff80000
 8004e38:	200000b4 	.word	0x200000b4

08004e3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	b29b      	uxth	r3, r3
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b087      	sub	sp, #28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0c9b      	lsrs	r3, r3, #18
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <USB_HC_Halt+0x3a>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d16c      	bne.n	8004f72 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d143      	bne.n	8004f4c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ee2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f22:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	3301      	adds	r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f30:	d81d      	bhi.n	8004f6e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f48:	d0ec      	beq.n	8004f24 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f4a:	e080      	b.n	800504e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f6a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f6c:	e06f      	b.n	800504e <USB_HC_Halt+0x1f0>
          break;
 8004f6e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f70:	e06d      	b.n	800504e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f90:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d143      	bne.n	800502a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fc0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fe0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005000:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3301      	adds	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800500e:	d81d      	bhi.n	800504c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005026:	d0ec      	beq.n	8005002 <USB_HC_Halt+0x1a4>
 8005028:	e011      	b.n	800504e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4413      	add	r3, r2
 8005032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	440a      	add	r2, r1
 8005040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e000      	b.n	800504e <USB_HC_Halt+0x1f0>
          break;
 800504c:	bf00      	nop
    }
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005070:	2301      	movs	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	04da      	lsls	r2, r3, #19
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <USB_DoPing+0x74>)
 800507a:	4013      	ands	r3, r2
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	440a      	add	r2, r1
 8005084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	461a      	mov	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	1ff80000 	.word	0x1ff80000

080050d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff f9a1 	bl	800442c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80050ea:	2110      	movs	r1, #16
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff f9d9 	bl	80044a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff f9fc 	bl	80044f0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e01f      	b.n	800513e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005114:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005124:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	461a      	mov	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3301      	adds	r3, #1
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d9dc      	bls.n	80050fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e034      	b.n	80051b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005160:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005168:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005170:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	3301      	adds	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005190:	d80c      	bhi.n	80051ac <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a8:	d0ec      	beq.n	8005184 <USB_StopHost+0xb0>
 80051aa:	e000      	b.n	80051ae <USB_StopHost+0xda>
        break;
 80051ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	d9c7      	bls.n	800514a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c0:	461a      	mov	r2, r3
 80051c2:	f04f 33ff 	mov.w	r3, #4294967295
 80051c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f04f 32ff 	mov.w	r2, #4294967295
 80051ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff f91a 	bl	800440a <USB_EnableGlobalInt>

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b089      	sub	sp, #36	; 0x24
 80051e4:	af04      	add	r7, sp, #16
 80051e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80051e8:	2301      	movs	r3, #1
 80051ea:	2202      	movs	r2, #2
 80051ec:	2102      	movs	r1, #2
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fc66 	bl	8005ac0 <USBH_FindInterface>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2bff      	cmp	r3, #255	; 0xff
 80051fc:	d002      	beq.n	8005204 <USBH_CDC_InterfaceInit+0x24>
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d901      	bls.n	8005208 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005204:	2302      	movs	r3, #2
 8005206:	e13d      	b.n	8005484 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fc3b 	bl	8005a88 <USBH_SelectInterface>
 8005212:	4603      	mov	r3, r0
 8005214:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005216:	7bbb      	ldrb	r3, [r7, #14]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800521c:	2302      	movs	r3, #2
 800521e:	e131      	b.n	8005484 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005226:	2050      	movs	r0, #80	; 0x50
 8005228:	f002 fa02 	bl	8007630 <malloc>
 800522c:	4603      	mov	r3, r0
 800522e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005240:	2302      	movs	r3, #2
 8005242:	e11f      	b.n	8005484 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005244:	2250      	movs	r2, #80	; 0x50
 8005246:	2100      	movs	r1, #0
 8005248:	68b8      	ldr	r0, [r7, #8]
 800524a:	f002 fa01 	bl	8007650 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	211a      	movs	r1, #26
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b25b      	sxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	da15      	bge.n	8005292 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	211a      	movs	r1, #26
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005276:	781a      	ldrb	r2, [r3, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	211a      	movs	r1, #26
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	4413      	add	r3, r2
 8005288:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fe32 	bl	8006f02 <USBH_AllocPipe>
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	7819      	ldrb	r1, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	7858      	ldrb	r0, [r3, #1]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	8952      	ldrh	r2, [r2, #10]
 80052be:	9202      	str	r2, [sp, #8]
 80052c0:	2203      	movs	r2, #3
 80052c2:	9201      	str	r2, [sp, #4]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	4623      	mov	r3, r4
 80052c8:	4602      	mov	r2, r0
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 fdea 	bl	8006ea4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f002 f8f9 	bl	80074d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80052de:	2300      	movs	r3, #0
 80052e0:	2200      	movs	r2, #0
 80052e2:	210a      	movs	r1, #10
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fbeb 	bl	8005ac0 <USBH_FindInterface>
 80052ea:	4603      	mov	r3, r0
 80052ec:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2bff      	cmp	r3, #255	; 0xff
 80052f2:	d002      	beq.n	80052fa <USBH_CDC_InterfaceInit+0x11a>
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d901      	bls.n	80052fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80052fa:	2302      	movs	r3, #2
 80052fc:	e0c2      	b.n	8005484 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	211a      	movs	r1, #26
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b25b      	sxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	da16      	bge.n	8005344 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	211a      	movs	r1, #26
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	4413      	add	r3, r2
 8005322:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005326:	781a      	ldrb	r2, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	211a      	movs	r1, #26
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800533c:	881a      	ldrh	r2, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	835a      	strh	r2, [r3, #26]
 8005342:	e015      	b.n	8005370 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	211a      	movs	r1, #26
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	4413      	add	r3, r2
 8005350:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	211a      	movs	r1, #26
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800536a:	881a      	ldrh	r2, [r3, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	211a      	movs	r1, #26
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b25b      	sxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	da16      	bge.n	80053b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	211a      	movs	r1, #26
 800538e:	fb01 f303 	mul.w	r3, r1, r3
 8005392:	4413      	add	r3, r2
 8005394:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	211a      	movs	r1, #26
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80053ae:	881a      	ldrh	r2, [r3, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	835a      	strh	r2, [r3, #26]
 80053b4:	e015      	b.n	80053e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	211a      	movs	r1, #26
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	211a      	movs	r1, #26
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80053dc:	881a      	ldrh	r2, [r3, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	7b9b      	ldrb	r3, [r3, #14]
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 fd8a 	bl	8006f02 <USBH_AllocPipe>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461a      	mov	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	7bdb      	ldrb	r3, [r3, #15]
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 fd80 	bl	8006f02 <USBH_AllocPipe>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	7b59      	ldrb	r1, [r3, #13]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	7b98      	ldrb	r0, [r3, #14]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	8b12      	ldrh	r2, [r2, #24]
 8005422:	9202      	str	r2, [sp, #8]
 8005424:	2202      	movs	r2, #2
 8005426:	9201      	str	r2, [sp, #4]
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	4623      	mov	r3, r4
 800542c:	4602      	mov	r2, r0
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 fd38 	bl	8006ea4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	7b19      	ldrb	r1, [r3, #12]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	7bd8      	ldrb	r0, [r3, #15]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	8b52      	ldrh	r2, [r2, #26]
 800544c:	9202      	str	r2, [sp, #8]
 800544e:	2202      	movs	r2, #2
 8005450:	9201      	str	r2, [sp, #4]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4623      	mov	r3, r4
 8005456:	4602      	mov	r2, r0
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fd23 	bl	8006ea4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	7b5b      	ldrb	r3, [r3, #13]
 800546a:	2200      	movs	r2, #0
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f002 f82e 	bl	80074d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	7b1b      	ldrb	r3, [r3, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f002 f827 	bl	80074d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	bd90      	pop	{r4, r7, pc}

0800548c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 fd18 	bl	8006ee2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 fd43 	bl	8006f44 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	7b1b      	ldrb	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	7b1b      	ldrb	r3, [r3, #12]
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 fd05 	bl	8006ee2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	7b1b      	ldrb	r3, [r3, #12]
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f001 fd30 	bl	8006f44 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	7b5b      	ldrb	r3, [r3, #13]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	7b5b      	ldrb	r3, [r3, #13]
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 fcf2 	bl	8006ee2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	7b5b      	ldrb	r3, [r3, #13]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 fd1d 	bl	8006f44 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4618      	mov	r0, r3
 8005526:	f002 f88b 	bl	8007640 <free>
    phost->pActiveClass->pData = 0U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005530:	2200      	movs	r2, #0
 8005532:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3340      	adds	r3, #64	; 0x40
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8b1 	bl	80056be <GetLineCoding>
 800555c:	4603      	mov	r3, r0
 800555e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005560:	7afb      	ldrb	r3, [r7, #11]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800556c:	2102      	movs	r1, #2
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005572:	7afb      	ldrb	r3, [r7, #11]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800559c:	2b04      	cmp	r3, #4
 800559e:	d877      	bhi.n	8005690 <USBH_CDC_Process+0x114>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <USBH_CDC_Process+0x2c>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055bd 	.word	0x080055bd
 80055ac:	080055c3 	.word	0x080055c3
 80055b0:	080055f3 	.word	0x080055f3
 80055b4:	08005667 	.word	0x08005667
 80055b8:	08005675 	.word	0x08005675
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e06d      	b.n	800569e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f897 	bl	80056fc <SetLineCoding>
 80055ce:	4603      	mov	r3, r0
 80055d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80055e0:	e058      	b.n	8005694 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d055      	beq.n	8005694 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2204      	movs	r2, #4
 80055ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80055f0:	e050      	b.n	8005694 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	3340      	adds	r3, #64	; 0x40
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f860 	bl	80056be <GetLineCoding>
 80055fe:	4603      	mov	r3, r0
 8005600:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005602:	7bbb      	ldrb	r3, [r7, #14]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d126      	bne.n	8005656 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d13b      	bne.n	8005698 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800562c:	429a      	cmp	r2, r3
 800562e:	d133      	bne.n	8005698 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800563c:	429a      	cmp	r2, r3
 800563e:	d12b      	bne.n	8005698 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005648:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800564a:	429a      	cmp	r2, r3
 800564c:	d124      	bne.n	8005698 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f958 	bl	8005904 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005654:	e020      	b.n	8005698 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d01d      	beq.n	8005698 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2204      	movs	r2, #4
 8005660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005664:	e018      	b.n	8005698 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f867 	bl	800573a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8da 	bl	8005826 <CDC_ProcessReception>
      break;
 8005672:	e014      	b.n	800569e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005674:	2100      	movs	r1, #0
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 ffe3 	bl	8006642 <USBH_ClrFeature>
 800567c:	4603      	mov	r3, r0
 800567e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800568e:	e005      	b.n	800569c <USBH_CDC_Process+0x120>

    default:
      break;
 8005690:	bf00      	nop
 8005692:	e004      	b.n	800569e <USBH_CDC_Process+0x122>
      break;
 8005694:	bf00      	nop
 8005696:	e002      	b.n	800569e <USBH_CDC_Process+0x122>
      break;
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <USBH_CDC_Process+0x122>
      break;
 800569c:	bf00      	nop

  }

  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	22a1      	movs	r2, #161	; 0xa1
 80056cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2221      	movs	r2, #33	; 0x21
 80056d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2207      	movs	r2, #7
 80056e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2207      	movs	r2, #7
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 f988 	bl	8006a02 <USBH_CtlReq>
 80056f2:	4603      	mov	r3, r0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2221      	movs	r2, #33	; 0x21
 800570a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2207      	movs	r2, #7
 8005722:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2207      	movs	r2, #7
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f969 	bl	8006a02 <USBH_CtlReq>
 8005730:	4603      	mov	r3, r0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af02      	add	r7, sp, #8
 8005740:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800574c:	2300      	movs	r3, #0
 800574e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005756:	2b01      	cmp	r3, #1
 8005758:	d002      	beq.n	8005760 <CDC_ProcessTransmission+0x26>
 800575a:	2b02      	cmp	r3, #2
 800575c:	d023      	beq.n	80057a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800575e:	e05e      	b.n	800581e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	8b12      	ldrh	r2, [r2, #24]
 8005768:	4293      	cmp	r3, r2
 800576a:	d90b      	bls.n	8005784 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	69d9      	ldr	r1, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8b1a      	ldrh	r2, [r3, #24]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	7b5b      	ldrb	r3, [r3, #13]
 8005778:	2001      	movs	r0, #1
 800577a:	9000      	str	r0, [sp, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 fb4e 	bl	8006e1e <USBH_BulkSendData>
 8005782:	e00b      	b.n	800579c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	7b5b      	ldrb	r3, [r3, #13]
 8005792:	2001      	movs	r0, #1
 8005794:	9000      	str	r0, [sp, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 fb41 	bl	8006e1e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80057a4:	e03b      	b.n	800581e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	7b5b      	ldrb	r3, [r3, #13]
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 fe65 	bl	800747c <USBH_LL_GetURBState>
 80057b2:	4603      	mov	r3, r0
 80057b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d128      	bne.n	800580e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	8b12      	ldrh	r2, [r2, #24]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d90e      	bls.n	80057e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	8b12      	ldrh	r2, [r2, #24]
 80057d0:	1a9a      	subs	r2, r3, r2
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	8b12      	ldrh	r2, [r2, #24]
 80057de:	441a      	add	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	61da      	str	r2, [r3, #28]
 80057e4:	e002      	b.n	80057ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80057fc:	e00e      	b.n	800581c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f868 	bl	80058dc <USBH_CDC_TransmitCallback>
      break;
 800580c:	e006      	b.n	800581c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d103      	bne.n	800581c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800581c:	bf00      	nop
  }
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005838:	2300      	movs	r3, #0
 800583a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005842:	2b03      	cmp	r3, #3
 8005844:	d002      	beq.n	800584c <CDC_ProcessReception+0x26>
 8005846:	2b04      	cmp	r3, #4
 8005848:	d00e      	beq.n	8005868 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800584a:	e043      	b.n	80058d4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	6a19      	ldr	r1, [r3, #32]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	8b5a      	ldrh	r2, [r3, #26]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	7b1b      	ldrb	r3, [r3, #12]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 fb05 	bl	8006e68 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2204      	movs	r2, #4
 8005862:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005866:	e035      	b.n	80058d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	7b1b      	ldrb	r3, [r3, #12]
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fe04 	bl	800747c <USBH_LL_GetURBState>
 8005874:	4603      	mov	r3, r0
 8005876:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005878:	7cfb      	ldrb	r3, [r7, #19]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d129      	bne.n	80058d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	7b1b      	ldrb	r3, [r3, #12]
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fd67 	bl	8007358 <USBH_LL_GetLastXferSize>
 800588a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	429a      	cmp	r2, r3
 8005894:	d016      	beq.n	80058c4 <CDC_ProcessReception+0x9e>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	8b5b      	ldrh	r3, [r3, #26]
 800589a:	461a      	mov	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4293      	cmp	r3, r2
 80058a0:	d910      	bls.n	80058c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1ad2      	subs	r2, r2, r3
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6a1a      	ldr	r2, [r3, #32]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	441a      	add	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2203      	movs	r2, #3
 80058be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80058c2:	e006      	b.n	80058d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f80f 	bl	80058f0 <USBH_CDC_ReceiveCallback>
      break;
 80058d2:	bf00      	nop
  }
}
 80058d4:	bf00      	nop
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800592c:	2302      	movs	r3, #2
 800592e:	e029      	b.n	8005984 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	79fa      	ldrb	r2, [r7, #7]
 8005934:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f81f 	bl	800598c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f001 fc37 	bl	80071f0 <USBH_LL_Init>

  return USBH_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e009      	b.n	80059b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	33e0      	adds	r3, #224	; 0xe0
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	2200      	movs	r2, #0
 80059aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b0e      	cmp	r3, #14
 80059b6:	d9f2      	bls.n	800599e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e009      	b.n	80059d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d8:	d3f1      	bcc.n	80059be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2240      	movs	r2, #64	; 0x40
 80059fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10e      	bne.n	8005a70 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	33de      	adds	r3, #222	; 0xde
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
 8005a6e:	e004      	b.n	8005a7a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a70:	2302      	movs	r3, #2
 8005a72:	73fb      	strb	r3, [r7, #15]
 8005a74:	e001      	b.n	8005a7a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a76:	2302      	movs	r3, #2
 8005a78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d204      	bcs.n	8005aae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005aac:	e001      	b.n	8005ab2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	70fb      	strb	r3, [r7, #3]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70bb      	strb	r3, [r7, #2]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ae8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005aea:	e025      	b.n	8005b38 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	221a      	movs	r2, #26
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	3308      	adds	r3, #8
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	3302      	adds	r3, #2
 8005afc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	795b      	ldrb	r3, [r3, #5]
 8005b02:	78fa      	ldrb	r2, [r7, #3]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d002      	beq.n	8005b0e <USBH_FindInterface+0x4e>
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	2bff      	cmp	r3, #255	; 0xff
 8005b0c:	d111      	bne.n	8005b32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005b12:	78ba      	ldrb	r2, [r7, #2]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d002      	beq.n	8005b1e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005b18:	78bb      	ldrb	r3, [r7, #2]
 8005b1a:	2bff      	cmp	r3, #255	; 0xff
 8005b1c:	d109      	bne.n	8005b32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005b22:	787a      	ldrb	r2, [r7, #1]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d002      	beq.n	8005b2e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b28:	787b      	ldrb	r3, [r7, #1]
 8005b2a:	2bff      	cmp	r3, #255	; 0xff
 8005b2c:	d101      	bne.n	8005b32 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	e006      	b.n	8005b40 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	3301      	adds	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d9d6      	bls.n	8005aec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b3e:	23ff      	movs	r3, #255	; 0xff
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 fb87 	bl	8007268 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f001 fca0 	bl	80074a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af04      	add	r7, sp, #16
 8005b72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005b74:	2302      	movs	r3, #2
 8005b76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d102      	bne.n	8005b8e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b0b      	cmp	r3, #11
 8005b96:	f200 81b3 	bhi.w	8005f00 <USBH_Process+0x394>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <USBH_Process+0x34>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bd1 	.word	0x08005bd1
 8005ba4:	08005c03 	.word	0x08005c03
 8005ba8:	08005c6b 	.word	0x08005c6b
 8005bac:	08005e9b 	.word	0x08005e9b
 8005bb0:	08005f01 	.word	0x08005f01
 8005bb4:	08005d0f 	.word	0x08005d0f
 8005bb8:	08005e41 	.word	0x08005e41
 8005bbc:	08005d45 	.word	0x08005d45
 8005bc0:	08005d65 	.word	0x08005d65
 8005bc4:	08005d85 	.word	0x08005d85
 8005bc8:	08005db3 	.word	0x08005db3
 8005bcc:	08005e83 	.word	0x08005e83
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8193 	beq.w	8005f04 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005be4:	20c8      	movs	r0, #200	; 0xc8
 8005be6:	f001 fca6 	bl	8007536 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fb99 	bl	8007322 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005c00:	e180      	b.n	8005f04 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d107      	bne.n	8005c1c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005c1a:	e182      	b.n	8005f22 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c26:	d914      	bls.n	8005c52 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005c2e:	3301      	adds	r3, #1
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d903      	bls.n	8005c4a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	220d      	movs	r2, #13
 8005c46:	701a      	strb	r2, [r3, #0]
      break;
 8005c48:	e16b      	b.n	8005f22 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
      break;
 8005c50:	e167      	b.n	8005f22 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c58:	f103 020a 	add.w	r2, r3, #10
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005c62:	200a      	movs	r0, #10
 8005c64:	f001 fc67 	bl	8007536 <USBH_Delay>
      break;
 8005c68:	e15b      	b.n	8005f22 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c7a:	2104      	movs	r1, #4
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005c80:	2064      	movs	r0, #100	; 0x64
 8005c82:	f001 fc58 	bl	8007536 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 fb24 	bl	80072d4 <USBH_LL_GetSpeed>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2205      	movs	r2, #5
 8005c9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 f92f 	bl	8006f02 <USBH_AllocPipe>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005cac:	2180      	movs	r1, #128	; 0x80
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 f927 	bl	8006f02 <USBH_AllocPipe>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	7919      	ldrb	r1, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005cd0:	b292      	uxth	r2, r2
 8005cd2:	9202      	str	r2, [sp, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	9201      	str	r2, [sp, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2280      	movs	r2, #128	; 0x80
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 f8e0 	bl	8006ea4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7959      	ldrb	r1, [r3, #5]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	9202      	str	r2, [sp, #8]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	9201      	str	r2, [sp, #4]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	4603      	mov	r3, r0
 8005d04:	2200      	movs	r2, #0
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 f8cc 	bl	8006ea4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d0c:	e109      	b.n	8005f22 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f90c 	bl	8005f2c <USBH_HandleEnum>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 80f3 	bne.w	8005f08 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d103      	bne.n	8005d3c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2208      	movs	r2, #8
 8005d38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d3a:	e0e5      	b.n	8005f08 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2207      	movs	r2, #7
 8005d40:	701a      	strb	r2, [r3, #0]
      break;
 8005d42:	e0e1      	b.n	8005f08 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80de 	beq.w	8005f0c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d56:	2101      	movs	r1, #1
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2208      	movs	r2, #8
 8005d60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d62:	e0d3      	b.n	8005f0c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fc20 	bl	80065b4 <USBH_SetCfg>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 80ca 	bne.w	8005f10 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2209      	movs	r2, #9
 8005d80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d82:	e0c5      	b.n	8005f10 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005d92:	2101      	movs	r1, #1
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fc30 	bl	80065fa <USBH_SetFeature>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 80b9 	bne.w	8005f14 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	220a      	movs	r2, #10
 8005da6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005da8:	e0b4      	b.n	8005f14 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	220a      	movs	r2, #10
 8005dae:	701a      	strb	r2, [r3, #0]
      break;
 8005db0:	e0b0      	b.n	8005f14 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80ad 	beq.w	8005f18 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
 8005dca:	e016      	b.n	8005dfa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005dcc:	7bfa      	ldrb	r2, [r7, #15]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32de      	adds	r2, #222	; 0xde
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	791a      	ldrb	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d108      	bne.n	8005df4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005de2:	7bfa      	ldrb	r2, [r7, #15]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	32de      	adds	r2, #222	; 0xde
 8005de8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005df2:	e005      	b.n	8005e00 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	3301      	adds	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0e5      	beq.n	8005dcc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	4798      	blx	r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d109      	bne.n	8005e30 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2206      	movs	r2, #6
 8005e20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e28:	2103      	movs	r1, #3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e2e:	e073      	b.n	8005f18 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	220d      	movs	r2, #13
 8005e34:	701a      	strb	r2, [r3, #0]
      break;
 8005e36:	e06f      	b.n	8005f18 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	220d      	movs	r2, #13
 8005e3c:	701a      	strb	r2, [r3, #0]
      break;
 8005e3e:	e06b      	b.n	8005f18 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	220b      	movs	r2, #11
 8005e66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e68:	e058      	b.n	8005f1c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005e6a:	7bbb      	ldrb	r3, [r7, #14]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d154      	bne.n	8005f1c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	220d      	movs	r2, #13
 8005e76:	701a      	strb	r2, [r3, #0]
      break;
 8005e78:	e050      	b.n	8005f1c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	220d      	movs	r2, #13
 8005e7e:	701a      	strb	r2, [r3, #0]
      break;
 8005e80:	e04c      	b.n	8005f1c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d049      	beq.n	8005f20 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
      }
      break;
 8005e98:	e042      	b.n	8005f20 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fd72 	bl	800598c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ed6:	2105      	movs	r1, #5
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d107      	bne.n	8005ef8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fe2b 	bl	8005b4c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ef6:	e014      	b.n	8005f22 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 f9b5 	bl	8007268 <USBH_LL_Start>
      break;
 8005efe:	e010      	b.n	8005f22 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005f00:	bf00      	nop
 8005f02:	e00e      	b.n	8005f22 <USBH_Process+0x3b6>
      break;
 8005f04:	bf00      	nop
 8005f06:	e00c      	b.n	8005f22 <USBH_Process+0x3b6>
      break;
 8005f08:	bf00      	nop
 8005f0a:	e00a      	b.n	8005f22 <USBH_Process+0x3b6>
    break;
 8005f0c:	bf00      	nop
 8005f0e:	e008      	b.n	8005f22 <USBH_Process+0x3b6>
      break;
 8005f10:	bf00      	nop
 8005f12:	e006      	b.n	8005f22 <USBH_Process+0x3b6>
      break;
 8005f14:	bf00      	nop
 8005f16:	e004      	b.n	8005f22 <USBH_Process+0x3b6>
      break;
 8005f18:	bf00      	nop
 8005f1a:	e002      	b.n	8005f22 <USBH_Process+0x3b6>
      break;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <USBH_Process+0x3b6>
      break;
 8005f20:	bf00      	nop
  }
  return USBH_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af04      	add	r7, sp, #16
 8005f32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005f34:	2301      	movs	r3, #1
 8005f36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b07      	cmp	r3, #7
 8005f42:	f200 81c1 	bhi.w	80062c8 <USBH_HandleEnum+0x39c>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <USBH_HandleEnum+0x20>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	0800602b 	.word	0x0800602b
 8005f54:	08006095 	.word	0x08006095
 8005f58:	08006123 	.word	0x08006123
 8005f5c:	0800618d 	.word	0x0800618d
 8005f60:	080061fd 	.word	0x080061fd
 8005f64:	08006243 	.word	0x08006243
 8005f68:	08006289 	.word	0x08006289
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa50 	bl	8006414 <USBH_Get_DevDesc>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d130      	bne.n	8005fe0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7919      	ldrb	r1, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	9202      	str	r2, [sp, #8]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	9201      	str	r2, [sp, #4]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4603      	mov	r3, r0
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 ff77 	bl	8006ea4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	7959      	ldrb	r1, [r3, #5]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005fca:	b292      	uxth	r2, r2
 8005fcc:	9202      	str	r2, [sp, #8]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	9201      	str	r2, [sp, #4]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 ff63 	bl	8006ea4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005fde:	e175      	b.n	80062cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	f040 8172 	bne.w	80062cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d903      	bls.n	800600a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	220d      	movs	r2, #13
 8006006:	701a      	strb	r2, [r3, #0]
      break;
 8006008:	e160      	b.n	80062cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	795b      	ldrb	r3, [r3, #5]
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 ff97 	bl	8006f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	791b      	ldrb	r3, [r3, #4]
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 ff91 	bl	8006f44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
      break;
 8006028:	e150      	b.n	80062cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800602a:	2112      	movs	r1, #18
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f9f1 	bl	8006414 <USBH_Get_DevDesc>
 8006032:	4603      	mov	r3, r0
 8006034:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006042:	e145      	b.n	80062d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2b03      	cmp	r3, #3
 8006048:	f040 8142 	bne.w	80062d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006052:	3301      	adds	r3, #1
 8006054:	b2da      	uxtb	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006062:	2b03      	cmp	r3, #3
 8006064:	d903      	bls.n	800606e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	220d      	movs	r2, #13
 800606a:	701a      	strb	r2, [r3, #0]
      break;
 800606c:	e130      	b.n	80062d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	795b      	ldrb	r3, [r3, #5]
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 ff65 	bl	8006f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 ff5f 	bl	8006f44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
      break;
 8006092:	e11d      	b.n	80062d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006094:	2101      	movs	r1, #1
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa68 	bl	800656c <USBH_SetAddress>
 800609c:	4603      	mov	r3, r0
 800609e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d132      	bne.n	800610c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80060a6:	2002      	movs	r0, #2
 80060a8:	f001 fa45 	bl	8007536 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2203      	movs	r2, #3
 80060b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7919      	ldrb	r1, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80060ce:	b292      	uxth	r2, r2
 80060d0:	9202      	str	r2, [sp, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	9201      	str	r2, [sp, #4]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	4603      	mov	r3, r0
 80060da:	2280      	movs	r2, #128	; 0x80
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fee1 	bl	8006ea4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	7959      	ldrb	r1, [r3, #5]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060f6:	b292      	uxth	r2, r2
 80060f8:	9202      	str	r2, [sp, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	9201      	str	r2, [sp, #4]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4603      	mov	r3, r0
 8006102:	2200      	movs	r2, #0
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fecd 	bl	8006ea4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800610a:	e0e3      	b.n	80062d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	2b03      	cmp	r3, #3
 8006110:	f040 80e0 	bne.w	80062d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	220d      	movs	r2, #13
 8006118:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	705a      	strb	r2, [r3, #1]
      break;
 8006120:	e0d8      	b.n	80062d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006122:	2109      	movs	r1, #9
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f99d 	bl	8006464 <USBH_Get_CfgDesc>
 800612a:	4603      	mov	r3, r0
 800612c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d103      	bne.n	800613c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2204      	movs	r2, #4
 8006138:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800613a:	e0cd      	b.n	80062d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b03      	cmp	r3, #3
 8006140:	f040 80ca 	bne.w	80062d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800614a:	3301      	adds	r3, #1
 800614c:	b2da      	uxtb	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800615a:	2b03      	cmp	r3, #3
 800615c:	d903      	bls.n	8006166 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	220d      	movs	r2, #13
 8006162:	701a      	strb	r2, [r3, #0]
      break;
 8006164:	e0b8      	b.n	80062d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	795b      	ldrb	r3, [r3, #5]
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fee9 	bl	8006f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	791b      	ldrb	r3, [r3, #4]
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fee3 	bl	8006f44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	701a      	strb	r2, [r3, #0]
      break;
 800618a:	e0a5      	b.n	80062d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f965 	bl	8006464 <USBH_Get_CfgDesc>
 800619a:	4603      	mov	r3, r0
 800619c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2205      	movs	r2, #5
 80061a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80061aa:	e097      	b.n	80062dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f040 8094 	bne.w	80062dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061ba:	3301      	adds	r3, #1
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d903      	bls.n	80061d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	220d      	movs	r2, #13
 80061d2:	701a      	strb	r2, [r3, #0]
      break;
 80061d4:	e082      	b.n	80062dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	795b      	ldrb	r3, [r3, #5]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 feb1 	bl	8006f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	791b      	ldrb	r3, [r3, #4]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 feab 	bl	8006f44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
      break;
 80061fa:	e06f      	b.n	80062dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006202:	2b00      	cmp	r3, #0
 8006204:	d019      	beq.n	800623a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006212:	23ff      	movs	r3, #255	; 0xff
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f949 	bl	80064ac <USBH_Get_StringDesc>
 800621a:	4603      	mov	r3, r0
 800621c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2206      	movs	r2, #6
 8006228:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800622a:	e059      	b.n	80062e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d156      	bne.n	80062e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2206      	movs	r2, #6
 8006236:	705a      	strb	r2, [r3, #1]
      break;
 8006238:	e052      	b.n	80062e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2206      	movs	r2, #6
 800623e:	705a      	strb	r2, [r3, #1]
      break;
 8006240:	e04e      	b.n	80062e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006248:	2b00      	cmp	r3, #0
 800624a:	d019      	beq.n	8006280 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006258:	23ff      	movs	r3, #255	; 0xff
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f926 	bl	80064ac <USBH_Get_StringDesc>
 8006260:	4603      	mov	r3, r0
 8006262:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2207      	movs	r2, #7
 800626e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006270:	e038      	b.n	80062e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d135      	bne.n	80062e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2207      	movs	r2, #7
 800627c:	705a      	strb	r2, [r3, #1]
      break;
 800627e:	e031      	b.n	80062e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2207      	movs	r2, #7
 8006284:	705a      	strb	r2, [r3, #1]
      break;
 8006286:	e02d      	b.n	80062e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800628e:	2b00      	cmp	r3, #0
 8006290:	d017      	beq.n	80062c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800629e:	23ff      	movs	r3, #255	; 0xff
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f903 	bl	80064ac <USBH_Get_StringDesc>
 80062a6:	4603      	mov	r3, r0
 80062a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80062b4:	e018      	b.n	80062e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d115      	bne.n	80062e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e012      	b.n	80062e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
      break;
 80062c6:	e00f      	b.n	80062e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80062c8:	bf00      	nop
 80062ca:	e00e      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062cc:	bf00      	nop
 80062ce:	e00c      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062d0:	bf00      	nop
 80062d2:	e00a      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062d4:	bf00      	nop
 80062d6:	e008      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062d8:	bf00      	nop
 80062da:	e006      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062dc:	bf00      	nop
 80062de:	e004      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <USBH_HandleEnum+0x3be>
      break;
 80062e8:	bf00      	nop
  }
  return Status;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f804 	bl	8006336 <USBH_HandleSof>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b0b      	cmp	r3, #11
 8006346:	d10a      	bne.n	800635e <USBH_HandleSof+0x28>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
  }
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006376:	bf00      	nop
}
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006392:	bf00      	nop
}
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 ff56 	bl	800729e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	791b      	ldrb	r3, [r3, #4]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fda3 	bl	8006f44 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	795b      	ldrb	r3, [r3, #5]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fd9d 	bl	8006f44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af02      	add	r7, sp, #8
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	b29b      	uxth	r3, r3
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006432:	2100      	movs	r1, #0
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f864 	bl	8006502 <USBH_GetDescriptor>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f203 3026 	addw	r0, r3, #806	; 0x326
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006450:	78fa      	ldrb	r2, [r7, #3]
 8006452:	b292      	uxth	r2, r2
 8006454:	4619      	mov	r1, r3
 8006456:	f000 f918 	bl	800668a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	331c      	adds	r3, #28
 8006474:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006476:	887b      	ldrh	r3, [r7, #2]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006480:	2100      	movs	r1, #0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f83d 	bl	8006502 <USBH_GetDescriptor>
 8006488:	4603      	mov	r3, r0
 800648a:	72fb      	strb	r3, [r7, #11]
 800648c:	7afb      	ldrb	r3, [r7, #11]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006498:	887a      	ldrh	r2, [r7, #2]
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	4618      	mov	r0, r3
 800649e:	f000 f964 	bl	800676a <USBH_ParseCfgDesc>
  }

  return status;
 80064a2:	7afb      	ldrb	r3, [r7, #11]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	461a      	mov	r2, r3
 80064b8:	460b      	mov	r3, r1
 80064ba:	72fb      	strb	r3, [r7, #11]
 80064bc:	4613      	mov	r3, r2
 80064be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80064c0:	7afb      	ldrb	r3, [r7, #11]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80064c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80064d0:	893b      	ldrh	r3, [r7, #8]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	460b      	mov	r3, r1
 80064d6:	2100      	movs	r1, #0
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f812 	bl	8006502 <USBH_GetDescriptor>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d107      	bne.n	80064f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80064ee:	893a      	ldrh	r2, [r7, #8]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fa37 	bl	8006966 <USBH_ParseStringDesc>
  }

  return status;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	72fb      	strb	r3, [r7, #11]
 8006510:	4613      	mov	r3, r2
 8006512:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	789b      	ldrb	r3, [r3, #2]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d11c      	bne.n	8006556 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006522:	b2da      	uxtb	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2206      	movs	r2, #6
 800652c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	893a      	ldrh	r2, [r7, #8]
 8006532:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006534:	893b      	ldrh	r3, [r7, #8]
 8006536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800653a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653e:	d104      	bne.n	800654a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f240 4209 	movw	r2, #1033	; 0x409
 8006546:	829a      	strh	r2, [r3, #20]
 8006548:	e002      	b.n	8006550 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8b3a      	ldrh	r2, [r7, #24]
 8006554:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006556:	8b3b      	ldrh	r3, [r7, #24]
 8006558:	461a      	mov	r2, r3
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fa50 	bl	8006a02 <USBH_CtlReq>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	789b      	ldrb	r3, [r3, #2]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10f      	bne.n	80065a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2205      	movs	r2, #5
 800658a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80065a0:	2200      	movs	r2, #0
 80065a2:	2100      	movs	r1, #0
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fa2c 	bl	8006a02 <USBH_CtlReq>
 80065aa:	4603      	mov	r3, r0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	789b      	ldrb	r3, [r3, #2]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10e      	bne.n	80065e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2209      	movs	r2, #9
 80065d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80065e6:	2200      	movs	r2, #0
 80065e8:	2100      	movs	r1, #0
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa09 	bl	8006a02 <USBH_CtlReq>
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	789b      	ldrb	r3, [r3, #2]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d10f      	bne.n	800662e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2203      	movs	r2, #3
 8006618:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	b29a      	uxth	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800662e:	2200      	movs	r2, #0
 8006630:	2100      	movs	r1, #0
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f9e5 	bl	8006a02 <USBH_CtlReq>
 8006638:	4603      	mov	r3, r0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	789b      	ldrb	r3, [r3, #2]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d10f      	bne.n	8006676 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	b29a      	uxth	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006676:	2200      	movs	r2, #0
 8006678:	2100      	movs	r1, #0
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f9c1 	bl	8006a02 <USBH_CtlReq>
 8006680:	4603      	mov	r3, r0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	4613      	mov	r3, r2
 8006696:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	781a      	ldrb	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	785a      	ldrb	r2, [r3, #1]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	3302      	adds	r3, #2
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	3303      	adds	r3, #3
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	791a      	ldrb	r2, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	795a      	ldrb	r2, [r3, #5]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	799a      	ldrb	r2, [r3, #6]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	79da      	ldrb	r2, [r3, #7]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d939      	bls.n	800675e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	3308      	adds	r3, #8
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	3309      	adds	r3, #9
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	330a      	adds	r3, #10
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b29a      	uxth	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	330b      	adds	r3, #11
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	b29b      	uxth	r3, r3
 800671a:	4313      	orrs	r3, r2
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	330c      	adds	r3, #12
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	b29a      	uxth	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	330d      	adds	r3, #13
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	b29b      	uxth	r3, r3
 8006736:	4313      	orrs	r3, r2
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	7b9a      	ldrb	r2, [r3, #14]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	7bda      	ldrb	r2, [r3, #15]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	7c1a      	ldrb	r2, [r3, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	7c5a      	ldrb	r2, [r3, #17]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	745a      	strb	r2, [r3, #17]
  }
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b08a      	sub	sp, #40	; 0x28
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	4613      	mov	r3, r2
 8006776:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	781a      	ldrb	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	785a      	ldrb	r2, [r3, #1]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	3302      	adds	r3, #2
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	3303      	adds	r3, #3
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	021b      	lsls	r3, r3, #8
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	4313      	orrs	r3, r2
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	791a      	ldrb	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	795a      	ldrb	r2, [r3, #5]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	799a      	ldrb	r2, [r3, #6]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	79da      	ldrb	r2, [r3, #7]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	7a1a      	ldrb	r2, [r3, #8]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	2b09      	cmp	r3, #9
 80067e4:	d95f      	bls.n	80068a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80067e6:	2309      	movs	r3, #9
 80067e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80067ee:	e051      	b.n	8006894 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80067f0:	f107 0316 	add.w	r3, r7, #22
 80067f4:	4619      	mov	r1, r3
 80067f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067f8:	f000 f8e8 	bl	80069cc <USBH_GetNextDesc>
 80067fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b04      	cmp	r3, #4
 8006804:	d146      	bne.n	8006894 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800680a:	221a      	movs	r2, #26
 800680c:	fb02 f303 	mul.w	r3, r2, r3
 8006810:	3308      	adds	r3, #8
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	3302      	adds	r3, #2
 8006818:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800681a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800681c:	69f8      	ldr	r0, [r7, #28]
 800681e:	f000 f846 	bl	80068ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006828:	2300      	movs	r3, #0
 800682a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800682c:	e022      	b.n	8006874 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800682e:	f107 0316 	add.w	r3, r7, #22
 8006832:	4619      	mov	r1, r3
 8006834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006836:	f000 f8c9 	bl	80069cc <USBH_GetNextDesc>
 800683a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b05      	cmp	r3, #5
 8006842:	d117      	bne.n	8006874 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006848:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800684c:	3201      	adds	r2, #1
 800684e:	00d2      	lsls	r2, r2, #3
 8006850:	211a      	movs	r1, #26
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	4413      	add	r3, r2
 8006858:	3308      	adds	r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	3304      	adds	r3, #4
 8006860:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006864:	69b8      	ldr	r0, [r7, #24]
 8006866:	f000 f851 	bl	800690c <USBH_ParseEPDesc>
            ep_ix++;
 800686a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800686e:	3301      	adds	r3, #1
 8006870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	791b      	ldrb	r3, [r3, #4]
 8006878:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800687c:	429a      	cmp	r2, r3
 800687e:	d204      	bcs.n	800688a <USBH_ParseCfgDesc+0x120>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	885a      	ldrh	r2, [r3, #2]
 8006884:	8afb      	ldrh	r3, [r7, #22]
 8006886:	429a      	cmp	r2, r3
 8006888:	d8d1      	bhi.n	800682e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800688a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800688e:	3301      	adds	r3, #1
 8006890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006898:	2b01      	cmp	r3, #1
 800689a:	d804      	bhi.n	80068a6 <USBH_ParseCfgDesc+0x13c>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	885a      	ldrh	r2, [r3, #2]
 80068a0:	8afb      	ldrh	r3, [r7, #22]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d8a4      	bhi.n	80067f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80068a6:	bf00      	nop
 80068a8:	3728      	adds	r7, #40	; 0x28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	785a      	ldrb	r2, [r3, #1]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	789a      	ldrb	r2, [r3, #2]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	78da      	ldrb	r2, [r3, #3]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	791a      	ldrb	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	795a      	ldrb	r2, [r3, #5]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	799a      	ldrb	r2, [r3, #6]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	79da      	ldrb	r2, [r3, #7]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	7a1a      	ldrb	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	721a      	strb	r2, [r3, #8]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	785a      	ldrb	r2, [r3, #1]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	789a      	ldrb	r2, [r3, #2]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	78da      	ldrb	r2, [r3, #3]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	3304      	adds	r3, #4
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b29a      	uxth	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	3305      	adds	r3, #5
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	b29b      	uxth	r3, r3
 800694a:	4313      	orrs	r3, r2
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	799a      	ldrb	r2, [r3, #6]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	719a      	strb	r2, [r3, #6]
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006966:	b480      	push	{r7}
 8006968:	b087      	sub	sp, #28
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3301      	adds	r3, #1
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b03      	cmp	r3, #3
 800697c:	d120      	bne.n	80069c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	1e9a      	subs	r2, r3, #2
 8006984:	88fb      	ldrh	r3, [r7, #6]
 8006986:	4293      	cmp	r3, r2
 8006988:	bf28      	it	cs
 800698a:	4613      	movcs	r3, r2
 800698c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3302      	adds	r3, #2
 8006992:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006994:	2300      	movs	r3, #0
 8006996:	82fb      	strh	r3, [r7, #22]
 8006998:	e00b      	b.n	80069b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800699a:	8afb      	ldrh	r3, [r7, #22]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80069ac:	8afb      	ldrh	r3, [r7, #22]
 80069ae:	3302      	adds	r3, #2
 80069b0:	82fb      	strh	r3, [r7, #22]
 80069b2:	8afa      	ldrh	r2, [r7, #22]
 80069b4:	8abb      	ldrh	r3, [r7, #20]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d3ef      	bcc.n	800699a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
  }
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4413      	add	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069f4:	68fb      	ldr	r3, [r7, #12]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b086      	sub	sp, #24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006a10:	2301      	movs	r3, #1
 8006a12:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	789b      	ldrb	r3, [r3, #2]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d002      	beq.n	8006a22 <USBH_CtlReq+0x20>
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d00f      	beq.n	8006a40 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006a20:	e027      	b.n	8006a72 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	88fa      	ldrh	r2, [r7, #6]
 8006a2c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2202      	movs	r2, #2
 8006a38:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3e:	e018      	b.n	8006a72 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f81b 	bl	8006a7c <USBH_HandleControl>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <USBH_CtlReq+0x54>
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d106      	bne.n	8006a64 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	761a      	strb	r2, [r3, #24]
      break;
 8006a62:	e005      	b.n	8006a70 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d102      	bne.n	8006a70 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	709a      	strb	r2, [r3, #2]
      break;
 8006a70:	bf00      	nop
  }
  return status;
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7e1b      	ldrb	r3, [r3, #24]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	2b0a      	cmp	r3, #10
 8006a94:	f200 8156 	bhi.w	8006d44 <USBH_HandleControl+0x2c8>
 8006a98:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <USBH_HandleControl+0x24>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006ae7 	.word	0x08006ae7
 8006aa8:	08006b51 	.word	0x08006b51
 8006aac:	08006b77 	.word	0x08006b77
 8006ab0:	08006baf 	.word	0x08006baf
 8006ab4:	08006bd9 	.word	0x08006bd9
 8006ab8:	08006c2b 	.word	0x08006c2b
 8006abc:	08006c4d 	.word	0x08006c4d
 8006ac0:	08006c89 	.word	0x08006c89
 8006ac4:	08006caf 	.word	0x08006caf
 8006ac8:	08006ced 	.word	0x08006ced
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f103 0110 	add.w	r1, r3, #16
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	795b      	ldrb	r3, [r3, #5]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f943 	bl	8006d64 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	761a      	strb	r2, [r3, #24]
      break;
 8006ae4:	e139      	b.n	8006d5a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	795b      	ldrb	r3, [r3, #5]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcc5 	bl	800747c <USBH_LL_GetURBState>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d11e      	bne.n	8006b3a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7c1b      	ldrb	r3, [r3, #16]
 8006b00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8adb      	ldrh	r3, [r3, #22]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006b0e:	7b7b      	ldrb	r3, [r7, #13]
 8006b10:	2b80      	cmp	r3, #128	; 0x80
 8006b12:	d103      	bne.n	8006b1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2203      	movs	r2, #3
 8006b18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b1a:	e115      	b.n	8006d48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2205      	movs	r2, #5
 8006b20:	761a      	strb	r2, [r3, #24]
      break;
 8006b22:	e111      	b.n	8006d48 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006b24:	7b7b      	ldrb	r3, [r7, #13]
 8006b26:	2b80      	cmp	r3, #128	; 0x80
 8006b28:	d103      	bne.n	8006b32 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2209      	movs	r2, #9
 8006b2e:	761a      	strb	r2, [r3, #24]
      break;
 8006b30:	e10a      	b.n	8006d48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2207      	movs	r2, #7
 8006b36:	761a      	strb	r2, [r3, #24]
      break;
 8006b38:	e106      	b.n	8006d48 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d003      	beq.n	8006b48 <USBH_HandleControl+0xcc>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	f040 8100 	bne.w	8006d48 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	220b      	movs	r2, #11
 8006b4c:	761a      	strb	r2, [r3, #24]
      break;
 8006b4e:	e0fb      	b.n	8006d48 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6899      	ldr	r1, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	899a      	ldrh	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	791b      	ldrb	r3, [r3, #4]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f93a 	bl	8006de2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2204      	movs	r2, #4
 8006b72:	761a      	strb	r2, [r3, #24]
      break;
 8006b74:	e0f1      	b.n	8006d5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	791b      	ldrb	r3, [r3, #4]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fc7d 	bl	800747c <USBH_LL_GetURBState>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d102      	bne.n	8006b92 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2209      	movs	r2, #9
 8006b90:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	2b05      	cmp	r3, #5
 8006b96:	d102      	bne.n	8006b9e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b9c:	e0d6      	b.n	8006d4c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	f040 80d3 	bne.w	8006d4c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	220b      	movs	r2, #11
 8006baa:	761a      	strb	r2, [r3, #24]
      break;
 8006bac:	e0ce      	b.n	8006d4c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6899      	ldr	r1, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	899a      	ldrh	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	795b      	ldrb	r3, [r3, #5]
 8006bba:	2001      	movs	r0, #1
 8006bbc:	9000      	str	r0, [sp, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f8ea 	bl	8006d98 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2206      	movs	r2, #6
 8006bd4:	761a      	strb	r2, [r3, #24]
      break;
 8006bd6:	e0c0      	b.n	8006d5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	795b      	ldrb	r3, [r3, #5]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fc4c 	bl	800747c <USBH_LL_GetURBState>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d103      	bne.n	8006bf6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006bf4:	e0ac      	b.n	8006d50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d105      	bne.n	8006c08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	220c      	movs	r2, #12
 8006c00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006c02:	2303      	movs	r3, #3
 8006c04:	73fb      	strb	r3, [r7, #15]
      break;
 8006c06:	e0a3      	b.n	8006d50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d103      	bne.n	8006c16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2205      	movs	r2, #5
 8006c12:	761a      	strb	r2, [r3, #24]
      break;
 8006c14:	e09c      	b.n	8006d50 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	f040 8099 	bne.w	8006d50 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	220b      	movs	r2, #11
 8006c22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006c24:	2302      	movs	r3, #2
 8006c26:	73fb      	strb	r3, [r7, #15]
      break;
 8006c28:	e092      	b.n	8006d50 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	791b      	ldrb	r3, [r3, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8d5 	bl	8006de2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2208      	movs	r2, #8
 8006c48:	761a      	strb	r2, [r3, #24]

      break;
 8006c4a:	e086      	b.n	8006d5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	791b      	ldrb	r3, [r3, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fc12 	bl	800747c <USBH_LL_GetURBState>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d105      	bne.n	8006c6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	220d      	movs	r2, #13
 8006c66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006c6c:	e072      	b.n	8006d54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d103      	bne.n	8006c7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	220b      	movs	r2, #11
 8006c78:	761a      	strb	r2, [r3, #24]
      break;
 8006c7a:	e06b      	b.n	8006d54 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	d168      	bne.n	8006d54 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006c82:	2303      	movs	r3, #3
 8006c84:	73fb      	strb	r3, [r7, #15]
      break;
 8006c86:	e065      	b.n	8006d54 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	795b      	ldrb	r3, [r3, #5]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	9200      	str	r2, [sp, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	2100      	movs	r1, #0
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f87f 	bl	8006d98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	220a      	movs	r2, #10
 8006caa:	761a      	strb	r2, [r3, #24]
      break;
 8006cac:	e055      	b.n	8006d5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	795b      	ldrb	r3, [r3, #5]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fbe1 	bl	800747c <USBH_LL_GetURBState>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d105      	bne.n	8006cd0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	220d      	movs	r2, #13
 8006ccc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006cce:	e043      	b.n	8006d58 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d103      	bne.n	8006cde <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2209      	movs	r2, #9
 8006cda:	761a      	strb	r2, [r3, #24]
      break;
 8006cdc:	e03c      	b.n	8006d58 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d139      	bne.n	8006d58 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	220b      	movs	r2, #11
 8006ce8:	761a      	strb	r2, [r3, #24]
      break;
 8006cea:	e035      	b.n	8006d58 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	7e5b      	ldrb	r3, [r3, #25]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	765a      	strb	r2, [r3, #25]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7e5b      	ldrb	r3, [r3, #25]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d806      	bhi.n	8006d0e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006d0c:	e025      	b.n	8006d5a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d14:	2106      	movs	r1, #6
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	795b      	ldrb	r3, [r3, #5]
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f90c 	bl	8006f44 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	791b      	ldrb	r3, [r3, #4]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f906 	bl	8006f44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	73fb      	strb	r3, [r7, #15]
      break;
 8006d42:	e00a      	b.n	8006d5a <USBH_HandleControl+0x2de>

    default:
      break;
 8006d44:	bf00      	nop
 8006d46:	e008      	b.n	8006d5a <USBH_HandleControl+0x2de>
      break;
 8006d48:	bf00      	nop
 8006d4a:	e006      	b.n	8006d5a <USBH_HandleControl+0x2de>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e004      	b.n	8006d5a <USBH_HandleControl+0x2de>
      break;
 8006d50:	bf00      	nop
 8006d52:	e002      	b.n	8006d5a <USBH_HandleControl+0x2de>
      break;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <USBH_HandleControl+0x2de>
      break;
 8006d58:	bf00      	nop
  }

  return status;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af04      	add	r7, sp, #16
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d72:	79f9      	ldrb	r1, [r7, #7]
 8006d74:	2300      	movs	r3, #0
 8006d76:	9303      	str	r3, [sp, #12]
 8006d78:	2308      	movs	r3, #8
 8006d7a:	9302      	str	r3, [sp, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	9301      	str	r3, [sp, #4]
 8006d80:	2300      	movs	r3, #0
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	2200      	movs	r2, #0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fb46 	bl	800741a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af04      	add	r7, sp, #16
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4611      	mov	r1, r2
 8006da4:	461a      	mov	r2, r3
 8006da6:	460b      	mov	r3, r1
 8006da8:	80fb      	strh	r3, [r7, #6]
 8006daa:	4613      	mov	r3, r2
 8006dac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006dbc:	7979      	ldrb	r1, [r7, #5]
 8006dbe:	7e3b      	ldrb	r3, [r7, #24]
 8006dc0:	9303      	str	r3, [sp, #12]
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	2301      	movs	r3, #1
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fb21 	bl	800741a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b088      	sub	sp, #32
 8006de6:	af04      	add	r7, sp, #16
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	4611      	mov	r1, r2
 8006dee:	461a      	mov	r2, r3
 8006df0:	460b      	mov	r3, r1
 8006df2:	80fb      	strh	r3, [r7, #6]
 8006df4:	4613      	mov	r3, r2
 8006df6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006df8:	7979      	ldrb	r1, [r7, #5]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	9302      	str	r3, [sp, #8]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	2301      	movs	r3, #1
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fb03 	bl	800741a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006e14:	2300      	movs	r3, #0

}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b088      	sub	sp, #32
 8006e22:	af04      	add	r7, sp, #16
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	80fb      	strh	r3, [r7, #6]
 8006e30:	4613      	mov	r3, r2
 8006e32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006e42:	7979      	ldrb	r1, [r7, #5]
 8006e44:	7e3b      	ldrb	r3, [r7, #24]
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	9302      	str	r3, [sp, #8]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	2301      	movs	r3, #1
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	2302      	movs	r3, #2
 8006e56:	2200      	movs	r2, #0
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 fade 	bl	800741a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af04      	add	r7, sp, #16
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4611      	mov	r1, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	460b      	mov	r3, r1
 8006e78:	80fb      	strh	r3, [r7, #6]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006e7e:	7979      	ldrb	r1, [r7, #5]
 8006e80:	2300      	movs	r3, #0
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	88fb      	ldrh	r3, [r7, #6]
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	2302      	movs	r3, #2
 8006e92:	2201      	movs	r2, #1
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fac0 	bl	800741a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	4608      	mov	r0, r1
 8006eae:	4611      	mov	r1, r2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	70fb      	strb	r3, [r7, #3]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70bb      	strb	r3, [r7, #2]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006ebe:	7878      	ldrb	r0, [r7, #1]
 8006ec0:	78ba      	ldrb	r2, [r7, #2]
 8006ec2:	78f9      	ldrb	r1, [r7, #3]
 8006ec4:	8b3b      	ldrh	r3, [r7, #24]
 8006ec6:	9302      	str	r3, [sp, #8]
 8006ec8:	7d3b      	ldrb	r3, [r7, #20]
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	7c3b      	ldrb	r3, [r7, #16]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa53 	bl	800737e <USBH_LL_OpenPipe>

  return USBH_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa72 	bl	80073dc <USBH_LL_ClosePipe>

  return USBH_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f836 	bl	8006f80 <USBH_GetFreePipe>
 8006f14:	4603      	mov	r3, r0
 8006f16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006f18:	89fb      	ldrh	r3, [r7, #14]
 8006f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00a      	beq.n	8006f38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	89fb      	ldrh	r3, [r7, #14]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	33e0      	adds	r3, #224	; 0xe0
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006f38:	89fb      	ldrh	r3, [r7, #14]
 8006f3a:	b2db      	uxtb	r3, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	2b0a      	cmp	r3, #10
 8006f54:	d80d      	bhi.n	8006f72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	33e0      	adds	r3, #224	; 0xe0
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	33e0      	adds	r3, #224	; 0xe0
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e00f      	b.n	8006fb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	33e0      	adds	r3, #224	; 0xe0
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	e007      	b.n	8006fbc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	73fb      	strb	r3, [r7, #15]
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b0a      	cmp	r3, #10
 8006fb6:	d9ec      	bls.n	8006f92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	490e      	ldr	r1, [pc, #56]	; (8007008 <MX_USB_HOST_Init+0x40>)
 8006fd0:	480e      	ldr	r0, [pc, #56]	; (800700c <MX_USB_HOST_Init+0x44>)
 8006fd2:	f7fe fca1 	bl	8005918 <USBH_Init>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006fdc:	f7f9 fe4a 	bl	8000c74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006fe0:	490b      	ldr	r1, [pc, #44]	; (8007010 <MX_USB_HOST_Init+0x48>)
 8006fe2:	480a      	ldr	r0, [pc, #40]	; (800700c <MX_USB_HOST_Init+0x44>)
 8006fe4:	f7fe fd26 	bl	8005a34 <USBH_RegisterClass>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006fee:	f7f9 fe41 	bl	8000c74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006ff2:	4806      	ldr	r0, [pc, #24]	; (800700c <MX_USB_HOST_Init+0x44>)
 8006ff4:	f7fe fdaa 	bl	8005b4c <USBH_Start>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006ffe:	f7f9 fe39 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007002:	bf00      	nop
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	08007029 	.word	0x08007029
 800700c:	2000015c 	.word	0x2000015c
 8007010:	2000000c 	.word	0x2000000c

08007014 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007018:	4802      	ldr	r0, [pc, #8]	; (8007024 <MX_USB_HOST_Process+0x10>)
 800701a:	f7fe fda7 	bl	8005b6c <USBH_Process>
}
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2000015c 	.word	0x2000015c

08007028 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	3b01      	subs	r3, #1
 8007038:	2b04      	cmp	r3, #4
 800703a:	d819      	bhi.n	8007070 <USBH_UserProcess+0x48>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBH_UserProcess+0x1c>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007071 	.word	0x08007071
 8007048:	08007061 	.word	0x08007061
 800704c:	08007071 	.word	0x08007071
 8007050:	08007069 	.word	0x08007069
 8007054:	08007059 	.word	0x08007059
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007058:	4b09      	ldr	r3, [pc, #36]	; (8007080 <USBH_UserProcess+0x58>)
 800705a:	2203      	movs	r2, #3
 800705c:	701a      	strb	r2, [r3, #0]
  break;
 800705e:	e008      	b.n	8007072 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <USBH_UserProcess+0x58>)
 8007062:	2202      	movs	r2, #2
 8007064:	701a      	strb	r2, [r3, #0]
  break;
 8007066:	e004      	b.n	8007072 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <USBH_UserProcess+0x58>)
 800706a:	2201      	movs	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]
  break;
 800706e:	e000      	b.n	8007072 <USBH_UserProcess+0x4a>

  default:
  break;
 8007070:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	200000b8 	.word	0x200000b8

08007084 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	605a      	str	r2, [r3, #4]
 8007096:	609a      	str	r2, [r3, #8]
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070a4:	d147      	bne.n	8007136 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	4b25      	ldr	r3, [pc, #148]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	4a24      	ldr	r2, [pc, #144]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 80070b0:	f043 0301 	orr.w	r3, r3, #1
 80070b4:	6313      	str	r3, [r2, #48]	; 0x30
 80070b6:	4b22      	ldr	r3, [pc, #136]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80070c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80070d0:	f107 0314 	add.w	r3, r7, #20
 80070d4:	4619      	mov	r1, r3
 80070d6:	481b      	ldr	r0, [pc, #108]	; (8007144 <HAL_HCD_MspInit+0xc0>)
 80070d8:	f7fa f8dc 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80070dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80070e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e2:	2302      	movs	r3, #2
 80070e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ea:	2300      	movs	r3, #0
 80070ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070ee:	230a      	movs	r3, #10
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070f2:	f107 0314 	add.w	r3, r7, #20
 80070f6:	4619      	mov	r1, r3
 80070f8:	4812      	ldr	r0, [pc, #72]	; (8007144 <HAL_HCD_MspInit+0xc0>)
 80070fa:	f7fa f8cb 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070fe:	4b10      	ldr	r3, [pc, #64]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	4a0f      	ldr	r2, [pc, #60]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 8007104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007108:	6353      	str	r3, [r2, #52]	; 0x34
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	4a0b      	ldr	r2, [pc, #44]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 8007114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007118:	6453      	str	r3, [r2, #68]	; 0x44
 800711a:	4b09      	ldr	r3, [pc, #36]	; (8007140 <HAL_HCD_MspInit+0xbc>)
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	2043      	movs	r0, #67	; 0x43
 800712c:	f7fa f87b 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007130:	2043      	movs	r0, #67	; 0x43
 8007132:	f7fa f894 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007136:	bf00      	nop
 8007138:	3728      	adds	r7, #40	; 0x28
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800
 8007144:	40020000 	.word	0x40020000

08007148 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff f8db 	bl	8006312 <USBH_LL_IncTimer>
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff f913 	bl	800639e <USBH_LL_Connect>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff f91c 	bl	80063cc <USBH_LL_Disconnect>
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
 80071a8:	4613      	mov	r3, r2
 80071aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff f8cd 	bl	8006366 <USBH_LL_PortEnabled>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff f8cd 	bl	8006382 <USBH_LL_PortDisabled>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d12a      	bne.n	8007258 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007202:	4a18      	ldr	r2, [pc, #96]	; (8007264 <USBH_LL_Init+0x74>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a15      	ldr	r2, [pc, #84]	; (8007264 <USBH_LL_Init+0x74>)
 800720e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007212:	4b14      	ldr	r3, [pc, #80]	; (8007264 <USBH_LL_Init+0x74>)
 8007214:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007218:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800721a:	4b12      	ldr	r3, [pc, #72]	; (8007264 <USBH_LL_Init+0x74>)
 800721c:	2208      	movs	r2, #8
 800721e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007220:	4b10      	ldr	r3, [pc, #64]	; (8007264 <USBH_LL_Init+0x74>)
 8007222:	2201      	movs	r2, #1
 8007224:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <USBH_LL_Init+0x74>)
 8007228:	2200      	movs	r2, #0
 800722a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <USBH_LL_Init+0x74>)
 800722e:	2202      	movs	r2, #2
 8007230:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007232:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <USBH_LL_Init+0x74>)
 8007234:	2200      	movs	r2, #0
 8007236:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007238:	480a      	ldr	r0, [pc, #40]	; (8007264 <USBH_LL_Init+0x74>)
 800723a:	f7fa f9f8 	bl	800162e <HAL_HCD_Init>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007244:	f7f9 fd16 	bl	8000c74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007248:	4806      	ldr	r0, [pc, #24]	; (8007264 <USBH_LL_Init+0x74>)
 800724a:	f7fa fdfb 	bl	8001e44 <HAL_HCD_GetCurrentFrame>
 800724e:	4603      	mov	r3, r0
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff f84e 	bl	80062f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000534 	.word	0x20000534

08007268 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800727e:	4618      	mov	r0, r3
 8007280:	f7fa fd68 	bl	8001d54 <HAL_HCD_Start>
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f95e 	bl	800754c <USBH_Get_USB_Status>
 8007290:	4603      	mov	r3, r0
 8007292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007294:	7bbb      	ldrb	r3, [r7, #14]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fa fd70 	bl	8001d9a <HAL_HCD_Stop>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 f943 	bl	800754c <USBH_Get_USB_Status>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fa fdba 	bl	8001e60 <HAL_HCD_GetCurrentSpeed>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d00c      	beq.n	800730c <USBH_LL_GetSpeed+0x38>
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d80d      	bhi.n	8007312 <USBH_LL_GetSpeed+0x3e>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <USBH_LL_GetSpeed+0x2c>
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d003      	beq.n	8007306 <USBH_LL_GetSpeed+0x32>
 80072fe:	e008      	b.n	8007312 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
    break;
 8007304:	e008      	b.n	8007318 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007306:	2301      	movs	r3, #1
 8007308:	73fb      	strb	r3, [r7, #15]
    break;
 800730a:	e005      	b.n	8007318 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800730c:	2302      	movs	r3, #2
 800730e:	73fb      	strb	r3, [r7, #15]
    break;
 8007310:	e002      	b.n	8007318 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007312:	2301      	movs	r3, #1
 8007314:	73fb      	strb	r3, [r7, #15]
    break;
 8007316:	bf00      	nop
  }
  return  speed;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007338:	4618      	mov	r0, r3
 800733a:	f7fa fd4b 	bl	8001dd4 <HAL_HCD_ResetPort>
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	4618      	mov	r0, r3
 8007346:	f000 f901 	bl	800754c <USBH_Get_USB_Status>
 800734a:	4603      	mov	r3, r0
 800734c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800734e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7fa fd53 	bl	8001e1a <HAL_HCD_HC_GetXferCount>
 8007374:	4603      	mov	r3, r0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800737e:	b590      	push	{r4, r7, lr}
 8007380:	b089      	sub	sp, #36	; 0x24
 8007382:	af04      	add	r7, sp, #16
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	4608      	mov	r0, r1
 8007388:	4611      	mov	r1, r2
 800738a:	461a      	mov	r2, r3
 800738c:	4603      	mov	r3, r0
 800738e:	70fb      	strb	r3, [r7, #3]
 8007390:	460b      	mov	r3, r1
 8007392:	70bb      	strb	r3, [r7, #2]
 8007394:	4613      	mov	r3, r2
 8007396:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80073a6:	787c      	ldrb	r4, [r7, #1]
 80073a8:	78ba      	ldrb	r2, [r7, #2]
 80073aa:	78f9      	ldrb	r1, [r7, #3]
 80073ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	4623      	mov	r3, r4
 80073be:	f7fa f998 	bl	80016f2 <HAL_HCD_HC_Init>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 f8bf 	bl	800754c <USBH_Get_USB_Status>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd90      	pop	{r4, r7, pc}

080073dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fa fa11 	bl	8001822 <HAL_HCD_HC_Halt>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 f8a0 	bl	800754c <USBH_Get_USB_Status>
 800740c:	4603      	mov	r3, r0
 800740e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007410:	7bbb      	ldrb	r3, [r7, #14]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800741a:	b590      	push	{r4, r7, lr}
 800741c:	b089      	sub	sp, #36	; 0x24
 800741e:	af04      	add	r7, sp, #16
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	4608      	mov	r0, r1
 8007424:	4611      	mov	r1, r2
 8007426:	461a      	mov	r2, r3
 8007428:	4603      	mov	r3, r0
 800742a:	70fb      	strb	r3, [r7, #3]
 800742c:	460b      	mov	r3, r1
 800742e:	70bb      	strb	r3, [r7, #2]
 8007430:	4613      	mov	r3, r2
 8007432:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007442:	787c      	ldrb	r4, [r7, #1]
 8007444:	78ba      	ldrb	r2, [r7, #2]
 8007446:	78f9      	ldrb	r1, [r7, #3]
 8007448:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800744c:	9303      	str	r3, [sp, #12]
 800744e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007450:	9302      	str	r3, [sp, #8]
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	f897 3020 	ldrb.w	r3, [r7, #32]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	4623      	mov	r3, r4
 800745e:	f7fa fa03 	bl	8001868 <HAL_HCD_HC_SubmitRequest>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 f86f 	bl	800754c <USBH_Get_USB_Status>
 800746e:	4603      	mov	r3, r0
 8007470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007472:	7bbb      	ldrb	r3, [r7, #14]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	bd90      	pop	{r4, r7, pc}

0800747c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800748e:	78fa      	ldrb	r2, [r7, #3]
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7fa fcac 	bl	8001df0 <HAL_HCD_HC_GetURBState>
 8007498:	4603      	mov	r3, r0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d103      	bne.n	80074c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f872 	bl	80075a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80074c0:	20c8      	movs	r0, #200	; 0xc8
 80074c2:	f7f9 fdb1 	bl	8001028 <HAL_Delay>
  return USBH_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
 80074dc:	4613      	mov	r3, r2
 80074de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	440b      	add	r3, r1
 80074f6:	333b      	adds	r3, #59	; 0x3b
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	68f9      	ldr	r1, [r7, #12]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	440b      	add	r3, r1
 800750c:	3350      	adds	r3, #80	; 0x50
 800750e:	78ba      	ldrb	r2, [r7, #2]
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e009      	b.n	8007528 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	440b      	add	r3, r1
 8007522:	3351      	adds	r3, #81	; 0x51
 8007524:	78ba      	ldrb	r2, [r7, #2]
 8007526:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7f9 fd72 	bl	8001028 <HAL_Delay>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	2b03      	cmp	r3, #3
 800755e:	d817      	bhi.n	8007590 <USBH_Get_USB_Status+0x44>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <USBH_Get_USB_Status+0x1c>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	08007579 	.word	0x08007579
 800756c:	0800757f 	.word	0x0800757f
 8007570:	08007585 	.word	0x08007585
 8007574:	0800758b 	.word	0x0800758b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]
    break;
 800757c:	e00b      	b.n	8007596 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800757e:	2302      	movs	r3, #2
 8007580:	73fb      	strb	r3, [r7, #15]
    break;
 8007582:	e008      	b.n	8007596 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007584:	2301      	movs	r3, #1
 8007586:	73fb      	strb	r3, [r7, #15]
    break;
 8007588:	e005      	b.n	8007596 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	73fb      	strb	r3, [r7, #15]
    break;
 800758e:	e002      	b.n	8007596 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007590:	2302      	movs	r3, #2
 8007592:	73fb      	strb	r3, [r7, #15]
    break;
 8007594:	bf00      	nop
  }
  return usb_status;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
 80075bc:	e001      	b.n	80075c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	461a      	mov	r2, r3
 80075c6:	2101      	movs	r1, #1
 80075c8:	4803      	ldr	r0, [pc, #12]	; (80075d8 <MX_DriverVbusFS+0x34>)
 80075ca:	f7fa f817 	bl	80015fc <HAL_GPIO_WritePin>
}
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40020800 	.word	0x40020800

080075dc <__errno>:
 80075dc:	4b01      	ldr	r3, [pc, #4]	; (80075e4 <__errno+0x8>)
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000002c 	.word	0x2000002c

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4d0d      	ldr	r5, [pc, #52]	; (8007620 <__libc_init_array+0x38>)
 80075ec:	4c0d      	ldr	r4, [pc, #52]	; (8007624 <__libc_init_array+0x3c>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	2600      	movs	r6, #0
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	4d0b      	ldr	r5, [pc, #44]	; (8007628 <__libc_init_array+0x40>)
 80075fa:	4c0c      	ldr	r4, [pc, #48]	; (800762c <__libc_init_array+0x44>)
 80075fc:	f000 f8f8 	bl	80077f0 <_init>
 8007600:	1b64      	subs	r4, r4, r5
 8007602:	10a4      	asrs	r4, r4, #2
 8007604:	2600      	movs	r6, #0
 8007606:	42a6      	cmp	r6, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007610:	4798      	blx	r3
 8007612:	3601      	adds	r6, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f855 3b04 	ldr.w	r3, [r5], #4
 800761a:	4798      	blx	r3
 800761c:	3601      	adds	r6, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	0800782c 	.word	0x0800782c
 8007624:	0800782c 	.word	0x0800782c
 8007628:	0800782c 	.word	0x0800782c
 800762c:	08007830 	.word	0x08007830

08007630 <malloc>:
 8007630:	4b02      	ldr	r3, [pc, #8]	; (800763c <malloc+0xc>)
 8007632:	4601      	mov	r1, r0
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f000 b863 	b.w	8007700 <_malloc_r>
 800763a:	bf00      	nop
 800763c:	2000002c 	.word	0x2000002c

08007640 <free>:
 8007640:	4b02      	ldr	r3, [pc, #8]	; (800764c <free+0xc>)
 8007642:	4601      	mov	r1, r0
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	f000 b80b 	b.w	8007660 <_free_r>
 800764a:	bf00      	nop
 800764c:	2000002c 	.word	0x2000002c

08007650 <memset>:
 8007650:	4402      	add	r2, r0
 8007652:	4603      	mov	r3, r0
 8007654:	4293      	cmp	r3, r2
 8007656:	d100      	bne.n	800765a <memset+0xa>
 8007658:	4770      	bx	lr
 800765a:	f803 1b01 	strb.w	r1, [r3], #1
 800765e:	e7f9      	b.n	8007654 <memset+0x4>

08007660 <_free_r>:
 8007660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007662:	2900      	cmp	r1, #0
 8007664:	d048      	beq.n	80076f8 <_free_r+0x98>
 8007666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766a:	9001      	str	r0, [sp, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f1a1 0404 	sub.w	r4, r1, #4
 8007672:	bfb8      	it	lt
 8007674:	18e4      	addlt	r4, r4, r3
 8007676:	f000 f8ad 	bl	80077d4 <__malloc_lock>
 800767a:	4a20      	ldr	r2, [pc, #128]	; (80076fc <_free_r+0x9c>)
 800767c:	9801      	ldr	r0, [sp, #4]
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	4615      	mov	r5, r2
 8007682:	b933      	cbnz	r3, 8007692 <_free_r+0x32>
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	6014      	str	r4, [r2, #0]
 8007688:	b003      	add	sp, #12
 800768a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800768e:	f000 b8a7 	b.w	80077e0 <__malloc_unlock>
 8007692:	42a3      	cmp	r3, r4
 8007694:	d90b      	bls.n	80076ae <_free_r+0x4e>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	1862      	adds	r2, r4, r1
 800769a:	4293      	cmp	r3, r2
 800769c:	bf04      	itt	eq
 800769e:	681a      	ldreq	r2, [r3, #0]
 80076a0:	685b      	ldreq	r3, [r3, #4]
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	bf04      	itt	eq
 80076a6:	1852      	addeq	r2, r2, r1
 80076a8:	6022      	streq	r2, [r4, #0]
 80076aa:	602c      	str	r4, [r5, #0]
 80076ac:	e7ec      	b.n	8007688 <_free_r+0x28>
 80076ae:	461a      	mov	r2, r3
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	b10b      	cbz	r3, 80076b8 <_free_r+0x58>
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d9fa      	bls.n	80076ae <_free_r+0x4e>
 80076b8:	6811      	ldr	r1, [r2, #0]
 80076ba:	1855      	adds	r5, r2, r1
 80076bc:	42a5      	cmp	r5, r4
 80076be:	d10b      	bne.n	80076d8 <_free_r+0x78>
 80076c0:	6824      	ldr	r4, [r4, #0]
 80076c2:	4421      	add	r1, r4
 80076c4:	1854      	adds	r4, r2, r1
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	6011      	str	r1, [r2, #0]
 80076ca:	d1dd      	bne.n	8007688 <_free_r+0x28>
 80076cc:	681c      	ldr	r4, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	6053      	str	r3, [r2, #4]
 80076d2:	4421      	add	r1, r4
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	e7d7      	b.n	8007688 <_free_r+0x28>
 80076d8:	d902      	bls.n	80076e0 <_free_r+0x80>
 80076da:	230c      	movs	r3, #12
 80076dc:	6003      	str	r3, [r0, #0]
 80076de:	e7d3      	b.n	8007688 <_free_r+0x28>
 80076e0:	6825      	ldr	r5, [r4, #0]
 80076e2:	1961      	adds	r1, r4, r5
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf04      	itt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	bf04      	itt	eq
 80076f0:	1949      	addeq	r1, r1, r5
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	6054      	str	r4, [r2, #4]
 80076f6:	e7c7      	b.n	8007688 <_free_r+0x28>
 80076f8:	b003      	add	sp, #12
 80076fa:	bd30      	pop	{r4, r5, pc}
 80076fc:	200000bc 	.word	0x200000bc

08007700 <_malloc_r>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	1ccd      	adds	r5, r1, #3
 8007704:	f025 0503 	bic.w	r5, r5, #3
 8007708:	3508      	adds	r5, #8
 800770a:	2d0c      	cmp	r5, #12
 800770c:	bf38      	it	cc
 800770e:	250c      	movcc	r5, #12
 8007710:	2d00      	cmp	r5, #0
 8007712:	4606      	mov	r6, r0
 8007714:	db01      	blt.n	800771a <_malloc_r+0x1a>
 8007716:	42a9      	cmp	r1, r5
 8007718:	d903      	bls.n	8007722 <_malloc_r+0x22>
 800771a:	230c      	movs	r3, #12
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	2000      	movs	r0, #0
 8007720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007722:	f000 f857 	bl	80077d4 <__malloc_lock>
 8007726:	4921      	ldr	r1, [pc, #132]	; (80077ac <_malloc_r+0xac>)
 8007728:	680a      	ldr	r2, [r1, #0]
 800772a:	4614      	mov	r4, r2
 800772c:	b99c      	cbnz	r4, 8007756 <_malloc_r+0x56>
 800772e:	4f20      	ldr	r7, [pc, #128]	; (80077b0 <_malloc_r+0xb0>)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b923      	cbnz	r3, 800773e <_malloc_r+0x3e>
 8007734:	4621      	mov	r1, r4
 8007736:	4630      	mov	r0, r6
 8007738:	f000 f83c 	bl	80077b4 <_sbrk_r>
 800773c:	6038      	str	r0, [r7, #0]
 800773e:	4629      	mov	r1, r5
 8007740:	4630      	mov	r0, r6
 8007742:	f000 f837 	bl	80077b4 <_sbrk_r>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	d123      	bne.n	8007792 <_malloc_r+0x92>
 800774a:	230c      	movs	r3, #12
 800774c:	6033      	str	r3, [r6, #0]
 800774e:	4630      	mov	r0, r6
 8007750:	f000 f846 	bl	80077e0 <__malloc_unlock>
 8007754:	e7e3      	b.n	800771e <_malloc_r+0x1e>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	1b5b      	subs	r3, r3, r5
 800775a:	d417      	bmi.n	800778c <_malloc_r+0x8c>
 800775c:	2b0b      	cmp	r3, #11
 800775e:	d903      	bls.n	8007768 <_malloc_r+0x68>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	441c      	add	r4, r3
 8007764:	6025      	str	r5, [r4, #0]
 8007766:	e004      	b.n	8007772 <_malloc_r+0x72>
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	42a2      	cmp	r2, r4
 800776c:	bf0c      	ite	eq
 800776e:	600b      	streq	r3, [r1, #0]
 8007770:	6053      	strne	r3, [r2, #4]
 8007772:	4630      	mov	r0, r6
 8007774:	f000 f834 	bl	80077e0 <__malloc_unlock>
 8007778:	f104 000b 	add.w	r0, r4, #11
 800777c:	1d23      	adds	r3, r4, #4
 800777e:	f020 0007 	bic.w	r0, r0, #7
 8007782:	1ac2      	subs	r2, r0, r3
 8007784:	d0cc      	beq.n	8007720 <_malloc_r+0x20>
 8007786:	1a1b      	subs	r3, r3, r0
 8007788:	50a3      	str	r3, [r4, r2]
 800778a:	e7c9      	b.n	8007720 <_malloc_r+0x20>
 800778c:	4622      	mov	r2, r4
 800778e:	6864      	ldr	r4, [r4, #4]
 8007790:	e7cc      	b.n	800772c <_malloc_r+0x2c>
 8007792:	1cc4      	adds	r4, r0, #3
 8007794:	f024 0403 	bic.w	r4, r4, #3
 8007798:	42a0      	cmp	r0, r4
 800779a:	d0e3      	beq.n	8007764 <_malloc_r+0x64>
 800779c:	1a21      	subs	r1, r4, r0
 800779e:	4630      	mov	r0, r6
 80077a0:	f000 f808 	bl	80077b4 <_sbrk_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d1dd      	bne.n	8007764 <_malloc_r+0x64>
 80077a8:	e7cf      	b.n	800774a <_malloc_r+0x4a>
 80077aa:	bf00      	nop
 80077ac:	200000bc 	.word	0x200000bc
 80077b0:	200000c0 	.word	0x200000c0

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d06      	ldr	r5, [pc, #24]	; (80077d0 <_sbrk_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7f9 fb4a 	bl	8000e58 <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	200007f8 	.word	0x200007f8

080077d4 <__malloc_lock>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__malloc_lock+0x8>)
 80077d6:	f000 b809 	b.w	80077ec <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	20000800 	.word	0x20000800

080077e0 <__malloc_unlock>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__malloc_unlock+0x8>)
 80077e2:	f000 b804 	b.w	80077ee <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	20000800 	.word	0x20000800

080077ec <__retarget_lock_acquire_recursive>:
 80077ec:	4770      	bx	lr

080077ee <__retarget_lock_release_recursive>:
 80077ee:	4770      	bx	lr

080077f0 <_init>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	bf00      	nop
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr

080077fc <_fini>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr
